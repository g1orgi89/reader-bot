/**
 * Test script for Monthly Report Service
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ Reader Bot
 */

require('dotenv').config();
const mongoose = require('mongoose');
const MonthlyReportService = require('./server/services/monthlyReportService');
const { initializeModels } = require('./server/models');

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π Telegram bot mock
 */
class MockTelegramBot {
  constructor() {
    this.sentMessages = [];
  }

  get telegram() {
    return {
      sendMessage: async (userId, message, options) => {
        console.log(`üì§ Mock Telegram message to ${userId}:`);
        console.log(message);
        console.log('---');
        this.sentMessages.push({ userId, message, options });
        return { message_id: Date.now() };
      }
    };
  }

  getLastMessage() {
    return this.sentMessages[this.sentMessages.length - 1];
  }

  clearMessages() {
    this.sentMessages = [];
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function testMonthlyReports() {
  try {
    console.log('üìà Starting Monthly Report Service Test...\n');

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üì° Connecting to MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    
    await initializeModels();
    console.log('‚úÖ Database connected and models initialized\n');

    // –°–æ–∑–¥–∞–Ω–∏–µ mock bot
    const mockBot = new MockTelegramBot();
    console.log('ü§ñ Mock Telegram bot created\n');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Monthly Report Service
    console.log('üìà Initializing MonthlyReportService...');
    const monthlyService = new MonthlyReportService();
    monthlyService.initialize(mockBot);
    
    console.log('‚úÖ MonthlyReportService initialized');
    console.log('üìä Diagnostics:', monthlyService.getDiagnostics());
    console.log('');

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    console.log('üß™ Test 1: Service readiness');
    const isReady = monthlyService.isReady();
    console.log(`Service ready: ${isReady ? '‚úÖ Yes' : '‚ùå No'}`);
    console.log('');

    // –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üß™ Test 2: Generate monthly reports for all users');
    const stats = await monthlyService.generateMonthlyReportsForAllUsers();
    console.log('üìä Generation stats:', stats);
    console.log('');

    // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('üß™ Test 3: Get monthly report statistics');
    const reportStats = await monthlyService.getMonthlyReportStats(30);
    console.log('üìà Report statistics:', reportStats);
    console.log('');

    // –¢–µ—Å—Ç 4: –¢–µ—Å—Ç —Ç–µ–º –¥–ª—è –æ–ø—Ä–æ—Å–∞
    console.log('üß™ Test 4: Monthly themes');
    const diagnostics = monthlyService.getDiagnostics();
    console.log(`Available themes: ${diagnostics.themesAvailable}`);
    console.log('Themes:', diagnostics.themes);
    console.log('');

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    console.log('üß™ Test 5: Check sent messages');
    console.log(`Mock bot sent ${mockBot.sentMessages.length} messages`);
    
    if (mockBot.sentMessages.length > 0) {
      console.log('üìß Last message preview:');
      const lastMsg = mockBot.getLastMessage();
      console.log(`To: ${lastMsg.userId}`);
      console.log(`Message: ${lastMsg.message.substring(0, 200)}...`);
    }
    console.log('');

    // –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
    console.log('üéâ Monthly Report Service test completed successfully!');
    console.log('');
    console.log('üìã Summary:');
    console.log(`‚úÖ Service initialized: ${isReady}`);
    console.log(`üìä Eligible users found: ${stats.total}`);
    console.log(`üìà Reports generated: ${stats.generated}`);
    console.log(`‚ùå Failed: ${stats.failed}`);
    console.log(`üì§ Messages sent: ${mockBot.sentMessages.length}`);
    console.log(`üéØ Available themes: ${diagnostics.themesAvailable}`);

    if (stats.errors.length > 0) {
      console.log('\n‚ùå Errors encountered:');
      stats.errors.forEach((error, index) => {
        console.log(`${index + 1}. User ${error.userId}: ${error.error}`);
      });
    }

  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    console.error(error.stack);
  } finally {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await mongoose.disconnect();
    console.log('\n‚úÖ Database disconnected');
    console.log('üìà Monthly reports test completed');
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testMonthlyReports().catch(console.error);
}

module.exports = { testMonthlyReports };

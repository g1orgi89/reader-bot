/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Reader Bot
 * @file server/index.js
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
require('dotenv').config();

const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Ç–∏–ø–æ–≤
const { config } = require('./config');
const { ERROR_CODES } = require('./types');

// Middleware
const logger = require('./utils/logger');
const { errorHandler } = require('./middleware/errorHandler');

// Routes
const chatRoutes = require('./api/chat');
const ticketRoutes = require('./api/tickets');
const adminRoutes = require('./api/admin');
const knowledgeRoutes = require('./api/knowledge');
const promptRoutes = require('./api/prompts');
const reportRoutes = require('./api/reports'); // üìñ –ù–û–í–û–ï: –ú–∞—Ä—à—Ä—É—Ç—ã –æ—Ç—á–µ—Ç–æ–≤
const analyticsRoutes = require('./api/analytics'); // üìä –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å

// Services
const dbService = require('./services/database');
const vectorStoreService = require('./services/vectorStore');
const claude = require('./services/claude');
const promptService = require('./services/promptService');
const simpleLanguageService = require('./services/simpleLanguage');
const conversationService = require('./services/conversation');
const messageService = require('./services/message');
const ticketService = require('./services/ticketing');
const ticketEmailService = require('./services/ticketEmail');
const { CronService } = require('./services/cronService'); // üîß FIX: –ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
const telegramReportService = require('./services/telegramReportService'); // üìñ –ù–û–í–û–ï

/**
 * @typedef {import('./types').ShroomsError} ShroomsError
 * @typedef {import('./types').ChatMessage} ChatMessage
 * @typedef {import('./types').ChatResponse} ChatResponse
 * @typedef {import('./types').SocketMessageData} SocketMessageData
 */

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Express
const app = express();
const server = http.createServer(app);

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
const io = socketIo(server, {
  cors: {
    origin: config.cors.origin,
    methods: config.cors.methods,
    credentials: config.cors.credentials
  },
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  transports: ['websocket', 'polling'],
  maxHttpBufferSize: 1e6, // 1MB
  pingTimeout: 60000,
  pingInterval: 25000,
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å –æ–¥–Ω–æ–≥–æ IP
  connectionStateRecovery: {
    maxDisconnectionDuration: 60000
  }
});

// üîß FIX: –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ CronService
const cronService = new CronService();

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ req.setEncoding()
app.use((req, res, next) => {
  // –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è encoding stream
  if (req.path.startsWith('/api')) {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');
  }
  next();
});

// Middleware CORS
app.use(cors({
  origin: config.cors.origin,
  credentials: config.cors.credentials,
  methods: config.cors.methods,
  allowedHeaders: config.cors.allowedHeaders
}));

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ—Å—Ç–æ–µ express.json middleware –±–µ–∑ verify —Ñ—É–Ω–∫—Ü–∏–∏
app.use(express.json({ 
  limit: '10mb',
  type: 'application/json'
}));

app.use(express.urlencoded({ 
  extended: true, 
  limit: '10mb',
  type: 'application/x-www-form-urlencoded',
  parameterLimit: 1000
}));

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON parse errors
app.use((error, req, res, next) => {
  if (error instanceof SyntaxError && error.status === 400 && 'body' in error) {
    return res.status(400).json({
      success: false,
      error: 'Invalid JSON format',
      code: 'INVALID_JSON',
      details: config.app.isDevelopment ? error.message : undefined
    });
  }
  next(error);
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
if (config.logging.enableHttpLogging) {
  app.use(logger.httpLogger);
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ MIME —Ç–∏–ø–∞–º–∏
app.use(express.static(path.join(__dirname, '../client'), {
  setHeaders: (res, filePath) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ MIME —Ç–∏–ø—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if (filePath.endsWith('.html')) {
      res.setHeader('Content-Type', 'text/html; charset=utf-8');
    } else if (filePath.endsWith('.css')) {
      res.setHeader('Content-Type', 'text/css; charset=utf-8');
    } else if (filePath.endsWith('.js')) {
      res.setHeader('Content-Type', 'application/javascript; charset=utf-8');
    } else if (filePath.endsWith('.json')) {
      res.setHeader('Content-Type', 'application/json; charset=utf-8');
    }
  }
}));

// API Routes —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
app.use(`${config.app.apiPrefix}/chat`, chatRoutes);
app.use(`${config.app.apiPrefix}/tickets`, ticketRoutes);
app.use(`${config.app.apiPrefix}/admin`, adminRoutes);
app.use(`${config.app.apiPrefix}/knowledge`, knowledgeRoutes);
app.use(`${config.app.apiPrefix}/prompts`, promptRoutes);
app.use(`${config.app.apiPrefix}/reports`, reportRoutes); // üìñ –ù–û–í–û–ï: –ú–∞—Ä—à—Ä—É—Ç—ã –æ—Ç—á–µ—Ç–æ–≤
app.use(`${config.app.apiPrefix}/analytics`, analyticsRoutes); // üìä –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–∞—Ä—à—Ä—É—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏

// Health check endpoint
app.get(`${config.app.apiPrefix}/health`, async (req, res) => {
  try {
    const dbHealth = await dbService.healthCheck();
    const vectorHealth = config.features.enableRAG 
      ? await vectorStoreService.healthCheck() 
      : { status: 'disabled' };

    const aiProviderInfo = claude.getProviderInfo();
    const promptHealth = await promptService.diagnose();
    const pendingTicketsStats = ticketEmailService.getPendingTicketsStats();
    
    // üìñ –ù–û–í–û–ï: –°—Ç–∞—Ç—É—Å cron –∑–∞–¥–∞—á
    const cronStatus = cronService.getJobsStatus();

    // üìä –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    let analyticsHealth = { status: 'ok' };
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      const UTMClick = require('./models/utmClick');
      const PromoCodeUsage = require('./models/promoCodeUsage');
      await UTMClick.countDocuments().limit(1);
      await PromoCodeUsage.countDocuments().limit(1);
      analyticsHealth.modelsAvailable = true;
    } catch (error) {
      analyticsHealth = { status: 'error', error: error.message, modelsAvailable: false };
    }

    const health = {
      status: 'ok',
      timestamp: new Date().toISOString(),
      environment: config.app.environment,
      version: config.app.version,
      services: {
        database: dbHealth,
        vectorStore: vectorHealth,
        ai: claude ? 'ok' : 'error',
        prompts: promptHealth,
        ticketEmail: 'ok',
        language: simpleLanguageService.healthCheck(),
        cron: cronStatus.totalJobs > 0 ? 'ok' : 'stopped', // üìñ –ù–û–í–û–ï: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        analytics: analyticsHealth.status // üìä –ù–û–í–û–ï
      },
      aiProvider: aiProviderInfo,
      promptService: {
        status: promptHealth.status,
        cacheStats: promptHealth.cacheStats,
        databaseConnection: promptHealth.databaseConnection
      },
      ticketEmailService: pendingTicketsStats,
      languageService: simpleLanguageService.getStats(),
      // üìñ –ù–û–í–û–ï: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ cron –∑–∞–¥–∞—á–∞—Ö
      cronService: {
        ...cronStatus,
        nextRuns: {
          weeklyReports: cronService.getNextRunTime('weekly_reports'),
          dailyReminders: cronService.getNextRunTime('daily_reminders'),
          monthlyReports: cronService.getNextRunTime('monthly_reports'),
          dailyCleanup: cronService.getNextRunTime('daily_cleanup')
        }
      },
      // üìä –ù–û–í–û–ï: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      analyticsService: analyticsHealth,
      features: config.features,
      // –î–û–ë–ê–í–õ–ï–ù–û: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö
      socketConnections: {
        total: io.engine.clientsCount,
        active: io.sockets.sockets.size,
        byIP: getConnectionsByIP()
      }
    };

    // –ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —Å–µ—Ä–≤–∏—Å –Ω–µ—Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 503
    const hasError = Object.values(health.services).some(
      service => service.status === 'error'
    );

    res.status(hasError ? 503 : 200).json(health);
  } catch (error) {
    logger.error('Health check failed:', error);
    res.status(503).json({
      status: 'error',
      error: 'Health check failed',
      timestamp: new Date().toISOString()
    });
  }
});

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
if (config.features.enableMetrics) {
  app.get(config.monitoring.metricsPath, (req, res) => {
    res.json({
      uptime: process.uptime(),
      memory: process.memoryUsage(),
      cpu: process.cpuUsage(),
      timestamp: new Date().toISOString(),
      socketConnections: {
        total: io.engine.clientsCount,
        active: io.sockets.sockets.size,
        byIP: getConnectionsByIP()
      },
      pendingTickets: ticketEmailService.getPendingTicketsStats(),
      cronJobs: cronService.getJobsStatus() // üìñ –ù–û–í–û–ï
    });
  });
}

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω—ã–π Socket.IO —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
const socketConnections = new Map(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø–æ IP
 * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 */
function getConnectionsByIP() {
  const ipStats = {};
  for (const [socketId, connection] of socketConnections.entries()) {
    const ip = connection.ip;
    if (!ipStats[ip]) {
      ipStats[ip] = { count: 0, sockets: [] };
    }
    ipStats[ip].count++;
    ipStats[ip].sockets.push({
      id: socketId,
      connectedAt: connection.connectedAt,
      messageCount: connection.messageCount
    });
  }
  return ipStats;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è IP
 * @param {string} clientIp - IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
 * @returns {number} –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 */
function getMaxConnectionsForIP(clientIp) {
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è development
  if (config.app.isDevelopment) {
    // –í development —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –±–æ–ª—å—à–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (clientIp === '::1' || clientIp === '127.0.0.1' || clientIp.includes('localhost')) {
      return 10; // –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: –¥–æ 10
    }
    return 5; // –î—Ä—É–≥–∏–µ IP –≤ dev —Ä–µ–∂–∏–º–µ: –¥–æ 5
  } else {
    // –í production –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ª–∏–º–∏—Ç—ã
    return 3; // Production: –¥–æ 3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å –æ–¥–Ω–æ–≥–æ IP
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ/–æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –∫–∞—Ä—Ç—ã
 */
function cleanupStaleConnections() {
  const now = Date.now();
  const staleThreshold = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  
  for (const [socketId, connection] of socketConnections.entries()) {
    const age = now - connection.connectedAt.getTime();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â–µ socket –≤ Socket.IO
    const socketExists = io.sockets.sockets.has(socketId);
    
    if (!socketExists || age > staleThreshold) {
      logger.info(`üßπ Removing stale connection: ${socketId} (exists: ${socketExists}, age: ${Math.round(age/1000)}s)`);
      socketConnections.delete(socketId);
    }
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 */
io.on('connection', (socket) => {
  const clientIp = socket.handshake.address;
  const userAgent = socket.handshake.headers['user-agent'];
  
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤
  cleanupStaleConnections();
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ IP
  const maxConnections = getMaxConnectionsForIP(clientIp);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å –æ–¥–Ω–æ–≥–æ IP
  const ipConnections = Array.from(socketConnections.values())
    .filter(conn => conn.ip === clientIp).length;
  
  if (ipConnections >= maxConnections) {
    logger.warn(`üö´ Too many connections from IP: ${clientIp} (${ipConnections}/${maxConnections})`);
    socket.emit('error', {
      code: 'TOO_MANY_CONNECTIONS',
      message: `Too many connections from your IP address (${ipConnections}/${maxConnections}). Please close some browser tabs.`
    });
    socket.disconnect(true);
    return;
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  socketConnections.set(socket.id, {
    ip: clientIp,
    userAgent,
    connectedAt: new Date(),
    messageCount: 0
  });
  
  logger.info(`üîå Socket connected: ${socket.id} from ${clientIp} (${socketConnections.size} total, ${ipConnections + 1}/${maxConnections} for this IP)`);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  socket.emit('system', {
    message: 'Connected to Reader Bot! üìñ',
    timestamp: new Date().toISOString()
  });
  
  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ –∫–æ–º–Ω–∞—Ç–µ —á–∞—Ç–∞
  socket.join('chat');

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
   * @param {SocketMessageData} data - –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  socket.on('sendMessage', async (data) => {
    try {
      const connection = socketConnections.get(socket.id);
      if (!connection) {
        socket.emit('error', {
          code: ERROR_CODES.INTERNAL_SERVER_ERROR,
          message: 'Connection not found'
        });
        return;
      }

      // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      connection.messageCount++;
      if (connection.messageCount > 20) { // –£–í–ï–õ–ò–ß–ï–ù–û: 20 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ—Å—Å–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        socket.emit('error', {
          code: 'RATE_LIMIT_EXCEEDED',
          message: 'Too many messages. Please slow down.'
        });
        return;
      }

      logger.info(`üì® Message received from ${socket.id}:`, {
        message: data.message,
        userId: data.userId,
        messageCount: connection.messageCount
      });

      // üìä –ù–û–í–û–ï: –ü–æ–ø—ã—Ç–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ analyticsService
        if (typeof analyticsService !== 'undefined' && analyticsService.trackUserAction) {
          await analyticsService.trackUserAction(data.userId, 'quote_added', {
            messageLength: data.message.length,
            source: 'socket'
          });
        }
      } catch (analyticsError) {
        logger.warn('üìä Failed to track user action:', analyticsError.message);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!data.message || !data.userId) {
        socket.emit('error', {
          code: ERROR_CODES.VALIDATION_ERROR,
          message: 'Message and userId are required'
        });
        return;
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
      let conversation;
      if (data.conversationId) {
        conversation = await conversationService.getConversationById(data.conversationId);
        if (!conversation) {
          logger.warn(`Conversation ${data.conversationId} not found, creating new one`);
          // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –±–∞–∑–æ–≤—ã–º —è–∑—ã–∫–æ–º
          conversation = await conversationService.createConversation(data.userId, {
            language: data.language || 'en',
            source: 'socket'
          });
        }
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –±–∞–∑–æ–≤—ã–º —è–∑—ã–∫–æ–º
        conversation = await conversationService.createConversation(data.userId, {
          language: data.language || 'en',
          source: 'socket'
        });
      }
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –î–û –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
      const history = await messageService.getRecentMessages(conversation._id, 10);
      const formattedHistory = history.map(msg => ({
        role: msg.role,
        content: msg.text
      }));

      // üçÑ –ù–û–í–û–ï: –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
      const detectedLanguage = simpleLanguageService.detectLanguage(data.message, {
        userLanguage: data.language,
        previousLanguage: conversation.language,
        browserLanguage: socket.handshake.headers['accept-language']
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (conversation.language !== detectedLanguage) {
        await conversationService.updateLanguage(conversation._id, detectedLanguage);
        logger.info(`üåç Language updated for conversation ${conversation._id}: ${conversation.language} ‚Üí ${detectedLanguage}`);
      }

      // üé´ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞ email
      const pendingTicket = ticketEmailService.getPendingTicket(data.userId);
      
      if (pendingTicket && ticketEmailService.isEmailMessage(data.message)) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª email –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–∫–µ—Ç–∞
        const email = ticketEmailService.extractEmail(data.message);
        
        if (email) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç —Å email
          const emailResult = await ticketEmailService.updateTicketWithEmail(
            data.userId, 
            email, 
            detectedLanguage
          );
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await messageService.create({
            text: data.message,
            role: 'user',
            userId: data.userId,
            conversationId: conversation._id,
            metadata: { 
              language: detectedLanguage,
              source: 'socket',
              isEmailResponse: true,
              ticketId: pendingTicket.ticketId
            }
          });
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
          const botMessage = await messageService.create({
            text: emailResult.message,
            role: 'assistant',
            userId: data.userId,
            conversationId: conversation._id,
            metadata: {
              language: detectedLanguage,
              source: 'socket',
              ticketEmailCollected: true,
              ticketId: pendingTicket.ticketId
            }
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
          await conversationService.incrementMessageCount(conversation._id);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
          socket.emit('message', {
            message: emailResult.message,
            conversationId: conversation._id.toString(),
            messageId: botMessage._id.toString(),
            language: detectedLanguage,
            timestamp: new Date().toISOString(),
            emailCollected: true,
            ticketId: pendingTicket.ticketId
          });
          
          logger.info(`‚úÖ Email collected for ticket: ${pendingTicket.ticketId} - ${email}`);
          return;
        } else {
          // Email –Ω–µ –≤–∞–ª–∏–¥–µ–Ω - –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
          const errorMessage = detectedLanguage === 'ru' 
            ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: user@gmail.com):"
            : detectedLanguage === 'es'
            ? "Por favor, ingresa una direcci√≥n de email v√°lida (ejemplo: user@gmail.com):"
            : "Please enter a valid email address (example: user@gmail.com):";
          
          socket.emit('message', {
            message: errorMessage,
            conversationId: conversation._id.toString(),
            language: detectedLanguage,
            timestamp: new Date().toISOString(),
            awaitingEmail: true
          });
          return;
        }
      }
      
      // üé´ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const shouldCreateTicket = ticketEmailService.shouldCreateTicket(data.message, detectedLanguage);
      
      if (shouldCreateTicket) {
        // –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email
        const ticketResult = await ticketEmailService.createPendingTicket({
          userId: data.userId,
          conversationId: conversation._id,
          subject: `Support request: ${data.message.substring(0, 50)}...`,
          initialMessage: data.message,
          context: JSON.stringify({
            userMessage: data.message,
            history: formattedHistory.slice(-3)
          }),
          language: detectedLanguage,
          category: 'technical',
          priority: 'medium',
          metadata: {
            source: 'socket',
            detectedProblem: true
          }
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await messageService.create({
          text: data.message,
          role: 'user',
          userId: data.userId,
          conversationId: conversation._id,
          metadata: { 
            language: detectedLanguage,
            source: 'socket',
            ticketCreated: true,
            ticketId: ticketResult.ticket.ticketId
          }
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        const botMessage = await messageService.create({
          text: ticketResult.message,
          role: 'assistant',
          userId: data.userId,
          conversationId: conversation._id,
          metadata: {
            language: detectedLanguage,
            source: 'socket',
            ticketCreated: true,
            ticketId: ticketResult.ticket.ticketId,
            awaitingEmailResponse: true
          }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
        await conversationService.incrementMessageCount(conversation._id);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∑–∞–ø—Ä–æ—Å–æ–º email
        socket.emit('message', {
          message: ticketResult.message,
          conversationId: conversation._id.toString(),
          messageId: botMessage._id.toString(),
          language: detectedLanguage,
          timestamp: new Date().toISOString(),
          ticketCreated: true,
          ticketId: ticketResult.ticket.ticketId,
          awaitingEmail: true
        });
        
        logger.info(`üé´ Ticket created and email requested: ${ticketResult.ticket.ticketId}`);
        return;
      }
      
      // –û–ë–´–ß–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Claude
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (–µ—Å–ª–∏ RAG –≤–∫–ª—é—á–µ–Ω)
      let context = [];
      if (config.features.enableRAG) {
        try {
          const contextResults = await vectorStoreService.search(data.message, {
            limit: config.vectorStore.searchLimit,
            language: detectedLanguage
          });
          context = contextResults.map(result => result.content);
        } catch (error) {
          logger.warn('Failed to get context from vector store:', error.message);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userMessage = await messageService.create({
        text: data.message,
        role: 'user',
        userId: data.userId,
        conversationId: conversation._id,
        metadata: { 
          language: detectedLanguage,
          source: 'socket'
        }
      });
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ claude (–≤–º–µ—Å—Ç–æ aiService)
      const aiResponse = await claude.generateResponse(data.message, {
        context,
        history: formattedHistory,
        language: detectedLanguage,
        userId: data.userId
      });
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
      const botMessage = await messageService.create({
        text: aiResponse.message,
        role: 'assistant',
        userId: data.userId,
        conversationId: conversation._id,
        metadata: {
          language: detectedLanguage,
          tokensUsed: aiResponse.tokensUsed,
          source: 'socket',
          aiProvider: aiResponse.provider
        }
      });
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
      await conversationService.incrementMessageCount(conversation._id);
      
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
      /**
       * @type {ChatResponse}
       */
      const response = {
        message: aiResponse.message,
        conversationId: conversation._id.toString(),
        messageId: botMessage._id.toString(),
        tokensUsed: aiResponse.tokensUsed,
        language: detectedLanguage,
        aiProvider: aiResponse.provider, // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        timestamp: new Date().toISOString(),
        metadata: {
          knowledgeResultsCount: context.length,
          historyMessagesCount: formattedHistory.length
        }
      };
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Socket.IO
      socket.emit('message', response);
      logger.info(`‚úÖ Response sent to ${socket.id} (Language: ${detectedLanguage}, Provider: ${aiResponse.provider})`);
      
    } catch (error) {
      logger.error(`‚ùå Socket error for ${socket.id}:`, error);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
      let errorCode = ERROR_CODES.INTERNAL_SERVER_ERROR;
      let errorMessage = 'Service temporarily unavailable. Please try again.';
      
      if (error.message.includes('Database')) {
        errorCode = ERROR_CODES.DATABASE_CONNECTION_ERROR;
      } else if (error.message.includes('OpenAI') || error.message.includes('Anthropic') || error.message.includes('AI Service')) {
        errorCode = ERROR_CODES.CLAUDE_API_ERROR; // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤ AI_API_ERROR
      }
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–µ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö AI —Å–µ—Ä–≤–∏—Å–∞
      socket.emit('error', { 
        code: errorCode,
        message: errorMessage,
        details: config.app.isDevelopment ? error.message : undefined
      });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  socket.on('disconnect', (reason) => {
    const connection = socketConnections.get(socket.id);
    socketConnections.delete(socket.id);
    
    logger.info(`üîå Socket disconnected: ${socket.id} (${reason}) - ${socketConnections.size} remaining`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
    if (connection) {
      const sessionDuration = Date.now() - connection.connectedAt.getTime();
      logger.info(`üìä Session stats for ${socket.id}: ${connection.messageCount} messages, ${Math.round(sessionDuration/1000)}s duration`);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  socket.on('error', (error) => {
    logger.error(`üîå Socket error: ${socket.id}:`, error);
  });
});

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
app.use(errorHandler);

// 404 handler
app.use((req, res) => {
  res.status(404).json({
    success: false,
    error: 'Not Found',
    code: ERROR_CODES.NOT_FOUND,
    message: 'The requested resource was not found'
  });
});

/**
 * –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */
async function startServer() {
  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
    logger.info('üöÄ Starting Reader Bot Server...');
    logger.info(`Environment: ${config.app.environment}`);
    logger.info(`Version: ${config.app.version}`);
    logger.info(`Features: ${JSON.stringify(config.features, null, 2)}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    const aiProviderInfo = claude.getProviderInfo();
    logger.info(`ü§ñ AI Provider: ${aiProviderInfo.currentProvider}`);
    logger.info(`Models: ${JSON.stringify(aiProviderInfo.models, null, 2)}`);
    
    // üçÑ –ù–û–í–û–ï: –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–æ–≤–æ–º —Å–µ—Ä–≤–∏—Å–µ
    const languageStats = simpleLanguageService.getStats();
    logger.info(`üåç Language Service: Simple (${languageStats.supportedLanguages.length} languages supported)`);
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    logger.info('üì° Connecting to MongoDB...');
    await dbService.connect();
    logger.info('‚úÖ MongoDB connected successfully');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    try {
      await dbService.createIndexes();
      logger.info('‚úÖ Database indexes ensured');
    } catch (error) {
      logger.warn('‚ö†Ô∏è Failed to create indexes:', error.message);
    }
    
    // üçÑ –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PromptService
    logger.info('üçÑ Initializing PromptService...');
    try {
      await promptService.initialize();
      logger.info('‚úÖ PromptService initialized successfully');
    } catch (error) {
      logger.warn('‚ö†Ô∏è PromptService initialization failed, will use fallback prompts:', error.message);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫, —Ç–∞–∫ –∫–∞–∫ –µ—Å—Ç—å fallback —Å–∏—Å—Ç–µ–º–∞
    }
    
    // üé´ –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TicketEmailService
    logger.info('üé´ Initializing Ticket Email Service...');
    logger.info(`‚úÖ Ticket Email Service ready (Email timeout: ${ticketEmailService.EMAIL_TIMEOUT / 1000}s)`);
    
    // üìä –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Analytics
    logger.info('üìä Initializing Analytics Service...');
    logger.info('‚úÖ Analytics Service ready for tracking UTM, promo codes, and user actions');
    
    // üìñ –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ CronService
    logger.info('üìñ Initializing Cron Service...');
    try {
      // üîß FIX: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CronService —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
      cronService.initialize(null, telegramReportService, null);
      cronService.start();
      
      const cronStatus = cronService.getJobsStatus();
      logger.info(`‚úÖ Cron Service started with ${cronStatus.totalJobs} scheduled tasks`);
      logger.info(`üìñ Weekly reports: Sundays at 11:00 MSK`);
      logger.info(`üìñ Daily reminders: 9:00 and 19:00 MSK`);
      logger.info(`üìñ Monthly reports: 1st day of month at 12:00 MSK`);
      logger.info(`üìñ Daily cleanup: 3:00 MSK`);
      
    } catch (error) {
      logger.error(`‚ùå CronService initialization failed: ${error.message}`);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
    if (config.features.enableRAG) {
      logger.info('üì° Initializing vector store...');
      try {
        await vectorStoreService.initialize();
        logger.info('‚úÖ Vector store initialized');
      } catch (error) {
        logger.error('‚ùå Vector store initialization failed:', error.message);
        if (config.app.isProduction) {
          process.exit(1);
        }
      }
    } else {
      logger.info('‚ö†Ô∏è RAG feature disabled, skipping vector store initialization');
    }
    
    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    const PORT = config.app.port;
    server.listen(PORT, () => {
      logger.info(`üöÄ Reader Bot Server running on port ${PORT}`);
      logger.info(`üåê API available at: http://localhost:${PORT}${config.app.apiPrefix}`);
      logger.info(`üè† Client available at: http://localhost:${PORT}`);
      logger.info(`üîå Socket.IO available at: http://localhost:${PORT}/socket.io/`);
      logger.info(`üé´ Email collection workflow: ACTIVE`);
      logger.info(`üåç Language detection: SIMPLIFIED (no complex analysis)`);
      logger.info(`üìñ Weekly reports automation: ENABLED`); // üìñ –ù–û–í–û–ï
      logger.info(`üìä Reports API: ${config.app.apiPrefix}/reports`); // üìñ –ù–û–í–û–ï
      logger.info(`üìä Analytics API: ${config.app.apiPrefix}/analytics`); // üìä –ù–û–í–û–ï
      
      // –õ–æ–≥–∏—Ä—É–µ–º URL –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
      if (config.app.isDevelopment) {
        logger.info('üîÑ Development mode: Hot reload enabled');
        logger.info(`üîß Socket connection limits: Localhost(10), Others(5)`);
      } else {
        logger.info(`üîß Socket connection limit: 3 per IP`);
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
      setInterval(() => {
        cleanupStaleConnections();
      }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    });
    
    return server;
    
  } catch (error) {
    logger.error('‚ùå Failed to start server:', error);
    process.exit(1);
  }
}

/**
 * Graceful shutdown
 * @param {string} signal - –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
 */
async function gracefulShutdown(signal) {
  logger.info(`üîÑ Received ${signal}, shutting down gracefully...`);
  
  // üé´ –ù–û–í–û–ï: –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ–º
  const pendingStats = ticketEmailService.getPendingTicketsStats();
  if (pendingStats.active > 0) {
    logger.warn(`‚ö†Ô∏è  Shutting down with ${pendingStats.active} pending tickets awaiting email`);
  }
  
  // üçÑ –ù–û–í–û–ï: –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —è–∑—ã–∫–æ–≤
  const languageStats = simpleLanguageService.getStats();
  logger.info(`üåç Language usage stats: ${JSON.stringify(languageStats.usage)}`);
  
  // üìñ –ù–û–í–û–ï: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ CronService
  try {
    cronService.stop();
    logger.info('üìñ CronService stopped');
  } catch (error) {
    logger.error(`üìñ Error stopping CronService: ${error.message}`);
  }
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  logger.info('üîå Closing Socket.IO connections...');
  io.close(() => {
    logger.info('‚úÖ Socket.IO closed');
  });
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
  server.close(async () => {
    logger.info('‚úÖ HTTP server closed');
    
    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try {
      await dbService.disconnect();
      logger.info('‚úÖ Database disconnected');
    } catch (error) {
      logger.error('‚ùå Error disconnecting from database:', error);
    }
    
    // –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞
    process.exit(0);
  });
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    logger.error('‚è∞ Forced shutdown after timeout');
    process.exit(1);
  }, 30000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  logger.error('üö® Unhandled Rejection:', {
    reason: reason instanceof Error ? reason.message : reason,
    stack: reason instanceof Error ? reason.stack : undefined,
    promise
  });
  
  // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏–∑-–∑–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
  if (!config.app.isProduction) {
    gracefulShutdown('UNHANDLED_REJECTION');
  }
});

process.on('uncaughtException', (error) => {
  logger.error('üö® Uncaught Exception:', {
    message: error.message,
    stack: error.stack
  });
  
  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Ç—Ä–µ–±—É—é—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
  gracefulShutdown('UNCAUGHT_EXCEPTION');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
process.on('warning', (warning) => {
  logger.warn('‚ö†Ô∏è Process Warning:', {
    name: warning.name,
    message: warning.message,
    stack: warning.stack
  });
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
module.exports = {
  app,
  server,
  io,
  startServer
};

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  startServer().catch(error => {
    logger.error('‚ùå Startup failed:', error);
    process.exit(1);
  });
}
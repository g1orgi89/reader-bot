/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Reader Bot
 * @file server/index.js
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
require('dotenv').config();

const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Ç–∏–ø–æ–≤
const { config } = require('./config');
const { ERROR_CODES } = require('./types');

// Middleware
const logger = require('./utils/logger');
const { errorHandler } = require('./middleware/errorHandler');

// Routes
const chatRoutes = require('./api/chat');
const ticketRoutes = require('./api/tickets');
const adminRoutes = require('./api/admin');
const knowledgeRoutes = require('./api/knowledge');
const promptRoutes = require('./api/prompts');
const reportRoutes = require('./api/reports'); // üìñ –ù–û–í–û–ï: –ú–∞—Ä—à—Ä—É—Ç—ã –æ—Ç—á–µ—Ç–æ–≤
const analyticsRoutes = require('./api/analytics'); // üìä –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
const quotesRoutes = require('./api/quotes'); // üìù –ù–û–í–û–ï: –ú–∞—Ä—à—Ä—É—Ç—ã —Ü–∏—Ç–∞—Ç

// üêõ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç users routes —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
let usersRoutes;
try {
  logger.info('üîß Attempting to import users routes...');
  usersRoutes = require('./api/users');
  logger.info('‚úÖ Users routes imported successfully');
} catch (error) {
  logger.error('‚ùå Failed to import users routes:', error);
  logger.error('‚ùå Error stack:', error.stack);
  // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–æ—É—Ç–µ—Ä –∫–∞–∫ fallback
  usersRoutes = express.Router();
  usersRoutes.get('*', (req, res) => {
    res.status(500).json({
      success: false,
      error: 'Users routes failed to load',
      details: error.message
    });
  });
}

// Services
const dbService = require('./services/database');
const vectorStoreService = require('./services/vectorStore');
const claude = require('./services/claude');
const promptService = require('./services/promptService');
const simpleLanguageService = require('./services/simpleLanguage');
const conversationService = require('./services/conversation');
const messageService = require('./services/message');
const ticketService = require('./services/ticketing');
const ticketEmailService = require('./services/ticketEmail');
const { CronService } = require('./services/cronService'); // üîß FIX: –ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
const telegramReportService = require('./services/telegramReportService'); // üìñ –ù–û–í–û–ï

/**
 * @typedef {import('./types').ShroomsError} ShroomsError
 * @typedef {import('./types').ChatMessage} ChatMessage
 * @typedef {import('./types').ChatResponse} ChatResponse
 * @typedef {import('./types').SocketMessageData} SocketMessageData
 */

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Express
const app = express();
const server = http.createServer(app);

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
const io = socketIo(server, {
  cors: {
    origin: config.cors.origin,
    methods: config.cors.methods,
    credentials: config.cors.credentials
  },
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  transports: ['websocket', 'polling'],
  maxHttpBufferSize: 1e6, // 1MB
  pingTimeout: 60000,
  pingInterval: 25000,
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å –æ–¥–Ω–æ–≥–æ IP
  connectionStateRecovery: {
    maxDisconnectionDuration: 60000
  }
});

// üîß FIX: –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ CronService
const cronService = new CronService();

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ req.setEncoding()
app.use((req, res, next) => {
  // –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è encoding stream
  if (req.path.startsWith('/api')) {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');
  }
  next();
});

// Middleware CORS
app.use(cors({
  origin: config.cors.origin,
  credentials: config.cors.credentials,
  methods: config.cors.methods,
  allowedHeaders: config.cors.allowedHeaders
}));

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ—Å—Ç–æ–µ express.json middleware –±–µ–∑ verify —Ñ—É–Ω–∫—Ü–∏–∏
app.use(express.json({ 
  limit: '10mb',
  type: 'application/json'
}));

app.use(express.urlencoded({ 
  extended: true, 
  limit: '10mb',
  type: 'application/x-www-form-urlencoded',
  parameterLimit: 1000
}));

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON parse errors
app.use((error, req, res, next) => {
  if (error instanceof SyntaxError && error.status === 400 && 'body' in error) {
    return res.status(400).json({
      success: false,
      error: 'Invalid JSON format',
      code: 'INVALID_JSON',
      details: config.app.isDevelopment ? error.message : undefined
    });
  }
  next(error);
});

// üêõ –î–û–ë–ê–í–õ–ï–ù–û: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  const start = Date.now();
  logger.info(`üåê HTTP ${req.method} ${req.path} - Query: ${JSON.stringify(req.query)} - Body: ${JSON.stringify(req.body)}`);
  
  res.on('finish', () => {
    const duration = Date.now() - start;
    logger.info(`üåê HTTP ${req.method} ${req.path} - ${res.statusCode} - ${duration}ms`);
  });
  
  next();
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
if (config.logging.enableHttpLogging) {
  app.use(logger.httpLogger);
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ MIME —Ç–∏–ø–∞–º–∏
app.use(express.static(path.join(__dirname, '../client'), {
  setHeaders: (res, filePath) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ MIME —Ç–∏–ø—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if (filePath.endsWith('.html')) {
      res.setHeader('Content-Type', 'text/html; charset=utf-8');
    } else if (filePath.endsWith('.css')) {
      res.setHeader('Content-Type', 'text/css; charset=utf-8');
    } else if (filePath.endsWith('.js')) {
      res.setHeader('Content-Type', 'application/javascript; charset=utf-8');
    } else if (filePath.endsWith('.json')) {
      res.setHeader('Content-Type', 'application/json; charset=utf-8');
    }
  }
}));

// üêõ –î–û–ë–ê–í–õ–ï–ù–û: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–æ–≤
logger.info('üîß Registering API routes...');

// API Routes —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
logger.info(`üîß Mounting /api/chat routes`);
app.use(`${config.app.apiPrefix}/chat`, chatRoutes);

logger.info(`üîß Mounting /api/tickets routes`);
app.use(`${config.app.apiPrefix}/tickets`, ticketRoutes);

logger.info(`üîß Mounting /api/admin routes`);
app.use(`${config.app.apiPrefix}/admin`, adminRoutes);

logger.info(`üîß Mounting /api/knowledge routes`);
app.use(`${config.app.apiPrefix}/knowledge`, knowledgeRoutes);

logger.info(`üîß Mounting /api/prompts routes`);
app.use(`${config.app.apiPrefix}/prompts`, promptRoutes);

logger.info(`üîß Mounting /api/reports routes`);
app.use(`${config.app.apiPrefix}/reports`, reportRoutes); // üìñ –ù–û–í–û–ï: –ú–∞—Ä—à—Ä—É—Ç—ã –æ—Ç—á–µ—Ç–æ–≤

logger.info(`üîß Mounting /api/analytics routes`);
app.use(`${config.app.apiPrefix}/analytics`, analyticsRoutes); // üìä –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–∞—Ä—à—Ä—É—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏

logger.info(`üîß Mounting /api/quotes routes`);
app.use(`${config.app.apiPrefix}/quotes`, quotesRoutes); // üìù –ù–û–í–û–ï: –ú–∞—Ä—à—Ä—É—Ç—ã —Ü–∏—Ç–∞—Ç

logger.info(`üîß Mounting /api/users routes`);
app.use(`${config.app.apiPrefix}/users`, usersRoutes); // üë• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–∞—Ä—à—Ä—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

logger.info('‚úÖ All API routes registered successfully');

// Health check endpoint
app.get(`${config.app.apiPrefix}/health`, async (req, res) => {
  try {
    const dbHealth = await dbService.healthCheck();
    const vectorHealth = config.features.enableRAG 
      ? await vectorStoreService.healthCheck() 
      : { status: 'disabled' };

    const aiProviderInfo = claude.getProviderInfo();
    const promptHealth = await promptService.diagnose();
    const pendingTicketsStats = ticketEmailService.getPendingTicketsStats();
    
    // üìñ –ù–û–í–û–ï: –°—Ç–∞—Ç—É—Å cron –∑–∞–¥–∞—á
    const cronStatus = cronService.getJobsStatus();

    // üìä –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    let analyticsHealth = { status: 'ok' };
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      const { UTMClick, PromoCodeUsage } = require('./models');
      await UTMClick.countDocuments().limit(1);
      await PromoCodeUsage.countDocuments().limit(1);
      analyticsHealth.modelsAvailable = true;
    } catch (error) {
      analyticsHealth = { status: 'error', error: error.message, modelsAvailable: false };
    }

    // üë• –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ä–æ—É—Ç–æ–≤
    let usersHealth = { status: 'ok' };
    try {
      const UserProfile = require('./models/userProfile');
      const Quote = require('./models/quote');
      await UserProfile.countDocuments().limit(1);
      await Quote.countDocuments().limit(1);
      usersHealth.modelsAvailable = true;
    } catch (error) {
      usersHealth = { status: 'error', error: error.message, modelsAvailable: false };
    }

    // üìù –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ü–∏—Ç–∞—Ç
    let quotesHealth = { status: 'ok' };
    try {
      const Quote = require('./models/quote');
      await Quote.countDocuments().limit(1);
      quotesHealth.modelsAvailable = true;
    } catch (error) {
      quotesHealth = { status: 'error', error: error.message, modelsAvailable: false };
    }

    const health = {
      status: 'ok',
      timestamp: new Date().toISOString(),
      environment: config.app.environment,
      version: config.app.version,
      services: {
        database: dbHealth,
        vectorStore: vectorHealth,
        ai: claude ? 'ok' : 'error',
        prompts: promptHealth,
        ticketEmail: 'ok',
        language: simpleLanguageService.healthCheck(),
        cron: cronStatus.totalJobs > 0 ? 'ok' : 'stopped', // üìñ –ù–û–í–û–ï: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        analytics: analyticsHealth.status, // üìä –ù–û–í–û–ï
        users: usersHealth.status, // üë• –ù–û–í–û–ï
        quotes: quotesHealth.status // üìù –ù–û–í–û–ï
      },
      aiProvider: aiProviderInfo,
      promptService: {
        status: promptHealth.status,
        cacheStats: promptHealth.cacheStats,
        databaseConnection: promptHealth.databaseConnection
      },
      ticketEmailService: pendingTicketsStats,
      languageService: simpleLanguageService.getStats(),
      // üìñ –ù–û–í–û–ï: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ cron –∑–∞–¥–∞—á–∞—Ö
      cronService: {
        ...cronStatus,
        nextRuns: {
          weeklyReports: cronService.getNextRunTime('weekly_reports'),
          dailyReminders: cronService.getNextRunTime('daily_reminders'),
          monthlyReports: cronService.getNextRunTime('monthly_reports'),
          dailyCleanup: cronService.getNextRunTime('daily_cleanup')
        }
      },
      // üìä –ù–û–í–û–ï: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      analyticsService: analyticsHealth,
      // üë• –ù–û–í–û–ï: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Å–µ—Ä–≤–∏—Å–µ
      usersService: usersHealth,
      // üìù –ù–û–í–û–ï: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ —Ü–∏—Ç–∞—Ç
      quotesService: quotesHealth,
      features: config.features,
      // –î–û–ë–ê–í–õ–ï–ù–û: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö
      socketConnections: {
        total: io.engine.clientsCount,
        active: io.sockets.sockets.size,
        byIP: getConnectionsByIP()
      }
    };

    // –ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —Å–µ—Ä–≤–∏—Å –Ω–µ—Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 503
    const hasError = Object.values(health.services).some(
      service => service.status === 'error'
    );

    res.status(hasError ? 503 : 200).json(health);
  } catch (error) {
    logger.error('Health check failed:', error);
    res.status(503).json({
      status: 'error',
      error: 'Health check failed',
      timestamp: new Date().toISOString()
    });
  }
});

// –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∫–æ–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
// (–≤–∫–ª—é—á–∞—è Socket.IO, graceful shutdown, –∏ –ø—Ä–æ—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏)

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
module.exports = {
  app,
  server,
  io,
  startServer
};

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  startServer().catch(error => {
    logger.error('‚ùå Startup failed:', error);
    process.exit(1);
  });
}
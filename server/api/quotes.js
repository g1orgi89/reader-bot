/**
 * API —Ä–æ—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Shrooms Support Bot –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
 * @file server/api/quotes.js
 */

const express = require('express');
const router = express.Router();

// ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –ù–ï–î–û–°–¢–ê–Æ–©–ò–ô –ò–ú–ü–û–†–¢:
function parseUserIdFromInitData(initData) {
  try {
    const params = new URLSearchParams(initData);
    const userStr = params.get('user');
    if (userStr) {
      const userObj = JSON.parse(userStr);
      if (userObj && userObj.id) return String(userObj.id);
    }
  } catch (e) {
    console.warn('InitData parse error:', e, initData);
  }
  return null;
}

function telegramAuth(req, res, next) {
  const initData = req.headers['authorization']?.startsWith('tma ')
    ? req.headers['authorization'].slice(4)
    : req.headers['x-telegram-init-data'];

  const userId = parseUserIdFromInitData(initData);
  
  if (!initData || !userId) {
    return res.status(401).json({ 
      success: false, 
      error: 'Authentication required' 
    });
  }

  req.userId = userId;
  next();
}

// –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç
const logger = require('../utils/logger');

// –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
const Quote = require('../models/quote');
const UserProfile = require('../models/userProfile');

/**
 * @typedef {Object} QuoteFilters
 * @property {string} period - –ü–µ—Ä–∏–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ('1d', '7d', '30d', '90d')
 * @property {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ü–∏—Ç–∞—Ç—ã
 * @property {string} author - –§–∏–ª—å—Ç—Ä –ø–æ –∞–≤—Ç–æ—Ä—É
 * @property {string} search - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @property {number} page - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @property {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */

/**
 * @typedef {Object} QuoteStatistics
 * @property {number} totalQuotes - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç
 * @property {number} totalAuthors - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤
 * @property {string} popularCategory - –°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
 * @property {number} dailyAverage - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç –≤ –¥–µ–Ω—å
 * @property {Object} changeStats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */

// ==================== –û–°–ù–û–í–ù–´–ï –†–û–£–¢–´ ====================

/**
 * GET /api/quotes/recent - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω —Ä–æ—É—Ç /recent –ü–ï–†–ï–î /:id –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
 */
router.get('/recent', async (req, res) => {
    console.log('=== [API/QUOTES] GET /api/quotes called ===', req.query);    
  
    try {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º fallback –∫ demo-user, —Ç—Ä–µ–±—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const userId = req.userId || req.query.userId;
        
        if (!userId) {
            return res.status(401).json({
                success: false,
                error: 'Authentication required',
                message: 'User ID not found. Please authenticate first.'
            });
        }
        
        const limit = parseInt(req.query.limit) || 10;

        logger.info('üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ç–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

        res.setHeader('Content-Type', 'application/json; charset=utf-8');

        // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö: –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–∏–º–∏—Ç–∞
        if (limit > 100) {
            return res.status(400).json({
                success: false,
                message: '–õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 –∑–∞–ø–∏—Å–µ–π',
                error: 'LIMIT_TOO_HIGH'
            });
        }

        if (limit < 1) {
            return res.status(400).json({
                success: false,
                message: '–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                error: 'INVALID_LIMIT'
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const quotes = await Quote.find({ userId })
            .sort({ createdAt: -1 })
            .limit(limit)
            .lean();

        // –û–±–æ–≥–∞—â–∞–µ–º —Ü–∏—Ç–∞—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const enrichedQuotes = quotes.map(quote => ({
            id: quote._id.toString(),
            text: quote.text,
            author: quote.author,
            source: quote.source,
            category: quote.category,
            sentiment: quote.sentiment,
            themes: quote.themes || [],
            insights: quote.insights, // FIXED: Include insights in recent quotes
            createdAt: quote.createdAt,
            isFavorite: quote.isFavorite || false
        }));

        res.json({
            success: true,
            data: {
                quotes: enrichedQuotes,
                total: enrichedQuotes.length,
                userId: userId,
                limit: limit
            }
        });

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ç–∞—Ç:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ç–∞—Ç',
            error: error.message
        });
    }
});

/**
 * GET /api/quotes - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–∏—Ç–∞—Ç —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ userId –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–ª—å–∫–æ —Ü–∏—Ç–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.get('/', async (req, res) => {
    try {
        const {
            period = 'all',
            category = 'all',
            author = 'all',
            search = '',
            page = 1,
            limit = 20,
            sortBy = 'createdAt',
            sortOrder = 'desc'
        } = req.query;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º fallback –∫ demo-user, —Ç—Ä–µ–±—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏  
        const userId = req.userId || req.query.userId;
        
        if (!userId) {
            return res.status(401).json({
                success: false,
                error: 'Authentication required',
                message: 'User ID not found. Please authenticate first.'
            });
        }

        logger.info('üìù –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
            userId, period, category, author, search, page, limit
        });

        res.setHeader('Content-Type', 'application/json; charset=utf-8');

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è MongoDB —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ userId
        const filter = {
            userId: userId // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        };
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
        if (period !== 'all') {
            const days = parseInt(period);
            const startDate = new Date();
            startDate.setDate(startDate.getDate() - days);
            filter.createdAt = { $gte: startDate };
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (category !== 'all') {
            filter.category = category;
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ –∞–≤—Ç–æ—Ä—É
        if (author === 'has_author') {
            filter.author = { $ne: null, $ne: '' };
        } else if (author === 'no_author') {
            filter.$or = [
                { author: null },
                { author: '' }
            ];
        }

        // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        if (search.trim()) {
            const searchRegex = new RegExp(search.trim(), 'i');
            filter.$or = [
                { text: searchRegex },
                { author: searchRegex },
                { source: searchRegex }
            ];
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        const skip = (parseInt(page) - 1) * parseInt(limit);
        
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        const sort = {};
        sort[sortBy] = sortOrder === 'desc' ? -1 : 1;

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const [quotes, totalCount] = await Promise.all([
            Quote.find(filter)
                .sort(sort)
                .skip(skip)
                .limit(parseInt(limit))
                .lean(),
            Quote.countDocuments(filter)
        ]);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç
        const userIds = [...new Set(quotes.map(q => q.userId))];
        const users = await UserProfile.find(
            { userId: { $in: userIds } },
            { userId: 1, name: 1, telegramUsername: 1, email: 1 }
        ).lean();

        const userMap = users.reduce((map, user) => {
            map[user.userId] = user;
            return map;
        }, {});

        // –û–±–æ–≥–∞—â–∞–µ–º —Ü–∏—Ç–∞—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        const enrichedQuotes = quotes.map(quote => ({
            id: quote._id.toString(),
            text: quote.text,
            author: quote.author,
            source: quote.source,
            category: quote.category,
            sentiment: quote.sentiment,
            themes: quote.themes || [],
            insights: quote.insights, // FIXED: Include insights in quotes list
            weekNumber: quote.weekNumber,
            monthNumber: quote.monthNumber,
            createdAt: quote.createdAt,
            isEdited: quote.isEdited,
            editedAt: quote.editedAt,
            isFavorite: quote.isFavorite || false, // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            user: {
                id: quote.userId,
                name: userMap[quote.userId]?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
                username: userMap[quote.userId]?.telegramUsername || 'N/A',
                email: userMap[quote.userId]?.email || 'N/A'
            }
        }));

        const response = {
            success: true,
            data: {
                quotes: enrichedQuotes,
                pagination: {
                    currentPage: parseInt(page),
                    totalPages: Math.ceil(totalCount / parseInt(limit)),
                    totalCount,
                    hasNext: skip + parseInt(limit) < totalCount,
                    hasPrev: parseInt(page) > 1,
                    limit: parseInt(limit)
                },
                filters: {
                    period,
                    category,
                    author,
                    search
                }
            }
        };

        res.json(response);

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç',
            error: error.message
        });
    }
});

/**
 * POST /api/quotes - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–∏—Ç–∞—Ç—ã
 */
router.post('/', async (req, res) => {
    try {
        const { text, author, source } = req.body;
        const userId = req.userId || req.body.userId;

        if (!userId) {
            return res.status(401).json({
                success: false,
                error: 'Authentication required',
                message: 'User ID not found. Please authenticate first.'
            });
        }

        logger.info('üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–∏—Ç–∞—Ç—ã:', { text, author, source, userId });
        res.setHeader('Content-Type', 'application/json; charset=utf-8');

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!text || text.trim().length === 0) {
            return res.status(400).json({
                success: false,
                message: '–¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
                error: 'EMPTY_TEXT'
            });
        }
        if (text.length > 1000) {
            return res.status(400).json({
                success: false,
                message: '–¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤',
                error: 'TEXT_TOO_LONG'
            });
        }
        if (author && author.length > 100) {
            return res.status(400).json({
                success: false,
                message: '–ò–º—è –∞–≤—Ç–æ—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤',
                error: 'AUTHOR_TOO_LONG'
            });
        }
        if (source && source.length > 200) {
            return res.status(400).json({
                success: false,
                message: '–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤',
                error: 'SOURCE_TOO_LONG'
            });
        }

        // –õ–∏–º–∏—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ü–∏—Ç–∞—Ç –≤ –¥–µ–Ω—å
        const todayStart = new Date();
        todayStart.setHours(0, 0, 0, 0);
        const todayQuotesCount = await Quote.countDocuments({
            userId: userId,
            createdAt: { $gte: todayStart }
        });
        if (todayQuotesCount >= 50) {
            return res.status(429).json({
                success: false,
                message: '–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Ü–∏—Ç–∞—Ç (50 –≤ –¥–µ–Ω—å)',
                error: 'DAILY_LIMIT_EXCEEDED'
            });
        }

        const now = new Date();
        const weekNumber = getWeekOfYear(now);
        const monthNumber = now.getMonth() + 1;
        const yearNumber = now.getFullYear();

        // –°–æ–∑–¥–∞–µ–º —Ü–∏—Ç–∞—Ç—É
        const newQuote = new Quote({
            userId: userId,
            text: text.trim(),
            author: author?.trim() || null,
            source: source?.trim() || null,
            category: '–î–†–£–ì–û–ï',
            sentiment: 'neutral',
            themes: [],
            weekNumber,
            monthNumber,
            yearNumber,
            createdAt: now,
            isEdited: false
        });

        const savedQuote = await newQuote.save();

        // AI –∞–Ω–∞–ª–∏–∑
        let analysis = {
            category: savedQuote.category,
            themes: [],
            sentiment: savedQuote.sentiment,
            insights: ""
        };
        try {
            const QuoteHandler = require('../services/quoteHandler');
            const quoteHandler = new QuoteHandler();
            analysis = await quoteHandler.analyzeQuote(savedQuote.text, savedQuote.author);
            savedQuote.category = analysis.category;
            savedQuote.themes = analysis.themes;
            savedQuote.sentiment = analysis.sentiment;
            savedQuote.insights = analysis.insights;
            await savedQuote.save();
            logger.info('ü§ñ AI –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —Ü–∏—Ç–∞—Ç—ã:', savedQuote._id);
        } catch (aiError) {
            logger.warn('‚ö†Ô∏è AI –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è, –Ω–æ —Ü–∏—Ç–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', aiError.message);
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ê–Ω–Ω—ã
        let annaResponse = '–¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞';
        try {
            const QuoteHandler = require('../services/quoteHandler');
            const quoteHandler = new QuoteHandler();
            const todayCount = await quoteHandler.getTodayQuotesCount(userId);
            annaResponse = await quoteHandler.generateAnnaResponse(
                { text: savedQuote.text, author: savedQuote.author }, 
                { category: savedQuote.category, themes: savedQuote.themes, sentiment: savedQuote.sentiment },
                todayCount,
                userId
            );
        } catch (responseError) {
            logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ê–Ω–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π:', responseError.message);
        }

        // –û–¢–î–ê–ï–ú –û–î–ò–ù –û–¢–í–ï–¢ –ö–õ–ò–ï–ù–¢–£ (–ù–ï –î–ï–õ–ò–ú –ù–ê success/fallback, –í–°–ï –ü–û–õ–Ø –ï–°–¢–¨)
        const response = {
            success: true,
            message: annaResponse,
            data: {
                id: savedQuote._id.toString(),
                text: savedQuote.text,
                author: savedQuote.author,
                source: savedQuote.source,
                category: savedQuote.category,
                sentiment: savedQuote.sentiment,
                themes: savedQuote.themes,
                insights: savedQuote.insights,
                createdAt: savedQuote.createdAt,
                weekNumber: savedQuote.weekNumber,
                monthNumber: savedQuote.monthNumber,
                aiAnalysis: {
                    summary: annaResponse,
                    category: savedQuote.category,
                    themes: savedQuote.themes,
                    sentiment: savedQuote.sentiment
                }
            }
        };
        console.log('[DEBUG][API][addQuote] –û—Ç–≤–µ—Ç –Ω–∞ —Ñ—Ä–æ–Ω—Ç:', JSON.stringify(response, null, 2));
        res.status(201).json(response);

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã',
            error: error.message
        });
    }
});
            
/**
 * GET /api/quotes/statistics - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–∏—Ç–∞—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ userId –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.get('/statistics', telegramAuth, async (req, res) => {
    try {
        const { period = '7d' } = req.query;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º fallback –∫ demo-user, —Ç—Ä–µ–±—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const userId = req.userId || req.query.userId;
        
        if (!userId) {
            return res.status(401).json({
                success: false,
                error: 'Authentication required',
                message: 'User ID not found. Please authenticate first.'
            });
        }

        logger.info('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–∏—Ç–∞—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { userId, period });

        res.setHeader('Content-Type', 'application/json; charset=utf-8');

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
        const days = parseInt(period);
        const startDate = new Date();
        startDate.setDate(startDate.getDate() - days);

        const previousStartDate = new Date(startDate);
        previousStartDate.setDate(previousStartDate.getDate() - days);

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ userId
        const [
            currentStats,
            previousStats,
            topCategories,
            uniqueAuthors
        ] = await Promise.all([
            Quote.aggregate([
                { $match: { userId: userId, createdAt: { $gte: startDate } } }, // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ userId
                {
                    $group: {
                        _id: null,
                        totalQuotes: { $sum: 1 },
                        avgDaily: { $avg: 1 }
                    }
                }
            ]),
            Quote.aggregate([
                { 
                    $match: { 
                        userId: userId, // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ userId
                        createdAt: { 
                            $gte: previousStartDate, 
                            $lt: startDate 
                        } 
                    } 
                },
                {
                    $group: {
                        _id: null,
                        totalQuotes: { $sum: 1 }
                    }
                }
            ]),
            Quote.aggregate([
                { $match: { userId: userId, createdAt: { $gte: startDate } } }, // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ userId
                {
                    $group: {
                        _id: '$category',
                        count: { $sum: 1 }
                    }
                },
                { $sort: { count: -1 } },
                { $limit: 1 }
            ]),
            Quote.distinct('author', { 
                userId: userId, // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ userId
                createdAt: { $gte: startDate },
                author: { $ne: null, $ne: '' }
            })
        ]);

        const current = currentStats[0] || { totalQuotes: 0, avgDaily: 0 };
        const previous = previousStats[0] || { totalQuotes: 0 };
        const topCategory = topCategories[0] || { _id: '–î–†–£–ì–û–ï' };

        // –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const quotesChange = current.totalQuotes - previous.totalQuotes;
        const authorsChange = uniqueAuthors.length;
        const dailyAverage = Math.round((current.totalQuotes / days) * 10) / 10;

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞—â–∏—Ç–∞ –æ—Ç undefined –∑–Ω–∞—á–µ–Ω–∏–π –≤–æ –≤—Å–µ—Ö –ø–æ–ª—è—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const statistics = {
            totalQuotes: current.totalQuotes || 0,
            totalAuthors: uniqueAuthors.length || 0,
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ topCategory._id —Å fallback
            popularCategory: topCategory?._id || '–î–†–£–ì–û–ï',
            dailyAverage: dailyAverage || 0,
            changeStats: {
                quotesChange: quotesChange > 0 ? `+${quotesChange}` : quotesChange.toString(),
                authorsChange: `+${authorsChange || 0}`,
                avgChange: '+0.0' // –í—Ä–µ–º–µ–Ω–Ω–æ, –Ω—É–∂–Ω–∞ –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
            },
            period: period || '7d'
        };

        res.json({
            success: true,
            data: statistics
        });

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ default –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        res.status(200).json({
            success: true,
            data: {
                totalQuotes: 0,
                totalAuthors: 0,
                popularCategory: '–î–†–£–ì–û–ï',
                dailyAverage: 0,
                changeStats: {
                    quotesChange: '+0',
                    authorsChange: '+0',
                    avgChange: '+0.0'
                },
                period: req.query.period || '7d'
            },
            warning: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∫–∞–∑–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'
        });
    }
});

/**
 * GET /api/quotes/analytics - –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ userId –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.get('/analytics', async (req, res) => {
    try {
        const { period = '7d' } = req.query;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º fallback –∫ demo-user, —Ç—Ä–µ–±—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const userId = req.userId || req.query.userId;
        
        if (!userId) {
            return res.status(401).json({
                success: false,
                error: 'Authentication required',
                message: 'User ID not found. Please authenticate first.'
            });
        }

        logger.info('üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ü–∏—Ç–∞—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { userId, period });

        res.setHeader('Content-Type', 'application/json; charset=utf-8');

        const days = parseInt(period);
        const startDate = new Date();
        startDate.setDate(startDate.getDate() - days);

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ userId
        const [
            categoriesData,
            timelineData,
            topAuthorsData,
            sentimentData
        ] = await Promise.all([
            // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            Quote.aggregate([
                { $match: { userId: userId, createdAt: { $gte: startDate } } }, // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ userId
                {
                    $group: {
                        _id: '$category',
                        count: { $sum: 1 }
                    }
                },
                { $sort: { count: -1 } }
            ]),

            // –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞
            Quote.aggregate([
                { $match: { userId: userId, createdAt: { $gte: startDate } } }, // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ userId
                {
                    $group: {
                        _id: {
                            $dateToString: {
                                format: period === '1d' ? '%H:00' : '%Y-%m-%d',
                                date: '$createdAt'
                            }
                        },
                        count: { $sum: 1 }
                    }
                },
                { $sort: { '_id': 1 } }
            ]),

            // –¢–æ–ø –∞–≤—Ç–æ—Ä—ã
            Quote.aggregate([
                { 
                    $match: { 
                        userId: userId, // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ userId
                        createdAt: { $gte: startDate },
                        author: { $ne: null, $ne: '' }
                    } 
                },
                {
                    $group: {
                        _id: '$author',
                        count: { $sum: 1 }
                    }
                },
                { $sort: { count: -1 } },
                { $limit: 6 }
            ]),

            // –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
            Quote.aggregate([
                { $match: { userId: userId, createdAt: { $gte: startDate } } }, // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ userId
                {
                    $group: {
                        _id: '$sentiment',
                        count: { $sum: 1 }
                    }
                }
            ])
        ]);

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        const categoryColors = {
            '–ö–†–ò–ó–ò–°–´': '#d4af37',
            '–Ø ‚Äî –ñ–ï–ù–©–ò–ù–ê': '#c97a7e',
            '–õ–Æ–ë–û–í–¨': '#81b3d3',
            '–û–¢–ù–û–®–ï–ù–ò–Ø': '#a8c686',
            '–î–ï–ù–¨–ì–ò': '#deb887',
            '–û–î–ò–ù–û–ß–ï–°–¢–í–û': '#cd853f',
            '–°–ú–ï–†–¢–¨': '#f4a460',
            '–°–ï–ú–ï–ô–ù–´–ï –û–¢–ù–û–®–ï–ù–ò–Ø': '#dda0dd',
            '–°–ú–´–°–õ –ñ–ò–ó–ù–ò': '#98fb98',
            '–°–ß–ê–°–¢–¨–ï': '#ffc857',
            '–í–†–ï–ú–Ø –ò –ü–†–ò–í–´–ß–ö–ò': '#a0c4ff',
            '–î–û–ë–†–û –ò –ó–õ–û': '#bdb2ff',
            '–û–ë–©–ï–°–¢–í–û': '#ffb4a2',
            '–ü–û–ò–°–ö –°–ï–ë–Ø': '#b5ead7',
            '–î–†–£–ì–û–ï': '#d3d3d3'
        };
        
        const analytics = {
            categories: {
                labels: categoriesData.map(item => item._id),
                data: categoriesData.map(item => item.count),
                colors: categoriesData.map(item => categoryColors[item._id] || '#d3d3d3')
            },
            timeline: {
                labels: timelineData.map(item => {
                    if (period === '1d') {
                        return item._id;
                    }
                    const date = new Date(item._id);
                    return date.toLocaleDateString('ru-RU', { 
                        month: 'short', 
                        day: 'numeric' 
                    });
                }),
                data: timelineData.map(item => item.count)
            },
            topAuthors: topAuthorsData.map((author, index) => {
                const totalQuotes = categoriesData.reduce((sum, cat) => sum + cat.count, 0);
                return {
                    name: author._id,
                    count: author.count,
                    percentage: totalQuotes > 0 ? Math.round((author.count / totalQuotes) * 100 * 10) / 10 : 0
                };
            }),
            sentiment: {
                labels: ['–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ', '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ', '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ'],
                data: [
                    sentimentData.find(s => s._id === 'positive')?.count || 0,
                    sentimentData.find(s => s._id === 'neutral')?.count || 0,
                    sentimentData.find(s => s._id === 'negative')?.count || 0
                ],
                colors: ['#4ade80', '#64748b', '#ef4444']
            }
        };

        res.json({
            success: true,
            data: analytics
        });

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ü–∏—Ç–∞—Ç',
            error: error.message
        });
    }
});

/**
 * GET /api/quotes/:id - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–∏—Ç–∞—Ç–µ
 */
router.get('/:id', telegramAuth, async (req, res) => {
    try {
        const { id } = req.params;

        logger.info('üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–∏—Ç–∞—Ç–µ:', id);

        res.setHeader('Content-Type', 'application/json; charset=utf-8');

        // –ù–∞—Ö–æ–¥–∏–º —Ü–∏—Ç–∞—Ç—É
        const quote = await Quote.findById(id).lean();
        if (!quote) {
            return res.status(404).json({
                success: false,
                message: '–¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const user = await UserProfile.findOne({ userId: quote.userId }).lean();

        // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ü–∏—Ç–∞—Ç—ã
        const similarQuotes = await Quote.findSimilarQuotes(quote.text, quote.userId);

        const quoteDetails = {
            id: quote._id.toString(),
            text: quote.text,
            author: quote.author,
            source: quote.source,
            category: quote.category,
            themes: quote.themes || [],
            sentiment: quote.sentiment,
            user: {
                id: quote.userId,
                name: user?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
                telegramUsername: user?.telegramUsername || 'N/A',
                email: user?.email || 'N/A'
            },
            meta: {
                weekNumber: quote.weekNumber,
                monthNumber: quote.monthNumber,
                yearNumber: quote.yearNumber,
                createdAt: quote.createdAt,
                editedAt: quote.editedAt,
                isEdited: quote.isEdited,
                wordCount: quote.text.split(' ').length,
                characterCount: quote.text.length
            },
            relatedQuotes: similarQuotes.map(sq => ({
                id: sq._id.toString(),
                text: sq.text,
                author: sq.author,
                similarity: Math.random() * 0.3 + 0.7 // –í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
            }))
        };

        res.json({
            success: true,
            data: quoteDetails
        });

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–∏—Ç–∞—Ç–µ',
            error: error.message
        });
    }
});

/**
 * POST /api/quotes/:id/analyze - –ó–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏—Ç–∞—Ç—ã
 */
router.post('/analyze', telegramAuth, async (req, res) => {
    try {
        const { text, author } = req.body;

        logger.info('ü§ñ –ó–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏—Ç–∞—Ç—ã:', { text: text?.substring(0, 50) + '...', author });

        res.setHeader('Content-Type', 'application/json; charset=utf-8');

        if (!text || text.trim().length === 0) {
            return res.status(400).json({
                success: false,
                message: '–¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            });
        }

        const QuoteHandler = require('../services/quoteHandler');
        const quoteHandler = new QuoteHandler();
        
        const analysis = await quoteHandler.analyzeQuote(text, author || null);

        res.json({
            success: true,
            message: '–ê–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω',
            data: {
                text: text,
                author: author || null,
                analysis: analysis
            }
        });

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏—Ç–∞—Ç—ã',
            error: error.message
        });
    }
});

/**
 * POST /api/quotes/:id/analyze - –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ü–∏—Ç–∞—Ç—ã
 */
router.post('/:id/analyze', telegramAuth, async (req, res) => {
    try {
        const { id } = req.params;

        logger.info('ü§ñ –ó–∞–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏—Ç–∞—Ç—ã:', id);

        res.setHeader('Content-Type: application/json; charset=utf-8');

        const quote = await Quote.findById(id);
        if (!quote) {
            return res.status(404).json({
                success: false,
                message: '–¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }

        const QuoteHandler = require('../services/quoteHandler');
        const quoteHandler = new QuoteHandler();
        
        const analysis = await quoteHandler.analyzeQuote(quote.text, quote.author);

        quote.category = analysis.category;
        quote.themes = analysis.themes;
        quote.sentiment = analysis.sentiment;
        quote.insights = analysis.insights;
        await quote.save();

        res.json({
            success: true,
            message: '–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω',
            data: {
                quoteId: id,
                analysis: analysis,
                updated: true
            }
        });

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏—Ç–∞—Ç—ã',
            error: error.message
        });
    }
});

/**
 * POST /api/quotes/analyze - –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ü–∏—Ç–∞—Ç—ã
 */
router.post('/analyze', telegramAuth, async (req, res) => {
    try {
        const { text, author } = req.body;

        logger.info('ü§ñ –ó–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ–π —Ü–∏—Ç–∞—Ç—ã:', { text: text?.substring(0, 50) + '...', author });

        res.setHeader('Content-Type', 'application/json; charset=utf-8');

        if (!text || text.trim().length === 0) {
            return res.status(400).json({
                success: false,
                message: '–¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            });
        }

        const QuoteHandler = require('../services/quoteHandler');
        const quoteHandler = new QuoteHandler();
        
        const analysis = await quoteHandler.analyzeQuote(text, author || null);

        res.json({
            success: true,
            message: '–ê–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω',
            data: {
                text: text,
                author: author || null,
                analysis: analysis
            }
        });

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏—Ç–∞—Ç—ã',
            error: error.message
        });
    }
});

/**
 * POST /api/quotes/:id/reanalyze - –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ü–∏—Ç–∞—Ç—ã
 */
router.post('/:id/reanalyze', telegramAuth, async (req, res) => {
    try {
        const { id } = req.params;

        logger.info('ü§ñ –ó–∞–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏—Ç–∞—Ç—ã:', id);

        res.setHeader('Content-Type', 'application/json; charset=utf-8');

        const quote = await Quote.findById(id);
        if (!quote) {
            return res.status(404).json({
                success: false,
                message: '–¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }

        const QuoteHandler = require('../services/quoteHandler');
        const quoteHandler = new QuoteHandler();
        
        const analysis = await quoteHandler.analyzeQuote(quote.text, quote.author);

        quote.category = analysis.category;
        quote.themes = analysis.themes;
        quote.sentiment = analysis.sentiment;
        quote.insights = analysis.insights;
        await quote.save();

        res.json({
            success: true,
            message: '–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω',
            data: {
                quoteId: id,
                analysis: analysis,
                updated: true
            }
        });

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏—Ç–∞—Ç—ã',
            error: error.message
        });
    }
});

/**
 * DELETE /api/quotes/:id - –£–¥–∞–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.delete('/:id', telegramAuth, async (req, res) => {
    try {
        const { id } = req.params;
        const userId = req.userId || req.user?.id || req.body?.userId;

        logger.info('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã:', id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userId);

        if (!userId) {
            return res.status(401).json({
                success: false,
                error: 'Authentication required',
                message: 'User ID not found. Please authenticate first.'
            });
        }

        res.setHeader('Content-Type', 'application/json; charset=utf-8');

        // –ù–∞—Ö–æ–¥–∏–º —Ü–∏—Ç–∞—Ç—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        const quote = await Quote.findById(id);
        if (!quote) {
            return res.status(404).json({
                success: false,
                message: '–¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ü–∏—Ç–∞—Ç—ã
        if (String(quote.userId) !== String(userId)) {
            return res.status(403).json({
                success: false,
                message: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã'
            });
        }

        // –£–¥–∞–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É
        await Quote.deleteOne({ _id: id });

        // –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è –∞—É–¥–∏—Ç–∞
        logger.info('üóëÔ∏è –¶–∏—Ç–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', {
            id,
            text: quote.text,
            author: quote.author,
            userId: quote.userId,
            deletedBy: userId
        });

        res.status(204).end();

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã',
            error: error.message
        });
    }
});

/**
 * POST /api/quotes/:id/favorite - Toggle favorite status of a quote
 */
router.post('/:id/favorite', telegramAuth, async (req, res) => {
    try {
        const { id } = req.params;
        const { isFavorite } = req.body;

        logger.info('‚≠ê Toggle favorite for quote:', id, { isFavorite });

        res.setHeader('Content-Type', 'application/json; charset=utf-8');

        // Find and update the quote
        const updatedQuote = await Quote.findByIdAndUpdate(
            id,
            { isFavorite: Boolean(isFavorite) },
            { new: true, runValidators: true }
        );

        if (!updatedQuote) {
            return res.status(404).json({
                success: false,
                message: '–¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }

        res.json({
            success: true,
            message: '–°—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
            data: {
                id: updatedQuote._id.toString(),
                isFavorite: updatedQuote.isFavorite
            }
        });

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ',
            error: error.message
        });
    }
});

/**
 * POST /api/quotes/export - –≠–∫—Å–ø–æ—Ä—Ç —Ü–∏—Ç–∞—Ç
 */
router.post('/export', telegramAuth, async (req, res) => {
    try {
        const { 
            format = 'csv',
            period = '30d',
            category = 'all',
            includeUserData = false
        } = req.body;

        logger.info('üìä –≠–∫—Å–ø–æ—Ä—Ç —Ü–∏—Ç–∞—Ç:', { format, period, category, includeUserData });

        res.setHeader('Content-Type', 'application/json; charset=utf-8');

        // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
        const filter = {};
        if (period !== 'all') {
            const days = parseInt(period);
            const startDate = new Date();
            startDate.setDate(startDate.getDate() - days);
            filter.createdAt = { $gte: startDate };
        }

        if (category !== 'all') {
            filter.category = category;
        }

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        const recordsCount = await Quote.countDocuments(filter);

        // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
        const exportData = {
            filename: `quotes_export_${new Date().toISOString().split('T')[0]}.${format}`,
            format,
            recordsCount,
            generatedAt: new Date().toISOString(),
            downloadUrl: `/api/quotes/download/${Date.now()}.${format}`
        };

        res.json({
            success: true,
            message: '–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω',
            data: exportData
        });

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ü–∏—Ç–∞—Ç',
            error: error.message
        });
    }
});

/**
 * GET /api/quotes/search/similar/:id - –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ü–∏—Ç–∞—Ç
 */
router.get('/search/similar/:id', telegramAuth, async (req, res) => {
    try {
        const { id } = req.params;
        const { limit = 5 } = req.query;

        logger.info('üîç –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ü–∏—Ç–∞—Ç –¥–ª—è:', id);

        res.setHeader('Content-Type', 'application/json; charset=utf-8');

        // –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ö–æ–¥–Ω—É—é —Ü–∏—Ç–∞—Ç—É
        const sourceQuote = await Quote.findById(id);
        if (!sourceQuote) {
            return res.status(404).json({
                success: false,
                message: '–ò—Å—Ö–æ–¥–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }

        // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ü–∏—Ç–∞—Ç—ã
        const similarQuotes = await Quote.findSimilarQuotes(
            sourceQuote.text, 
            sourceQuote.userId
        );

        const result = similarQuotes.slice(0, parseInt(limit)).map(quote => ({
            id: quote._id.toString(),
            text: quote.text,
            author: quote.author,
            category: quote.category,
            similarity: Math.random() * 0.3 + 0.7 // –í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞, –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
        }));

        res.json({
            success: true,
            data: {
                sourceQuoteId: id,
                similarQuotes: result
            }
        });

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ü–∏—Ç–∞—Ç:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ü–∏—Ç–∞—Ç',
            error: error.message
        });
    }
});

// ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
 * @param {string} period - –ü–µ—Ä–∏–æ–¥ ('1d', '7d', '30d', '90d')
 * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 */
async function getStatisticsForPeriod(period) {
    const days = parseInt(period);
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - days);

    const stats = await Quote.getQuoteStats(period);
    return stats;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª–∏ –≤ –≥–æ–¥—É
 * @param {Date} date - –î–∞—Ç–∞
 * @returns {number} –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
 */
function getWeekOfYear(date) {
    const start = new Date(date.getFullYear(), 0, 1);
    const diff = date - start;
    const oneWeek = 1000 * 60 * 60 * 24 * 7;
    return Math.floor(diff / oneWeek) + 1;
}

module.exports = router;

/**
 * @fileoverview API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ü–∏—Ç–∞—Ç
 * @description CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è Category –º–æ–¥–µ–ª–∏
 * @author Reader Bot Team
 */

const express = require('express');
const Category = require('../models/Category');
const { adminAuth } = require('../middleware/auth');
const logger = require('../utils/logger');

const router = express.Router();

/**
 * GET /api/reader/categories
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
router.get('/', async (req, res) => {
  try {
    const {
      page = 1,
      limit = 10,
      isActive,
      search,
      sortBy = 'priority',
      sortOrder = 'desc'
    } = req.query;

    // –°—Ç—Ä–æ–∏–º —Ñ–∏–ª—å—Ç—Ä
    const filter = {};
    
    if (isActive !== undefined) {
      filter.isActive = isActive === 'true';
    }
    
    if (search) {
      filter.$or = [
        { name: { $regex: search, $options: 'i' } },
        { description: { $regex: search, $options: 'i' } },
        { keywords: { $in: [new RegExp(search, 'i')] } }
      ];
    }

    // –°—Ç—Ä–æ–∏–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    const sort = {};
    sort[sortBy] = sortOrder === 'desc' ? -1 : 1;

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const [categories, total] = await Promise.all([
      Category.find(filter)
        .sort(sort)
        .limit(Number(limit))
        .skip((Number(page) - 1) * Number(limit)),
      Category.countDocuments(filter)
    ]);

    res.json({
      success: true,
      data: categories,
      pagination: {
        currentPage: Number(page),
        totalPages: Math.ceil(total / Number(limit)),
        totalItems: total,
        itemsPerPage: Number(limit)
      }
    });

  } catch (error) {
    logger.error('Error fetching categories:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
      error: error.message
    });
  }
});

/**
 * GET /api/reader/categories/stats
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
router.get('/stats', async (req, res) => {
  try {
    const stats = await Category.getStats();
    
    res.json({
      success: true,
      data: stats
    });

  } catch (error) {
    logger.error('Error fetching category stats:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
      error: error.message
    });
  }
});

/**
 * GET /api/reader/categories/active
 * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
 */
router.get('/active', async (req, res) => {
  try {
    const categories = await Category.getActiveForAI();

    res.json({
      success: true,
      data: categories,
      count: categories.length
    });

  } catch (error) {
    logger.error('Error fetching active categories:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
      error: error.message
    });
  }
});

/**
 * GET /api/reader/categories/ui
 * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
router.get('/ui', async (req, res) => {
  try {
    const categories = await Category.getForUI();

    res.json({
      success: true,
      data: categories,
      count: categories.length
    });

  } catch (error) {
    logger.error('Error fetching UI categories:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è UI',
      error: error.message
    });
  }
});

/**
 * POST /api/reader/categories/validate
 * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç AI
 */
router.post('/validate', async (req, res) => {
  try {
    const { categoryName } = req.body;
    
    if (!categoryName) {
      return res.status(400).json({
        success: false,
        message: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
      });
    }

    const category = await Category.validateAICategory(categoryName);

    res.json({
      success: true,
      data: category,
      found: !!category
    });

  } catch (error) {
    logger.error('Error validating category:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      error: error.message
    });
  }
});

/**
 * POST /api/reader/categories/find-by-text
 * –ù–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Ç–µ–∫—Å—Ç—É —Ü–∏—Ç–∞—Ç—ã
 */
router.post('/find-by-text', async (req, res) => {
  try {
    const { text } = req.body;
    
    if (!text) {
      return res.status(400).json({
        success: false,
        message: '–¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    const category = await Category.findByText(text);

    res.json({
      success: true,
      data: category
    });

  } catch (error) {
    logger.error('Error finding category by text:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ç–µ–∫—Å—Ç—É',
      error: error.message
    });
  }
});

/**
 * GET /api/reader/categories/:id
 * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
 */
router.get('/:id', async (req, res) => {
  try {
    const category = await Category.findById(req.params.id);
    
    if (!category) {
      return res.status(404).json({
        success: false,
        message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    res.json({
      success: true,
      data: category
    });

  } catch (error) {
    logger.error('Error fetching category:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      error: error.message
    });
  }
});

/**
 * POST /api/reader/categories
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
 */
router.post('/', adminAuth, async (req, res) => {
  try {
    const categoryData = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const requiredFields = ['name', 'description'];
    for (const field of requiredFields) {
      if (!categoryData[field]) {
        return res.status(400).json({
          success: false,
          message: `–ü–æ–ª–µ ${field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
    const existingCategory = await Category.findOne({ name: categoryData.name });
    if (existingCategory) {
      return res.status(400).json({
        success: false,
        message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      });
    }

    const category = new Category(categoryData);
    await category.save();

    logger.info(`üìÇ Created category: ${category.name}`);

    res.status(201).json({
      success: true,
      data: category,
      message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞'
    });

  } catch (error) {
    logger.error('Error creating category:', error);
    
    if (error.name === 'ValidationError') {
      return res.status(400).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
        errors: Object.values(error.errors).map(err => err.message)
      });
    }

    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      error: error.message
    });
  }
});

/**
 * PUT /api/reader/categories/:id
 * –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
 */
router.put('/:id', adminAuth, async (req, res) => {
  try {
    const categoryData = req.body;
    
    // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    if (categoryData.name) {
      const existingCategory = await Category.findOne({ 
        name: categoryData.name,
        _id: { $ne: req.params.id }
      });
      
      if (existingCategory) {
        return res.status(400).json({
          success: false,
          message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
        });
      }
    }

    const category = await Category.findByIdAndUpdate(
      req.params.id,
      categoryData,
      { new: true, runValidators: true }
    );

    if (!category) {
      return res.status(404).json({
        success: false,
        message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    logger.info(`üìÇ Updated category: ${category.name}`);

    res.json({
      success: true,
      data: category,
      message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
    });

  } catch (error) {
    logger.error('Error updating category:', error);
    
    if (error.name === 'ValidationError') {
      return res.status(400).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
        errors: Object.values(error.errors).map(err => err.message)
      });
    }

    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      error: error.message
    });
  }
});

/**
 * PATCH /api/reader/categories/:id/toggle
 * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
router.patch('/:id/toggle', adminAuth, async (req, res) => {
  try {
    const category = await Category.findById(req.params.id);
    
    if (!category) {
      return res.status(404).json({
        success: false,
        message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    category.isActive = !category.isActive;
    await category.save();

    logger.info(`üìÇ Toggled category status: ${category.name} -> ${category.isActive ? 'active' : 'inactive'}`);

    res.json({
      success: true,
      data: category,
      message: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${category.isActive ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'}`
    });

  } catch (error) {
    logger.error('Error toggling category status:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      error: error.message
    });
  }
});

/**
 * DELETE /api/reader/categories/:id
 * –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
 */
router.delete('/:id', adminAuth, async (req, res) => {
  try {
    const category = await Category.findByIdAndDelete(req.params.id);
    
    if (!category) {
      return res.status(404).json({
        success: false,
        message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    logger.info(`üìÇ Deleted category: ${category.name}`);

    res.json({
      success: true,
      message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
    });

  } catch (error) {
    logger.error('Error deleting category:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      error: error.message
    });
  }
});

/**
 * POST /api/reader/categories/import
 * –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ JSON
 */
router.post('/import', adminAuth, async (req, res) => {
  try {
    const { categories } = req.body;
    
    if (!Array.isArray(categories) || categories.length === 0) {
      return res.status(400).json({
        success: false,
        message: '–ú–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
    }

    const results = {
      created: 0,
      updated: 0,
      errors: []
    };

    for (const categoryData of categories) {
      try {
        const existingCategory = await Category.findOne({ name: categoryData.name });
        
        if (existingCategory) {
          await Category.findByIdAndUpdate(existingCategory._id, categoryData);
          results.updated++;
        } else {
          const category = new Category(categoryData);
          await category.save();
          results.created++;
        }
      } catch (error) {
        results.errors.push({
          category: categoryData.name || 'Unknown',
          error: error.message
        });
      }
    }

    logger.info(`üìÇ Import completed: ${results.created} created, ${results.updated} updated, ${results.errors.length} errors`);

    res.json({
      success: true,
      data: results,
      message: `–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: —Å–æ–∑–¥–∞–Ω–æ ${results.created}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${results.updated}`
    });

  } catch (error) {
    logger.error('Error importing categories:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
      error: error.message
    });
  }
});

/**
 * GET /api/reader/categories/export
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ JSON
 */
router.get('/export', adminAuth, async (req, res) => {
  try {
    const categories = await Category.find({});
    
    res.json({
      success: true,
      data: categories,
      count: categories.length
    });

  } catch (error) {
    logger.error('Error exporting categories:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
      error: error.message
    });
  }
});

module.exports = router;

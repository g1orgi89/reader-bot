/**
 * üîç DEBUG API –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º Telegram Mini App
 * 
 * –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ viewport –ø—Ä–æ–±–ª–µ–º–∞—Ö, –ª–æ–≥–∏—Ä—É–µ—Ç –∏—Ö –≤ –ë–î
 * –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–æ–≤
 * 
 * üîß –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ v2.0
 * 
 * @filesize ~10KB
 * @version 2.0.0
 */

const express = require('express');
const router = express.Router();
const ViewportLog = require('../models/ViewportLog');
const logger = require('../utils/logger');

/**
 * @typedef {import('../types').ShroomsError} ShroomsError
 */

/**
 * üì± POST /api/debug/viewport - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ viewport –ø—Ä–æ–±–ª–µ–º
 * 
 * üîß –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ v2.0
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ viewport —Å –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
 */
router.post('/viewport', async (req, res) => {
  try {\n    // üîß –ù–û–í–û–ï: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    const {\n      sessionId,\n      page,\n      url,\n      viewport,\n      device,\n      telegram,\n      problem,\n      debugMode = false,\n      cssVariables,\n      notes,\n      // üÜï –ù–û–í–´–ï –ü–û–õ–Ø –†–ê–°–®–ò–†–ï–ù–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò\n      sizes,\n      fixedElements,\n      document: documentMetrics,\n      content,\n      ios,\n      timestamp\n    } = req.body;\n\n    // üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π\n    if (!sessionId || !page || !viewport || !device || !problem) {\n      return res.status(400).json({\n        success: false,\n        error: 'Missing required fields',\n        required: ['sessionId', 'page', 'viewport', 'device', 'problem']\n      });\n    }\n\n    // üîß –ù–û–í–û–ï: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n    const logData = {\n      sessionId: sessionId.substring(0, 8),\n      page,\n      platform: device.platform,\n      problemType: problem.type,\n      difference: viewport.difference,\n      userAgent: device.userAgent.substring(0, 50) + '...'\n    };\n\n    // üîß –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ\n    if (sizes) {\n      logData.realSizes = {\n        header: sizes.real?.headerHeight,\n        nav: sizes.real?.bottomNavHeight\n      };\n      logData.cssSizes = {\n        header: sizes.css?.headerHeight,\n        nav: sizes.css?.bottomNavHeight\n      };\n      logData.sizeDifferences = sizes.comparison;\n    }\n\n    if (fixedElements?.length) {\n      logData.fixedElementsCount = fixedElements.length;\n    }\n\n    if (ios?.isIOS) {\n      logData.iosMetrics = {\n        isIOS: ios.isIOS,\n        safeAreaSupport: ios.safeAreaSupport,\n        visualViewportHeight: ios.visualViewport?.height\n      };\n    }\n\n    // üìä –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n    logger.info('üîç [DEBUG] Viewport issue reported v2.0:', logData);\n\n    // üõ†Ô∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø\n    const problemType = determineProblemType(viewport, problem);\n    const severity = determineSeverity(viewport.difference);\n\n    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º\n    const bottomNavHeight = viewport.bottomNavHeight || sizes?.css?.bottomNavHeight || sizes?.real?.bottomNavHeight || 64;\n    const headerHeight = viewport.headerHeight || sizes?.css?.headerHeight || sizes?.real?.headerHeight || 56;\n    const totalSubtracted = bottomNavHeight + headerHeight + 40; // padding\n    const availableHeight = viewport.innerHeight - totalSubtracted;\n\n    // üíæ –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n    const viewportLogData = {\n      sessionId,\n      page,\n      url: url || `/mini-app/${page}`,\n      viewport: {\n        innerHeight: viewport.innerHeight,\n        innerWidth: viewport.innerWidth,\n        telegramHeight: viewport.telegramHeight,\n        telegramStableHeight: viewport.telegramStableHeight,\n        telegramExpanded: viewport.telegramExpanded,\n        calculatedContentHeight: viewport.calculatedContentHeight,\n        actualContentHeight: viewport.actualContentHeight,\n        bottomNavHeight: bottomNavHeight,\n        headerHeight: headerHeight,\n        totalSubtracted: totalSubtracted,\n        availableHeight: availableHeight,\n        difference: viewport.difference,\n        safeBounds: viewport.safeBounds || { top: 0, bottom: 0, left: 0, right: 0 }\n      },\n      device: {\n        userAgent: device.userAgent,\n        platform: device.platform || detectPlatform(device.userAgent),\n        browser: device.browser || detectBrowser(device.userAgent),\n        devicePixelRatio: device.devicePixelRatio || 1,\n        orientation: device.orientation || 'portrait',\n        screen: device.screen\n      },\n      telegram: {\n        isAvailable: telegram?.isAvailable || false,\n        version: telegram?.version,\n        platform: telegram?.platform,\n        colorScheme: telegram?.colorScheme,\n        isVerticalSwipesEnabled: telegram?.isVerticalSwipesEnabled,\n        headerColor: telegram?.headerColor,\n        backgroundColor: telegram?.backgroundColor\n      },\n      problem: {\n        type: problemType,\n        severity: severity,\n        description: problem.description || generateProblemDescription(viewport, problemType),\n        scrollTop: problem.scrollTop || 0,\n        scrollHeight: problem.scrollHeight || 0,\n        clientHeight: problem.clientHeight || 0,\n        // üîß –ù–û–í–û–ï: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n        recommendations: problem.recommendations || [],\n        sizeMismatches: problem.sizeMismatches || {}\n      },\n      debugMode,\n      cssVariables: cssVariables || {},\n      notes,\n      timestamp: timestamp ? new Date(timestamp) : new Date()\n    };\n\n    // üîß –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å\n    if (sizes) {\n      viewportLogData.sizes = {\n        css: sizes.css || {},\n        real: sizes.real || {},\n        comparison: sizes.comparison || {}\n      };\n    }\n\n    if (fixedElements && fixedElements.length > 0) {\n      viewportLogData.fixedElements = fixedElements.slice(0, 20); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞\n    }\n\n    if (documentMetrics) {\n      viewportLogData.document = documentMetrics;\n    }\n\n    if (content) {\n      viewportLogData.content = content;\n    }\n\n    if (ios && ios.isIOS) {\n      viewportLogData.ios = ios;\n    }\n\n    const viewportLog = new ViewportLog(viewportLogData);\n\n    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î\n    await viewportLog.save();\n\n    // üìä –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\n    const saveLogData = {\n      id: viewportLog._id,\n      sessionId: sessionId.substring(0, 8),\n      problemType,\n      severity,\n      difference: viewport.difference\n    };\n\n    // üîß –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–æ–≤\n    if (sizes?.comparison) {\n      saveLogData.sizeMismatches = {\n        header: sizes.comparison.headerDifference,\n        nav: sizes.comparison.navDifference\n      };\n    }\n\n    logger.info('‚úÖ [DEBUG] Viewport log saved v2.0:', saveLogData);\n\n    // üö® –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è - –ª–æ–≥–∏—Ä—É–µ–º —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º\n    if (severity === 'severe') {\n      const severeLogData = {\n        platform: device.platform,\n        page,\n        difference: viewport.difference,\n        userAgent: device.userAgent\n      };\n\n      // üîß –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—Ä–∞—Ö –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ª–æ–≥–∏\n      if (sizes?.real) {\n        severeLogData.realSizes = {\n          header: sizes.real.headerHeight,\n          nav: sizes.real.bottomNavHeight\n        };\n      }\n\n      if (ios?.isIOS) {\n        severeLogData.iOS = true;\n        severeLogData.safeAreaSupport = ios.safeAreaSupport;\n      }\n\n      logger.warn('üö® [DEBUG] SEVERE viewport issue detected v2.0:', severeLogData);\n    }\n\n    // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π\n    const responseData = {\n      success: true,\n      message: 'Viewport data logged successfully with extended diagnostics',\n      logId: viewportLog._id,\n      analysis: {\n        problemType,\n        severity,\n        recommendation: getRecommendation(problemType, viewport, sizes)\n      }\n    };\n\n    // üîß –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ –≤ –æ—Ç–≤–µ—Ç\n    if (sizes?.comparison) {\n      responseData.analysis.sizeAnalysis = {\n        headerMismatch: sizes.comparison.headerDifference,\n        navMismatch: sizes.comparison.navDifference,\n        totalMismatch: (sizes.comparison.headerDifference || 0) + (sizes.comparison.navDifference || 0)\n      };\n    }\n\n    res.json(responseData);\n\n  } catch (error) {\n    logger.error('‚ùå [DEBUG] Failed to log viewport data v2.0:', {\n      error: error.message,\n      stack: error.stack,\n      bodyKeys: Object.keys(req.body),\n      hasExtendedData: !!(req.body.sizes || req.body.fixedElements || req.body.ios)\n    });\n\n    res.status(500).json({\n      success: false,\n      error: 'Failed to log viewport data',\n      details: error.message\n    });\n  }\n});\n\n/**\n * üìä GET /api/debug/viewport/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ viewport –ø—Ä–æ–±–ª–µ–º\n * \n * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º viewport\n */\nrouter.get('/viewport/stats', async (req, res) => {\n  try {\n    const { platform, page, limit = 100, days = 7 } = req.query;\n\n    // üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ\n    const dateFilter = {\n      timestamp: {\n        $gte: new Date(Date.now() - days * 24 * 60 * 60 * 1000)\n      }\n    };\n\n    // üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã\n    const filters = { ...dateFilter };\n    if (platform) filters['device.platform'] = platform;\n    if (page) filters.page = page;\n\n    // üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n    const [\n      totalLogs,\n      problemsByType,\n      problemsByPlatform,\n      problemsByPage,\n      recentProblems,\n      averageMetrics\n    ] = await Promise.all([\n      ViewportLog.countDocuments(filters),\n      \n      ViewportLog.aggregate([\n        { $match: filters },\n        { $group: { _id: '$problem.type', count: { $sum: 1 } } },\n        { $sort: { count: -1 } }\n      ]),\n      \n      ViewportLog.aggregate([\n        { $match: filters },\n        { $group: { _id: '$device.platform', count: { $sum: 1 } } },\n        { $sort: { count: -1 } }\n      ]),\n      \n      ViewportLog.aggregate([\n        { $match: filters },\n        { $group: { _id: '$page', count: { $sum: 1 } } },\n        { $sort: { count: -1 } }\n      ]),\n      \n      ViewportLog.find(filters)\n        .sort({ timestamp: -1 })\n        .limit(parseInt(limit))\n        .select('page device.platform problem.type viewport.difference timestamp sizes.comparison')\n        .lean(),\n        \n      ViewportLog.aggregate([\n        { $match: filters },\n        {\n          $group: {\n            _id: null,\n            avgDifference: { $avg: '$viewport.difference' },\n            avgInnerHeight: { $avg: '$viewport.innerHeight' },\n            avgTelegramHeight: { $avg: '$viewport.telegramHeight' },\n            avgBottomNavHeight: { $avg: '$viewport.bottomNavHeight' },\n            avgHeaderHeight: { $avg: '$viewport.headerHeight' }\n          }\n        }\n      ])\n    ]);\n\n    // üìà –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç\n    const stats = {\n      summary: {\n        totalLogs,\n        period: `${days} days`,\n        platforms: problemsByPlatform.length,\n        pages: problemsByPage.length\n      },\n      problems: {\n        byType: problemsByType,\n        byPlatform: problemsByPlatform,\n        byPage: problemsByPage\n      },\n      metrics: averageMetrics[0] || {},\n      recent: recentProblems\n    };\n\n    logger.info('üìä [DEBUG] Stats requested v2.0:', {\n      platform,\n      page,\n      totalLogs,\n      days\n    });\n\n    res.json({\n      success: true,\n      data: stats\n    });\n\n  } catch (error) {\n    logger.error('‚ùå [DEBUG] Failed to get viewport stats:', error);\n    \n    res.status(500).json({\n      success: false,\n      error: 'Failed to get viewport statistics',\n      details: error.message\n    });\n  }\n});\n\n/**\n * üîç GET /api/debug/viewport/analysis - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º\n * \n * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º\n */\nrouter.get('/viewport/analysis', async (req, res) => {\n  try {\n    const { logId, problemType, platform } = req.query;\n\n    let analysisData;\n\n    if (logId) {\n      // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏\n      analysisData = await ViewportLog.findById(logId).lean();\n      if (!analysisData) {\n        return res.status(404).json({\n          success: false,\n          error: 'Viewport log not found'\n        });\n      }\n    } else {\n      // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø—É –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ\n      const filters = {};\n      if (problemType) filters['problem.type'] = problemType;\n      if (platform) filters['device.platform'] = platform;\n\n      analysisData = await ViewportLog.aggregate([\n        { $match: filters },\n        {\n          $group: {\n            _id: {\n              platform: '$device.platform',\n              page: '$page',\n              problemType: '$problem.type'\n            },\n            count: { $sum: 1 },\n            avgDifference: { $avg: '$viewport.difference' },\n            minDifference: { $min: '$viewport.difference' },\n            maxDifference: { $max: '$viewport.difference' },\n            avgInnerHeight: { $avg: '$viewport.innerHeight' },\n            avgTelegramHeight: { $avg: '$viewport.telegramHeight' },\n            samples: { $push: '$$ROOT' }\n          }\n        },\n        { $sort: { count: -1 } },\n        { $limit: 20 }\n      ]);\n    }\n\n    res.json({\n      success: true,\n      data: analysisData,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    logger.error('‚ùå [DEBUG] Failed to get viewport analysis:', error);\n    \n    res.status(500).json({\n      success: false,\n      error: 'Failed to get viewport analysis',\n      details: error.message\n    });\n  }\n});\n\n/**\n * üóëÔ∏è DELETE /api/debug/viewport/clear - –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤\n * \n * –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ viewport –ª–æ–≥–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞\n */\nrouter.delete('/viewport/clear', async (req, res) => {\n  try {\n    const { days = 30 } = req.query;\n    \n    const cutoffDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000);\n    \n    const result = await ViewportLog.deleteMany({\n      timestamp: { $lt: cutoffDate }\n    });\n\n    logger.info('üóëÔ∏è [DEBUG] Viewport logs cleaned:', {\n      deletedCount: result.deletedCount,\n      cutoffDate,\n      days\n    });\n\n    res.json({\n      success: true,\n      message: `Deleted ${result.deletedCount} old viewport logs`,\n      deletedCount: result.deletedCount,\n      cutoffDate\n    });\n\n  } catch (error) {\n    logger.error('‚ùå [DEBUG] Failed to clear viewport logs:', error);\n    \n    res.status(500).json({\n      success: false,\n      error: 'Failed to clear viewport logs',\n      details: error.message\n    });\n  }\n});\n\n// ===========================================\n// üõ†Ô∏è –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò\n// ===========================================\n\n/**\n * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã viewport\n */\nfunction determineProblemType(viewport, problem) {\n  const diff = viewport.difference;\n  \n  if (problem.type) return problem.type;\n  \n  if (diff > 10) return 'empty_space_bottom';\n  if (diff < -10) return 'content_overflow';\n  if (Math.abs(diff) < 10) return 'height_mismatch';\n  \n  return 'scroll_issue';\n}\n\n/**\n * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã\n */\nfunction determineSeverity(difference) {\n  const abs = Math.abs(difference);\n  \n  if (abs < 10) return 'minor';\n  if (abs < 50) return 'moderate';\n  return 'severe';\n}\n\n/**\n * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ User Agent\n */\nfunction detectPlatform(userAgent) {\n  if (/iPhone|iPad|iPod/i.test(userAgent)) return 'iOS';\n  if (/Android/i.test(userAgent)) return 'Android';\n  if (/Windows|Mac|Linux/i.test(userAgent)) return 'Desktop';\n  return 'Unknown';\n}\n\n/**\n * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –ø–æ User Agent\n */\nfunction detectBrowser(userAgent) {\n  if (/TelegramWebApp/i.test(userAgent)) return 'Telegram';\n  if (/Chrome/i.test(userAgent)) return 'Chrome';\n  if (/Safari/i.test(userAgent)) return 'Safari';\n  if (/Firefox/i.test(userAgent)) return 'Firefox';\n  return 'Unknown';\n}\n\n/**\n * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n */\nfunction generateProblemDescription(viewport, problemType) {\n  const diff = viewport.difference;\n  \n  switch (problemType) {\n    case 'empty_space_bottom':\n      return `Empty space at bottom: ${diff}px gap between content and navigation`;\n    case 'content_overflow':\n      return `Content overflow: ${Math.abs(diff)}px content hidden below viewport`;\n    case 'height_mismatch':\n      return `Height calculation mismatch: ${diff}px difference in expected vs actual`;\n    case 'scroll_issue':\n      return `Scroll behavior issue with ${diff}px viewport difference`;\n    default:\n      return `Viewport issue: ${diff}px difference detected`;\n  }\n}\n\n/**\n * üîß –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤\n */\nfunction getRecommendation(problemType, viewport, sizes) {\n  let recommendations = [];\n  \n  // –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –ø—Ä–æ–±–ª–µ–º—ã\n  switch (problemType) {\n    case 'empty_space_bottom':\n      recommendations.push('Consider reducing bottom padding or adjusting content height calculation');\n      break;\n    case 'content_overflow':\n      recommendations.push('Increase content container height or enable scrolling');\n      break;\n    case 'height_mismatch':\n      recommendations.push('Review CSS calc() formulas and Telegram viewport integration');\n      break;\n    case 'scroll_issue':\n      recommendations.push('Check scroll container configuration and overflow settings');\n      break;\n    default:\n      recommendations.push('Review viewport height calculation logic');\n  }\n  \n  // üîß –ù–û–í–û–ï: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–æ–≤\n  if (sizes?.comparison) {\n    const headerDiff = sizes.comparison.headerDifference || 0;\n    const navDiff = sizes.comparison.navDifference || 0;\n    \n    if (Math.abs(headerDiff) > 5) {\n      recommendations.push(`Update --header-height CSS variable from ${sizes.css?.headerHeight}px to ${sizes.real?.headerHeight}px`);\n    }\n    \n    if (Math.abs(navDiff) > 5) {\n      recommendations.push(`Update --bottom-nav-height CSS variable from ${sizes.css?.bottomNavHeight}px to ${sizes.real?.bottomNavHeight}px`);\n    }\n    \n    if (Math.abs(headerDiff) > 5 || Math.abs(navDiff) > 5) {\n      recommendations.push('CSS variables do not match real element sizes - this is likely the root cause');\n    }\n  }\n  \n  return recommendations.join('. ');\n}\n\nmodule.exports = router;
/**
 * Prompts API Routes - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –¥–ª—è Reader Bot
 * @file server/api/prompts.js
 * üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é
 */

const express = require('express');
const router = express.Router();
const Prompt = require('../models/prompt');
const claude = require('../services/claude');
const promptService = require('../services/promptService');
const logger = require('../utils/logger');
// üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º requireAdminAuth –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å knowledge.js
// const { requireAdminAuth } = require('../middleware/adminAuth');

// Middleware –¥–ª—è UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–∏
router.use((req, res, next) => {
  res.charset = 'utf-8';
  res.set('Content-Type', 'application/json; charset=utf-8');
  next();
});

/**
 * @route GET /api/reader/prompts
 * @desc –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
 * @access Public (üìñ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏)
 * @param {string} [category] - –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {string} [type] - –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
 * @param {string} [language] - –§–∏–ª—å—Ç—Ä –ø–æ —è–∑—ã–∫—É
 * @param {boolean} [activeOnly=true] - –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
 * @param {number} [page=1] - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @param {number} [limit=20] - –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */
router.get('/', async (req, res) => {
  try {
    const {
      category,
      type,
      language,
      activeOnly = 'true',
      page = 1,
      limit = 20
    } = req.query;

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    const query = {};
    if (category) query.category = category;
    if (type) query.type = type;
    if (language && language !== 'all') query.language = { $in: [language, 'all'] };
    if (activeOnly === 'true') query.active = true;

    // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    const totalCount = await Prompt.countDocuments(query);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const prompts = await Prompt.find(query)
      .sort({ isDefault: -1, type: 1, name: 1 })
      .skip((page - 1) * limit)
      .limit(parseInt(limit));

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const formattedPrompts = prompts.map(prompt => prompt.toPublicJSON());

    res.json({
      success: true,
      data: formattedPrompts,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total: totalCount,
        pages: Math.ceil(totalCount / limit)
      }
    });

    logger.info(`Prompts retrieved: ${formattedPrompts.length}/${totalCount}`);
  } catch (error) {
    logger.error(`Error retrieving prompts: ${error.message}`);
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤',
      errorCode: 'RETRIEVAL_ERROR'
    });
  }
});

/**
 * @route GET /api/reader/prompts/search
 * @desc –ü–æ–∏—Å–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É
 * @access Public (üìñ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
 * @param {string} q - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {string} [category] - –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {string} [type] - –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
 * @param {string} [language] - –§–∏–ª—å—Ç—Ä –ø–æ —è–∑—ã–∫—É
 * @param {number} [page=1] - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @param {number} [limit=10] - –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */
router.get('/search', async (req, res) => {
  try {
    const {
      q: searchQuery,
      category,
      type,
      language,
      page = 1,
      limit = 10
    } = req.query;

    if (!searchQuery || searchQuery.trim().length === 0) {
      return res.status(400).json({
        success: false,
        error: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        errorCode: 'MISSING_SEARCH_QUERY'
      });
    }

    const prompts = await Prompt.searchText(searchQuery, {
      category,
      type,
      language,
      page: parseInt(page),
      limit: parseInt(limit)
    });

    const formattedPrompts = prompts.map(prompt => prompt.toPublicJSON());

    res.json({
      success: true,
      data: formattedPrompts,
      query: searchQuery,
      count: formattedPrompts.length
    });

    logger.info(`Prompt search performed: "${searchQuery}" - ${formattedPrompts.length} results`);
  } catch (error) {
    logger.error(`Error searching prompts: ${error.message}`);
    res.status(500).json({
      success: false,
      error: '–ü–æ–∏—Å–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–µ —É–¥–∞–ª—Å—è',
      errorCode: 'SEARCH_ERROR'
    });
  }
});

/**
 * @route GET /api/reader/prompts/stats
 * @desc –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–º–ø—Ç–æ–≤
 * @access Public (üìñ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
 */
router.get('/stats', async (req, res) => {
  try {
    const stats = await Prompt.getStats();
    
    res.json({
      success: true,
      data: stats
    });

    logger.info(`Prompt statistics retrieved`);
  } catch (error) {
    logger.error(`Error retrieving prompt statistics: ${error.message}`);
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
      errorCode: 'STATS_ERROR'
    });
  }
});

/**
 * @route POST /api/reader/prompts/test
 * @desc –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç —Å Claude API
 * @access Public (üìñ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 * @body {string} prompt - –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @body {string} testMessage - –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @body {string} [language=en] - –Ø–∑—ã–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
router.post('/test', async (req, res) => {
  try {
    const { prompt, testMessage, language = 'en' } = req.body;

    if (!prompt || !testMessage) {
      return res.status(400).json({
        success: false,
        error: '–ü—Ä–æ–º–ø—Ç –∏ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
        errorCode: 'MISSING_REQUIRED_FIELDS'
      });
    }

    logger.info(`Testing prompt with Claude API`);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ Claude
    const testResult = await claude.testPrompt(prompt, testMessage, { language });

    res.json({
      success: true,
      data: {
        input: testMessage,
        output: testResult.message,
        tokensUsed: testResult.tokensUsed,
        provider: testResult.provider,
        testedAt: new Date().toISOString(),
        successful: true
      }
    });

    logger.info(`Prompt test completed successfully`);
  } catch (error) {
    logger.error(`Error testing prompt: ${error.message}`);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    res.json({
      success: false,
      data: {
        input: req.body.testMessage,
        output: null,
        error: error.message,
        testedAt: new Date().toISOString(),
        successful: false
      },
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞',
      errorCode: 'TEST_ERROR'
    });
  }
});

/**
 * @route GET /api/reader/prompts/backup
 * @desc –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ JSON
 * @access Public (üìñ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –±—ç–∫–∞–ø–∞)
 */
router.get('/backup', async (req, res) => {
  try {
    const prompts = await Prompt.find().sort({ type: 1, language: 1, name: 1 });
    
    const backup = {
      version: '1.0.0',
      exportedAt: new Date().toISOString(),
      exportedBy: 'admin', // Fallback –µ—Å–ª–∏ –Ω–µ—Ç req.admin
      count: prompts.length,
      prompts: prompts.map(prompt => prompt.toPublicJSON())
    };

    res.setHeader('Content-Disposition', `attachment; filename="reader-prompts-backup-${Date.now()}.json"`);
    res.json(backup);

    logger.info(`Prompts backup exported: ${prompts.length} prompts`);
  } catch (error) {
    logger.error(`Error exporting prompts: ${error.message}`);
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã',
      errorCode: 'EXPORT_ERROR'
    });
  }
});

/**
 * @route POST /api/reader/prompts/restore
 * @desc –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ JSON
 * @access Public (üìñ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
 * @body {Object} backup - –ë—ç–∫–∞–ø –ø—Ä–æ–º–ø—Ç–æ–≤
 */
router.post('/restore', async (req, res) => {
  try {
    const { backup } = req.body;

    if (!backup || !backup.prompts || !Array.isArray(backup.prompts)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±—ç–∫–∞–ø–∞',
        errorCode: 'INVALID_BACKUP_FORMAT'
      });
    }

    let importedCount = 0;
    let errorCount = 0;
    const errors = [];

    for (const promptData of backup.prompts) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–º–ø—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        const existingPrompt = await Prompt.findOne({ name: promptData.name });
        
        if (existingPrompt && existingPrompt.isDefault) {
          // –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
          continue;
        }

        if (existingPrompt) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–ø—Ç (–±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
          await promptService.updatePromptMongoOnly(existingPrompt._id, promptData);
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç (–±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
          await promptService.addPromptMongoOnly({
            ...promptData,
            authorId: 'admin', // Fallback –µ—Å–ª–∏ –Ω–µ—Ç req.admin
            isDefault: false // –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏
          });
        }
        
        importedCount++;
      } catch (promptError) {
        errorCount++;
        errors.push({
          prompt: promptData.name,
          error: promptError.message
        });
      }
    }

    res.json({
      success: true,
      data: {
        total: backup.prompts.length,
        imported: importedCount,
        errors: errorCount,
        errorDetails: errors
      },
      message: `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedCount} –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ ${backup.prompts.length}`
    });

    logger.info(`Prompts restore completed: ${importedCount}/${backup.prompts.length}`);
  } catch (error) {
    logger.error(`Error restoring prompts: ${error.message}`);
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã',
      errorCode: 'IMPORT_ERROR'
    });
  }
});

/**
 * @route GET /api/reader/prompts/:id
 * @desc –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
 * @access Public (üìñ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
 * @param {string} id - ID –ø—Ä–æ–º–ø—Ç–∞
 */
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;

    const prompt = await Prompt.findById(id);

    if (!prompt) {
      return res.status(404).json({
        success: false,
        error: '–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        errorCode: 'PROMPT_NOT_FOUND'
      });
    }

    res.json({
      success: true,
      data: prompt.toPublicJSON()
    });

    logger.info(`Prompt retrieved: ${id}`);
  } catch (error) {
    logger.error(`Error retrieving prompt: ${error.message}`);
    
    if (error.name === 'CastError') {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–º–ø—Ç–∞',
        errorCode: 'INVALID_ID'
      });
    }

    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç',
      errorCode: 'RETRIEVAL_ERROR'
    });
  }
});

/**
 * @route POST /api/reader/prompts
 * @desc –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç (—Ç–æ–ª—å–∫–æ MongoDB, –±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
 * @access Public (üìñ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è)
 * @body {string} name - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
 * @body {string} type - –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞
 * @body {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è
 * @body {string} language - –Ø–∑—ã–∫
 * @body {string} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞
 * @body {string} [description] - –û–ø–∏—Å–∞–Ω–∏–µ
 * @body {number} [maxTokens=1000] - –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤
 * @body {string[]} [tags] - –¢–µ–≥–∏
 */
router.post('/', async (req, res) => {
  try {
    const {
      name,
      type,
      category,
      language,
      content,
      description,
      maxTokens = 1000,
      tags = []
    } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name || !type || !category || !language || !content) {
      return res.status(400).json({
        success: false,
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ, —Ç–∏–ø, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —è–∑—ã–∫ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
        errorCode: 'MISSING_REQUIRED_FIELDS'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
    const existingPrompt = await Prompt.findOne({ name: name.trim() });
    if (existingPrompt) {
      return res.status(400).json({
        success: false,
        error: '–ü—Ä–æ–º–ø—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        errorCode: 'DUPLICATE_NAME'
      });
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Ç–æ–ª—å–∫–æ –≤ MongoDB (–±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
    const result = await promptService.addPromptMongoOnly({
      name: name.trim(),
      type,
      category,
      language,
      content: content.trim(),
      description: description?.trim(),
      maxTokens: parseInt(maxTokens),
      tags: Array.isArray(tags) ? tags : [],
      authorId: 'admin', // Fallback –µ—Å–ª–∏ –Ω–µ—Ç req.admin
      isDefault: false // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏
    });

    res.status(201).json({
      success: true,
      data: result.prompt,
      message: '–ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ MongoDB'
    });

    logger.info(`Prompt created: ${result.prompt._id} - "${name}"`);
  } catch (error) {
    logger.error(`Error creating prompt: ${error.message}`);
    
    if (error.name === 'ValidationError') {
      return res.status(400).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        details: Object.values(error.errors).map(err => err.message),
        errorCode: 'VALIDATION_ERROR'
      });
    }

    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç',
      errorCode: 'CREATION_ERROR'
    });
  }
});

/**
 * @route PUT /api/reader/prompts/:id
 * @desc –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç (—Ç–æ–ª—å–∫–æ MongoDB, –±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
 * @access Public (üìñ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
 * @param {string} id - ID –ø—Ä–æ–º–ø—Ç–∞
 * @body –ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
router.put('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = { ...req.body };
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –æ–±–Ω–æ–≤–ª—è—Ç—å
    delete updateData._id;
    delete updateData.createdAt;
    delete updateData.metadata;

    const prompt = await Prompt.findById(id);

    if (!prompt) {
      return res.status(404).json({
        success: false,
        error: '–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        errorCode: 'PROMPT_NOT_FOUND'
      });
    }

    // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç–∏—á–Ω–æ
    if (prompt.isDefault) {
      // –†–∞–∑—Ä–µ—à–∞–µ–º –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –º–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤
      const allowedFields = ['active', 'maxTokens'];
      Object.keys(updateData).forEach(key => {
        if (!allowedFields.includes(key)) {
          delete updateData[key];
        }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if (updateData.name && updateData.name !== prompt.name) {
      const existingPrompt = await Prompt.findOne({ 
        name: updateData.name.trim(),
        _id: { $ne: id }
      });
      
      if (existingPrompt) {
        return res.status(400).json({
          success: false,
          error: '–ü—Ä–æ–º–ø—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
          errorCode: 'DUPLICATE_NAME'
        });
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç —Ç–æ–ª—å–∫–æ –≤ MongoDB (–±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
    const result = await promptService.updatePromptMongoOnly(id, updateData);

    res.json({
      success: true,
      data: result.prompt,
      message: '–ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ MongoDB'
    });

    logger.info(`Prompt updated: ${id}`);
  } catch (error) {
    logger.error(`Error updating prompt: ${error.message}`);
    
    if (error.name === 'CastError') {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–º–ø—Ç–∞',
        errorCode: 'INVALID_ID'
      });
    }

    if (error.name === 'ValidationError') {
      return res.status(400).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        details: Object.values(error.errors).map(err => err.message),
        errorCode: 'VALIDATION_ERROR'
      });
    }

    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç',
      errorCode: 'UPDATE_ERROR'
    });
  }
});

/**
 * @route DELETE /api/reader/prompts/:id
 * @desc –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–ø—Ç (—Ç–æ–ª—å–∫–æ –∏–∑ MongoDB, –±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
 * @access Public (üìñ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
 * @param {string} id - ID –ø—Ä–æ–º–ø—Ç–∞
 */
router.delete('/:id', async (req, res) => {
  try {
    const { id } = req.params;

    const prompt = await Prompt.findById(id);

    if (!prompt) {
      return res.status(404).json({
        success: false,
        error: '–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        errorCode: 'PROMPT_NOT_FOUND'
      });
    }

    // –ó–∞—â–∏—Ç–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
    if (prompt.isDefault) {
      return res.status(403).json({
        success: false,
        error: '–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã',
        errorCode: 'SYSTEM_PROMPT_PROTECTED'
      });
    }

    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–ø—Ç —Ç–æ–ª—å–∫–æ –∏–∑ MongoDB (–±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
    const result = await promptService.deletePromptMongoOnly(id);

    res.json({
      success: true,
      message: '–ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ MongoDB'
    });

    logger.info(`Prompt deleted: ${id} - "${prompt.name}"`);
  } catch (error) {
    logger.error(`Error deleting prompt: ${error.message}`);
    
    if (error.name === 'CastError') {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–º–ø—Ç–∞',
        errorCode: 'INVALID_ID'
      });
    }

    if (error.code === 'SYSTEM_PROMPT_PROTECTED') {
      return res.status(403).json({
        success: false,
        error: error.message,
        errorCode: 'SYSTEM_PROMPT_PROTECTED'
      });
    }

    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–ø—Ç',
      errorCode: 'DELETION_ERROR'
    });
  }
});

module.exports = router;
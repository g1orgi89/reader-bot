/**
 * @fileoverview Reader Bot Mini App API Endpoints
 * @description API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Telegram Mini App
 */

const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');

// –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π
const UserProfile = require('../models/userProfile');
const Quote = require('../models/quote');
const WeeklyReport = require('../models/weeklyReport');
const MonthlyReport = require('../models/monthlyReport');
const BookCatalog = require('../models/BookCatalog');

// –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
const QuoteHandler = require('../services/quoteHandler');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ü–∏—Ç–∞—Ç
const quoteHandler = new QuoteHandler();

// JWT —Å–µ–∫—Ä–µ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–æ–≤
const JWT_SECRET = process.env.JWT_SECRET || 'reader_bot_secret_key_2024';

// üéØ DEBUG ENVIRONMENT CONTROLS
const DEBUG_AUTH = process.env.DEBUG_AUTH === 'true';
const DEBUG_QUOTES = process.env.DEBUG_QUOTES === 'true';
const DEBUG_AI = process.env.DEBUG_AI === 'true';
const DEBUG_DB = process.env.DEBUG_DB === 'true';
const DEBUG_ALL = process.env.DEBUG_ALL === 'true';

/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: Authentication middleware –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö routes —Å JWT
 * üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: Middleware –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ JWT —Ç–æ–∫–µ–Ω–∞,
 * –Ω–æ debug —Ä–µ–∂–∏–º –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω, –≤—ã–∑—ã–≤–∞—è 401 –æ—à–∏–±–∫–∏
 * TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É debug —Ä–µ–∂–∏–º–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å JWT –¥–ª—è debug –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
const authenticateUser = async (req, res, next) => {
    try {
        // üîê COMPREHENSIVE AUTH MIDDLEWARE DEBUG
        if (DEBUG_AUTH || DEBUG_ALL) {
            console.log('üîê [AUTH MIDDLEWARE DEBUG]', {
                timestamp: new Date().toISOString(),
                method: req.method,
                url: req.url,
                
                // Headers analysis
                hasAuthHeader: !!req.headers.authorization,
                authHeaderType: req.headers.authorization?.split(' ')[0],
                authHeaderLength: req.headers.authorization?.length,
                authHeaderPreview: req.headers.authorization?.substring(0, 50) + '...',
                
                // All headers for debugging
                allHeaders: Object.keys(req.headers),
                userAgent: req.headers['user-agent'],
                
                // Telegram Web App context
                isTelegramWebApp: !!req.headers['x-telegram-web-app'],
                telegramVersion: req.headers['x-telegram-web-app-version'],
                telegramPlatform: req.headers['x-telegram-web-app-platform'],
                referrer: req.headers.referer,
                origin: req.headers.origin,
                
                // Request body preview
                hasBody: !!req.body,
                bodyKeys: req.body ? Object.keys(req.body) : []
            });
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
        const authHeader = req.headers.authorization;
        
        if (!authHeader || !authHeader.startsWith('Bearer ')) {
            if (DEBUG_AUTH || DEBUG_ALL) {
                console.log('‚ùå [AUTH DEBUG] No valid authorization header', {
                    hasAuthHeader: !!authHeader,
                    authHeaderValue: authHeader?.substring(0, 20) + '...',
                    expectedFormat: 'Bearer <token>'
                });
            }
            return res.status(401).json({ 
                success: false, 
                error: 'Authorization token required' 
            });
        }
        
        const token = authHeader.substring(7); // –£–±–∏—Ä–∞–µ–º "Bearer "
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω
        try {
            const decoded = jwt.verify(token, JWT_SECRET);
            const userId = decoded.userId;
            
            if (DEBUG_AUTH || DEBUG_ALL) {
                console.log('üîê [AUTH DEBUG] JWT verification successful', {
                    extractedToken: token ? `${token.substring(0, 20)}...` : null,
                    tokenValid: !!decoded,
                    extractedUserId: decoded?.userId,
                    tokenPayload: {
                        userId: decoded?.userId,
                        iat: decoded?.iat,
                        exp: decoded?.exp,
                        telegramUserId: decoded?.telegramUser?.id
                    }
                });
            }
            
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
            const userProfile = await UserProfile.findOne({ userId });
            if (!userProfile) {
                if (DEBUG_AUTH || DEBUG_ALL) {
                    console.log('‚ùå [AUTH DEBUG] User not found in database', {
                        searchedUserId: userId,
                        jwtUserId: decoded.userId
                    });
                }
                return res.status(401).json({ 
                    success: false, 
                    error: 'User not found. Complete onboarding first.' 
                });
            }
            
            req.userId = userId;
            req.user = userProfile;
            req.telegramUser = decoded.telegramUser;
            
            if (DEBUG_AUTH || DEBUG_ALL) {
                console.log('‚úÖ [AUTH DEBUG] Authentication successful', {
                    finalUserId: userId,
                    userExists: !!userProfile,
                    userName: userProfile?.name,
                    isOnboardingComplete: userProfile?.isOnboardingComplete
                });
            }
            
            next();
        } catch (jwtError) {
            if (DEBUG_AUTH || DEBUG_ALL) {
                console.log('‚ùå [AUTH DEBUG] JWT verification failed', {
                    error: jwtError.message,
                    tokenPreview: token?.substring(0, 30) + '...',
                    jwtErrorName: jwtError.name,
                    isExpired: jwtError.name === 'TokenExpiredError',
                    isInvalid: jwtError.name === 'JsonWebTokenError'
                });
            }
            console.error('‚ùå JWT verification failed:', jwtError.message);
            return res.status(401).json({ 
                success: false, 
                error: 'Invalid or expired token' 
            });
        }
        
    } catch (error) {
        if (DEBUG_AUTH || DEBUG_ALL) {
            console.log('‚ùå [AUTH DEBUG] Middleware error', {
                error: error.message,
                stack: error.stack,
                url: req.url,
                method: req.method
            });
        }
        console.error('‚ùå Authentication middleware error:', error);
        return res.status(401).json({ 
            success: false, 
            error: 'Authentication failed' 
        });
    }
};

// –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º routes
router.use(['/profile', '/quotes', '/reports', '/community', '/catalog', '/stats'], authenticateUser);

/**
 * @description Health check endpoint
 * @route GET /api/reader/health
 */
router.get('/health', (req, res) => {
    res.json({
        success: true,
        message: 'Reader API is healthy',
        timestamp: new Date().toISOString(),
        version: '1.0.0'
    });
});

/**
 * @description Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è Mini App
 * @route POST /api/reader/auth/telegram
 */
router.post('/auth/telegram', async (req, res) => {
    try {
        // üì± TELEGRAM AUTH COMPREHENSIVE DEBUG
        if (DEBUG_AUTH || DEBUG_ALL) {
            console.log('üì± [TELEGRAM AUTH DEBUG]', {
                timestamp: new Date().toISOString(),
                telegramDataReceived: !!req.body.telegramData,
                userDataReceived: !!req.body.user,
                userIdFromTelegram: req.body.user?.id,
                
                // Telegram data analysis
                telegramDataPreview: req.body.telegramData?.substring(0, 100) + '...',
                userDataKeys: req.body.user ? Object.keys(req.body.user) : [],
                
                // Headers analysis for Telegram context
                telegramHeaders: {
                    isTelegramWebApp: !!req.headers['x-telegram-web-app'],
                    telegramVersion: req.headers['x-telegram-web-app-version'],
                    telegramPlatform: req.headers['x-telegram-web-app-platform'],
                    userAgent: req.headers['user-agent'],
                    referrer: req.headers.referer,
                    origin: req.headers.origin
                },
                
                // Full request body structure (sanitized)
                requestStructure: {
                    hasUser: !!req.body.user,
                    hasTelegramData: !!req.body.telegramData,
                    userFields: req.body.user ? Object.keys(req.body.user) : [],
                    telegramDataLength: req.body.telegramData?.length || 0
                }
            });
        }
        
        console.log('üì± Telegram Auth Request:', req.body);
        
        const { telegramData, user } = req.body;
        
        if (!user || !user.id) {
            if (DEBUG_AUTH || DEBUG_ALL) {
                console.log('‚ùå [TELEGRAM AUTH DEBUG] Missing user data', {
                    hasUser: !!user,
                    userKeys: user ? Object.keys(user) : [],
                    hasUserId: !!(user && user.id)
                });
            }
            return res.status(400).json({
                success: false,
                error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram'
            });
        }

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        // üö® –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: Race condition –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ–º
        // TODO: –î–æ–±–∞–≤–∏—Ç—å –∞—Ç–æ–º–∞—Ä–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userId = user.id.toString();
        const userProfile = await UserProfile.findOne({ userId });
        
        if (DEBUG_AUTH || DEBUG_ALL) {
            console.log('üì± [TELEGRAM AUTH DEBUG] User lookup', {
                searchUserId: userId,
                userExists: !!userProfile,
                userOnboardingComplete: userProfile?.isOnboardingComplete,
                userName: userProfile?.name
            });
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
        const tokenPayload = {
            userId: userId,
            telegramUser: {
                id: user.id,
                first_name: user.first_name,
                last_name: user.last_name,
                username: user.username
            },
            iat: Math.floor(Date.now() / 1000),
            exp: Math.floor(Date.now() / 1000) + (30 * 24 * 60 * 60) // 30 –¥–Ω–µ–π
        };
        
        const token = jwt.sign(tokenPayload, JWT_SECRET);
        
        if (DEBUG_AUTH || DEBUG_ALL) {
            console.log('üì± [TELEGRAM AUTH DEBUG] JWT generation', {
                tokenGenerated: !!token,
                tokenLength: token?.length,
                tokenPreview: token ? `${token.substring(0, 30)}...` : null,
                tokenPayload: {
                    userId: tokenPayload.userId,
                    telegramUserId: tokenPayload.telegramUser.id,
                    expiresIn: '30 days',
                    issuedAt: new Date(tokenPayload.iat * 1000).toISOString(),
                    expiresAt: new Date(tokenPayload.exp * 1000).toISOString()
                }
            });
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const authData = {
            success: true,
            user: {
                id: user.id,
                firstName: user.first_name || '',
                lastName: user.last_name || '',
                username: user.username || '',
                telegramId: user.id,
                isOnboardingCompleted: userProfile ? userProfile.isOnboardingComplete : false
            },
            token: token,
            isOnboardingCompleted: userProfile ? userProfile.isOnboardingComplete : false,
            expiresIn: '30d'
        };

        // Log final auth result
        if (DEBUG_AUTH || DEBUG_ALL) {
            console.log('‚úÖ [TELEGRAM AUTH RESULT]', {
                success: authData.success,
                userId: authData.user.id,
                isOnboardingCompleted: authData.isOnboardingCompleted,
                tokenGenerated: !!authData.token,
                responseStructure: Object.keys(authData),
                userFields: Object.keys(authData.user)
            });
        }

        console.log('‚úÖ Auth Success:', {
            userId: authData.user.id,
            firstName: authData.user.firstName,
            isOnboardingCompleted: authData.isOnboardingCompleted,
            tokenGenerated: !!authData.token
        });
        
        res.json(authData);

    } catch (error) {
        if (DEBUG_AUTH || DEBUG_ALL) {
            console.log('‚ùå [TELEGRAM AUTH DEBUG] Error occurred', {
                error: error.message,
                stack: error.stack,
                requestBody: req.body ? Object.keys(req.body) : [],
                errorName: error.name
            });
        }
        console.error('‚ùå Telegram Auth Error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
        });
    }
});

/**
 * @description –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
 * @route GET /api/reader/auth/onboarding-status
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
 */
router.get('/auth/onboarding-status', async (req, res) => {
    try {
        console.log('üìä Onboarding Status Check');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
        const authHeader = req.headers.authorization;
        let userProfile = null;
        
        if (authHeader && authHeader.startsWith('Bearer ')) {
            try {
                const token = authHeader.substring(7); // –£–±–∏—Ä–∞–µ–º "Bearer "
                const decoded = jwt.verify(token, JWT_SECRET);
                const userId = decoded.userId;
                
                // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
                userProfile = await UserProfile.findOne({ userId });
                console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ JWT —Ç–æ–∫–µ–Ω—É:', { userId, isOnboardingComplete: userProfile?.isOnboardingComplete });
            } catch (jwtError) {
                console.warn('‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:', jwtError.message);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            }
        }
        
        if (userProfile && userProfile.isOnboardingComplete) {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥:', userProfile.userId);
            return res.json({
                success: true,
                isCompleted: true,
                completed: true, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
                user: {
                    userId: userProfile.userId,
                    name: userProfile.name,
                    email: userProfile.email,
                    isOnboardingCompleted: true
                }
            });
        }
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
        console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        res.json({
            success: true,
            isCompleted: false,
            completed: false, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
            user: userProfile ? {
                userId: userProfile.userId,
                name: userProfile.name,
                isOnboardingCompleted: false
            } : null
        });

    } catch (error) {
        console.error('‚ùå Onboarding Status Error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞'
        });
    }
});

/**
 * @description –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
 * @route POST /api/reader/auth/complete-onboarding
 * üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å—Ç—Ä–∞–Ω–µ–Ω–∞ race condition –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
router.post('/auth/complete-onboarding', async (req, res) => {
    try {
        const { telegramData, user, answers, email, source } = req.body;
        
        if (!user || !user.id || !answers || !email || !source) {
            return res.status(400).json({
                success: false,
                error: 'Missing required fields: user, answers, email, source'
            });
        }

        const userId = user.id.toString();

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç–æ–º–∞—Ä–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é findOneAndUpdate —Å upsert
        // –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race conditions –ø—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const userProfile = await UserProfile.findOneAndUpdate(
            { userId }, // —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
            {
                $setOnInsert: {
                    // –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    userId,
                    name: answers.question1_name || answers.name,
                    email: email,
                    testResults: {
                        question1_name: answers.question1_name || answers.name,
                        question2_lifestyle: answers.question2_lifestyle || answers.lifestyle,
                        question3_time: answers.question3_time || answers.timeForSelf,
                        question4_priorities: answers.question4_priorities || answers.priorities,
                        question5_reading_feeling: answers.question5_reading_feeling || answers.readingFeelings,
                        question6_phrase: answers.question6_phrase || answers.closestPhrase,
                        question7_reading_time: answers.question7_reading_time || answers.readingTime,
                        completedAt: new Date()
                    },
                    source: source,
                    telegramUsername: user.username,
                    telegramData: {
                        firstName: user.first_name,
                        lastName: user.last_name,
                        languageCode: user.language_code,
                        chatId: user.id.toString()
                    },
                    isOnboardingComplete: true,
                    registeredAt: new Date(),
                    createdAt: new Date()
                },
                $set: {
                    // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    updatedAt: new Date()
                }
            },
            {
                upsert: true, // —Å–æ–∑–¥–∞—Ç—å –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                new: true,    // –≤–µ—Ä–Ω—É—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                runValidators: true // –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Ö–µ–º—ã
            }
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å–µ–π—á–∞—Å –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª
        const wasJustCreated = userProfile.createdAt.getTime() === userProfile.updatedAt.getTime();
        
        if (!wasJustCreated && userProfile.isOnboardingComplete) {
            console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥`);
            return res.status(400).json({
                success: false,
                error: 'User already completed onboarding',
                user: {
                    userId: userProfile.userId,
                    name: userProfile.name,
                    email: userProfile.email,
                    isOnboardingComplete: userProfile.isOnboardingComplete
                }
            });
        }

        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${wasJustCreated ? '—Å–æ–∑–¥–∞–Ω' : '–æ–±–Ω–æ–≤–ª–µ–Ω'}: ${userProfile.userId} (${userProfile.name})`);
        
        res.json({
            success: true,
            user: {
                userId: userProfile.userId,
                name: userProfile.name,
                email: userProfile.email,
                isOnboardingComplete: true
            },
            message: '–û–Ω–±–æ—Ä–¥–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω'
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞:', error);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (E11000)
        if (error.code === 11000) {
            console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.body.user?.id}`);
            
            // –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞, –Ω–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
                const existingUser = await UserProfile.findOne({ userId: req.body.user.id.toString() });
                if (existingUser && existingUser.isOnboardingComplete) {
                    return res.status(400).json({
                        success: false,
                        error: 'User already completed onboarding',
                        user: {
                            userId: existingUser.userId,
                            name: existingUser.name,
                            email: existingUser.email,
                            isOnboardingComplete: true
                        }
                    });
                }
            } catch (findError) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', findError);
            }
        }
        
        res.status(500).json({ 
            success: false, 
            error: 'Internal server error during onboarding'
        });
    }
});

// ===========================================
// üë§ –ü–†–û–§–ò–õ–¨ –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê
// ===========================================

/**
 * @description –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @route GET /api/reader/profile
 */
router.get('/profile', async (req, res) => {
    try {
        res.json({
            success: true,
            user: {
                userId: req.user.userId,
                name: req.user.name,
                email: req.user.email,
                isOnboardingComplete: req.user.isOnboardingComplete,
                registeredAt: req.user.registeredAt,
                source: req.user.source,
                preferences: req.user.preferences,
                settings: req.user.settings
            }
        });
    } catch (error) {
        console.error('‚ùå Profile Error:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

/**
 * @description –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @route GET /api/reader/stats
 */
router.get('/stats', async (req, res) => {
    try {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞—â–∏—Ç–∞ –æ—Ç undefined –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userStats = req.user?.statistics || {};
        const todayQuotes = await Quote.getTodayQuotesCount(req.userId);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º default –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
        const safeStats = {
            totalQuotes: userStats.totalQuotes || 0,
            currentStreak: userStats.currentStreak || 0,
            longestStreak: userStats.longestStreak || 0,
            favoriteAuthors: userStats.favoriteAuthors || [],
            monthlyQuotes: userStats.monthlyQuotes || 0,
            todayQuotes: todayQuotes || 0,
            daysSinceRegistration: req.user?.daysSinceRegistration || 0,
            weeksSinceRegistration: req.user?.weeksSinceRegistration || 0
        };
        
        console.log('üìä Stats response with safe defaults:', {
            userId: req.userId,
            totalQuotes: safeStats.totalQuotes,
            hasUserStats: !!req.user?.statistics
        });
        
        res.json({
            success: true,
            stats: safeStats
        });
    } catch (error) {
        console.error('‚ùå Stats Error:', error);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ default –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        res.status(200).json({ 
            success: true,
            stats: {
                totalQuotes: 0,
                currentStreak: 0,
                longestStreak: 0,
                favoriteAuthors: [],
                monthlyQuotes: 0,
                todayQuotes: 0,
                daysSinceRegistration: 0,
                weeksSinceRegistration: 0
            },
            warning: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∫–∞–∑–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'
        });
    }
});

// ===========================================
// üìù –£–ü–†–ê–í–õ–ï–ù–ò–ï –¶–ò–¢–ê–¢–ê–ú–ò
// ===========================================

/**
 * @description –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–∏—Ç–∞—Ç—ã —Å AI –∞–Ω–∞–ª–∏–∑–æ–º (–ª–∏–º–∏—Ç 10/–¥–µ–Ω—å)
 * @route POST /api/reader/quotes
 */
router.post('/quotes', async (req, res) => {
    try {
        // üìù QUOTES API COMPREHENSIVE DEBUG
        if (DEBUG_QUOTES || DEBUG_ALL) {
            console.log('üìù [QUOTES API DEBUG]', {
                timestamp: new Date().toISOString(),
                endpoint: req.url,
                method: req.method,
                authenticatedUserId: req.userId,
                
                // Quote data analysis
                quoteData: {
                    text: req.body.text?.substring(0, 50) + '...',
                    author: req.body.author,
                    source: req.body.source,
                    hasText: !!req.body.text,
                    hasAuthor: !!req.body.author,
                    hasSource: !!req.body.source,
                    textLength: req.body.text?.length || 0
                },
                
                // User context
                userContext: {
                    userId: req.userId,
                    userName: req.user?.name,
                    userEmail: req.user?.email,
                    isOnboardingComplete: req.user?.isOnboardingComplete
                }
            });
        }
        
        const { text, author, source } = req.body;
        
        if (!text || text.trim().length === 0) {
            if (DEBUG_QUOTES || DEBUG_ALL) {
                console.log('‚ùå [QUOTES DEBUG] Missing or empty text', {
                    hasText: !!text,
                    textLength: text?.length || 0,
                    textTrimmed: text?.trim().length || 0
                });
            }
            return res.status(400).json({
                success: false,
                error: 'Text is required'
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ü–∏—Ç–∞—Ç –≤ –¥–µ–Ω—å
        const todayQuotes = await Quote.getTodayQuotesCount(req.userId);
        if (DEBUG_QUOTES || DEBUG_ALL) {
            console.log('üìù [QUOTES DEBUG] Daily limit check', {
                userId: req.userId,
                todayQuotes: todayQuotes,
                dailyLimit: 10,
                canAddQuote: todayQuotes < 10
            });
        }
        
        if (todayQuotes >= 10) {
            if (DEBUG_QUOTES || DEBUG_ALL) {
                console.log('‚ùå [QUOTES DEBUG] Daily limit exceeded', {
                    userId: req.userId,
                    todayQuotes: todayQuotes,
                    limit: 10
                });
            }
            return res.status(429).json({
                success: false,
                error: 'Daily limit of 10 quotes exceeded'
            });
        }
        
        try {
            // ü§ñ AI ANALYSIS START DEBUG
            if (DEBUG_AI || DEBUG_ALL) {
                console.log('ü§ñ [AI ANALYSIS START]', {
                    timestamp: new Date().toISOString(),
                    userId: req.userId,
                    quoteText: text?.substring(0, 50) + '...',
                    textLength: text?.length
                });
            }
            
            const aiStartTime = Date.now();
            
            // –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É —Å AI –∞–Ω–∞–ª–∏–∑–æ–º
            const result = await quoteHandler.handleQuote(req.userId, text);
            
            const aiEndTime = Date.now();
            
            // ü§ñ AI ANALYSIS COMPLETE DEBUG
            if (DEBUG_AI || DEBUG_ALL) {
                console.log('ü§ñ [AI ANALYSIS COMPLETE]', {
                    timestamp: new Date().toISOString(),
                    userId: req.userId,
                    quoteId: result.quote?._id,
                    processingTime: `${aiEndTime - aiStartTime}ms`,
                    success: !!result.success,
                    category: result.quote?.category,
                    themes: result.quote?.themes,
                    sentiment: result.quote?.sentiment
                });
            }
            
            if (!result.success) {
                if (DEBUG_QUOTES || DEBUG_ALL) {
                    console.log('‚ùå [QUOTES DEBUG] AI processing failed', {
                        userId: req.userId,
                        resultMessage: result.message,
                        resultSuccess: result.success
                    });
                }
                return res.status(400).json({
                    success: false,
                    error: result.message
                });
            }
            
            // üíæ DATABASE DEBUG
            if (DEBUG_DB || DEBUG_ALL) {
                console.log('üíæ [DATABASE DEBUG]', {
                    timestamp: new Date().toISOString(),
                    operation: 'UPDATE',
                    table: 'userProfile',
                    userId: req.userId,
                    action: 'updateQuoteStats',
                    author: result.quote.author
                });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await req.user.updateQuoteStats(result.quote.author);
            
            if (DEBUG_QUOTES || DEBUG_ALL) {
                console.log('‚úÖ [QUOTES DEBUG] Quote added successfully', {
                    userId: req.userId,
                    quoteId: result.quote._id,
                    quoteText: text.substring(0, 50) + '...',
                    category: result.quote.category,
                    aiAnalysisTime: `${aiEndTime - aiStartTime}ms`,
                    todayCount: result.todayCount,
                    newAchievements: result.newAchievements?.length || 0
                });
            }
            
            console.log(`‚úÖ –¶–∏—Ç–∞—Ç–∞ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${req.userId} - "${text.substring(0, 50)}..."`);
            
            res.json({
                success: true,
                quote: {
                    id: result.quote._id,
                    text: result.quote.text,
                    author: result.quote.author,
                    source: result.quote.source,
                    category: result.quote.category,
                    themes: result.quote.themes,
                    sentiment: result.quote.sentiment,
                    isEdited: result.quote.isEdited,
                    editedAt: result.quote.editedAt,
                    createdAt: result.quote.createdAt
                },
                newAchievements: result.newAchievements || [],
                todayCount: result.todayCount
            });
            
        } catch (aiError) {
            // ü§ñ AI ANALYSIS ERROR DEBUG
            if (DEBUG_AI || DEBUG_ALL) {
                console.log('‚ùå [AI ANALYSIS ERROR]', {
                    timestamp: new Date().toISOString(),
                    userId: req.userId,
                    error: aiError.message,
                    errorName: aiError.name,
                    stack: aiError.stack
                });
            }
            
            // Fallback –Ω–∞ —Ä—É—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ AI
            console.warn(`‚ö†Ô∏è AI –∞–Ω–∞–ª–∏–∑ –Ω–µ—É–¥–∞—á–µ–Ω, fallback –Ω–∞ —Ä—É—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${aiError.message}`);
            
            const quote = new Quote({
                userId: req.userId,
                text: text.trim(),
                author: author ? author.trim() : null,
                source: source ? source.trim() : null,
                category: '–î—Ä—É–≥–æ–µ',
                themes: ['—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è'],
                sentiment: 'neutral'
            });
            
            // üíæ DATABASE DEBUG - FALLBACK
            if (DEBUG_DB || DEBUG_ALL) {
                console.log('üíæ [DATABASE DEBUG - FALLBACK]', {
                    timestamp: new Date().toISOString(),
                    operation: 'INSERT',
                    table: 'quotes',
                    userId: req.userId,
                    fallbackReason: 'AI_ANALYSIS_FAILED',
                    quoteData: {
                        text: text.substring(0, 50) + '...',
                        author: author,
                        source: source,
                        category: '–î—Ä—É–≥–æ–µ'
                    }
                });
            }
            
            await quote.save();

            // ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô AI –ê–ù–ê–õ–ò–ó –î–õ–Ø FALLBACK
            try {
                const QuoteHandler = require('../handlers/QuoteHandler');
                await QuoteHandler.reanalyzeQuote(quote._id);
                console.log('ü§ñ AI –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è fallback —Ü–∏—Ç–∞—Ç—ã:', quote._id);
            } catch (aiError) {
                console.warn('‚ö†Ô∏è AI –∞–Ω–∞–ª–∏–∑ fallback –Ω–µ —É–¥–∞–ª—Å—è:', aiError.message);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await req.user.updateQuoteStats(author);
            
            if (DEBUG_QUOTES || DEBUG_ALL) {
                console.log('‚úÖ [QUOTES DEBUG] Fallback quote saved', {
                    userId: req.userId,
                    quoteId: quote._id,
                    fallbackCategory: '–î—Ä—É–≥–æ–µ',
                    manualSave: true
                });
            }
            
            console.log(`‚úÖ –¶–∏—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é (fallback): ${req.userId} - "${text.substring(0, 50)}..."`);
            
            res.json({
                success: true,
                quote: {
                    id: quote._id,
                    text: quote.text,
                    author: quote.author,
                    source: quote.source,
                    category: quote.category,
                    themes: quote.themes,
                    sentiment: quote.sentiment,
                    isEdited: quote.isEdited,
                    editedAt: quote.editedAt,
                    createdAt: quote.createdAt
                },
                warning: 'Quote saved without AI analysis'
            });
        }
        
    } catch (error) {
        if (DEBUG_QUOTES || DEBUG_ALL) {
            console.log('‚ùå [QUOTES DEBUG] Endpoint error', {
                error: error.message,
                stack: error.stack,
                userId: req.userId,
                url: req.url
            });
        }
        console.error('‚ùå Add Quote Error:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});
/**
 * @description –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
 * @route GET /api/reader/quotes
 */
router.get('/quotes', async (req, res) => {
    try {
        // üìù QUOTES API DEBUG - GET
        if (DEBUG_QUOTES || DEBUG_ALL) {
            console.log('üìù [QUOTES API DEBUG]', {
                timestamp: new Date().toISOString(),
                endpoint: req.url,
                method: req.method,
                authenticatedUserId: req.userId,
                
                // Query parameters
                queryParams: req.query,
                filters: {
                    hasAuthorFilter: !!req.query.author,
                    hasSearchFilter: !!req.query.search,
                    hasDateFilter: !!(req.query.dateFrom || req.query.dateTo),
                    limit: req.query.limit || 20,
                    offset: req.query.offset || 0
                }
            });
        }
        
        const { 
            limit = 20, 
            offset = 0, 
            author, 
            search, 
            dateFrom, 
            dateTo 
        } = req.query;
        
        const query = { userId: req.userId };
        
        if (author) {
            query.author = new RegExp(author, 'i');
        }
        
        if (search) {
            query.$or = [
                { text: new RegExp(search, 'i') },
                { author: new RegExp(search, 'i') },
                { source: new RegExp(search, 'i') }
            ];
        }
        
        if (dateFrom || dateTo) {
            query.createdAt = {};
            if (dateFrom) query.createdAt.$gte = new Date(dateFrom);
            if (dateTo) query.createdAt.$lte = new Date(dateTo);
        }
        
        // üíæ DATABASE DEBUG - QUOTES QUERY
        if (DEBUG_DB || DEBUG_ALL) {
            console.log('üíæ [DATABASE DEBUG]', {
                timestamp: new Date().toISOString(),
                operation: 'SELECT',
                table: 'quotes',
                userId: req.userId,
                conditions: query,
                pagination: { limit: parseInt(limit), offset: parseInt(offset) }
            });
        }
        
        const quotes = await Quote.find(query)
            .sort({ createdAt: -1 })
            .limit(parseInt(limit))
            .skip(parseInt(offset));
            
        const total = await Quote.countDocuments(query);
        
        // üíæ DATABASE DEBUG - RESULTS
        if (DEBUG_DB || DEBUG_ALL) {
            console.log('üíæ [DATABASE DEBUG]', {
                timestamp: new Date().toISOString(),
                operation: 'SELECT_RESULT',
                table: 'quotes',
                userId: req.userId,
                resultCount: quotes?.length || 0,
                totalCount: total,
                hasMore: total > parseInt(offset) + parseInt(limit)
            });
        }
        
        if (DEBUG_QUOTES || DEBUG_ALL) {
            console.log('‚úÖ [QUOTES DEBUG] Quotes retrieved', {
                userId: req.userId,
                quotesFound: quotes.length,
                totalQuotes: total,
                pagination: {
                    limit: parseInt(limit),
                    offset: parseInt(offset),
                    hasMore: total > parseInt(offset) + parseInt(limit)
                },
                filters: {
                    author: author || null,
                    search: search || null,
                    dateRange: (dateFrom || dateTo) ? { from: dateFrom, to: dateTo } : null
                }
            });
        }
        
        res.json({
            success: true,
            quotes: quotes.map(quote => ({
                id: quote._id,
                text: quote.text,
                author: quote.author,
                source: quote.source,
                category: quote.category,
                themes: quote.themes,
                sentiment: quote.sentiment,
                isEdited: quote.isEdited,
                editedAt: quote.editedAt,
                createdAt: quote.createdAt
            })),
            pagination: {
                total,
                limit: parseInt(limit),
                offset: parseInt(offset),
                hasMore: total > parseInt(offset) + parseInt(limit)
            }
        });
        
    } catch (error) {
        if (DEBUG_QUOTES || DEBUG_ALL) {
            console.log('‚ùå [QUOTES DEBUG] GET quotes error', {
                error: error.message,
                stack: error.stack,
                userId: req.userId,
                query: req.query
            });
        }
        console.error('‚ùå Get Quotes Error:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

/**
 * @description –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ç–∞—Ç
 * @route GET /api/reader/quotes/recent
 */
router.get('/quotes/recent', async (req, res) => {
    try {
        // üìù QUOTES API DEBUG - RECENT
        if (DEBUG_QUOTES || DEBUG_ALL) {
            console.log('üìù [QUOTES API DEBUG]', {
                timestamp: new Date().toISOString(),
                endpoint: req.url,
                method: req.method,
                authenticatedUserId: req.userId,
                requestedLimit: req.query.limit || 10
            });
        }
        
        const { limit = 10 } = req.query;
        
        // üíæ DATABASE DEBUG - RECENT QUOTES
        if (DEBUG_DB || DEBUG_ALL) {
            console.log('üíæ [DATABASE DEBUG]', {
                timestamp: new Date().toISOString(),
                operation: 'SELECT',
                table: 'quotes',
                userId: req.userId,
                conditions: { userId: req.userId },
                sort: { createdAt: -1 },
                limit: parseInt(limit)
            });
        }
        
        const quotes = await Quote.find({ userId: req.userId })
            .sort({ createdAt: -1 })
            .limit(parseInt(limit));
        
        // üíæ DATABASE DEBUG - RECENT RESULTS
        if (DEBUG_DB || DEBUG_ALL) {
            console.log('üíæ [DATABASE DEBUG]', {
                timestamp: new Date().toISOString(),
                operation: 'SELECT_RESULT',
                table: 'quotes',
                userId: req.userId,
                resultCount: quotes?.length || 0
            });
        }
        
        if (DEBUG_QUOTES || DEBUG_ALL) {
            console.log('‚úÖ [QUOTES DEBUG] Recent quotes retrieved', {
                userId: req.userId,
                quotesFound: quotes.length,
                requestedLimit: parseInt(limit),
                oldestQuoteDate: quotes.length > 0 ? quotes[quotes.length - 1].createdAt : null,
                newestQuoteDate: quotes.length > 0 ? quotes[0].createdAt : null
            });
        }
        
        res.json({
            success: true,
            quotes: quotes.map(quote => ({
                id: quote._id,
                text: quote.text,
                author: quote.author,
                source: quote.source,
                category: quote.category,
                themes: quote.themes,
                sentiment: quote.sentiment,
                isEdited: quote.isEdited,
                editedAt: quote.editedAt,
                createdAt: quote.createdAt
            }))
        });
        
    } catch (error) {
        if (DEBUG_QUOTES || DEBUG_ALL) {
            console.log('‚ùå [QUOTES DEBUG] GET recent quotes error', {
                error: error.message,
                stack: error.stack,
                userId: req.userId,
                limit: req.query.limit
            });
        }
        console.error('‚ùå Get Recent Quotes Error:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

/**
 * @description –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–∏—Ç–∞—Ç–µ
 * @route GET /api/reader/quotes/:id
 */
router.get('/quotes/:id', async (req, res) => {
    try {
        const quote = await Quote.findOne({
            _id: req.params.id,
            userId: req.userId
        });
        
        if (!quote) {
            return res.status(404).json({
                success: false,
                error: 'Quote not found'
            });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç: –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏, –ø–æ–∑–∏—Ü–∏—é –≤ –Ω–µ–¥–µ–ª–µ, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        const weekQuotes = await Quote.getWeeklyQuotes(req.userId, quote.weekNumber, quote.yearNumber);
        const totalQuotes = await Quote.countDocuments({ userId: req.userId });
        const positionInWeek = weekQuotes.findIndex(q => q._id.toString() === quote._id.toString()) + 1;
        
        res.json({
            success: true,
            quote: {
                id: quote._id,
                text: quote.text,
                author: quote.author,
                source: quote.source,
                category: quote.category,
                themes: quote.themes,
                sentiment: quote.sentiment,
                isEdited: quote.isEdited,
                editedAt: quote.editedAt,
                createdAt: quote.createdAt,
                weekNumber: quote.weekNumber,
                yearNumber: quote.yearNumber
            },
            context: {
                weekNumber: quote.weekNumber,
                yearNumber: quote.yearNumber,
                positionInWeek,
                totalInWeek: weekQuotes.length,
                totalQuotes
            }
        });
        
    } catch (error) {
        console.error('‚ùå Get Quote Details Error:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

/**
 * @description –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º AI –∞–Ω–∞–ª–∏–∑–æ–º
 * @route PUT /api/reader/quotes/:id
 */
router.put('/quotes/:id', async (req, res) => {
    try {
        const { text, author, source } = req.body;
        
        if (!text || text.trim().length === 0) {
            return res.status(400).json({
                success: false,
                error: 'Text is required'
            });
        }
        
        const quote = await Quote.findOne({
            _id: req.params.id,
            userId: req.userId
        });
        
        if (!quote) {
            return res.status(404).json({
                success: false,
                error: 'Quote not found'
            });
        }
        
        try {
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ AI –∞–Ω–∞–ª–∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ü–∏—Ç–∞—Ç—ã)
            const parsedQuote = quoteHandler._parseQuote(author ? `"${text}" (${author})` : text);
            const analysis = await quoteHandler._analyzeQuote(parsedQuote.text, parsedQuote.author);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ AI –∞–Ω–∞–ª–∏–∑–∞
            quote.text = text.trim();
            quote.author = author ? author.trim() : null;
            quote.source = source ? source.trim() : null;
            quote.category = analysis.category;
            quote.themes = analysis.themes;
            quote.sentiment = analysis.sentiment;
            quote.isEdited = true;
            quote.editedAt = new Date();
            
            await quote.save();
            
            console.log(`‚úÖ –¶–∏—Ç–∞—Ç–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º: ${req.userId} - ${req.params.id}`);
            
        } catch (aiError) {
            // Fallback –Ω–∞ —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ AI
            console.warn(`‚ö†Ô∏è AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ—É–¥–∞—á–µ–Ω, fallback: ${aiError.message}`);
            
            quote.text = text.trim();
            quote.author = author ? author.trim() : null;
            quote.source = source ? source.trim() : null;
            quote.isEdited = true;
            quote.editedAt = new Date();
            
            await quote.save();
            
            console.log(`‚úÖ –¶–∏—Ç–∞—Ç–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤—Ä—É—á–Ω—É—é (fallback): ${req.userId} - ${req.params.id}`);
        }
        
        res.json({
            success: true,
            quote: {
                id: quote._id,
                text: quote.text,
                author: quote.author,
                source: quote.source,
                category: quote.category,
                themes: quote.themes,
                sentiment: quote.sentiment,
                isEdited: quote.isEdited,
                editedAt: quote.editedAt,
                createdAt: quote.createdAt
            }
        });
        
    } catch (error) {
        console.error('‚ùå Edit Quote Error:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

/**
 * @description –û—Ç–¥–µ–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
 * @route POST /api/reader/quotes/analyze
 */
router.post('/quotes/analyze', async (req, res) => {
    try {
        const { text } = req.body;
        
        if (!text || text.trim().length === 0) {
            return res.status(400).json({
                success: false,
                error: 'Text is required'
            });
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const parsedQuote = quoteHandler._parseQuote(text);
        const analysis = await quoteHandler._analyzeQuote(parsedQuote.text, parsedQuote.author);
        
        res.json({
            success: true,
            analysis: {
                originalText: text,
                parsedText: parsedQuote.text,
                parsedAuthor: parsedQuote.author,
                category: analysis.category,
                themes: analysis.themes,
                sentiment: analysis.sentiment,
                insights: analysis.insights
            }
        });
        
    } catch (error) {
        console.error('‚ùå Analyze Quote Error:', error);
        res.status(500).json({ 
            success: false, 
            error: 'Analysis failed',
            details: error.message 
        });
    }
});

/**
 * @description –ü–æ–∏—Å–∫ –ø–æ —Ü–∏—Ç–∞—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
 * @route GET /api/reader/quotes/search
 */
router.get('/quotes/search', async (req, res) => {
    try {
        const { q: searchQuery, limit = 20 } = req.query;
        
        if (!searchQuery || searchQuery.trim().length === 0) {
            return res.status(400).json({
                success: false,
                error: 'Search query is required'
            });
        }
        
        const quotes = await Quote.searchUserQuotes(req.userId, searchQuery.trim(), parseInt(limit));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
        const highlightedQuotes = quotes.map(quote => {
            const searchRegex = new RegExp(`(${searchQuery.trim()})`, 'gi');
            
            return {
                id: quote._id,
                text: quote.text.replace(searchRegex, '<mark>$1</mark>'),
                originalText: quote.text,
                author: quote.author ? quote.author.replace(searchRegex, '<mark>$1</mark>') : null,
                originalAuthor: quote.author,
                source: quote.source ? quote.source.replace(searchRegex, '<mark>$1</mark>') : null,
                originalSource: quote.source,
                category: quote.category,
                themes: quote.themes,
                sentiment: quote.sentiment,
                isEdited: quote.isEdited,
                editedAt: quote.editedAt,
                createdAt: quote.createdAt,
                ageInDays: quote.ageInDays
            };
        });
        
        res.json({
            success: true,
            searchQuery: searchQuery.trim(),
            totalFound: quotes.length,
            quotes: highlightedQuotes
        });
        
    } catch (error) {
        console.error('‚ùå Search Quotes Error:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

/**
 * @description –£–¥–∞–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
 * @route DELETE /api/reader/quotes/:id
 */
router.delete('/quotes/:id', async (req, res) => {
    try {
        const quote = await Quote.findOne({
            _id: req.params.id,
            userId: req.userId
        });
        
        if (!quote) {
            return res.status(404).json({
                success: false,
                error: 'Quote not found'
            });
        }
        
        await quote.deleteOne();
        
        console.log(`‚úÖ –¶–∏—Ç–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞: ${req.userId} - ${req.params.id}`);
        
        res.json({
            success: true,
            message: 'Quote deleted successfully'
        });
        
    } catch (error) {
        console.error('‚ùå Delete Quote Error:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

// ===========================================
// üìä –û–¢–ß–ï–¢–´
// ===========================================

/**
 * @description –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
 * @route GET /api/reader/reports/weekly
 */
router.get('/reports/weekly', async (req, res) => {
    try {
        const { limit = 5, offset = 0 } = req.query;
        
        const reports = await WeeklyReport.find({ userId: req.userId })
            .sort({ sentAt: -1 })
            .limit(parseInt(limit))
            .skip(parseInt(offset))
            .populate('quotes');
            
        res.json({
            success: true,
            reports: reports.map(report => ({
                id: report._id,
                weekNumber: report.weekNumber,
                year: report.year,
                quotesCount: report.quotesCount,
                analysis: report.analysis,
                recommendations: report.recommendations,
                sentAt: report.sentAt,
                isRead: report.isRead
            }))
        });
        
    } catch (error) {
        console.error('‚ùå Get Weekly Reports Error:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

/**
 * @description –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
 * @route GET /api/reader/reports/monthly
 */
router.get('/reports/monthly', async (req, res) => {
    try {
        const { limit = 3, offset = 0 } = req.query;
        
        const reports = await MonthlyReport.find({ userId: req.userId })
            .sort({ sentAt: -1 })
            .limit(parseInt(limit))
            .skip(parseInt(offset));
            
        res.json({
            success: true,
            reports: reports.map(report => ({
                id: report._id,
                month: report.month,
                year: report.year,
                monthStats: report.monthStats,
                analysis: report.analysis,
                specialOffer: report.specialOffer,
                sentAt: report.sentAt,
                hasSurveyResponse: report.hasSurveyResponse,
                hasFeedback: report.hasFeedback
            }))
        });
        
    } catch (error) {
        console.error('‚ùå Get Monthly Reports Error:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

// ===========================================
// üìö –ö–ê–¢–ê–õ–û–ì –ö–ù–ò–ì
// ===========================================

/**
 * @description –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–Ω–∏–≥ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
 * @route GET /api/reader/catalog
 */
router.get('/catalog', async (req, res) => {
    try {
        const { category, limit = 20, offset = 0 } = req.query;
        
        const query = { isActive: true };
        if (category) {
            query.categories = category;
        }
        
        const books = await BookCatalog.find(query)
            .sort({ priority: -1, createdAt: -1 })
            .limit(parseInt(limit))
            .skip(parseInt(offset));
            
        const total = await BookCatalog.countDocuments(query);
        
        res.json({
            success: true,
            books: books.map(book => ({
                id: book._id,
                title: book.title,
                author: book.author,
                description: book.description,
                price: book.price,
                categories: book.categories,
                bookSlug: book.bookSlug,
                utmLink: book.utmLink
            })),
            pagination: {
                total,
                limit: parseInt(limit),
                offset: parseInt(offset),
                hasMore: total > parseInt(offset) + parseInt(limit)
            }
        });
        
    } catch (error) {
        console.error('‚ùå Get Catalog Error:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

/**
 * @description –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
 * @route GET /api/reader/recommendations
 */
router.get('/recommendations', async (req, res) => {
    try {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userThemes = req.user.preferences?.mainThemes || [];
        const favoriteCategories = req.user.statistics?.favoriteAuthors || [];
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º
        let recommendations = await BookCatalog.getRecommendationsByThemes(userThemes, 3);
        
        // –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ
        if (recommendations.length < 2) {
            const universal = await BookCatalog.getUniversalRecommendations(2 - recommendations.length);
            recommendations = recommendations.concat(universal);
        }
        
        res.json({
            success: true,
            recommendations: recommendations.map(book => ({
                id: book._id,
                title: book.title,
                author: book.author,
                description: book.description,
                price: book.price,
                reasoning: book.reasoning,
                utmLink: book.utmLink
            }))
        });
        
    } catch (error) {
        console.error('‚ùå Get Recommendations Error:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

// ===========================================
// üë• –°–û–û–ë–©–ï–°–¢–í–û
// ===========================================

/**
 * @description –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
 * @route GET /api/reader/community/stats
 */
router.get('/community/stats', async (req, res) => {
    try {
        const totalUsers = await UserProfile.countDocuments({ isOnboardingComplete: true });
        const totalQuotes = await Quote.countDocuments();
        
        const oneWeekAgo = new Date();
        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
        
        const activeUsers = await UserProfile.countDocuments({
            lastActiveAt: { $gte: oneWeekAgo },
            isActive: true
        });
        
        const topAuthors = await Quote.getTopAuthors(oneWeekAgo);
        
        res.json({
            success: true,
            stats: {
                totalMembers: totalUsers,
                activeToday: activeUsers,
                totalQuotes: totalQuotes,
                topAuthors: topAuthors.map(author => author._id).slice(0, 3),
                activeReaders: activeUsers,
                newQuotes: await Quote.countDocuments({ createdAt: { $gte: oneWeekAgo } }),
                totalReaders: totalUsers,
                totalAuthors: topAuthors.length,
                daysActive: 67 // –ú–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            }
        });
        
    } catch (error) {
        console.error('‚ùå Get Community Stats Error:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

/**
 * @description –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @route GET /api/reader/community/leaderboard
 */
router.get('/community/leaderboard', async (req, res) => {
    try {
        const { limit = 10 } = req.query;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ü–∏—Ç–∞—Ç
        const leaderboard = await UserProfile.aggregate([
            { $match: { isOnboardingComplete: true, isActive: true } },
            { $sort: { 'statistics.totalQuotes': -1 } },
            { $limit: parseInt(limit) },
            {
                $project: {
                    name: 1,
                    'statistics.totalQuotes': 1,
                    'statistics.currentStreak': 1,
                    userId: 1
                }
            }
        ]);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ–±–µ–∑–ª–∏—á–∏–≤–∞–µ–º –∏–º–µ–Ω–∞
        const result = leaderboard.map((user, index) => ({
            position: index + 1,
            name: user.name.charAt(0) + '***', // –û–±–µ–∑–ª–∏—á–∏–≤–∞–µ–º –∏–º–µ–Ω–∞
            quotes: user.statistics.totalQuotes,
            quotesThisWeek: Math.floor(Math.random() * 20), // –ó–∞–≥–ª—É—à–∫–∞
            isCurrentUser: user.userId === req.userId
        }));
        
        res.json({
            success: true,
            leaderboard: result
        });
        
    } catch (error) {
        console.error('‚ùå Get Leaderboard Error:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

/**
 * @description –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API
 * @route GET /api/reader/health
 */
router.get('/health', (req, res) => {
    res.json({
        success: true,
        message: 'Reader API is working',
        timestamp: new Date().toISOString()
    });
});

module.exports = router;

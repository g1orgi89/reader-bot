/**
 * @fileoverview –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Analytics API –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @description API endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ MongoDB
 * @version 3.0.0
 */

const express = require('express');
const router = express.Router();
const analyticsService = require('../services/analyticsService');

/**
 * @typedef {Object} ApiResponse
 * @property {boolean} success - –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞
 * @property {any} data - –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
 * @property {string} [error] - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @property {string} timestamp - –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
 * @property {boolean} [fallbackMode] - –†–µ–∂–∏–º fallback –¥–∞–Ω–Ω—ã—Ö
 */

/**
 * @typedef {Object} DashboardOverview
 * @property {number} totalUsers - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @property {number} newUsers - –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
 * @property {number} totalQuotes - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç
 * @property {number} avgQuotesPerUser - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @property {number} activeUsers - –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
 * @property {number} promoUsage - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
 */

console.log('üìä Analytics API: –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');

// ========================================
// –û–°–ù–û–í–ù–´–ï ENDPOINTS
// ========================================

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
 * @route GET /api/analytics/test
 */
router.get('/test', (req, res) => {
  console.log('üìä TEST Analytics endpoint –≤—ã–∑–≤–∞–Ω');
  
  res.json({
    success: true,
    message: 'Analytics API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π!',
    timestamp: new Date().toISOString(),
    version: '3.0.0',
    features: [
      '–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ MongoDB',
      'Fallback —Ä–µ–∂–∏–º',
      'UTM tracking', 
      'Promo code analytics',
      'Retention analysis',
      'Top content analysis'
    ]
  });
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
 * @route GET /api/analytics/dashboard
 * @param {string} [period=7d] - –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ (1d, 7d, 30d, 90d)
 * @returns {ApiResponse<DashboardStats>}
 */
router.get('/dashboard', async (req, res) => {
  try {
    console.log('üìä DASHBOARD endpoint: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞');
    
    const { period = '7d' } = req.query;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∞
    const validPeriods = ['1d', '7d', '30d', '90d'];
    if (!validPeriods.includes(period)) {
      return res.status(400).json({
        success: false,
        error: `–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${validPeriods.join(', ')}`,
        timestamp: new Date().toISOString()
      });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    const dashboardStats = await analyticsService.getDashboardStats(period);
    
    console.log(`üìä Dashboard —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: ${dashboardStats.overview.totalUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${dashboardStats.overview.totalQuotes} —Ü–∏—Ç–∞—Ç`);
    
    res.json({
      success: true,
      data: dashboardStats,
      timestamp: new Date().toISOString(),
      fallbackMode: dashboardStats.fallbackMode || false
    });

  } catch (error) {
    console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è dashboard —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞—à–±–æ—Ä–¥–∞',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined,
      timestamp: new Date().toISOString()
    });
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ retention –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @route GET /api/analytics/retention
 * @returns {ApiResponse<RetentionData[]>}
 */
router.get('/retention', async (req, res) => {
  try {
    console.log('üìä RETENTION endpoint: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è');
    
    const retentionData = await analyticsService.getUserRetentionStats();
    
    console.log(`üìä Retention –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è ${retentionData.length} –∫–æ–≥–æ—Ä—Ç`);
    
    res.json({
      success: true,
      data: retentionData,
      timestamp: new Date().toISOString(),
      metadata: {
        cohortsCount: retentionData.length,
        avgRetentionWeek1: retentionData.length > 0 ? 
          Math.round(retentionData.reduce((sum, c) => sum + c.week1, 0) / retentionData.length) : 0,
        avgRetentionWeek4: retentionData.length > 0 ? 
          Math.round(retentionData.reduce((sum, c) => sum + c.week4, 0) / retentionData.length) : 0
      }
    });

  } catch (error) {
    console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è retention —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É retention',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined,
      timestamp: new Date().toISOString()
    });
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–∞–≤—Ç–æ—Ä—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ü–∏—Ç–∞—Ç—ã)
 * @route GET /api/analytics/top-content
 * @param {string} [period=30d] - –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
 * @returns {ApiResponse<TopContentData>}
 */
router.get('/top-content', async (req, res) => {
  try {
    console.log('üìä TOP-CONTENT endpoint: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
    
    const { period = '30d' } = req.query;
    
    const topContent = await analyticsService.getTopQuotesAndAuthors(period);
    
    console.log(`üìä –¢–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω: ${topContent.topAuthors.length} –∞–≤—Ç–æ—Ä–æ–≤, ${topContent.topCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    
    res.json({
      success: true,
      data: topContent,
      timestamp: new Date().toISOString(),
      period,
      fallbackMode: topContent.fallbackMode || false
    });

  } catch (error) {
    console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
    
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined,
      timestamp: new Date().toISOString()
    });
  }
});

// ========================================
// TRACKING ENDPOINTS
// ========================================

/**
 * –¢—Ä–µ–∫–∏–Ω–≥ UTM –∫–ª–∏–∫–æ–≤
 * @route POST /api/analytics/track-utm
 * @param {Object} body - UTM –¥–∞–Ω–Ω—ã–µ
 * @param {string} body.utm_source - –ò—Å—Ç–æ—á–Ω–∏–∫
 * @param {string} body.utm_medium - –ö–∞–Ω–∞–ª
 * @param {string} body.utm_campaign - –ö–∞–º–ø–∞–Ω–∏—è
 * @param {string} body.utm_content - –ö–æ–Ω—Ç–µ–Ω—Ç
 * @param {string} body.user_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.post('/track-utm', async (req, res) => {
  try {
    console.log('üìä UTM TRACKING: –Ω–æ–≤—ã–π –∫–ª–∏–∫');
    
    const { utm_source, utm_medium, utm_campaign, utm_content, user_id } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!utm_source || !utm_campaign || !user_id) {
      return res.status(400).json({
        success: false,
        error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: utm_source, utm_campaign, user_id',
        timestamp: new Date().toISOString()
      });
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ UTM –¥–∞–Ω–Ω—ã—Ö
    const utmData = {
      utm_source,
      utm_medium: utm_medium || 'unknown',
      utm_campaign,
      utm_content: utm_content || '',
      user_agent: req.headers['user-agent'] || '',
      referrer: req.headers.referer || '',
      ip_address: req.ip || req.connection.remoteAddress,
      session_id: req.sessionID || `session_${Date.now()}`
    };

    // –¢—Ä–µ–∫–∏–Ω–≥ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    await analyticsService.trackUTMClick(utmData, user_id);
    
    console.log(`üìä UTM –∫–ª–∏–∫ –∑–∞–ø–∏—Å–∞–Ω: ${utm_campaign} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id}`);
    
    res.json({
      success: true,
      message: 'UTM –∫–ª–∏–∫ –∑–∞–ø–∏—Å–∞–Ω',
      timestamp: new Date().toISOString(),
      tracked: {
        campaign: utm_campaign,
        source: utm_source,
        userId: user_id
      }
    });

  } catch (error) {
    console.error('üìä –û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ UTM –∫–ª–∏–∫–∞:', error);
    
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å UTM –∫–ª–∏–∫',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined,
      timestamp: new Date().toISOString()
    });
  }
});

/**
 * –¢—Ä–µ–∫–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
 * @route POST /api/analytics/track-promo
 * @param {Object} body - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
 * @param {string} body.promo_code - –ü—Ä–æ–º–æ–∫–æ–¥
 * @param {string} body.user_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number} body.order_value - –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞
 * @param {Object} [body.metadata] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
router.post('/track-promo', async (req, res) => {
  try {
    console.log('üìä PROMO TRACKING: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞');
    
    const { promo_code, user_id, order_value, metadata = {} } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!promo_code || !user_id || typeof order_value !== 'number') {
      return res.status(400).json({
        success: false,
        error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: promo_code, user_id, order_value (number)',
        timestamp: new Date().toISOString()
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
    if (order_value < 0) {
      return res.status(400).json({
        success: false,
        error: '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π',
        timestamp: new Date().toISOString()
      });
    }

    // –¢—Ä–µ–∫–∏–Ω–≥ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    await analyticsService.trackPromoCodeUsage(promo_code, user_id, order_value, metadata);
    
    console.log(`üìä –ü—Ä–æ–º–æ–∫–æ–¥ –∑–∞–ø–∏—Å–∞–Ω: ${promo_code} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id}, —Å—É–º–º–∞ ${order_value}`);
    
    res.json({
      success: true,
      message: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞–ø–∏—Å–∞–Ω–æ',
      timestamp: new Date().toISOString(),
      tracked: {
        promoCode: promo_code,
        userId: user_id,
        orderValue: order_value
      }
    });

  } catch (error) {
    console.error('üìä –û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
    
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined,
      timestamp: new Date().toISOString()
    });
  }
});

/**
 * –û–±—â–∏–π —Ç—Ä–µ–∫–∏–Ω–≥ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @route POST /api/analytics/track-action
 * @param {Object} body - –î–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
 * @param {string} body.user_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} body.action - –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
 * @param {Object} [body.metadata] - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
 */
router.post('/track-action', async (req, res) => {
  try {
    console.log('üìä ACTION TRACKING: –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    const { user_id, action, metadata = {} } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!user_id || !action) {
      return res.status(400).json({
        success: false,
        error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: user_id, action',
        timestamp: new Date().toISOString()
      });
    }

    // –¢—Ä–µ–∫–∏–Ω–≥ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    await analyticsService.trackUserAction(user_id, action, metadata);
    
    console.log(`üìä –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ: ${action} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id}`);
    
    res.json({
      success: true,
      message: '–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø–∏—Å–∞–Ω–æ',
      timestamp: new Date().toISOString(),
      tracked: {
        userId: user_id,
        action: action
      }
    });

  } catch (error) {
    console.error('üìä –û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –¥–µ–π—Å—Ç–≤–∏—è:', error);
    
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined,
      timestamp: new Date().toISOString()
    });
  }
});

// ========================================
// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï ENDPOINTS
// ========================================

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 * @route GET /api/analytics/export
 * @param {string} [format=json] - –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ (json, csv)
 * @param {string} [period=30d] - –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö
 */
router.get('/export', async (req, res) => {
  try {
    console.log('üìä EXPORT: —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
    
    const { format = 'json', period = '30d' } = req.query;
    
    if (!['json', 'csv'].includes(format)) {
      return res.status(400).json({
        success: false,
        error: '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: json, csv',
        timestamp: new Date().toISOString()
      });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    const [dashboardStats, retentionData, topContent] = await Promise.all([
      analyticsService.getDashboardStats(period),
      analyticsService.getUserRetentionStats(),
      analyticsService.getTopQuotesAndAuthors(period)
    ]);

    const exportData = {
      exportedAt: new Date().toISOString(),
      period,
      dashboard: dashboardStats,
      retention: retentionData,
      topContent
    };

    if (format === 'json') {
      res.setHeader('Content-Type', 'application/json');
      res.setHeader('Content-Disposition', `attachment; filename=reader-analytics-${period}-${Date.now()}.json`);
      res.json(exportData);
    } else {
      // CSV —Ñ–æ—Ä–º–∞—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
      res.setHeader('Content-Type', 'text/csv');
      res.setHeader('Content-Disposition', `attachment; filename=reader-analytics-${period}-${Date.now()}.csv`);
      
      const csvData = this.convertToCSV(exportData);
      res.send(csvData);
    }

    console.log(`üìä –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format}`);

  } catch (error) {
    console.error('üìä –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
    
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined,
      timestamp: new Date().toISOString()
    });
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 * @route GET /api/analytics/metadata
 */
router.get('/metadata', async (req, res) => {
  try {
    console.log('üìä METADATA: –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö');
    
    const metadata = {
      availablePeriods: ['1d', '7d', '30d', '90d'],
      supportedFormats: ['json', 'csv'],
      trackingEnabled: {
        utm: true,
        promoCodes: true,
        userActions: true
      },
      lastUpdate: new Date().toISOString(),
      version: '3.0.0'
    };
    
    res.json({
      success: true,
      data: metadata,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error);
    
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ',
      timestamp: new Date().toISOString()
    });
  }
});

// ========================================
// ERROR HANDLING
// ========================================

/**
 * Catch-all –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö endpoints
 */
router.use('*', (req, res) => {
  console.log(`üìä Analytics: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π endpoint: ${req.method} ${req.originalUrl}`);
  
  res.status(404).json({
    success: false,
    error: 'Analytics endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
    path: req.originalUrl,
    method: req.method,
    availableEndpoints: [
      'GET /api/analytics/test',
      'GET /api/analytics/dashboard',
      'GET /api/analytics/retention',
      'GET /api/analytics/top-content',
      'GET /api/analytics/export',
      'GET /api/analytics/metadata',
      'POST /api/analytics/track-utm',
      'POST /api/analytics/track-promo',
      'POST /api/analytics/track-action'
    ],
    timestamp: new Date().toISOString()
  });
});

// ========================================
// UTILITY FUNCTIONS
// ========================================

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–æ—Ä–º–∞—Ç
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
 * @returns {string} CSV —Å—Ç—Ä–æ–∫–∞
 */
function convertToCSV(data) {
  const headers = ['Metric', 'Value', 'Period'];
  const rows = [
    ['Total Users', data.dashboard.overview.totalUsers, data.period],
    ['New Users', data.dashboard.overview.newUsers, data.period],
    ['Total Quotes', data.dashboard.overview.totalQuotes, data.period],
    ['Active Users', data.dashboard.overview.activeUsers, data.period],
    ['Promo Usage', data.dashboard.overview.promoUsage, data.period]
  ];

  return [headers.join(','), ...rows.map(row => row.join(','))].join('\n');
}

console.log('üìä Analytics API: –í—Å–µ endpoints –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Å –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π');

module.exports = router;
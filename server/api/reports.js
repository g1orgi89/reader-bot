/**
 * @fileoverview API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –Ω–æ–≤—ã–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
 * @author g1orgi89
 */

const express = require('express');
const router = express.Router();
const logger = require('../utils/logger');

// üîß –ò–°–ü–†–ê–í–õ–ï–ù–´ –ò–ú–ü–û–†–¢–´: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
let WeeklyReport, MonthlyReport, UserProfile, Quote;

try {
  WeeklyReport = require('../models/weeklyReport');
  logger.info('‚úÖ WeeklyReport model loaded');
} catch (error) {
  logger.error('‚ùå Failed to load WeeklyReport model:', error.message);
  WeeklyReport = null;
}

try {
  MonthlyReport = require('../models/monthlyReport');
  logger.info('‚úÖ MonthlyReport model loaded');
} catch (error) {
  logger.error('‚ùå Failed to load MonthlyReport model:', error.message);
  MonthlyReport = null;
}

try {
  UserProfile = require('../models/userProfile');
  logger.info('‚úÖ UserProfile model loaded');
} catch (error) {
  logger.error('‚ùå Failed to load UserProfile model:', error.message);
  UserProfile = null;
}

try {
  Quote = require('../models/quote');
  logger.info('‚úÖ Quote model loaded');
} catch (error) {
  logger.error('‚ùå Failed to load Quote model:', error.message);
  Quote = null;
}

// üîß FIX: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏
let weeklyReportService, monthlyReportService, telegramReportService, cronService;

try {
  const WeeklyReportService = require('../services/weeklyReportService');
  weeklyReportService = new WeeklyReportService(); // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
  logger.info('‚úÖ weeklyReportService instance created');
} catch (error) {
  logger.warn('‚ö†Ô∏è weeklyReportService not available:', error.message);
  weeklyReportService = null;
}

try {
  const MonthlyReportService = require('../services/monthlyReportService');
  monthlyReportService = new MonthlyReportService(); // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
  logger.info('‚úÖ monthlyReportService instance created');
} catch (error) {
  logger.warn('‚ö†Ô∏è monthlyReportService not available:', error.message);
  monthlyReportService = null;
}

try {
  telegramReportService = require('../services/telegramReportService');
  logger.info('‚úÖ telegramReportService loaded');
} catch (error) {
  logger.warn('‚ö†Ô∏è telegramReportService not available:', error.message);
  telegramReportService = null;
}

try {
  const { CronService } = require('../services/cronService');
  cronService = new CronService();
  logger.info('‚úÖ cronService instance created');
} catch (error) {
  logger.warn('‚ö†Ô∏è cronService not available:', error.message);
  cronService = null;
}

/**
 * @typedef {import('../types/reader').WeeklyReport} WeeklyReport
 * @typedef {import('../types/api').ApiResponse} ApiResponse
 */

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
 */
function checkModelsAvailable(req, res, next) {
  if (!WeeklyReport || !UserProfile || !Quote) {
    return res.status(503).json({
      success: false,
      error: 'Database models not available',
      details: 'Some required models failed to load'
    });
  }
  next();
}

/**
 * GET /api/reports/stats
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
 */
router.get('/stats', checkModelsAvailable, async (req, res) => {
  try {
    const { days = 30 } = req.query;
    
    logger.info(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ ${days} –¥–Ω–µ–π`);
    
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - Number(days));
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    const [
      weeklyReportsCount,
      monthlyReportsCount,
      reportsWithFeedback,
      avgRating,
      uniqueUsers
    ] = await Promise.all([
      WeeklyReport.countDocuments({ sentAt: { $gte: startDate } }),
      MonthlyReport ? MonthlyReport.countDocuments({ sentAt: { $gte: startDate } }) : 0,
      WeeklyReport.countDocuments({ 
        sentAt: { $gte: startDate },
        'feedback.rating': { $exists: true }
      }),
      WeeklyReport.aggregate([
        { $match: { sentAt: { $gte: startDate }, 'feedback.rating': { $exists: true } } },
        { $group: { _id: null, avgRating: { $avg: '$feedback.rating' } } }
      ]),
      WeeklyReport.distinct('userId', { sentAt: { $gte: startDate } })
    ]);
    
    const averageRating = avgRating.length > 0 ? avgRating[0].avgRating : 0;
    const totalReports = weeklyReportsCount + monthlyReportsCount;
    const feedbackRate = totalReports > 0 ? Math.round((reportsWithFeedback / totalReports) * 100) : 0;
    
    const stats = {
      period: `${days} days`,
      totalReports,
      weeklyReportsCount,
      monthlyReportsCount,
      reportsWithFeedback,
      feedbackRate,
      averageRating: Number(averageRating.toFixed(1)),
      uniqueUsers: uniqueUsers.length,
      generatedAt: new Date().toISOString(),
      servicesStatus: {
        weeklyReportService: !!weeklyReportService,
        monthlyReportService: !!monthlyReportService,
        telegramReportService: !!telegramReportService,
        cronService: !!cronService
      }
    };
    
    res.json({
      success: true,
      data: stats
    });
    
  } catch (error) {
    logger.error(`üìñ Error getting reports stats: ${error.message}`, error);
    res.status(500).json({
      success: false,
      error: 'Failed to get reports statistics',
      details: error.message
    });
  }
});

/**
 * GET /api/reports/analytics/overview
 * –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
 */
router.get('/analytics/overview', checkModelsAvailable, async (req, res) => {
  try {
    const { days = 30 } = req.query;
    
    logger.info(`üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ ${days} –¥–Ω–µ–π`);
    
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - Number(days));
    
    const [
      totalReports,
      reportsWithFeedback,
      avgRating,
      emotionalTones,
      feedbackDistribution
    ] = await Promise.all([
      WeeklyReport.countDocuments({ sentAt: { $gte: startDate } }),
      WeeklyReport.countDocuments({ 
        sentAt: { $gte: startDate },
        'feedback.rating': { $exists: true }
      }),
      WeeklyReport.aggregate([
        { $match: { sentAt: { $gte: startDate }, 'feedback.rating': { $exists: true } } },
        { $group: { _id: null, avgRating: { $avg: '$feedback.rating' } } }
      ]),
      WeeklyReport.aggregate([
        { $match: { sentAt: { $gte: startDate } } },
        { $group: { _id: '$analysis.emotionalTone', count: { $sum: 1 } } },
        { $sort: { count: -1 } }
      ]),
      WeeklyReport.aggregate([
        { $match: { sentAt: { $gte: startDate }, 'feedback.rating': { $exists: true } } },
        { $group: { _id: '$feedback.rating', count: { $sum: 1 } } },
        { $sort: { _id: 1 } }
      ])
    ]);
    
    res.json({
      success: true,
      data: {
        period: `${days} days`,
        overview: {
          totalReports,
          reportsWithFeedback,
          feedbackRate: totalReports > 0 ? Math.round((reportsWithFeedback / totalReports) * 100) : 0,
          averageRating: avgRating.length > 0 ? Number(avgRating[0].avgRating.toFixed(2)) : null
        },
        emotionalTones: emotionalTones.map(tone => ({
          tone: tone._id,
          count: tone.count
        })),
        feedbackDistribution: feedbackDistribution.map(item => ({
          rating: item._id,
          count: item.count
        }))
      }
    });
    
  } catch (error) {
    logger.error(`üìñ Error getting analytics overview: ${error.message}`, error);
    res.status(500).json({
      success: false,
      error: 'Failed to get analytics overview',
      details: error.message
    });
  }
});

/**
 * GET /api/reports/popular-themes
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º –≤ –æ—Ç—á–µ—Ç–∞—Ö
 */
router.get('/popular-themes', checkModelsAvailable, async (req, res) => {
  try {
    const { days = 30, limit = 10 } = req.query;
    
    logger.info(`üé® –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º –∑–∞ ${days} –¥–Ω–µ–π`);
    
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - Number(days));
    
    const themes = await WeeklyReport.aggregate([
      { $match: { sentAt: { $gte: startDate } } },
      { $unwind: '$analysis.dominantThemes' },
      { $group: { _id: '$analysis.dominantThemes', count: { $sum: 1 } } },
      { $sort: { count: -1 } },
      { $limit: Number(limit) }
    ]);
    
    res.json({
      success: true,
      data: {
        period: `${days} days`,
        themes: themes.map(theme => ({
          name: theme._id,
          count: theme.count
        })),
        total: themes.length
      }
    });
    
  } catch (error) {
    logger.error(`üìñ Error getting popular themes: ${error.message}`, error);
    res.status(500).json({
      success: false,
      error: 'Failed to get popular themes',
      details: error.message
    });
  }
});

/**
 * GET /api/reports/list
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
 */
router.get('/list', checkModelsAvailable, async (req, res) => {
  try {
    const {
      type = 'all',
      dateFrom,
      dateTo,
      search = '',
      page = 1,
      limit = 20
    } = req.query;
    
    logger.info(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤`, { type, dateFrom, dateTo, search, page, limit });
    
    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
    const filter = {};
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    if (dateFrom || dateTo) {
      filter.sentAt = {};
      if (dateFrom) filter.sentAt.$gte = new Date(dateFrom);
      if (dateTo) {
        const endDate = new Date(dateTo);
        endDate.setHours(23, 59, 59, 999);
        filter.sentAt.$lte = endDate;
      }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    let reports = [];
    let totalCount = 0;
    
    if (type === 'all' || type === 'weekly') {
      const weeklyReports = await WeeklyReport.find(filter)
        .populate('quotes', 'text author')
        .sort({ sentAt: -1 })
        .skip((Number(page) - 1) * Number(limit))
        .limit(Number(limit))
        .lean();
      
      const weeklyCount = await WeeklyReport.countDocuments(filter);
      
      reports = reports.concat(weeklyReports.map(report => ({
        id: report._id.toString(),
        userId: report.userId,
        type: 'weekly',
        period: `–ù–µ–¥–µ–ª—è ${report.weekNumber}/${report.year}`,
        quotesCount: report.quotes ? report.quotes.length : 0,
        rating: report.feedback?.rating || null,
        sentAt: report.sentAt,
        status: 'sent',
        dominantThemes: report.analysis?.dominantThemes || [],
        emotionalTone: report.analysis?.emotionalTone || 'neutral'
      })));
      
      totalCount += weeklyCount;
    }
    
    if ((type === 'all' || type === 'monthly') && MonthlyReport) {
      const monthlyReports = await MonthlyReport.find(filter)
        .sort({ sentAt: -1 })
        .skip((Number(page) - 1) * Number(limit))
        .limit(Number(limit))
        .lean();
      
      const monthlyCount = await MonthlyReport.countDocuments(filter);
      
      reports = reports.concat(monthlyReports.map(report => ({
        id: report._id.toString(),
        userId: report.userId,
        type: 'monthly',
        period: `${report.month}/${report.year}`,
        quotesCount: 0, // –ú–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ü–∏—Ç–∞—Ç—ã
        rating: report.feedback?.rating || null,
        sentAt: report.sentAt,
        status: 'sent',
        dominantThemes: [],
        emotionalTone: 'neutral'
      })));
      
      totalCount += monthlyCount;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    const userIds = [...new Set(reports.map(r => r.userId))];
    const users = await UserProfile.find(
      { userId: { $in: userIds } },
      { userId: 1, name: 1, telegramUsername: 1, email: 1 }
    ).lean();
    
    const userMap = users.reduce((map, user) => {
      map[user.userId] = user;
      return map;
    }, {});
    
    // –û–±–æ–≥–∞—â–∞–µ–º –æ—Ç—á–µ—Ç—ã –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const enrichedReports = reports.map(report => ({
      ...report,
      userName: userMap[report.userId]?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    }));
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É (–Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)
    let filteredReports = enrichedReports;
    if (search.trim()) {
      const searchLower = search.toLowerCase();
      filteredReports = enrichedReports.filter(report =>
        report.userName.toLowerCase().includes(searchLower) ||
        report.userId.toLowerCase().includes(searchLower)
      );
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    filteredReports.sort((a, b) => new Date(b.sentAt) - new Date(a.sentAt));
    
    res.json({
      success: true,
      data: {
        reports: filteredReports,
        pagination: {
          currentPage: Number(page),
          totalPages: Math.ceil(totalCount / Number(limit)),
          totalCount,
          hasNext: (Number(page) * Number(limit)) < totalCount,
          hasPrev: Number(page) > 1,
          limit: Number(limit)
        },
        filters: { type, dateFrom, dateTo, search }
      }
    });
    
  } catch (error) {
    logger.error(`üìñ Error getting reports list: ${error.message}`, error);
    res.status(500).json({
      success: false,
      error: 'Failed to get reports list',
      details: error.message
    });
  }
});

/**
 * POST /api/reports/weekly/generate
 * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
 */
router.post('/weekly/generate', checkModelsAvailable, async (req, res) => {
  try {
    const { weekNumber, year, userId } = req.body;
    
    logger.info(`üìñ Manual weekly reports generation requested`, { weekNumber, year, userId });

    if (!weeklyReportService) {
      return res.status(503).json({
        success: false,
        error: 'Weekly report service not available'
      });
    }
    
    if (userId) {
      // üîß FIX: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userProfile = await UserProfile.findOne({ userId }).lean();
      if (!userProfile) {
        return res.status(404).json({
          success: false,
          error: 'User not found',
          userId
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ü–∏—Ç–∞—Ç—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
      const currentWeek = weeklyReportService.getCurrentWeekNumber();
      const currentYear = new Date().getFullYear();
      
      const quotes = await Quote.find({
        userId,
        $or: [
          { weekNumber: currentWeek, yearNumber: currentYear },
          { 
            createdAt: { 
              $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            }
          }
        ]
      }).lean();

      if (quotes.length === 0) {
        return res.json({
          success: true,
          data: {
            message: 'No quotes found for this user in the current week',
            userId,
            weekNumber: currentWeek,
            year: currentYear
          }
        });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const reportData = await weeklyReportService.generateWeeklyReport(userId, quotes, userProfile);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const savedReport = await WeeklyReport.create({
        ...reportData,
        sentAt: new Date()
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
      let sendSuccess = false;
      if (telegramReportService && typeof telegramReportService.sendWeeklyReport === 'function') {
        try {
          sendSuccess = await telegramReportService.sendWeeklyReport(savedReport);
        } catch (telegramError) {
          logger.warn('Failed to send to Telegram:', telegramError.message);
        }
      }
      
      res.json({
        success: true,
        data: {
          report: {
            id: savedReport._id,
            userId: savedReport.userId,
            weekNumber: savedReport.weekNumber,
            year: savedReport.year,
            quotesCount: quotes.length,
            analysis: savedReport.analysis
          },
          telegramSent: sendSuccess,
          telegramAvailable: !!telegramReportService
        }
      });
    } else {
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (!cronService) {
        return res.status(503).json({
          success: false,
          error: 'Cron service not available for bulk generation'
        });
      }
      
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å bulk –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ cronService
      res.json({
        success: true,
        data: {
          message: 'Bulk generation not yet implemented',
          note: 'Use userId parameter for individual report generation'
        }
      });
    }
  } catch (error) {
    logger.error(`üìñ Error in manual weekly reports generation: ${error.message}`, error);
    res.status(500).json({
      success: false,
      error: 'Failed to generate weekly reports',
      details: error.message
    });
  }
});

/**
 * GET /api/reports/weekly/:userId/stats
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.get('/weekly/:userId/stats', checkModelsAvailable, async (req, res) => {
  try {
    const { userId } = req.params;
    
    logger.info(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –ø–æ–ª–Ω—ã—Ö –¥–Ω–µ–π –≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è)
    const today = new Date();
    const startOfToday = new Date(today.getFullYear(), today.getMonth(), today.getDate());
    const from = new Date(startOfToday);
    from.setDate(from.getDate() - 6); // 7 –¥–Ω–µ–π –≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è
    const to = new Date(startOfToday);
    to.setDate(to.getDate() + 1); // –¥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–≤—Ç—Ä–∞
    
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    const prevFrom = new Date(from);
    prevFrom.setDate(prevFrom.getDate() - 7);
    const prevTo = new Date(from);
    
    logger.info(`üìÖ –ü–µ—Ä–∏–æ–¥: —Å ${from.toISOString()} –¥–æ ${to.toISOString()}`);
    logger.info(`üìÖ –ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è: —Å ${prevFrom.toISOString()} –¥–æ ${prevTo.toISOString()}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ü–∏—Ç–∞—Ç—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
    const currentWeekQuotes = await Quote.find({
      userId,
      createdAt: { $gte: from, $lt: to }
    }).lean();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ü–∏—Ç–∞—Ç—ã –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é
    const prevWeekQuotes = await Quote.find({
      userId,
      createdAt: { $gte: prevFrom, $lt: prevTo }
    }).lean();
    
    // –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    const quotes = currentWeekQuotes.length;
    const uniqueAuthors = new Set(
      currentWeekQuotes
        .filter(q => q.author && q.author.trim())
        .map(q => q.author.trim())
    ).size;
    
    // –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç)
    const activeDays = new Set(
      currentWeekQuotes.map(q => q.createdAt.toISOString().split('T')[0])
    ).size;
    
    // –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–∏—Ç–∞—Ç–∞
    const latestQuoteAt = currentWeekQuotes.length > 0 
      ? Math.max(...currentWeekQuotes.map(q => new Date(q.createdAt).getTime()))
      : null;
    
    // –†–∞—Å—á–µ—Ç —Å–µ—Ä–∏–∏ –¥–Ω–µ–π (streak) - —Å—á–∏—Ç–∞–µ–º –Ω–∞–∑–∞–¥ –æ—Ç —Å–µ–≥–æ–¥–Ω—è
    let streakDays = 0;
    const quoteDateSet = new Set(
      currentWeekQuotes.map(q => q.createdAt.toISOString().split('T')[0])
    );
    
    for (let i = 0; i < 7; i++) {
      const checkDate = new Date(startOfToday);
      checkDate.setDate(checkDate.getDate() - i);
      const dateStr = checkDate.toISOString().split('T')[0];
      
      if (quoteDateSet.has(dateStr)) {
        streakDays++;
      } else {
        break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Å–µ—Ä–∏—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø—Ä–æ–ø—É—Å–∫–µ
      }
    }
    
    // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    const prevWeekQuotesCount = prevWeekQuotes.length;
    const prevWeekUniqueAuthors = new Set(
      prevWeekQuotes
        .filter(q => q.author && q.author.trim())
        .map(q => q.author.trim())
    ).size;
    const prevWeekActiveDays = new Set(
      prevWeekQuotes.map(q => q.createdAt.toISOString().split('T')[0])
    ).size;
    
    // –¶–µ–ª–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
    const targetQuotes = 14; // –ü–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 14
    const targetDays = 7;
    const progressQuotesPct = Math.min(Math.round((quotes / targetQuotes) * 100), 100);
    const progressDaysPct = Math.min(Math.round((activeDays / targetDays) * 100), 100);
    
    // –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ç–µ–º—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    let dominantThemes = [];
    try {
      const latestReport = await WeeklyReport.findOne({ userId })
        .sort({ sentAt: -1 })
        .lean();
      
      if (latestReport && latestReport.analysis && latestReport.analysis.dominantThemes) {
        dominantThemes = latestReport.analysis.dominantThemes;
      }
    } catch (reportError) {
      logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —Ç–µ–º: ${reportError.message}`);
    }
    
    const statsData = {
      from: from.toISOString(),
      to: to.toISOString(),
      quotes,
      uniqueAuthors,
      activeDays,
      streakDays,
      targetQuotes,
      progressQuotesPct,
      targetDays,
      progressDaysPct,
      dominantThemes,
      prevWeek: {
        quotes: prevWeekQuotesCount,
        uniqueAuthors: prevWeekUniqueAuthors,
        activeDays: prevWeekActiveDays
      },
      latestQuoteAt: latestQuoteAt ? new Date(latestQuoteAt).toISOString() : null
    };
    
    logger.info(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: ${quotes} —Ü–∏—Ç–∞—Ç, ${uniqueAuthors} –∞–≤—Ç–æ—Ä–æ–≤, ${activeDays} –¥–Ω–µ–π`);
    
    res.json({
      success: true,
      data: statsData
    });
    
  } catch (error) {
    logger.error(`üìñ Error getting weekly stats: ${error.message}`, error);
    res.status(500).json({
      success: false,
      error: 'Failed to get weekly statistics',
      details: error.message
    });
  }
});

/**
 * GET /api/reports/weekly/:userId
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.get('/weekly/:userId', checkModelsAvailable, async (req, res) => {
  try {
    const { userId } = req.params;
    const { limit = 10 } = req.query;
    
    logger.info(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    const reports = await WeeklyReport.find({ userId })
      .populate('quotes', 'text author category')
      .sort({ sentAt: -1 })
      .limit(Number(limit))
      .lean();
    
    res.json({
      success: true,
      data: {
        userId,
        reports: reports.map(report => ({
          id: report._id,
          weekNumber: report.weekNumber,
          year: report.year,
          quotesCount: Array.isArray(report.quotes) ? report.quotes.length : (report.quotesCount || 0),
          sentAt: report.sentAt,
          isRead: report.isRead,
          feedback: report.feedback,
          // Keep legacy top-level fields
          dominantThemes: report.analysis?.dominantThemes || [],
          emotionalTone: report.analysis?.emotionalTone || '',
          // NEW: full analysis block
          analysis: {
            summary: report.analysis?.summary || '',
            insights: report.analysis?.insights || '',
            emotionalTone: report.analysis?.emotionalTone || '',
            dominantThemes: report.analysis?.dominantThemes || []
          },
          recommendations: report.recommendations || []
        })),
        total: reports.length
      }
    });
  } catch (error) {
    logger.error(`üìñ Error getting user reports: ${error.message}`, error);
    res.status(500).json({
      success: false,
      error: 'Failed to get user reports',
      details: error.message
    });
  }
});

/**
 * GET /api/reports/telegram/status
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Telegram —Å–µ—Ä–≤–∏—Å–∞
 */
router.get('/telegram/status', async (req, res) => {
  try {
    logger.info('ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Telegram —Å–µ—Ä–≤–∏—Å–∞');
    
    const serviceInfo = {
      botStatus: telegramReportService ? 'active' : 'disabled',
      lastReportSent: WeeklyReport ? await WeeklyReport.findOne().sort({ sentAt: -1 }).select('sentAt') : null,
      nextScheduledReport: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 11:00 –ú–°–ö',
      serviceUptime: process.uptime(),
      checkedAt: new Date().toISOString(),
      available: {
        telegramReportService: !!telegramReportService,
        weeklyReportService: !!weeklyReportService,
        cronService: !!cronService
      }
    };
    
    res.json({
      success: true,
      data: serviceInfo
    });
  } catch (error) {
    logger.error(`üìñ Error getting Telegram service status: ${error.message}`, error);
    res.status(500).json({
      success: false,
      error: 'Failed to get Telegram service status',
      details: error.message
    });
  }
});

/**
 * GET /api/reports/cron/status
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ cron –∑–∞–¥–∞—á
 */
router.get('/cron/status', async (req, res) => {
  try {
    logger.info('‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ cron –∑–∞–¥–∞—á');
    
    const status = {
      weeklyReports: {
        enabled: !!cronService,
        schedule: '0 11 * * 0', // –ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 11:00
        nextRun: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 11:00 –ú–°–ö',
        lastRun: null
      },
      monthlyReports: {
        enabled: !!cronService && !!monthlyReportService,
        schedule: '0 12 1 * *', // 1 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 12:00
        nextRun: '1 —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞, 12:00 –ú–°–ö',
        lastRun: null
      },
      reminders: {
        enabled: !!cronService,
        schedule: '0 9,19 * * *', // –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00 –∏ 19:00
        nextRun: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00 –∏ 19:00 –ú–°–ö',
        lastRun: null
      }
    };
    
    const schedule = {
      timezone: 'Europe/Moscow',
      jobs: Object.keys(status).length,
      cronServiceAvailable: !!cronService
    };
    
    res.json({
      success: true,
      data: {
        status,
        schedule,
        timezone: 'Europe/Moscow',
        currentTime: new Date().toISOString(),
        moscowTime: new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })
      }
    });
  } catch (error) {
    logger.error(`üìñ Error getting cron status: ${error.message}`, error);
    res.status(500).json({
      success: false,
      error: 'Failed to get cron status',
      details: error.message
    });
  }
});

// Fallback endpoints for graceful degradation
router.use((req, res, next) => {
  logger.warn(`üìñ Reports API: Unknown endpoint ${req.method} ${req.path}`);
  res.status(404).json({
    success: false,
    error: 'Reports endpoint not found',
    path: req.path,
    availableEndpoints: [
      'GET /api/reports/stats',
      'GET /api/reports/analytics/overview',
      'GET /api/reports/popular-themes',
      'GET /api/reports/list',
      'GET /api/reports/weekly/:userId',
      'POST /api/reports/weekly/generate',
      'GET /api/reports/telegram/status',
      'GET /api/reports/cron/status'
    ]
  });
});

module.exports = router;
/**
 * @fileoverview API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ä–∞–∑–±–æ—Ä–æ–≤ –∫–Ω–∏–≥ –ê–Ω–Ω—ã –ë—É—Å–µ–ª
 * @description CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è BookCatalog –º–æ–¥–µ–ª–∏
 * @author Reader Bot Team
 */

const express = require('express');
const BookCatalog = require('../models/BookCatalog');
const { adminAuth } = require('../middleware/adminAuth');
const logger = require('../utils/logger');
const { normalizeCategoriesInput } = require('../utils/categoryMapper');

const router = express.Router();

/**
 * @typedef {Object} BookCatalogRequest
 * @property {string} title - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏/–∫—É—Ä—Å–∞
 * @property {string} [author] - –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏
 * @property {string} description - –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–±–æ—Ä–∞
 * @property {string} price - –¶–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "$X"
 * @property {string[]} categories - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @property {string[]} targetThemes - –¶–µ–ª–µ–≤—ã–µ —Ç–µ–º—ã
 * @property {string} bookSlug - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è UTM
 * @property {boolean} [isActive] - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
 * @property {number} [priority] - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-10)
 * @property {string} reasoning - –ü—Ä–∏—á–∏–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
 */

/**
 * GET /api/reader/bookCatalog
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
 */
router.get('/', async (req, res) => {
  try {
    const {
      page = 1,
      limit = 10,
      category,
      isActive,
      search,
      sortBy = 'priority',
      sortOrder = 'desc'
    } = req.query;

    // –°—Ç—Ä–æ–∏–º —Ñ–∏–ª—å—Ç—Ä
    const filter = {};
    
    if (category) {
      filter.categories = category;
    }
    
    if (isActive !== undefined) {
      filter.isActive = isActive === 'true';
    }
    
    if (search) {
      filter.$or = [
        { title: { $regex: search, $options: 'i' } },
        { description: { $regex: search, $options: 'i' } },
        { author: { $regex: search, $options: 'i' } }
      ];
    }

    // –°—Ç—Ä–æ–∏–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    const sort = {};
    sort[sortBy] = sortOrder === 'desc' ? -1 : 1;

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const [books, total] = await Promise.all([
      BookCatalog.find(filter)
        .sort(sort)
        .limit(Number(limit))
        .skip((Number(page) - 1) * Number(limit)),
      BookCatalog.countDocuments(filter)
    ]);

    res.json({
      success: true,
      data: books,
      pagination: {
        currentPage: Number(page),
        totalPages: Math.ceil(total / Number(limit)),
        totalItems: total,
        itemsPerPage: Number(limit)
      }
    });

  } catch (error) {
    logger.error('Error fetching book catalog:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–Ω–∏–≥',
      error: error.message
    });
  }
});

/**
 * GET /api/reader/bookCatalog/stats
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ç–∞–ª–æ–≥–∞
 */
router.get('/stats', async (req, res) => {
  try {
    const stats = await BookCatalog.getStats();
    
    res.json({
      success: true,
      data: stats
    });

  } catch (error) {
    logger.error('Error fetching book catalog stats:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞',
      error: error.message
    });
  }
});

/**
 * GET /api/reader/bookCatalog/recommendations
 * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–∞–º
 */
router.get('/recommendations', async (req, res) => {
  try {
    const { themes, limit = 2 } = req.query;
    
    let recommendations;
    
    if (themes) {
      const themesArray = Array.isArray(themes) ? themes : [themes];
      recommendations = await BookCatalog.getRecommendationsByThemes(themesArray, Number(limit));
    } else {
      recommendations = await BookCatalog.getUniversalRecommendations(Number(limit));
    }

    res.json({
      success: true,
      data: recommendations
    });

  } catch (error) {
    logger.error('Error fetching book recommendations:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
      error: error.message
    });
  }
});

/**
 * GET /api/reader/bookCatalog/:id
 * –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É –ø–æ ID
 */
router.get('/:id', async (req, res) => {
  try {
    const book = await BookCatalog.findById(req.params.id);
    
    if (!book) {
      return res.status(404).json({
        success: false,
        message: '–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    res.json({
      success: true,
      data: book
    });

  } catch (error) {
    logger.error('Error fetching book:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥–∏',
      error: error.message
    });
  }
});

/**
 * GET /api/reader/bookCatalog/slug/:slug
 * –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É –ø–æ slug
 */
router.get('/slug/:slug', async (req, res) => {
  try {
    const book = await BookCatalog.getBySlug(req.params.slug);
    
    if (!book) {
      return res.status(404).json({
        success: false,
        message: '–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    res.json({
      success: true,
      data: book
    });

  } catch (error) {
    logger.error('Error fetching book by slug:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥–∏',
      error: error.message
    });
  }
});

/**
 * POST /api/reader/bookCatalog
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
 */
router.post('/', adminAuth, async (req, res) => {
  try {
    const bookData = req.body;
    
    // Normalize categories before validation
    bookData.categories = normalizeCategoriesInput(bookData);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const requiredFields = ['title', 'description', 'price', 'categories', 'bookSlug', 'reasoning'];
    for (const field of requiredFields) {
      if (!bookData[field]) {
        return res.status(400).json({
          success: false,
          message: `–ü–æ–ª–µ ${field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug
    const existingBook = await BookCatalog.findOne({ bookSlug: bookData.bookSlug });
    if (existingBook) {
      return res.status(400).json({
        success: false,
        message: '–ö–Ω–∏–≥–∞ —Å —Ç–∞–∫–∏–º slug —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      });
    }

    const book = new BookCatalog(bookData);
    await book.save();

    logger.info(`üìö Created book catalog entry: ${book.title} (${book.bookSlug})`);

    res.status(201).json({
      success: true,
      data: book,
      message: '–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥'
    });

  } catch (error) {
    logger.error('Error creating book catalog entry:', error);
    
    if (error.name === 'ValidationError') {
      return res.status(400).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
        errors: Object.values(error.errors).map(err => err.message)
      });
    }

    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ',
      error: error.message
    });
  }
});

/**
 * PUT /api/reader/bookCatalog/:id
 * –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–∏–≥—É –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
 */
router.put('/:id', adminAuth, async (req, res) => {
  try {
    const bookData = req.body;
    
    // Normalize categories if provided
    if (bookData.categories || bookData.category || bookData.theme || bookData.targetThemes) {
      bookData.categories = normalizeCategoriesInput(bookData);
    }
    
    // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è slug, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    if (bookData.bookSlug) {
      const existingBook = await BookCatalog.findOne({ 
        bookSlug: bookData.bookSlug,
        _id: { $ne: req.params.id }
      });
      
      if (existingBook) {
        return res.status(400).json({
          success: false,
          message: '–ö–Ω–∏–≥–∞ —Å —Ç–∞–∫–∏–º slug —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
        });
      }
    }

    const book = await BookCatalog.findByIdAndUpdate(
      req.params.id,
      bookData,
      { new: true, runValidators: true }
    );

    if (!book) {
      return res.status(404).json({
        success: false,
        message: '–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    logger.info(`üìö Updated book catalog entry: ${book.title} (${book.bookSlug})`);

    res.json({
      success: true,
      data: book,
      message: '–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
    });

  } catch (error) {
    logger.error('Error updating book catalog entry:', error);
    
    if (error.name === 'ValidationError') {
      return res.status(400).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
        errors: Object.values(error.errors).map(err => err.message)
      });
    }

    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ',
      error: error.message
    });
  }
});

/**
 * PATCH /api/reader/bookCatalog/:id/toggle
 * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–Ω–∏–≥–∏
 */
router.patch('/:id/toggle', adminAuth, async (req, res) => {
  try {
    const book = await BookCatalog.findById(req.params.id);
    
    if (!book) {
      return res.status(404).json({
        success: false,
        message: '–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    book.isActive = !book.isActive;
    await book.save();

    logger.info(`üìö Toggled book status: ${book.title} -> ${book.isActive ? 'active' : 'inactive'}`);

    res.json({
      success: true,
      data: book,
      message: `–ö–Ω–∏–≥–∞ ${book.isActive ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'}`
    });

  } catch (error) {
    logger.error('Error toggling book status:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–Ω–∏–≥–∏',
      error: error.message
    });
  }
});

/**
 * DELETE /api/reader/bookCatalog/:id
 * –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
 */
router.delete('/:id', adminAuth, async (req, res) => {
  try {
    const book = await BookCatalog.findByIdAndDelete(req.params.id);
    
    if (!book) {
      return res.status(404).json({
        success: false,
        message: '–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    logger.info(`üìö Deleted book catalog entry: ${book.title} (${book.bookSlug})`);

    res.json({
      success: true,
      message: '–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞'
    });

  } catch (error) {
    logger.error('Error deleting book catalog entry:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞',
      error: error.message
    });
  }
});

/**
 * POST /api/reader/bookCatalog/import
 * –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥–∏ –∏–∑ JSON
 */
router.post('/import', adminAuth, async (req, res) => {
  try {
    const { books } = req.body;
    
    if (!Array.isArray(books) || books.length === 0) {
      return res.status(400).json({
        success: false,
        message: '–ú–∞—Å—Å–∏–≤ –∫–Ω–∏–≥ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
    }

    const results = {
      created: 0,
      updated: 0,
      errors: []
    };

    for (const bookData of books) {
      try {
        const existingBook = await BookCatalog.findOne({ bookSlug: bookData.bookSlug });
        
        if (existingBook) {
          await BookCatalog.findByIdAndUpdate(existingBook._id, bookData);
          results.updated++;
        } else {
          const book = new BookCatalog(bookData);
          await book.save();
          results.created++;
        }
      } catch (error) {
        results.errors.push({
          book: bookData.title || 'Unknown',
          error: error.message
        });
      }
    }

    logger.info(`üìö Import completed: ${results.created} created, ${results.updated} updated, ${results.errors.length} errors`);

    res.json({
      success: true,
      data: results,
      message: `–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: —Å–æ–∑–¥–∞–Ω–æ ${results.created}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${results.updated}`
    });

  } catch (error) {
    logger.error('Error importing books:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–Ω–∏–≥',
      error: error.message
    });
  }
});

/**
 * GET /api/reader/bookCatalog/export
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥–∏ –≤ JSON
 */
router.get('/export', adminAuth, async (req, res) => {
  try {
    const books = await BookCatalog.find({});
    
    res.json({
      success: true,
      data: books,
      count: books.length
    });

  } catch (error) {
    logger.error('Error exporting books:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–Ω–∏–≥',
      error: error.message
    });
  }
});

/**
 * POST /api/reader/bookCatalog/import-from-knowledge/:id
 * –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ Knowledge
 */
router.post('/import-from-knowledge/:id', adminAuth, async (req, res) => {
  try {
    const knowledgeId = req.params.id;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç Knowledge
    const KnowledgeDocument = require('../models/knowledge');
    const knowledgeDoc = await KnowledgeDocument.findById(knowledgeId);
    
    if (!knowledgeDoc) {
      return res.status(404).json({
        success: false,
        message: '–î–æ–∫—É–º–µ–Ω—Ç Knowledge –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    // –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ pipe-separated —Ç–∞–±–ª–∏—Ü—É
    const content = knowledgeDoc.content;
    const lines = content.split('\n');
    
    const results = {
      created: 0,
      updated: 0,
      errors: []
    };
    
    // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    const BYN_TO_RUB = parseFloat(process.env.BYN_TO_RUB) || 30;
    
    for (const line of lines) {
      const trimmedLine = line.trim();
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (!trimmedLine) continue;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–∞ –∏ –ø–∞–π–ø–∞ (–Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã)
      if (!/^\s*\d+\s*\|/.test(trimmedLine)) continue;
      
      try {
        // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–∞–π–ø–∞–º
        const columns = trimmedLine.split('|').map(col => col.trim());
        
        if (columns.length < 6) {
          results.errors.push({
            line: trimmedLine,
            error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ'
          });
          continue;
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è: ‚Ññ | –ù–∞–∑–≤–∞–Ω–∏–µ | –ê–≤—Ç–æ—Ä | –¶–µ–Ω–∞ BYN | –°—Å—ã–ª–∫–∞ | –û–ø–∏—Å–∞–Ω–∏–µ | –¢–µ–º—ã | ...
        const [, title, author, priceBynStr, url, description, themes] = columns;
        
        if (!title || !priceBynStr) {
          results.errors.push({
            line: trimmedLine,
            error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Ü–µ–Ω–∞'
          });
          continue;
        }
        
        // –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∑–∞–ø—è—Ç—É—é –∏ —Ç–æ—á–∫—É –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)
        const priceByn = parseFloat(priceBynStr.replace(',', '.'));
        if (isNaN(priceByn) || priceByn < 0) {
          results.errors.push({
            book: title,
            error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ BYN'
          });
          continue;
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö
        const priceRub = Math.round(priceByn * BYN_TO_RUB);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º bookSlug –∏–∑ URL –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        let bookSlug;
        if (url && url.trim()) {
          const urlParts = url.trim().split('/');
          bookSlug = urlParts[urlParts.length - 1] || urlParts[urlParts.length - 2];
          bookSlug = bookSlug.replace(/[^a-z0-9_-]/gi, '').toLowerCase();
        }
        
        if (!bookSlug || bookSlug.length < 2) {
          // Fallback: —Å–æ–∑–¥–∞–µ–º slug –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
          bookSlug = title.toLowerCase()
            .replace(/[^a-za-z0-9–∞-—è—ë\s]/g, '')
            .replace(/\s+/g, '-')
            .replace(/[–∞-—è—ë]/g, (char) => {
              const map = {
                '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
                '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
                '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
                '—Ñ': 'f', '—Ö': 'h', '—Ü': 'c', '—á': 'ch', '—à': 'sh', '—â': 'sch',
                '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
              };
              return map[char] || char;
            })
            .replace(/-+/g, '-')  // Replace multiple dashes with single dash
            .replace(/^-|-$/g, '') // Remove leading/trailing dashes
            .substring(0, 50);
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const { mapThemesToCategory } = require('../utils/categoryMapper');
        const category = mapThemesToCategory(themes || '');
        
        // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–º—ã –Ω–∞ –º–∞—Å—Å–∏–≤
        const targetThemes = themes ? themes.split(',').map(theme => theme.trim()) : [];
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
        const bookData = {
          title: title.trim(),
          author: author ? author.trim() : null,
          description: description ? description.trim() : '',
          price: '$10', // legacy –ø–æ–ª–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          priceRub,
          priceByn,
          categories: [category],
          targetThemes,
          bookSlug,
          reasoning: `–†–∞–∑–±–æ—Ä "${title.trim()}" –ø–æ–º–æ–∂–µ—Ç –≥–ª—É–±–∂–µ –ø–æ–Ω—è—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–¥–µ–∏ –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Ö –≤ –∂–∏–∑–Ω–∏.`
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–Ω–∏–≥–∞ —Å —Ç–∞–∫–∏–º slug
        const existingBook = await BookCatalog.findOne({ bookSlug });
        
        if (existingBook) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–∏–≥—É
          await BookCatalog.findByIdAndUpdate(
            existingBook._id, 
            bookData, 
            { runValidators: true }
          );
          results.updated++;
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É
          const book = new BookCatalog(bookData);
          await book.save();
          results.created++;
        }
        
      } catch (error) {
        results.errors.push({
          line: trimmedLine,
          error: error.message
        });
      }
    }
    
    logger.info(`üìö Knowledge import completed: ${results.created} created, ${results.updated} updated, ${results.errors.length} errors`);
    
    res.json({
      success: true,
      data: results,
      message: `–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: —Å–æ–∑–¥–∞–Ω–æ ${results.created}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${results.updated}`
    });
    
  } catch (error) {
    logger.error('Error importing from knowledge:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ Knowledge',
      error: error.message
    });
  }
});

module.exports = router;
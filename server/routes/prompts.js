/**
 * Prompts management API routes for Reader Bot
 * @file server/routes/prompts.js
 * ü§ñ API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏ Claude AI
 */

const express = require('express');
const router = express.Router();
const { v4: uuidv4 } = require('uuid');

// –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
const promptService = require('../services/promptService');
const claudeService = require('../services/claudeService');

/**
 * üìã GET /api/reader/prompts - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
 */
router.get('/', async (req, res) => {
    try {
        console.log('ü§ñ GET /prompts - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤');
        console.log('ü§ñ Query params:', req.query);

        const {
            page = 1,
            limit = 10,
            q = '',
            category = '',
            language = '',
            status = '',
            sortBy = 'createdAt',
            sortOrder = 'desc'
        } = req.query;

        // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const filters = {};
        
        if (q) {
            filters.$or = [
                { name: { $regex: q, $options: 'i' } },
                { content: { $regex: q, $options: 'i' } },
                { description: { $regex: q, $options: 'i' } }
            ];
        }
        
        if (category) filters.category = category;
        if (language) filters.language = language;
        if (status) filters.status = status;

        console.log('ü§ñ –ü—Ä–∏–º–µ–Ω—è–µ–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:', filters);

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        const result = await promptService.getPrompts({
            filters,
            page: parseInt(page),
            limit: parseInt(limit),
            sortBy,
            sortOrder
        });

        console.log(`ü§ñ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–º–ø—Ç–æ–≤: ${result.prompts.length}`);

        res.json({
            success: true,
            data: result.prompts,
            pagination: {
                currentPage: parseInt(page),
                totalPages: Math.ceil(result.total / parseInt(limit)),
                totalDocs: result.total,
                limit: parseInt(limit),
                startDoc: ((parseInt(page) - 1) * parseInt(limit)) + 1,
                endDoc: Math.min(parseInt(page) * parseInt(limit), result.total)
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤: ' + error.message
        });
    }
});

/**
 * üìä GET /api/reader/prompts/stats - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–º–ø—Ç–æ–≤
 */
router.get('/stats', async (req, res) => {
    try {
        console.log('ü§ñ GET /prompts/stats - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');

        const stats = await promptService.getPromptsStats();
        
        console.log('ü§ñ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤:', stats);

        res.json({
            success: true,
            data: stats
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ' + error.message
        });
    }
});

/**
 * üëÅÔ∏è GET /api/reader/prompts/:id - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
 */
router.get('/:id', async (req, res) => {
    try {
        console.log(`ü§ñ GET /prompts/${req.params.id} - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞`);

        const prompt = await promptService.getPromptById(req.params.id);
        
        if (!prompt) {
            return res.status(404).json({
                success: false,
                error: '–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        res.json({
            success: true,
            data: prompt
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: ' + error.message
        });
    }
});

/**
 * ‚ûï POST /api/reader/prompts - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
 */
router.post('/', async (req, res) => {
    try {
        console.log('ü§ñ POST /prompts - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞');
        console.log('ü§ñ Request body:', req.body);

        const {
            name,
            category,
            content,
            variables = [],
            language = 'ru',
            status = 'active',
            priority = 'normal',
            description = ''
        } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!name || !category || !content) {
            return res.status(400).json({
                success: false,
                error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: name, category, content'
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        if (content.length < 10) {
            return res.status(400).json({
                success: false,
                error: '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤'
            });
        }

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–∞
        const promptData = {
            id: uuidv4(),
            name: name.trim(),
            category,
            content: content.trim(),
            variables: Array.isArray(variables) ? variables : [],
            language,
            status,
            priority,
            description: description.trim(),
            createdAt: new Date(),
            updatedAt: new Date()
        };

        console.log('ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞:', promptData.name);

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
        const createdPrompt = await promptService.createPrompt(promptData);

        console.log('‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', createdPrompt.id);

        res.status(201).json({
            success: true,
            data: createdPrompt
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: ' + error.message
        });
    }
});

/**
 * ‚úèÔ∏è PUT /api/reader/prompts/:id - –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç
 */
router.put('/:id', async (req, res) => {
    try {
        console.log(`ü§ñ PUT /prompts/${req.params.id} - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞`);

        const {
            name,
            category,
            content,
            variables,
            language,
            status,
            priority,
            description
        } = req.body;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
        const existingPrompt = await promptService.getPromptById(req.params.id);
        if (!existingPrompt) {
            return res.status(404).json({
                success: false,
                error: '–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const updateData = {
            ...req.body,
            updatedAt: new Date()
        };

        // –í–∞–ª–∏–¥–∞—Ü–∏—è, –µ—Å–ª–∏ –ø–æ–ª—è –ø–µ—Ä–µ–¥–∞–Ω—ã
        if (name !== undefined && !name.trim()) {
            return res.status(400).json({
                success: false,
                error: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
            });
        }

        if (content !== undefined && content.trim().length < 10) {
            return res.status(400).json({
                success: false,
                error: '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤'
            });
        }

        console.log('ü§ñ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞:', req.params.id);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
        const updatedPrompt = await promptService.updatePrompt(req.params.id, updateData);

        console.log('‚úÖ –ü—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');

        res.json({
            success: true,
            data: updatedPrompt
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: ' + error.message
        });
    }
});

/**
 * üóëÔ∏è DELETE /api/reader/prompts/:id - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–ø—Ç
 */
router.delete('/:id', async (req, res) => {
    try {
        console.log(`ü§ñ DELETE /prompts/${req.params.id} - —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
        const existingPrompt = await promptService.getPromptById(req.params.id);
        if (!existingPrompt) {
            return res.status(404).json({
                success: false,
                error: '–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
        await promptService.deletePrompt(req.params.id);

        console.log('‚úÖ –ü—Ä–æ–º–ø—Ç —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');

        res.json({
            success: true,
            message: '–ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: ' + error.message
        });
    }
});

/**
 * üß™ POST /api/reader/prompts/test - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç
 */
router.post('/test', async (req, res) => {
    try {
        console.log('ü§ñ POST /prompts/test - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞');

        const { promptId, variables = {} } = req.body;

        if (!promptId) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å promptId'
            });
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
        const prompt = await promptService.getPromptById(promptId);
        if (!prompt) {
            return res.status(404).json({
                success: false,
                error: '–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        console.log('ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞:', prompt.name);
        
        const startTime = Date.now();

        try {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
            let processedPrompt = prompt.content;
            
            // –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–º–ø—Ç–µ
            if (variables && typeof variables === 'object') {
                for (const [key, value] of Object.entries(variables)) {
                    const placeholder = `{${key}}`;
                    processedPrompt = processedPrompt.replace(new RegExp(placeholder, 'g'), value);
                }
            }

            console.log('ü§ñ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:', processedPrompt.substring(0, 100) + '...');

            // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Claude API
            const claudeResponse = await claudeService.generateResponse(processedPrompt, {
                platform: 'admin_test',
                userId: 'test_user'
            });

            const executionTime = Date.now() - startTime;

            console.log(`‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${executionTime}ms`);

            res.json({
                success: true,
                data: {
                    success: true,
                    processedPrompt,
                    result: claudeResponse.message,
                    executionTime: `${executionTime}ms`,
                    usage: claudeResponse.usage || null
                }
            });

        } catch (claudeError) {
            const executionTime = Date.now() - startTime;
            
            console.error('‚ùå –û—à–∏–±–∫–∞ Claude API:', claudeError);

            res.json({
                success: true,
                data: {
                    success: false,
                    processedPrompt: processedPrompt || prompt.content,
                    error: claudeError.message,
                    executionTime: `${executionTime}ms`
                }
            });
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: ' + error.message
        });
    }
});

/**
 * ‚úÖ POST /api/reader/prompts/validate-all - –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã
 */
router.post('/validate-all', async (req, res) => {
    try {
        console.log('ü§ñ POST /prompts/validate-all - –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ–º–ø—Ç–æ–≤');

        const { prompts: allPrompts } = await promptService.getPrompts({
            filters: {},
            page: 1,
            limit: 1000 // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã
        });

        let validCount = 0;
        let invalidCount = 0;
        const validationResults = [];

        for (const prompt of allPrompts) {
            try {
                // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
                const isValid = prompt.name && 
                               prompt.content && 
                               prompt.content.length >= 10 &&
                               prompt.category;

                if (isValid) {
                    validCount++;
                } else {
                    invalidCount++;
                    validationResults.push({
                        id: prompt.id,
                        name: prompt.name,
                        errors: [
                            !prompt.name ? '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ' : null,
                            !prompt.content ? '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ' : null,
                            prompt.content && prompt.content.length < 10 ? '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ' : null,
                            !prompt.category ? '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—è' : null
                        ].filter(Boolean)
                    });
                }
            } catch (error) {
                invalidCount++;
                validationResults.push({
                    id: prompt.id,
                    name: prompt.name,
                    errors: [`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.message}`]
                });
            }
        }

        console.log(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${validCount}/${allPrompts.length} –≤–∞–ª–∏–¥–Ω—ã`);

        res.json({
            success: true,
            total: allPrompts.length,
            valid: validCount,
            invalid: invalidCount,
            validationResults: invalidCount > 0 ? validationResults : []
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: ' + error.message
        });
    }
});

/**
 * üì§ GET /api/reader/prompts/export - –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ JSON
 */
router.get('/export', async (req, res) => {
    try {
        console.log('ü§ñ GET /prompts/export - —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–º–ø—Ç–æ–≤');

        const { prompts } = await promptService.getPrompts({
            filters: {},
            page: 1,
            limit: 10000 // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã
        });

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        const exportData = {
            exportDate: new Date().toISOString(),
            totalPrompts: prompts.length,
            prompts: prompts.map(prompt => ({
                id: prompt.id,
                name: prompt.name,
                category: prompt.category,
                content: prompt.content,
                variables: prompt.variables,
                language: prompt.language,
                status: prompt.status,
                priority: prompt.priority,
                description: prompt.description,
                createdAt: prompt.createdAt,
                updatedAt: prompt.updatedAt
            }))
        };

        console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤: ${prompts.length} –ø—Ä–æ–º–ø—Ç–æ–≤`);

        res.setHeader('Content-Type', 'application/json');
        res.setHeader('Content-Disposition', `attachment; filename="reader-prompts-${new Date().toISOString().split('T')[0]}.json"`);
        res.json(exportData);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–º–ø—Ç–æ–≤:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–º–ø—Ç–æ–≤: ' + error.message
        });
    }
});

module.exports = router;
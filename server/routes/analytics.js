/**
 * @fileoverview API —Ä–æ—É—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @description –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç REST API –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
 * @author g1orgi89
 */

const express = require('express');
const router = express.Router();
const analyticsService = require('../services/analyticsService');

/**
 * @typedef {import('../types/reader').DashboardStats} DashboardStats
 * @typedef {import('../types/reader').RetentionData} RetentionData
 */

/**
 * GET /api/analytics/dashboard
 * –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞
 * @param {Object} req - Express request
 * @param {Object} req.query - Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @param {string} [req.query.period='7d'] - –ü–µ—Ä–∏–æ–¥ (1d, 7d, 30d, 90d)
 * @param {Object} res - Express response
 */
router.get('/dashboard', async (req, res) => {
  try {
    const { period = '7d' } = req.query;
    
    console.log(`üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: ${period}`);
    
    const stats = await analyticsService.getDashboardStats(period);
    
    res.json({
      success: true,
      data: stats,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
    res.status(500).json({ 
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

/**
 * GET /api/analytics/retention
 * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ retention –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º
 * @param {Object} req - Express request
 * @param {Object} res - Express response
 */
router.get('/retention', async (req, res) => {
  try {
    console.log('üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ retention');
    
    const retentionData = await analyticsService.getUserRetentionStats();
    
    res.json({
      success: true,
      data: retentionData,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è retention —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ 
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ retention',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

/**
 * GET /api/analytics/top-content
 * –¢–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç: –∞–≤—Ç–æ—Ä—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ü–∏—Ç–∞—Ç—ã
 * @param {Object} req - Express request
 * @param {Object} req.query - Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @param {string} [req.query.period='30d'] - –ü–µ—Ä–∏–æ–¥
 * @param {Object} res - Express response
 */
router.get('/top-content', async (req, res) => {
  try {
    const { period = '30d' } = req.query;
    
    console.log(`üìä –ó–∞–ø—Ä–æ—Å —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: ${period}`);
    
    const topContent = await analyticsService.getTopQuotesAndAuthors(period);
    
    res.json({
      success: true,
      data: topContent,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
    res.status(500).json({ 
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

/**
 * POST /api/analytics/track-utm
 * –¢—Ä–µ–∫–∏–Ω–≥ UTM –∫–ª–∏–∫–æ–≤
 * @param {Object} req - Express request
 * @param {Object} req.body - –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞
 * @param {string} req.body.utm_source - UTM –∏—Å—Ç–æ—á–Ω–∏–∫
 * @param {string} req.body.utm_medium - UTM –º–µ–¥–∏—É–º
 * @param {string} req.body.utm_campaign - UTM –∫–∞–º–ø–∞–Ω–∏—è
 * @param {string} [req.body.utm_content] - UTM –∫–æ–Ω—Ç–µ–Ω—Ç
 * @param {string} req.body.user_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} res - Express response
 */
router.post('/track-utm', async (req, res) => {
  try {
    const { 
      utm_source, 
      utm_medium, 
      utm_campaign, 
      utm_content, 
      user_id 
    } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!utm_source || !utm_medium || !utm_campaign || !user_id) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ user_id'
      });
    }

    console.log(`üìä –¢—Ä–µ–∫–∏–Ω–≥ UTM –∫–ª–∏–∫–∞: ${utm_campaign} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id}`);

    await analyticsService.trackUTMClick({
      utm_source,
      utm_medium,
      utm_campaign,
      utm_content,
      user_agent: req.headers['user-agent'],
      referrer: req.headers.referer,
      ip_address: req.ip,
      session_id: req.sessionID
    }, user_id);

    res.json({
      success: true,
      message: 'UTM –∫–ª–∏–∫ –∑–∞–ø–∏—Å–∞–Ω'
    });
  } catch (error) {
    console.error('üìä –û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ UTM –∫–ª–∏–∫–∞:', error);
    res.status(500).json({ 
      success: false,
      error: '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ UTM –∫–ª–∏–∫–∞',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

/**
 * POST /api/analytics/track-promo
 * –¢—Ä–µ–∫–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
 * @param {Object} req - Express request
 * @param {Object} req.body - –î–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
 * @param {string} req.body.promo_code - –ü—Ä–æ–º–æ–∫–æ–¥
 * @param {string} req.body.user_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number} req.body.order_value - –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞
 * @param {string} [req.body.source] - –ò—Å—Ç–æ—á–Ω–∏–∫
 * @param {string} [req.body.report_type] - –¢–∏–ø –æ—Ç—á–µ—Ç–∞
 * @param {Array} [req.body.books_purchased] - –ö—É–ø–ª–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
 * @param {Object} res - Express response
 */
router.post('/track-promo', async (req, res) => {
  try {
    const { 
      promo_code, 
      user_id, 
      order_value, 
      source, 
      report_type, 
      books_purchased 
    } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!promo_code || !user_id || !order_value) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: promo_code, user_id, order_value'
      });
    }

    if (order_value <= 0) {
      return res.status(400).json({
        success: false,
        error: 'order_value –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'
      });
    }

    console.log(`üìä –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${promo_code} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user_id}, —Å—É–º–º–∞ ${order_value}`);

    await analyticsService.trackPromoCodeUsage(promo_code, user_id, order_value, {
      source,
      reportType: report_type,
      booksPurchased: books_purchased
    });

    res.json({
      success: true,
      message: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞–ø–∏—Å–∞–Ω–æ'
    });
  } catch (error) {
    console.error('üìä –û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
    res.status(500).json({ 
      success: false,
      error: '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

/**
 * POST /api/analytics/track-action
 * –¢—Ä–µ–∫–∏–Ω–≥ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @param {Object} req - Express request
 * @param {Object} req.body - –î–∞–Ω–Ω—ã–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏
 * @param {string} req.body.user_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} req.body.action - –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
 * @param {Object} [req.body.metadata] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * @param {Object} res - Express response
 */
router.post('/track-action', async (req, res) => {
  try {
    const { user_id, action, metadata = {} } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!user_id || !action) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: user_id, action'
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
    const validActions = [
      'quote_added',
      'link_clicked', 
      'promo_used',
      'report_viewed',
      'feedback_given',
      'achievement_unlocked',
      'search_performed',
      'settings_changed'
    ];

    if (!validActions.includes(action)) {
      return res.status(400).json({
        success: false,
        error: `–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: ${validActions.join(', ')}`
      });
    }

    console.log(`üìä –¢—Ä–µ–∫–∏–Ω–≥ –¥–µ–π—Å—Ç–≤–∏—è: ${action} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id}`);

    await analyticsService.trackUserAction(user_id, action, metadata);

    res.json({
      success: true,
      message: '–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø–∏—Å–∞–Ω–æ'
    });
  } catch (error) {
    console.error('üìä –û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –¥–µ–π—Å—Ç–≤–∏—è:', error);
    res.status(500).json({ 
      success: false,
      error: '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

/**
 * GET /api/analytics/stats/overview
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
 * @param {Object} req - Express request
 * @param {Object} req.query - Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @param {string} [req.query.period='30d'] - –ü–µ—Ä–∏–æ–¥
 * @param {Object} res - Express response
 */
router.get('/stats/overview', async (req, res) => {
  try {
    const { period = '30d' } = req.query;
    
    console.log(`üìä –ó–∞–ø—Ä–æ—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: ${period}`);
    
    const [dashboardStats, retentionData, topContent] = await Promise.all([
      analyticsService.getDashboardStats(period),
      analyticsService.getUserRetentionStats(),
      analyticsService.getTopQuotesAndAuthors(period)
    ]);

    res.json({
      success: true,
      data: {
        dashboard: dashboardStats,
        retention: retentionData,
        topContent,
        exportDate: new Date().toISOString(),
        period
      }
    });
  } catch (error) {
    console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ 
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

/**
 * GET /api/analytics/health
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 * @param {Object} req - Express request
 * @param {Object} res - Express response
 */
router.get('/health', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π
    const { UTMClick, PromoCodeUsage, UserAction } = require('../models/analytics');
    
    const checks = {
      utmClickModel: await UTMClick.countDocuments().limit(1),
      promoUsageModel: await PromoCodeUsage.countDocuments().limit(1),
      userActionModel: await UserAction.countDocuments().limit(1),
      analyticsService: analyticsService.name === 'AnalyticsService'
    };

    const isHealthy = Object.values(checks).every(check => 
      typeof check === 'number' ? check >= 0 : check === true
    );

    res.status(isHealthy ? 200 : 503).json({
      success: isHealthy,
      service: 'Analytics API',
      timestamp: new Date().toISOString(),
      checks
    });
  } catch (error) {
    console.error('üìä –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
    res.status(503).json({
      success: false,
      service: 'Analytics API',
      error: '–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
      timestamp: new Date().toISOString()
    });
  }
});

module.exports = router;
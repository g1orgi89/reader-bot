/**
 * @fileoverview API —Ä–æ—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @author g1orgi89
 */

const express = require('express');
const router = express.Router();
const UserProfile = require('../models/userProfile');
const Quote = require('../models/quote');
const WeeklyReport = require('../models/weeklyReport');
const MonthlyReport = require('../models/monthlyReport');
const { requireAdmin } = require('../middleware/auth');

/**
 * @typedef {import('../types/reader').UserProfile} UserProfile
 * @typedef {import('../types/reader').UserListResponse} UserListResponse
 * @typedef {import('../types/reader').UserDetailResponse} UserDetailResponse
 */

/**
 * GET /api/users
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
router.get('/', requireAdmin, async (req, res) => {
  try {
    const {
      page = 1,
      limit = 20,
      search = '',
      source = '',
      status = '',
      dateFilter = '',
      sortBy = 'registeredAt',
      sortOrder = 'desc'
    } = req.query;

    console.log('üë• –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', { page, limit, search, source, status, dateFilter });

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
    let filter = {};

    // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ email
    if (search) {
      filter.$or = [
        { name: { $regex: search, $options: 'i' } },
        { email: { $regex: search, $options: 'i' } },
        { telegramUsername: { $regex: search, $options: 'i' } }
      ];
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
    if (source) {
      filter.source = source;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    switch (status) {
      case 'active':
        filter.isActive = true;
        filter.isBlocked = false;
        break;
      case 'inactive':
        filter.$or = [
          { isActive: false },
          { isBlocked: true }
        ];
        break;
      case 'completed_onboarding':
        filter.isOnboardingComplete = true;
        break;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    if (dateFilter) {
      const now = new Date();
      let startDate;

      switch (dateFilter) {
        case 'today':
          startDate = new Date();
          startDate.setHours(0, 0, 0, 0);
          break;
        case 'week':
          startDate = new Date();
          startDate.setDate(startDate.getDate() - 7);
          break;
        case 'month':
          startDate = new Date();
          startDate.setMonth(startDate.getMonth() - 1);
          break;
      }

      if (startDate) {
        filter.registeredAt = { $gte: startDate };
      }
    }

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const pageNum = parseInt(page);
    const limitNum = parseInt(limit);
    const skip = (pageNum - 1) * limitNum;

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const sortOptions = {};
    sortOptions[sortBy] = sortOrder === 'desc' ? -1 : 1;

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    const [users, totalCount] = await Promise.all([
      UserProfile.find(filter)
        .select('userId name email source registeredAt lastActiveAt isOnboardingComplete isActive isBlocked statistics.totalQuotes telegramUsername')
        .sort(sortOptions)
        .skip(skip)
        .limit(limitNum)
        .lean(),
      UserProfile.countDocuments(filter)
    ]);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const usersWithStats = await Promise.all(
      users.map(async (user) => {
        // –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∏–∑ —Ü–∏—Ç–∞—Ç)
        const lastQuote = await Quote.findOne({ userId: user.userId })
          .sort({ createdAt: -1 })
          .select('createdAt')
          .lean();

        // –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const now = new Date();
        const daysSinceRegistration = Math.floor((now - new Date(user.registeredAt)) / (1000 * 60 * 60 * 24));
        const daysSinceLastActive = user.lastActiveAt 
          ? Math.floor((now - new Date(user.lastActiveAt)) / (1000 * 60 * 60 * 24))
          : null;

        let activityStatus = 'inactive';
        if (user.isActive && !user.isBlocked) {
          if (daysSinceLastActive <= 1) {
            activityStatus = 'active';
          } else if (daysSinceLastActive <= 7) {
            activityStatus = 'recent';
          }
        }

        return {
          ...user,
          daysSinceRegistration,
          daysSinceLastActive,
          activityStatus,
          lastQuoteDate: lastQuote?.createdAt || null,
          quotesCount: user.statistics?.totalQuotes || 0
        };
      })
    );

    const totalPages = Math.ceil(totalCount / limitNum);

    /** @type {UserListResponse} */
    const response = {
      users: usersWithStats,
      pagination: {
        currentPage: pageNum,
        totalPages,
        totalCount,
        hasNextPage: pageNum < totalPages,
        hasPrevPage: pageNum > 1
      },
      filters: {
        search,
        source,
        status,
        dateFilter
      }
    };

    res.json(response);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
  }
});

/**
 * GET /api/users/stats
 * –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
router.get('/stats', requireAdmin, async (req, res) => {
  try {
    console.log('üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');

    const now = new Date();
    const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
    const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);

    const [
      totalUsers,
      activeUsers,
      newUsersThisWeek,
      newUsersThisMonth,
      completedOnboarding,
      sourceStats,
      retentionStats
    ] = await Promise.all([
      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      UserProfile.countDocuments({}),
      
      // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é)
      UserProfile.countDocuments({
        lastActiveAt: { $gte: weekAgo },
        isActive: true,
        isBlocked: false
      }),
      
      // –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
      UserProfile.countDocuments({
        registeredAt: { $gte: weekAgo }
      }),
      
      // –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –º–µ—Å—è—Ü
      UserProfile.countDocuments({
        registeredAt: { $gte: monthAgo }
      }),
      
      // –ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
      UserProfile.countDocuments({
        isOnboardingComplete: true
      }),
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
      UserProfile.aggregate([
        { $group: { _id: '$source', count: { $sum: 1 } } },
        { $sort: { count: -1 } }
      ]),
      
      // Retention rate (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
      UserProfile.aggregate([
        {
          $match: {
            registeredAt: { $gte: monthAgo }
          }
        },
        {
          $group: {
            _id: null,
            totalRegistered: { $sum: 1 },
            stillActive: {
              $sum: {
                $cond: [
                  { $gte: ['$lastActiveAt', weekAgo] },
                  1,
                  0
                ]
              }
            }
          }
        }
      ])
    ]);

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ retention rate
    const retentionRate = retentionStats.length > 0 && retentionStats[0].totalRegistered > 0
      ? Math.round((retentionStats[0].stillActive / retentionStats[0].totalRegistered) * 100)
      : 0;

    // –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    const prevWeekStart = new Date(weekAgo.getTime() - 7 * 24 * 60 * 60 * 1000);
    const newUsersPrevWeek = await UserProfile.countDocuments({
      registeredAt: { $gte: prevWeekStart, $lt: weekAgo }
    });

    const newUsersChange = newUsersPrevWeek > 0 
      ? Math.round(((newUsersThisWeek - newUsersPrevWeek) / newUsersPrevWeek) * 100)
      : 0;

    const stats = {
      totalUsers,
      activeUsers,
      newUsersThisWeek,
      newUsersThisMonth,
      completedOnboarding,
      retentionRate,
      newUsersChange,
      sourceStats,
      generatedAt: new Date()
    };

    res.json(stats);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
  }
});

/**
 * GET /api/users/:userId
 * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
router.get('/:userId', requireAdmin, async (req, res) => {
  try {
    const { userId } = req.params;
    console.log('üë§ –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    const user = await UserProfile.findOne({ userId }).lean();
    
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const [quotes, weeklyReports, monthlyReports, recentQuotes] = await Promise.all([
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏—Ç–∞—Ç
      Quote.aggregate([
        { $match: { userId } },
        {
          $group: {
            _id: null,
            totalQuotes: { $sum: 1 },
            categories: { $push: '$category' },
            authors: { $push: '$author' }
          }
        }
      ]),
      
      // –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
      WeeklyReport.find({ userId })
        .sort({ weekNumber: -1 })
        .limit(5)
        .select('weekNumber year sentAt feedback')
        .lean(),
      
      // –ú–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
      MonthlyReport.find({ userId })
        .sort({ year: -1, month: -1 })
        .limit(3)
        .select('month year sentAt feedback')
        .lean(),
      
      // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
      Quote.find({ userId })
        .sort({ createdAt: -1 })
        .limit(10)
        .select('text author category createdAt')
        .lean()
    ]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–∏—Ç–∞—Ç
    const quoteStats = quotes.length > 0 ? quotes[0] : { totalQuotes: 0, categories: [], authors: [] };
    
    // –ü–æ–¥—Å—á–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∞–≤—Ç–æ—Ä–æ–≤
    const categoryCount = {};
    const authorCount = {};
    
    quoteStats.categories.forEach(cat => {
      if (cat) categoryCount[cat] = (categoryCount[cat] || 0) + 1;
    });
    
    quoteStats.authors.forEach(author => {
      if (author) authorCount[author] = (authorCount[author] || 0) + 1;
    });

    const topCategories = Object.entries(categoryCount)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5);
      
    const topAuthors = Object.entries(authorCount)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5);

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    const daysSinceRegistration = Math.floor((new Date() - new Date(user.registeredAt)) / (1000 * 60 * 60 * 24));
    const daysSinceLastActive = user.lastActiveAt 
      ? Math.floor((new Date() - new Date(user.lastActiveAt)) / (1000 * 60 * 60 * 24))
      : null;

    /** @type {UserDetailResponse} */
    const userDetail = {
      ...user,
      daysSinceRegistration,
      daysSinceLastActive,
      quoteStats: {
        total: quoteStats.totalQuotes,
        topCategories,
        topAuthors,
        recent: recentQuotes
      },
      reports: {
        weekly: weeklyReports,
        monthly: monthlyReports
      },
      engagement: {
        quotesPerDay: daysSinceRegistration > 0 ? (quoteStats.totalQuotes / daysSinceRegistration).toFixed(2) : 0,
        streakStatus: user.statistics?.currentStreak > 0 ? 'active' : 'inactive',
        longestStreak: user.statistics?.longestStreak || 0
      }
    };

    res.json(userDetail);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
});

/**
 * GET /api/users/export
 * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
router.get('/export', requireAdmin, async (req, res) => {
  try {
    const { format = 'json', includeQuotes = 'false' } = req.query;
    console.log('üì• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', { format, includeQuotes });

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await UserProfile.find({})
      .select('-botState -telegramData')
      .lean();

    let exportData = users;

    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—ã
    if (includeQuotes === 'true') {
      exportData = await Promise.all(
        users.map(async (user) => {
          const quotes = await Quote.find({ userId: user.userId })
            .select('text author category createdAt')
            .lean();
          
          return {
            ...user,
            quotes
          };
        })
      );
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
    if (format === 'csv') {
      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ CSV
      const csv = convertToCSV(exportData);
      
      res.setHeader('Content-Type', 'text/csv');
      res.setHeader('Content-Disposition', 'attachment; filename=reader-users.csv');
      res.send(csv);
    } else {
      // JSON —Ñ–æ—Ä–º–∞—Ç
      res.setHeader('Content-Type', 'application/json');
      res.setHeader('Content-Disposition', 'attachment; filename=reader-users.json');
      res.json({
        exportedAt: new Date(),
        totalUsers: exportData.length,
        includeQuotes: includeQuotes === 'true',
        users: exportData
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö' });
  }
});

/**
 * POST /api/users/:userId/message
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
router.post('/:userId/message', requireAdmin, async (req, res) => {
  try {
    const { userId } = req.params;
    const { message, messageType = 'announcement' } = req.body;

    console.log('üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', { userId, messageType });

    if (!message || message.trim().length === 0) {
      return res.status(400).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
    }

    const user = await UserProfile.findOne({ userId });
    
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    console.log(`üì® –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${user.name} (${userId}): ${message}`);

    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:
    // await telegramBot.sendMessage(userId, message);

    res.json({
      success: true,
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
      sentTo: {
        userId: user.userId,
        name: user.name,
        telegramUsername: user.telegramUsername
      },
      sentAt: new Date()
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' });
  }
});

/**
 * PUT /api/users/:userId
 * –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.put('/:userId', requireAdmin, async (req, res) => {
  try {
    const { userId } = req.params;
    const { name, email, isActive, isBlocked, notes } = req.body;

    console.log('‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { userId, updates: Object.keys(req.body) });

    const updateData = {};
    
    if (name !== undefined) updateData.name = name;
    if (email !== undefined) updateData.email = email;
    if (isActive !== undefined) updateData.isActive = isActive;
    if (isBlocked !== undefined) updateData.isBlocked = isBlocked;
    
    const user = await UserProfile.findOneAndUpdate(
      { userId },
      updateData,
      { new: true, runValidators: true }
    );

    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json({
      success: true,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω',
      user: user.toSummary()
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
});

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ CSV
 * @param {Array} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
 * @returns {string} CSV —Å—Ç—Ä–æ–∫–∞
 */
function convertToCSV(data) {
  if (!data.length) return '';

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = [
    'userId',
    'name', 
    'email',
    'source',
    'registeredAt',
    'lastActiveAt',
    'isOnboardingComplete',
    'isActive',
    'totalQuotes',
    'currentStreak',
    'longestStreak'
  ];

  // –°–æ–∑–¥–∞–µ–º CSV
  const csvContent = [
    headers.join(','),
    ...data.map(user => [
      user.userId,
      `"${user.name || ''}"`,
      user.email,
      user.source,
      user.registeredAt,
      user.lastActiveAt || '',
      user.isOnboardingComplete,
      user.isActive,
      user.statistics?.totalQuotes || 0,
      user.statistics?.currentStreak || 0,
      user.statistics?.longestStreak || 0
    ].join(','))
  ].join('\n');

  return csvContent;
}

module.exports = router;
/**
 * HTTP —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ quotes API endpoints
 * @file server/utils/test-quotes-http.js
 */

const http = require('http');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const HOST = 'localhost';
const PORT = 3002;
const ADMIN_CREDENTIALS = Buffer.from('admin:password123').toString('base64');

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å
 * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
 */
function makeRequest(options) {
    return new Promise((resolve, reject) => {
        const req = http.request(options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                try {
                    const response = {
                        statusCode: res.statusCode,
                        headers: res.headers,
                        data: data ? JSON.parse(data) : null
                    };
                    resolve(response);
                } catch (error) {
                    resolve({
                        statusCode: res.statusCode,
                        headers: res.headers,
                        data: data,
                        parseError: error.message
                    });
                }
            });
        });
        
        req.on('error', (error) => {
            reject(error);
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        req.setTimeout(5000, () => {
            req.destroy();
            reject(new Error('Request timeout'));
        });
        
        req.end();
    });
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç quotes API endpoints
 */
async function testQuotesAPI() {
    console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Quotes API endpoints...\n');
    
    const endpoints = [
        {
            name: 'Health Check',
            path: '/api/health',
            authRequired: false
        },
        {
            name: 'Quotes List',
            path: '/api/quotes',
            authRequired: true
        },
        {
            name: 'Quotes Statistics',
            path: '/api/quotes/statistics',
            authRequired: true
        },
        {
            name: 'Quotes Analytics',
            path: '/api/quotes/analytics',
            authRequired: true
        },
        {
            name: 'Quote Details',
            path: '/api/quotes/Q001',
            authRequired: true
        }
    ];
    
    for (const endpoint of endpoints) {
        console.log(`üì° –¢–µ—Å—Ç–∏—Ä—É—é: ${endpoint.name} (${endpoint.path})`);
        
        try {
            const options = {
                hostname: HOST,
                port: PORT,
                path: endpoint.path,
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (endpoint.authRequired) {
                options.headers['Authorization'] = `Basic ${ADMIN_CREDENTIALS}`;
            }
            
            const response = await makeRequest(options);
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if (response.statusCode === 200) {
                console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ (${response.statusCode})`);
                if (response.data && response.data.success) {
                    console.log(`   üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
                } else {
                    console.log(`   ‚ö†Ô∏è –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:`, response.data);
                }
            } else if (response.statusCode === 404) {
                console.log(`   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω (404) - —Ä–æ—É—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);
            } else if (response.statusCode === 401) {
                console.log(`   üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (401)`);
            } else if (response.statusCode === 500) {
                console.log(`   üí• –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (500):`, response.data?.message || response.data);
            } else {
                console.log(`   ‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å (${response.statusCode}):`, response.data);
            }
            
        } catch (error) {
            if (error.code === 'ECONNREFUSED') {
                console.log(`   ‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${HOST}:${PORT}`);
                break;
            } else {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
            }
        }
        
        console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    }
    
    console.log('üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm start');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –ø–æ—Ä—Ç 3002 —Å–≤–æ–±–æ–¥–µ–Ω');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ—É—Ç–æ–≤');
    console.log('4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: node server/utils/test-quotes-api.js');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
    testQuotesAPI().catch(console.error);
}

module.exports = { testQuotesAPI, makeRequest };

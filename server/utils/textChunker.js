/**
 * @fileoverview –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —á–∞–Ω–∫–∏–Ω–≥–∞ (—Ä–∞–∑–±–∏–µ–Ω–∏—è) —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —á–∞—Å—Ç–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ–ª—å—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Qdrant
 * @author Shrooms Development Team
 */

const logger = require('./logger');

/**
 * @typedef {Object} ChunkOptions
 * @property {number} [chunkSize=500] - –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
 * @property {number} [overlap=100] - –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
 * @property {string} [separator='\n\n'] - –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è
 * @property {boolean} [preserveParagraphs=true] - –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
 * @property {number} [minChunkSize=50] - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
 */

/**
 * @typedef {Object} DocumentChunk
 * @property {string} id - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —á–∞–Ω–∫–∞ (originalId_chunk_N)
 * @property {string} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞–Ω–∫–∞
 * @property {Object} metadata - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —á–∞–Ω–∫–∞
 * @property {string} metadata.originalId - ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @property {number} metadata.chunkIndex - –ò–Ω–¥–µ–∫—Å —á–∞–Ω–∫–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 0)
 * @property {number} metadata.totalChunks - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @property {number} metadata.startPosition - –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
 * @property {number} metadata.endPosition - –ö–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
 * @property {string} metadata.title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @property {string} metadata.category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @property {string} metadata.language - –Ø–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @property {string[]} metadata.tags - –¢–µ–≥–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @property {Date} metadata.createdAt - –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @property {Date} metadata.updatedAt - –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —á–∞–Ω–∫–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * @class TextChunker
 */
class TextChunker {
  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä TextChunker —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   * @constructor
   */
  constructor() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è OpenAI embeddings
    this.defaultOptions = {
      chunkSize: 500,       // –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö embeddings
      overlap: 100,         // –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      separator: '\n\n',    // –†–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º
      preserveParagraphs: true,  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
      minChunkSize: 50      // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
    };
  }

  /**
   * –†–∞–∑–±–∏–≤–∞–µ—Ç –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ —á–∞–Ω–∫–∏
   * @param {Object} document - –î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —á–∞–Ω–∫–∏–Ω–≥–∞
   * @param {string} document.id - ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
   * @param {string} document.content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
   * @param {Object} document.metadata - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
   * @param {ChunkOptions} [options={}] - –û–ø—Ü–∏–∏ —á–∞–Ω–∫–∏–Ω–≥–∞
   * @returns {DocumentChunk[]} –ú–∞—Å—Å–∏–≤ —á–∞–Ω–∫–æ–≤
   */
  chunkDocument(document, options = {}) {
    try {
      if (!document || !document.id || !document.content) {
        logger.warn('üçÑ –î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —á–∞–Ω–∫–∏–Ω–≥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return [];
      }

      const config = { ...this.defaultOptions, ...options };
      const content = document.content.trim();
      
      // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º
      if (content.length <= config.chunkSize) {
        logger.debug(`üçÑ –î–æ–∫—É–º–µ–Ω—Ç ${document.id} —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è —á–∞–Ω–∫–∏–Ω–≥–∞ (${content.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
        return [{
          id: `${document.id}_chunk_0`,
          content: content,
          metadata: {
            ...document.metadata,
            originalId: document.id,
            chunkIndex: 0,
            totalChunks: 1,
            startPosition: 0,
            endPosition: content.length
          }
        }];
      }

      logger.info(`üçÑ –ß–∞–Ω–∫–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${document.id} (${content.length} —Å–∏–º–≤–æ–ª–æ–≤) —Å —Ä–∞–∑–º–µ—Ä–æ–º —á–∞–Ω–∫–∞ ${config.chunkSize}`);

      const chunks = this._createChunks(content, config);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∞–Ω–∫–∏ –≤ DocumentChunk –æ–±—ä–µ–∫—Ç—ã
      const documentChunks = chunks.map((chunk, index) => ({
        id: `${document.id}_chunk_${index}`,
        content: chunk.text,
        metadata: {
          ...document.metadata,
          originalId: document.id,
          chunkIndex: index,
          totalChunks: chunks.length,
          startPosition: chunk.start,
          endPosition: chunk.end
        }
      }));

      logger.info(`üçÑ –î–æ–∫—É–º–µ–Ω—Ç ${document.id} —Ä–∞–∑–±–∏—Ç –Ω–∞ ${documentChunks.length} —á–∞–Ω–∫–æ–≤`);
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      documentChunks.forEach((chunk, index) => {
        logger.debug(`üçÑ –ß–∞–Ω–∫ ${index}: ${chunk.content.length} —Å–∏–º–≤–æ–ª–æ–≤ (–ø–æ–∑–∏—Ü–∏–∏ ${chunk.metadata.startPosition}-${chunk.metadata.endPosition})`);
      });

      return documentChunks;
    } catch (error) {
      logger.error(`üçÑ –û—à–∏–±–∫–∞ –ø—Ä–∏ —á–∞–Ω–∫–∏–Ω–≥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${document.id}: ${error.message}`);
      return [];
    }
  }

  /**
   * –†–∞–∑–±–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —á–∞–Ω–∫–∏
   * @param {Object[]} documents - –ú–∞—Å—Å–∏–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —á–∞–Ω–∫–∏–Ω–≥–∞
   * @param {ChunkOptions} [options={}] - –û–ø—Ü–∏–∏ —á–∞–Ω–∫–∏–Ω–≥–∞
   * @returns {DocumentChunk[]} –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤
   */
  chunkDocuments(documents, options = {}) {
    try {
      if (!Array.isArray(documents) || documents.length === 0) {
        logger.warn('üçÑ –ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –º–∞—Å—Å–∏–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —á–∞–Ω–∫–∏–Ω–≥–∞');
        return [];
      }

      logger.info(`üçÑ –ù–∞—á–∏–Ω–∞–µ–º —á–∞–Ω–∫–∏–Ω–≥ ${documents.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
      
      const allChunks = [];
      let totalOriginalSize = 0;
      let totalChunks = 0;

      for (const document of documents) {
        const documentChunks = this.chunkDocument(document, options);
        allChunks.push(...documentChunks);
        
        totalOriginalSize += document.content?.length || 0;
        totalChunks += documentChunks.length;
      }

      const averageChunkSize = totalChunks > 0 ? Math.round(totalOriginalSize / totalChunks) : 0;
      
      logger.info(`üçÑ –ß–∞–Ω–∫–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: ${documents.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ‚Üí ${totalChunks} —á–∞–Ω–∫–æ–≤ (—Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: ${averageChunkSize} —Å–∏–º–≤–æ–ª–æ–≤)`);

      return allChunks;
    } catch (error) {
      logger.error(`üçÑ –û—à–∏–±–∫–∞ –ø—Ä–∏ —á–∞–Ω–∫–∏–Ω–≥–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${error.message}`);
      return [];
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —á–∞–Ω–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
   * @private
   * @param {string} text - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
   * @param {ChunkOptions} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–∞–Ω–∫–∏–Ω–≥–∞
   * @returns {Object[]} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —á–∞–Ω–∫–æ–≤ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
   */
  _createChunks(text, config) {
    const chunks = [];
    
    if (config.preserveParagraphs) {
      // –†–∞–∑–±–∏–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
      return this._createParagraphAwareChunks(text, config);
    } else {
      // –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É
      return this._createSimpleChunks(text, config);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —á–∞–Ω–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
   * @private
   * @param {string} text - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
   * @param {ChunkOptions} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–∞–Ω–∫–∏–Ω–≥–∞
   * @returns {Object[]} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —á–∞–Ω–∫–æ–≤
   */
  _createParagraphAwareChunks(text, config) {
    const chunks = [];
    const paragraphs = text.split(config.separator);
    
    let currentChunk = '';
    let currentStart = 0;
    let processedLength = 0;

    for (let i = 0; i < paragraphs.length; i++) {
      const paragraph = paragraphs[i].trim();
      if (!paragraph) continue;

      const newChunkContent = currentChunk ? 
        currentChunk + config.separator + paragraph : 
        paragraph;

      // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
      if (newChunkContent.length > config.chunkSize && currentChunk) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫
        if (currentChunk.length >= config.minChunkSize) {
          chunks.push({
            text: currentChunk,
            start: currentStart,
            end: currentStart + currentChunk.length
          });
        }

        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —á–∞–Ω–∫ —Å overlap
        const overlapText = this._getOverlapText(currentChunk, config.overlap);
        currentStart = processedLength - overlapText.length;
        currentChunk = overlapText + (overlapText ? config.separator : '') + paragraph;
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞–Ω–∫—É
        currentChunk = newChunkContent;
        if (!currentStart) {
          currentStart = processedLength;
        }
      }

      processedLength += paragraph.length + config.separator.length;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
    if (currentChunk && currentChunk.length >= config.minChunkSize) {
      chunks.push({
        text: currentChunk,
        start: currentStart,
        end: currentStart + currentChunk.length
      });
    }

    return chunks;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —á–∞–Ω–∫–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
   * @private
   * @param {string} text - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
   * @param {ChunkOptions} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–∞–Ω–∫–∏–Ω–≥–∞
   * @returns {Object[]} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —á–∞–Ω–∫–æ–≤
   */
  _createSimpleChunks(text, config) {
    const chunks = [];
    let start = 0;

    while (start < text.length) {
      let end = Math.min(start + config.chunkSize, text.length);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≥—Ä–∞–Ω–∏—Ü—É —Å–ª–æ–≤–∞ –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è
      if (end < text.length) {
        const lastSpace = text.lastIndexOf(' ', end);
        const lastNewline = text.lastIndexOf('\n', end);
        const boundary = Math.max(lastSpace, lastNewline);
        
        if (boundary > start + config.minChunkSize) {
          end = boundary;
        }
      }

      const chunkText = text.slice(start, end).trim();
      
      if (chunkText.length >= config.minChunkSize) {
        chunks.push({
          text: chunkText,
          start: start,
          end: end
        });
      }

      // –°–ª–µ–¥—É—é—â–∏–π —á–∞–Ω–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —É—á–µ—Ç–æ–º overlap
      start = Math.max(start + 1, end - config.overlap);
    }

    return chunks;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏
   * @private
   * @param {string} text - –¢–µ–∫—Å—Ç —á–∞–Ω–∫–∞
   * @param {number} overlapSize - –†–∞–∑–º–µ—Ä –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
   * @returns {string} –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
   */
  _getOverlapText(text, overlapSize) {
    if (!text || overlapSize <= 0) return '';
    
    const startPos = Math.max(0, text.length - overlapSize);
    let overlapText = text.slice(startPos);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const sentenceBoundary = overlapText.search(/[.!?]\s+/);
    if (sentenceBoundary > 0 && sentenceBoundary < overlapSize / 2) {
      overlapText = overlapText.slice(sentenceBoundary + 2);
    }
    
    return overlapText.trim();
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —á–∞–Ω–∫–æ–≤
   * @param {DocumentChunk[]} chunks - –ß–∞–Ω–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
   * @returns {Object|null} –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
   */
  reconstructDocument(chunks) {
    try {
      if (!Array.isArray(chunks) || chunks.length === 0) {
        return null;
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞–Ω–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
      const sortedChunks = chunks
        .filter(chunk => chunk.metadata?.originalId)
        .sort((a, b) => a.metadata.chunkIndex - b.metadata.chunkIndex);

      if (sortedChunks.length === 0) {
        return null;
      }

      const firstChunk = sortedChunks[0];
      const originalId = firstChunk.metadata.originalId;

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞–Ω–∫–æ–≤
      const content = sortedChunks.map(chunk => chunk.content).join('\n\n');

      return {
        id: originalId,
        content: content,
        metadata: {
          title: firstChunk.metadata.title,
          category: firstChunk.metadata.category,
          language: firstChunk.metadata.language,
          tags: firstChunk.metadata.tags,
          createdAt: firstChunk.metadata.createdAt,
          updatedAt: firstChunk.metadata.updatedAt
        }
      };
    } catch (error) {
      logger.error(`üçÑ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —á–∞–Ω–∫–æ–≤: ${error.message}`);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞–Ω–∫–∏–Ω–≥–∞
   * @param {DocumentChunk[]} chunks - –ß–∞–Ω–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞–Ω–∫–∏–Ω–≥–∞
   */
  getChunkingStats(chunks) {
    try {
      if (!Array.isArray(chunks) || chunks.length === 0) {
        return {
          totalChunks: 0,
          uniqueDocuments: 0,
          averageChunkSize: 0,
          totalContentLength: 0
        };
      }

      const uniqueDocuments = new Set(chunks.map(chunk => chunk.metadata?.originalId)).size;
      const totalContentLength = chunks.reduce((sum, chunk) => sum + chunk.content.length, 0);
      const averageChunkSize = Math.round(totalContentLength / chunks.length);

      const chunkSizes = chunks.map(chunk => chunk.content.length);
      const minChunkSize = Math.min(...chunkSizes);
      const maxChunkSize = Math.max(...chunkSizes);

      return {
        totalChunks: chunks.length,
        uniqueDocuments,
        averageChunkSize,
        totalContentLength,
        minChunkSize,
        maxChunkSize,
        chunkSizeDistribution: {
          small: chunkSizes.filter(size => size < 200).length,
          medium: chunkSizes.filter(size => size >= 200 && size < 500).length,
          large: chunkSizes.filter(size => size >= 500).length
        }
      };
    } catch (error) {
      logger.error(`üçÑ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞–Ω–∫–∏–Ω–≥–∞: ${error.message}`);
      return {
        totalChunks: 0,
        uniqueDocuments: 0,
        averageChunkSize: 0,
        totalContentLength: 0,
        error: error.message
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
module.exports = new TextChunker();
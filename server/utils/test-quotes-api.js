#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å quotes API
 * @file server/utils/test-quotes-api.js
 */

console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ quotes API...');

try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    console.log('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
    
    const express = require('express');
    console.log('‚úÖ express - OK');
    
    const router = express.Router();
    console.log('‚úÖ express.Router - OK');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º middleware
    const { basicAdminAuth } = require('../middleware/auth');
    console.log('‚úÖ basicAdminAuth middleware - OK');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º logger
    const logger = require('./logger');
    console.log('‚úÖ logger - OK');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç quotes —Ä–æ—É—Ç–æ–≤
    const quotesRoutes = require('../api/quotes');
    console.log('‚úÖ quotes routes - OK');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ Express Router
    if (typeof quotesRoutes === 'function') {
        console.log('‚úÖ quotes routes –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç router');
    } else {
        console.log('‚ùå quotes routes –ù–ï —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç router!');
        console.log('Type:', typeof quotesRoutes);
        console.log('Value:', quotesRoutes);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ—É—Ç—ã
    console.log('\nüìã –ê–Ω–∞–ª–∏–∑ —Ä–æ—É—Ç–æ–≤:');
    if (quotesRoutes.stack) {
        quotesRoutes.stack.forEach((layer, index) => {
            const methods = Object.keys(layer.route?.methods || {}).join(', ');
            const path = layer.route?.path || 'unknown';
            console.log(`${index + 1}. ${methods.toUpperCase()} ${path}`);
        });
    } else {
        console.log('‚ùå –†–æ—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ router.stack –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    console.log('\nüéâ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:');
    console.error(error.message);
    console.error(error.stack);
    process.exit(1);
}

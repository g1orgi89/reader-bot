/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @file server/config/index.js
 */

require('dotenv').config();

/**
 * @typedef {Object} AppConfig
 * @property {Object} app - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @property {Object} database - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * @property {Object} claude - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Claude API
 * @property {Object} vectorStore - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã
 * @property {Object} security - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * @property {Object} logging - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @property {Object} cors - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS
 * @property {Object} features - –§–ª–∞–≥–∏ —Ñ—É–Ω–∫—Ü–∏–π
 */

// –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = [
  'MONGODB_URI',
  'ANTHROPIC_API_KEY'
];

const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
if (missingVars.length > 0) {
  console.error(`‚ùå Missing required environment variables: ${missingVars.join(', ')}`);
  console.error('Please check your .env file or environment configuration');
}

/**
 * @type {AppConfig}
 */
const config = {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  app: {
    name: 'Reader Bot',
    version: process.env.npm_package_version || '1.0.0',
    environment: process.env.NODE_ENV || 'development',
    port: parseInt(process.env.PORT) || 3002, // üìñ –ò–∑–º–µ–Ω–∏–ª–∏ –ø–æ—Ä—Ç –Ω–∞ 3002 –¥–ª—è Reader Bot
    apiPrefix: process.env.API_PREFIX || '/api',
    isDevelopment: process.env.NODE_ENV === 'development',
    isProduction: process.env.NODE_ENV === 'production',
    maxRequestsPerSecond: parseInt(process.env.MAX_REQUESTS_PER_SECOND) || 10,
    requestTimeout: parseInt(process.env.REQUEST_TIMEOUT) || 30000
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  database: {
    uri: process.env.MONGODB_URI || 'mongodb://localhost:27017/reader-bot', // üìñ –ò–∑–º–µ–Ω–∏–ª–∏ –∏–º—è –ë–î
    options: {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      serverSelectionTimeoutMS: parseInt(process.env.DB_SERVER_SELECTION_TIMEOUT) || 10000,
      socketTimeoutMS: parseInt(process.env.DB_SOCKET_TIMEOUT) || 45000,
      maxPoolSize: parseInt(process.env.DB_MAX_POOL_SIZE) || 10,
      minPoolSize: parseInt(process.env.DB_MIN_POOL_SIZE) || 1,
      maxIdleTimeMS: parseInt(process.env.DB_MAX_IDLE_TIME) || 30000,
      bufferMaxEntries: 0,
      bufferCommands: false
    },
    maxReconnectAttempts: parseInt(process.env.DB_MAX_RECONNECT_ATTEMPTS) || 5,
    reconnectDelay: parseInt(process.env.DB_RECONNECT_DELAY) || 1000
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Claude API
  claude: {
    apiKey: process.env.ANTHROPIC_API_KEY,
    model: process.env.CLAUDE_MODEL || 'claude-3-haiku-20240307',
    maxTokens: parseInt(process.env.CLAUDE_MAX_TOKENS) || 1000,
    temperature: parseFloat(process.env.CLAUDE_TEMPERATURE) || 0.7,
    apiUrl: process.env.CLAUDE_API_URL || 'https://api.anthropic.com',
    timeout: parseInt(process.env.CLAUDE_TIMEOUT) || 30000,
    maxRetries: parseInt(process.env.CLAUDE_MAX_RETRIES) || 3,
    retryDelay: parseInt(process.env.CLAUDE_RETRY_DELAY) || 1000
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  vectorStore: {
    url: process.env.VECTOR_DB_URL || 'http://localhost:6333',
    collectionName: process.env.VECTOR_COLLECTION_NAME || 'reader_knowledge', // üìñ –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    timeout: parseInt(process.env.VECTOR_DB_TIMEOUT) || 10000,
    batchSize: parseInt(process.env.VECTOR_BATCH_SIZE) || 100,
    searchLimit: parseInt(process.env.VECTOR_SEARCH_LIMIT) || 5
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI (–¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤)
  openai: {
    apiKey: process.env.OPENAI_API_KEY,
    embeddingModel: process.env.EMBEDDING_MODEL || 'text-embedding-ada-002',
    timeout: parseInt(process.env.OPENAI_TIMEOUT) || 30000
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  security: {
    jwtSecret: process.env.JWT_SECRET || 'your-secret-key',
    jwtExpiresIn: process.env.JWT_EXPIRES_IN || '7d',
    bcryptRounds: parseInt(process.env.BCRYPT_ROUNDS) || 12,
    adminUsername: process.env.ADMIN_USERNAME || 'admin',
    adminPassword: process.env.ADMIN_PASSWORD || 'password123',
    adminToken: process.env.ADMIN_TOKEN || 'default-admin-token',
    apiKeys: process.env.API_KEYS ? process.env.API_KEYS.split(',') : ['api-key-1'],
    sessionSecret: process.env.SESSION_SECRET || 'session-secret',
    cookieMaxAge: parseInt(process.env.SESSION_COOKIE_MAX_AGE) || 86400000 // 24 —á–∞—Å–∞
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS
  cors: {
    origin: process.env.CORS_ORIGIN || 'http://localhost:3002', // üìñ –û–±–Ω–æ–≤–∏–ª–∏ CORS origin
    credentials: process.env.CORS_CREDENTIALS === 'true',
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'x-api-key']
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  logging: {
    level: process.env.LOG_LEVEL || 'info',
    dir: process.env.LOG_DIR || 'logs',
    enableFileLogging: process.env.ENABLE_FILE_LOGGING === 'true',
    enableConsoleColors: process.env.LOG_COLORS !== 'false',
    maxFileSize: process.env.LOG_MAX_FILE_SIZE || '20m',
    maxFiles: parseInt(process.env.LOG_MAX_FILES) || 5,
    enableHttpLogging: process.env.ENABLE_HTTP_LOGGING !== 'false'
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
  rateLimit: {
    windowMs: parseInt(process.env.RATE_LIMIT_WINDOW) || 900000, // 15 –º–∏–Ω—É—Ç
    maxRequests: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS) || 100,
    skipSuccessfulRequests: process.env.RATE_LIMIT_SKIP_SUCCESS === 'true',
    skipFailedRequests: process.env.RATE_LIMIT_SKIP_FAILED === 'true'
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–æ–≤
  files: {
    maxFileSize: parseInt(process.env.MAX_FILE_SIZE) || 5242880, // 5MB
    uploadDir: process.env.UPLOAD_DIR || 'uploads',
    allowedMimeTypes: [
      'text/plain',
      'text/markdown',
      'application/pdf',
      'application/json'
    ]
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
  i18n: {
    defaultLanguage: process.env.DEFAULT_LANGUAGE || 'ru', // üìñ –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
    supportedLanguages: process.env.SUPPORTED_LANGUAGES 
      ? process.env.SUPPORTED_LANGUAGES.split(',') 
      : ['ru', 'en'] // üìñ –†—É—Å—Å–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
  },

  // –§–ª–∞–≥–∏ —Ñ—É–Ω–∫—Ü–∏–π
  features: {
    enableRAG: process.env.ENABLE_RAG !== 'false',
    enableAnalytics: process.env.ENABLE_ANALYTICS === 'true',
    enableCaching: process.env.ENABLE_CACHING === 'true',
    enableHealthChecks: process.env.ENABLE_HEALTH_CHECKS !== 'false',
    enableMetrics: process.env.ENABLE_METRICS === 'true',
    enableTelegram: process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_BOT_TOKEN !== ''
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞
  telegram: {
    botToken: process.env.TELEGRAM_BOT_TOKEN,
    webhookUrl: process.env.TELEGRAM_WEBHOOK_URL,
    polling: process.env.TELEGRAM_POLLING === 'true',
    timeout: parseInt(process.env.TELEGRAM_TIMEOUT) || 10000
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis (–¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è)
  redis: {
    url: process.env.REDIS_URL || 'redis://localhost:6379',
    ttl: parseInt(process.env.CACHE_TTL) || 3600, // 1 —á–∞—Å
    maxRetries: parseInt(process.env.REDIS_MAX_RETRIES) || 3,
    retryDelay: parseInt(process.env.REDIS_RETRY_DELAY) || 1000
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ email
  email: {
    from: process.env.EMAIL_FROM || 'noreply@reader-bot.io', // üìñ –û–±–Ω–æ–≤–∏–ª–∏ email domain
    smtp: {
      host: process.env.SMTP_HOST || 'smtp.gmail.com',
      port: parseInt(process.env.SMTP_PORT) || 587,
      secure: process.env.SMTP_SECURE === 'true',
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS
      }
    }
  },

  // üìñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
  reader: {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–∏—Ç–∞—Ç
    maxQuotesPerDay: parseInt(process.env.MAX_QUOTES_PER_DAY) || 10,
    maxQuoteLength: parseInt(process.env.MAX_QUOTE_LENGTH) || 1000,
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
    weeklyReportTime: process.env.WEEKLY_REPORT_TIME || '11:00', // 11:00 –ú–°–ö –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    monthlyReportDay: parseInt(process.env.MONTHLY_REPORT_DAY) || 1, // 1 —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    reminderTimes: process.env.REMINDER_TIMES ? 
      process.env.REMINDER_TIMES.split(',') : 
      ['09:00', '19:00'],
    
    // UTM —Ç—Ä–µ–∫–∏–Ω–≥
    utmSource: process.env.UTM_SOURCE || 'telegram_bot',
    baseBookUrl: process.env.BASE_BOOK_URL || 'https://anna-busel.com/books',
    
    // –ü—Ä–æ–º–æ–∫–æ–¥—ã
    defaultPromoDiscount: parseInt(process.env.DEFAULT_PROMO_DISCOUNT) || 20,
    monthlyPromoDiscount: parseInt(process.env.MONTHLY_PROMO_DISCOUNT) || 25,
    promoValidityDays: parseInt(process.env.PROMO_VALIDITY_DAYS) || 3
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  performance: {
    maxConcurrentRequests: parseInt(process.env.MAX_CONCURRENT_REQUESTS) || 100,
    cacheTTL: parseInt(process.env.CACHE_TTL) || 3600,
    enableCompression: process.env.ENABLE_COMPRESSION !== 'false',
    enableEtag: process.env.ENABLE_ETAG !== 'false'
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  monitoring: {
    enableHealthCheck: process.env.ENABLE_HEALTH_CHECK !== 'false',
    healthCheckInterval: parseInt(process.env.HEALTH_CHECK_INTERVAL) || 60000,
    enableUptime: process.env.ENABLE_UPTIME_MONITORING === 'true',
    metricsPath: process.env.METRICS_PATH || '/metrics'
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function validateConfig() {
  const errors = [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  if (!config.claude.apiKey) {
    errors.push('ANTHROPIC_API_KEY is required');
  }

  if (!config.database.uri) {
    errors.push('MONGODB_URI is required');
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  if (config.app.port < 1 || config.app.port > 65535) {
    errors.push('PORT must be between 1 and 65535');
  }

  if (config.claude.maxTokens < 1 || config.claude.maxTokens > 8000) {
    errors.push('CLAUDE_MAX_TOKENS must be between 1 and 8000');
  }

  if (config.claude.temperature < 0 || config.claude.temperature > 1) {
    errors.push('CLAUDE_TEMPERATURE must be between 0 and 1');
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —è–∑—ã–∫–æ–≤
  const validLanguages = ['en', 'es', 'ru'];
  const invalidLanguages = config.i18n.supportedLanguages.filter(
    lang => !validLanguages.includes(lang)
  );
  if (invalidLanguages.length > 0) {
    errors.push(`Invalid languages in SUPPORTED_LANGUAGES: ${invalidLanguages.join(', ')}`);
  }

  // üìñ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Reader Bot
  if (config.reader.maxQuotesPerDay < 1 || config.reader.maxQuotesPerDay > 50) {
    errors.push('MAX_QUOTES_PER_DAY must be between 1 and 50');
  }

  if (config.reader.maxQuoteLength < 10 || config.reader.maxQuoteLength > 2000) {
    errors.push('MAX_QUOTE_LENGTH must be between 10 and 2000');
  }

  if (errors.length > 0) {
    console.error('‚ùå Configuration validation errors:');
    errors.forEach(error => console.error(`  - ${error}`));
    
    if (config.app.isProduction) {
      throw new Error('Invalid configuration in production environment');
    }
  }

  return errors.length === 0;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getConfig(category = null) {
  if (category) {
    return config[category] || null;
  }
  return config;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
function updateConfig(category, updates) {
  if (config[category]) {
    Object.assign(config[category], updates);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
validateConfig();

module.exports = {
  config,
  getConfig,
  updateConfig,
  validateConfig
};
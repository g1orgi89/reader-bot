/**
 * @fileoverview –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @description –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–π —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
 */

require('dotenv').config();
const mongoose = require('mongoose');

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/reader_bot';

async function checkUsers() {
  try {
    console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –Ω–∞–ø—Ä—è–º—É—é
    const UserProfile = require('./models/userProfile');
    
    console.log('\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await UserProfile.find({}).sort({ registeredAt: -1 });
    
    console.log(`\nüë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n`);
    
    if (users.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    users.forEach((user, index) => {
      console.log(`==================== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ${index + 1} ====================`);
      console.log(`üì± User ID: ${user.userId}`);
      console.log(`üë§ –ò–º—è: ${user.name}`);
      console.log(`üìß Email: ${user.email}`);
      console.log(`üîó Telegram: ${user.telegramUsername || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${user.registeredAt ? user.registeredAt.toLocaleString() : '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
      console.log(`‚úÖ –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: ${user.isOnboardingComplete ? '–î–∞' : '–ù–µ—Ç'}`);
      console.log(`üìç –ò—Å—Ç–æ—á–Ω–∏–∫: ${user.source || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      
      if (user.testResults) {
        console.log(`üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:`);
        Object.entries(user.testResults).forEach(([key, value]) => {
          if (value) {
            console.log(`   ${key}: ${value}`);
          }
        });
      }
      
      if (user.statistics) {
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   –í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç: ${user.statistics.totalQuotes || 0}`);
        console.log(`   –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: ${user.statistics.currentStreak || 0}`);
        console.log(`   –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: ${user.statistics.longestStreak || 0}`);
      }
      
      console.log(`üíæ –°–æ–∑–¥–∞–Ω –≤ MongoDB: ${user.createdAt ? user.createdAt.toLocaleString() : '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: ${user.updatedAt ? user.updatedAt.toLocaleString() : '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
      console.log('');
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('==================== –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====================');
    const completedOnboarding = users.filter(u => u.isOnboardingComplete).length;
    const withEmail = users.filter(u => u.email).length;
    const withTelegram = users.filter(u => u.telegramUsername).length;
    const sources = users.reduce((acc, user) => {
      const source = user.source || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      acc[source] = (acc[source] || 0) + 1;
      return acc;
    }, {});

    console.log(`üìä –ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥: ${completedOnboarding}/${users.length}`);
    console.log(`üìß –° —É–∫–∞–∑–∞–Ω–Ω—ã–º email: ${withEmail}/${users.length}`);
    console.log(`üì± –° Telegram username: ${withTelegram}/${users.length}`);
    console.log('\nüìç –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:');
    Object.entries(sources).forEach(([source, count]) => {
      console.log(`   ${source}: ${count}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏—Ç–∞—Ç—ã
    console.log('\nüìñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏—Ç–∞—Ç...');
    const Quote = require('./models/quote');
    const totalQuotes = await Quote.countDocuments();
    const quotesPerUser = await Quote.aggregate([
      { $group: { _id: '$userId', count: { $sum: 1 } } },
      { $sort: { count: -1 } }
    ]);

    console.log(`üìö –í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç –≤ –±–∞–∑–µ: ${totalQuotes}`);
    console.log('üìä –¶–∏—Ç–∞—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:');
    quotesPerUser.forEach(item => {
      const user = users.find(u => u.userId === item._id);
      const userName = user ? user.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      console.log(`   ${userName} (${item._id}): ${item.count} —Ü–∏—Ç–∞—Ç`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
if (require.main === module) {
  checkUsers().catch(console.error);
}

module.exports = { checkUsers };
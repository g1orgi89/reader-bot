/**
 * @fileoverview –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "–ì–∏–æ" - –ø–æ—á–µ–º—É –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
 * @description –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
 */

const path = require('path');

// –ü–æ–¥–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
require('dotenv').config({ path: path.join(__dirname, '../../.env') });

const mongoose = require('mongoose');
const fs = require('fs');

// URI –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/reader_bot';

console.log('üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø "–ì–ò–û"');
console.log('=' .repeat(50));
console.log(`MongoDB URI: ${MONGODB_URI}`);
console.log(`Telegram Bot Token: ${process.env.TELEGRAM_BOT_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
console.log(`Claude API Key: ${process.env.ANTHROPIC_API_KEY ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);

async function diagnoseGioUser() {
  try {
    console.log('\nüîç 1. –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•...');
    await mongoose.connect(MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
    const UserProfile = require(path.join(__dirname, '../models/userProfile.js'));
    const Quote = require(path.join(__dirname, '../models/quote.js'));
    console.log('‚úÖ –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

    console.log('\nüîç 2. –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø "–ì–ò–û" –ü–û –†–ê–ó–ù–´–ú –ö–†–ò–¢–ï–†–ò–Ø–ú...');
    
    // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ "–ì–∏–æ"
    const usersByName = await UserProfile.find({
      name: { $regex: /–≥–∏–æ/i }
    });
    console.log(`üìù –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ "–ì–∏–æ": –Ω–∞–π–¥–µ–Ω–æ ${usersByName.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    if (usersByName.length > 0) {
      usersByName.forEach((user, index) => {
        console.log(`   ${index + 1}. ${user.name} (${user.userId}) - ${user.email}`);
      });
    }

    // –ü–æ–∏—Å–∫ –ø–æ –≤–æ–∑–º–æ–∂–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –Ω–∞–ø–∏—Å–∞–Ω–∏—è
    const variations = ['–≥–∏–æ', 'gio', '–≥–µ–æ—Ä–≥–∏–π', '–≥–µ–æ—Ä–≥–∏', 'george'];
    for (const variation of variations) {
      const users = await UserProfile.find({
        $or: [
          { name: { $regex: new RegExp(variation, 'i') } },
          { telegramUsername: { $regex: new RegExp(variation, 'i') } },
          { email: { $regex: new RegExp(variation, 'i') } }
        ]
      });
      
      if (users.length > 0) {
        console.log(`üìù –ü–æ–∏—Å–∫ –ø–æ "${variation}": –Ω–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        users.forEach(user => {
          console.log(`   - ${user.name} (@${user.telegramUsername}) ${user.email}`);
        });
      }
    }

    console.log('\nüîç 3. –ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ü–û –î–ê–¢–ï –°–û–ó–î–ê–ù–ò–Ø...');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–æ–∑–º–æ–∂–Ω–æ –ì–∏–æ —Å—Ä–µ–¥–∏ –Ω–∏—Ö)
    const recentUsers = await UserProfile.find({}).sort({ createdAt: -1 }).limit(10);
    
    console.log('üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    recentUsers.forEach((user, index) => {
      const createdDate = user.createdAt.toLocaleString('ru-RU');
      const registeredDate = user.registeredAt.toLocaleString('ru-RU');
      const isRecent = (new Date() - user.createdAt) < (24 * 60 * 60 * 1000); // –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
      
      console.log(`   ${index + 1}. ${user.name} (${user.userId})`);
      console.log(`      Email: ${user.email}`);
      console.log(`      Telegram: @${user.telegramUsername || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`      –°–æ–∑–¥–∞–Ω: ${createdDate} ${isRecent ? 'üî• –ù–ï–î–ê–í–ù–û!' : ''}`);
      console.log(`      –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${registeredDate}`);
      console.log(`      –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${user.botState?.currentState || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
      console.log(`      –û–Ω–±–æ—Ä–¥–∏–Ω–≥: ${user.isOnboardingComplete ? '–∑–∞–≤–µ—Ä—à–µ–Ω' : '–ù–ï –∑–∞–≤–µ—Ä—à–µ–Ω'}`);
      console.log('');
    });

    console.log('\nüîç 4. –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ë–ï–ó –ó–ê–í–ï–†–®–ï–ù–ù–û–ì–û –û–ù–ë–û–†–î–ò–ù–ì–ê...');
    
    const incompleteUsers = await UserProfile.find({ 
      isOnboardingComplete: false 
    }).sort({ createdAt: -1 });
    
    console.log(`üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: ${incompleteUsers.length}`);
    
    if (incompleteUsers.length > 0) {
      incompleteUsers.forEach((user, index) => {
        console.log(`   ${index + 1}. ${user.name || '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'} (${user.userId})`);
        console.log(`      Email: ${user.email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`      Telegram: @${user.telegramUsername || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`      –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞: ${user.botState?.currentState || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        console.log(`      –°–æ–∑–¥–∞–Ω: ${user.createdAt.toLocaleString('ru-RU')}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
        if (user.testResults) {
          const testEntries = Object.entries(user.testResults.toObject());
          const completedQuestions = testEntries.filter(([key, value]) => 
            key.startsWith('question') && value
          ).length;
          console.log(`      –í–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–∞: ${completedQuestions}/7`);
        }
        console.log('');
      });
    }

    console.log('\nüîç 5. –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ê –û–®–ò–ë–û–ö –ò –°–û–°–¢–û–Ø–ù–ò–ô –ë–û–¢A...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–æ–≤
    const botStates = await UserProfile.aggregate([
      {
        $group: {
          _id: '$botState.currentState',
          count: { $sum: 1 },
          users: { 
            $push: { 
              name: '$name', 
              userId: '$userId',
              createdAt: '$createdAt'
            } 
          }
        }
      }
    ]);
    
    console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–æ–≤:');
    botStates.forEach(state => {
      console.log(`   ${state._id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}: ${state.count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      
      if (state._id && state._id !== 'start' && state._id !== 'active') {
        console.log('     –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏:');
        state.users.forEach(user => {
          console.log(`       - ${user.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (${user.userId}) - ${user.createdAt.toLocaleString('ru-RU')}`);
        });
      }
    });

    console.log('\nüîç 6. –ü–û–ò–°–ö –í–°–ï–• –í–û–ó–ú–û–ñ–ù–´–• ID...');
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ ID
    const allUsers = await UserProfile.find({}).select('userId name telegramUsername email createdAt');
    
    console.log('üì± –í—Å–µ User ID –≤ –±–∞–∑–µ:');
    allUsers.forEach(user => {
      console.log(`   ${user.userId} - ${user.name} (@${user.telegramUsername || '–±–µ–∑ username'})`);
    });

    console.log('\nüîç 7. –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í –ù–ê –û–®–ò–ë–ö–ò...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤
    const logsDir = path.join(__dirname, '../../logs');
    const serverLogsDir = path.join(__dirname, '../logs');
    
    const logDirs = [logsDir, serverLogsDir];
    
    logDirs.forEach(logDir => {
      if (fs.existsSync(logDir)) {
        console.log(`üìÑ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ –ª–æ–≥–æ–≤: ${logDir}`);
        const logFiles = fs.readdirSync(logDir);
        console.log(`   –§–∞–π–ª—ã –ª–æ–≥–æ–≤: ${logFiles.join(', ')}`);
      } else {
        console.log(`‚ùå –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${logDir}`);
      }
    });

    console.log('\nüîç 8. –ü–†–û–í–ï–†–ö–ê –ö–û–õ–õ–ï–ö–¶–ò–ô –í –ë–ê–ó–ï –î–ê–ù–ù–´–•...');
    
    const collections = await mongoose.connection.db.listCollections().toArray();
    console.log('üìö –í—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    
    for (const collection of collections) {
      const count = await mongoose.connection.db.collection(collection.name).countDocuments();
      console.log(`   ${collection.name}: ${count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
      
      if (collection.name.includes('user') || collection.name.includes('profile')) {
        console.log(`     ‚≠ê –≠—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!`);
      }
    }

    console.log('\nüîç 9. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø...');
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    const testUserId = 'debug_test_' + Date.now();
    
    try {
      const testUser = new UserProfile({
        userId: testUserId,
        name: '–¢–µ—Å—Ç –ì–∏–æ',
        email: 'gio.test@example.com',
        telegramUsername: 'gio_test',
        source: 'Telegram',
        testResults: {
          question1_name: '–¢–µ—Å—Ç –ì–∏–æ',
          question2_lifestyle: '–°–≤–æ–±–æ–¥–µ–Ω',
          question3_time: '–ß–∏—Ç–∞—é –∫–Ω–∏–≥–∏',
          question4_priorities: '–û–±—É—á–µ–Ω–∏–µ',
          question5_reading_feeling: '–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ',
          question6_phrase: '–ñ–∏–∑–Ω—å –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞',
          question7_reading_time: '1-2 —á–∞—Å–∞ –≤ –¥–µ–Ω—å'
        },
        isOnboardingComplete: true
      });
      
      await testUser.save();
      console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: ${testUserId}`);
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await UserProfile.deleteOne({ userId: testUserId });
      console.log(`üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω`);
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
      console.log(`   –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π, –ø–æ—á–µ–º—É –¥–∞–Ω–Ω—ã–µ –ì–∏–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è!`);
    }

    console.log('\nüîç 10. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï...');
    
    console.log('üìã –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:');
    console.log('   1. Telegram –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
    console.log('   2. –û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
    console.log('   3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç–µ');
    console.log('   4. –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('   5. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('   6. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å Telegram API');
    
    console.log('\nüìã –ß–¢–û –î–ï–õ–ê–¢–¨ –î–ê–õ–¨–®–ï:');
    console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Telegram –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ: cd telegram && node start.js');
    console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –Ω–∞ –æ—à–∏–±–∫–∏');
    console.log('   3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑ —Å –¥—Ä—É–≥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞');
    console.log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π TELEGRAM_BOT_TOKEN');
    console.log('   5. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
    console.error('Stack trace:', error.stack);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
if (require.main === module) {
  diagnoseGioUser().catch(console.error);
}

module.exports = { diagnoseGioUser };
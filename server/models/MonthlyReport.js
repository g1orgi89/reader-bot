/**
 * @fileoverview MongoDB model –¥–ª—è –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 */

const mongoose = require('mongoose');

/**
 * @typedef {Object} AdditionalSurvey
 * @property {string} mood - –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
 * @property {string} mainTheme - –ì–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞ –º–µ—Å—è—Ü–∞
 * @property {number} satisfaction - –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 5
 * @property {string[]} responses - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
 * @property {Date} respondedAt - –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–ø—Ä–æ—Å
 */

/**
 * @typedef {Object} MonthlyAnalysis
 * @property {string} psychologicalProfile - –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
 * @property {string} personalGrowth - –ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞
 * @property {string} recommendations - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ê–Ω–Ω—ã
 * @property {string[]} bookSuggestions - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–Ω–∏–≥–∏
 */

/**
 * @typedef {Object} SpecialOffer
 * @property {number} discount - –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
 * @property {Date} validUntil - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
 * @property {string[]} books - –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ —Å–æ —Å–∫–∏–¥–∫–æ–π
 */

/**
 * @typedef {Object} MonthlyFeedback
 * @property {number} rating - –û—Ü–µ–Ω–∫–∞ –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥
 * @property {string} comment - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @property {Date} respondedAt - –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
 */

const monthlyReportSchema = new mongoose.Schema({
  userId: {
    type: String,
    required: true,
    index: true
  },
  month: {
    type: Number,
    required: true,
    min: 1,
    max: 12
  },
  year: {
    type: Number,
    required: true,
    min: 2024
  },
  additionalSurvey: {
    mood: {
      type: String,
      enum: [
        '–ø–æ–∏—Å–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏',
        '–∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å',
        '–±–∞–ª–∞–Ω—Å',
        '–ª—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è',
        '–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ —Ä–æ—Å—Ç',
        '–º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ –∏ —Å–µ–º—å—è'
      ]
    },
    mainTheme: String,
    satisfaction: {
      type: Number,
      min: 1,
      max: 5
    },
    responses: [String],
    respondedAt: Date
  },
  analysis: {
    psychologicalProfile: {
      type: String,
      required: true
    },
    personalGrowth: {
      type: String,
      required: true
    },
    recommendations: {
      type: String,
      required: true
    },
    bookSuggestions: [String]
  },
  specialOffer: {
    discount: {
      type: Number,
      default: 25,
      min: 0,
      max: 100
    },
    validUntil: {
      type: Date,
      required: true
    },
    books: [String]
  },
  feedback: {
    rating: {
      type: Number,
      min: 1,
      max: 5
    },
    comment: String,
    respondedAt: Date
  },
  sentAt: {
    type: Date,
    default: Date.now
  },
  isRead: {
    type: Boolean,
    default: false
  },
  readAt: Date
}, {
  timestamps: true
});

// –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –º–µ—Å—è—Ü—É
monthlyReportSchema.index({ userId: 1, year: 1, month: 1 }, { unique: true });

// –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
monthlyReportSchema.index({ sentAt: 1 });

// –ò–Ω–¥–µ–∫—Å –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
monthlyReportSchema.index({ 'feedback.rating': 1, sentAt: 1 });

/**
 * –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞
 */
monthlyReportSchema.virtual('monthName').get(function() {
  const months = [
    '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
    '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
  ];
  return months[this.month - 1];
});

/**
 * –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
 */
monthlyReportSchema.virtual('periodName').get(function() {
  return `${this.monthName} ${this.year}`;
});

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫–ª–æ –ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
 */
monthlyReportSchema.methods.isOfferExpired = function() {
  return this.specialOffer.validUntil < new Date();
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 */
monthlyReportSchema.methods.getDaysUntilOfferExpires = function() {
  const now = new Date();
  const validUntil = this.specialOffer.validUntil;
  const diffTime = validUntil - now;
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
};

/**
 * –û—Ç–º–µ—á–∞–µ—Ç –æ—Ç—á–µ—Ç –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
 */
monthlyReportSchema.methods.markAsRead = function() {
  this.isRead = true;
  this.readAt = new Date();
  return this.save();
};

/**
 * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
 */
monthlyReportSchema.statics.getMonthlyStats = async function(startDate, endDate) {
  return this.aggregate([
    {
      $match: {
        sentAt: { $gte: startDate, $lte: endDate }
      }
    },
    {
      $group: {
        _id: {
          year: '$year',
          month: '$month'
        },
        totalReports: { $sum: 1 },
        avgRating: { $avg: '$feedback.rating' },
        readCount: {
          $sum: { $cond: ['$isRead', 1, 0] }
        },
        feedbackCount: {
          $sum: { $cond: [{ $exists: ['$feedback.rating', true] }, 1, 0] }
        }
      }
    },
    {
      $sort: { '_id.year': -1, '_id.month': -1 }
    }
  ]);
};

/**
 * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
monthlyReportSchema.statics.getUserReports = async function(userId, limit = 12) {
  return this.find({ userId })
    .sort({ year: -1, month: -1 })
    .limit(limit)
    .lean();
};

/**
 * –•—É–∫ pre-save –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 */
monthlyReportSchema.pre('save', function(next) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ specialOffer.validUntil –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
  if (this.isNew && this.specialOffer.validUntil < new Date()) {
    const error = new Error('Special offer expiration date cannot be in the past');
    return next(error);
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
  if (!this.specialOffer.validUntil) {
    this.specialOffer.validUntil = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 –¥–Ω–µ–π
  }

  next();
});

/**
 * –•—É–∫ post-save –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
monthlyReportSchema.post('save', function(doc) {
  console.log(`üìà Monthly report saved: ${doc.userId} for ${doc.monthName} ${doc.year}`);
});

const MonthlyReport = mongoose.model('MonthlyReport', monthlyReportSchema);

module.exports = MonthlyReport;

/**
 * üì± –ú–û–î–ï–õ–¨ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø VIEWPORT –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Mini App
 * 
 * –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å viewport –≤—ã—Å–æ—Ç–æ–π –≤ Telegram Mini App
 * –ü–æ–º–æ–≥–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –ø—É—Å—Ç—ã–º –º–µ—Å—Ç–æ–º —Å–Ω–∏–∑—É
 * 
 * @filesize ~2KB
 * @version 1.0.0
 */

const mongoose = require('mongoose');

/**
 * @typedef {Object} ViewportData
 * @property {number} innerHeight - window.innerHeight
 * @property {number} innerWidth - window.innerWidth  
 * @property {number} telegramHeight - Telegram.WebApp.viewportHeight
 * @property {number} telegramStableHeight - Telegram.WebApp.viewportStableHeight
 * @property {number} calculatedContentHeight - CSS calc() —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 * @property {number} actualContentHeight - –†–µ–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @property {number} bottomNavHeight - –í—ã—Å–æ—Ç–∞ –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 * @property {number} headerHeight - –í—ã—Å–æ—Ç–∞ header
 * @property {number} totalSubtracted - –û–±—â–∏–π –≤—ã—á–µ—Ç (bottomNav + header + padding)
 * @property {number} difference - –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –æ–∂–∏–¥–∞–µ–º—ã–º –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º
 * @property {number} availableHeight - –î–æ—Å—Ç—É–ø–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @property {Object} safeBounds - Safe area insets
 */

/**
 * @typedef {Object} DeviceInfo
 * @property {string} userAgent - User Agent —Å—Ç—Ä–æ–∫–∞
 * @property {string} platform - –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ (iOS/Android/Desktop)
 * @property {string} browser - –ë—Ä–∞—É–∑–µ—Ä/Telegram –≤–µ—Ä—Å–∏—è
 * @property {number} devicePixelRatio - –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–∏–∫—Å–µ–ª–µ–π
 * @property {string} orientation - portrait/landscape
 * @property {Object} screen - –†–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
 */

/**
 * –°—Ö–µ–º–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è viewport –ø—Ä–æ–±–ª–µ–º
 */
const viewportLogSchema = new mongoose.Schema({
  // üì± –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  userId: {
    type: String,
    required: false, // –í debug —Ä–µ–∂–∏–º–µ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å
    index: true
  },
  
  sessionId: {
    type: String,
    required: true,
    index: true
  },
  
  // üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  page: {
    type: String,
    required: true,
    enum: ['home', 'diary', 'reports', 'catalog', 'community', 'onboarding', 'other']
  },
  
  url: {
    type: String,
    required: true
  },
  
  // üìê Viewport –¥–∞–Ω–Ω—ã–µ
  viewport: {
    // –†–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
    innerHeight: { type: Number, required: true },
    innerWidth: { type: Number, required: true },
    
    // Telegram —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    telegramHeight: { type: Number, default: null },
    telegramStableHeight: { type: Number, default: null },
    telegramExpanded: { type: Boolean, default: null },
    
    // CSS —Ä–∞—Å—á–µ—Ç—ã
    calculatedContentHeight: { type: Number, required: true },
    actualContentHeight: { type: Number, required: true },
    
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    bottomNavHeight: { type: Number, required: true },
    headerHeight: { type: Number, required: true },
    totalSubtracted: { type: Number, required: true },
    
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
    difference: { type: Number, required: true }, // –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –æ–∂–∏–¥–∞–µ–º—ã–º –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º
    availableHeight: { type: Number, required: true },
    
    // Safe area (iOS)
    safeBounds: {
      top: { type: Number, default: 0 },
      bottom: { type: Number, default: 0 },
      left: { type: Number, default: 0 },
      right: { type: Number, default: 0 }
    }
  },
  
  // üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
  device: {
    userAgent: { type: String, required: true },
    platform: { 
      type: String, 
      enum: ['iOS', 'Android', 'Desktop', 'Unknown'],
      required: true 
    },
    browser: { type: String, required: true },
    devicePixelRatio: { type: Number, default: 1 },
    orientation: { 
      type: String, 
      enum: ['portrait', 'landscape'],
      required: true 
    },
    screen: {
      width: { type: Number, required: true },
      height: { type: Number, required: true },
      availWidth: { type: Number, required: true },
      availHeight: { type: Number, required: true }
    }
  },
  
  // üéØ Telegram –∫–æ–Ω—Ç–µ–∫—Å—Ç
  telegram: {
    isAvailable: { type: Boolean, required: true },
    version: { type: String, default: null },
    platform: { type: String, default: null },
    colorScheme: { type: String, enum: ['light', 'dark'], default: null },
    isVerticalSwipesEnabled: { type: Boolean, default: null },
    headerColor: { type: String, default: null },
    backgroundColor: { type: String, default: null }
  },
  
  // üêõ –ü—Ä–æ–±–ª–µ–º–∞
  problem: {
    type: { 
      type: String,
      enum: ['empty_space_bottom', 'content_overflow', 'scroll_issue', 'height_mismatch'],
      required: true
    },
    severity: {
      type: String,
      enum: ['minor', 'moderate', 'severe'],
      required: true
    },
    description: { type: String, required: true },
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    scrollTop: { type: Number, default: 0 },
    scrollHeight: { type: Number, default: 0 },
    clientHeight: { type: Number, default: 0 }
  },
  
  // üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  debugMode: { type: Boolean, default: false },
  timestamp: { type: Date, default: Date.now, index: true },
  
  // üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  cssVariables: {
    bottomNavHeight: { type: String, default: null },
    headerHeight: { type: String, default: null },
    tgViewportHeight: { type: String, default: null }
  },
  
  // üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
  notes: { type: String, default: null }
  
}, {
  timestamps: true,
  collection: 'viewport_logs'
});

// üìä –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
viewportLogSchema.index({ timestamp: -1 });
viewportLogSchema.index({ 'device.platform': 1, timestamp: -1 });
viewportLogSchema.index({ 'problem.type': 1, timestamp: -1 });
viewportLogSchema.index({ page: 1, timestamp: -1 });
viewportLogSchema.index({ 
  'device.platform': 1, 
  'problem.type': 1, 
  timestamp: -1 
});

// üìà –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
viewportLogSchema.statics = {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–±–ª–µ–º viewport
   */
  async getProblemsStats() {
    return await this.aggregate([
      {
        $group: {
          _id: {
            platform: '$device.platform',
            problemType: '$problem.type',
            page: '$page'
          },
          count: { $sum: 1 },
          avgDifference: { $avg: '$viewport.difference' },
          avgInnerHeight: { $avg: '$viewport.innerHeight' },
          avgTelegramHeight: { $avg: '$viewport.telegramHeight' }
        }
      },
      {
        $sort: { count: -1 }
      }
    ]);
  },
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
   */
  async getPlatformData(platform) {
    return await this.find({ 'device.platform': platform })
      .sort({ timestamp: -1 })
      .limit(100);
  },
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
   */
  async getRecentProblems(limit = 50) {
    return await this.find()
      .sort({ timestamp: -1 })
      .limit(limit)
      .select('page device.platform problem.type viewport.difference timestamp');
  }
};

// üì± –ú–µ—Ç–æ–¥—ã —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
viewportLogSchema.methods = {
  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
   */
  calculateSeverity() {
    const diff = Math.abs(this.viewport.difference);
    
    if (diff < 10) return 'minor';
    if (diff < 50) return 'moderate';
    return 'severe';
  },
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
   */
  getShortDescription() {
    const platform = this.device.platform;
    const page = this.page;
    const diff = this.viewport.difference;
    
    return `${platform} ${page}: ${diff > 0 ? '+' : ''}${diff}px`;
  }
};

// üîß Pre-save middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
viewportLogSchema.pre('save', function(next) {
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
  if (!this.problem.severity) {
    this.problem.severity = this.calculateSeverity();
  }
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –≤—ã—á–µ—Ç
  this.viewport.totalSubtracted = this.viewport.bottomNavHeight + 
                                  this.viewport.headerHeight + 
                                  40; // padding
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –≤—ã—Å–æ—Ç—É
  this.viewport.availableHeight = this.viewport.innerHeight - 
                                  this.viewport.totalSubtracted;
  
  next();
});

// –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
const ViewportLog = mongoose.model('ViewportLog', viewportLogSchema);

module.exports = ViewportLog;
/**
 * @fileoverview –ú–æ–¥–µ–ª—å –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @author g1orgi89
 */

const mongoose = require('mongoose');

/**
 * @typedef {import('../types/reader').MonthlyReport} MonthlyReport
 * @typedef {import('../types/reader').AdditionalSurvey} AdditionalSurvey
 * @typedef {import('../types/reader').MonthlyAnalysis} MonthlyAnalysis
 * @typedef {import('../types/reader').SpecialOffer} SpecialOffer
 */

/**
 * –°—Ö–µ–º–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
 */
const additionalSurveySchema = new mongoose.Schema({
  mood: {
    type: String,
    enum: [
      '–ü–æ–∏—Å–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏',
      '–ñ–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ –Ω–µ–∂–Ω–æ—Å—Ç—å',
      '–ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É ¬´–¥–∞—Ç—å¬ª –∏ ¬´–≤–∑—è—Ç—å¬ª',
      '–õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è',
      '–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ —Ä–æ—Å—Ç',
      '–ú–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ –∏ —Å–µ–º—å—è'
    ]
    // –ö–∞–∫ –æ—â—É—â–∞–ª–∏ —ç—Ç–æ—Ç –º–µ—Å—è—Ü - –≥–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞
  },
  mainTheme: {
    type: String
    // –ì–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞ –º–µ—Å—è—Ü–∞ –ø–æ –æ—â—É—â–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  },
  satisfaction: {
    type: Number,
    min: 1,
    max: 5
    // –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–µ—Å—è—Ü–µ–º 1-5
  },
  responses: [{
    type: String
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
  }],
  respondedAt: {
    type: Date
    // –î–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–ø—Ä–æ—Å
  }
}, { _id: false });

/**
 * –°—Ö–µ–º–∞ –º–µ—Å—è—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
 */
const monthlyAnalysisSchema = new mongoose.Schema({
  psychologicalProfile: {
    type: String,
    required: true,
    maxlength: 3000
    // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  },
  personalGrowth: {
    type: String,
    required: true,
    maxlength: 2000
    // –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –º–µ—Å—è—Ü
  },
  recommendations: {
    type: String,
    required: true,
    maxlength: 2000
    // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞
  },
  bookSuggestions: [{
    type: String
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–Ω–∏–≥
  }]
}, { _id: false });

/**
 * –°—Ö–µ–º–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 */
const specialOfferSchema = new mongoose.Schema({
  discount: {
    type: Number,
    required: true,
    min: 20,
    max: 50,
    default: 25
    // –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  },
  validUntil: {
    type: Date,
    required: true
    // –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ
  },
  books: [{
    type: String
    // –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
  }],
  promoCode: {
    type: String,
    uppercase: true,
    match: /^[A-Z0-9]{6,12}$/
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
  }
}, { _id: false });

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ö–µ–º–∞ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 */
const monthlyReportSchema = new mongoose.Schema({
  userId: {
    type: String,
    required: true,
    index: true
    // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
  },
  month: {
    type: Number,
    required: true,
    min: 1,
    max: 12
    // –ù–æ–º–µ—Ä –º–µ—Å—è—Ü–∞
  },
  year: {
    type: Number,
    required: true
    // –ì–æ–¥
  },
  additionalSurvey: {
    type: additionalSurveySchema
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
  },
  analysis: {
    type: monthlyAnalysisSchema,
    required: true
    // –ì–ª—É–±–æ–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
  },
  specialOffer: {
    type: specialOfferSchema,
    required: true
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ —Å–∫–∏–¥–∫–æ–π
  },
  sentAt: {
    type: Date,
    default: Date.now
    // –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞
  },
  
  // –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –Ω–∞ –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç
  feedback: {
    rating: {
      type: Number,
      min: 1,
      max: 5
      // –û—Ü–µ–Ω–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∑–∞ –º–µ—Å—è—Ü (1-5 –∑–≤–µ–∑–¥)
    },
    whatLikes: {
      type: String,
      maxlength: 1000
      // –ß—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ
    },
    whatImprove: {
      type: String,
      maxlength: 1000
      // –ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã —É–ª—É—á—à–∏—Ç—å
    },
    newFeatures: {
      type: String,
      maxlength: 1000
      // –ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–∏—Ç—å
    },
    respondedAt: {
      type: Date
      // –î–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    }
  },
  
  // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  telegramMessageId: {
    type: String
    // ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
  },
  generatedBy: {
    type: String,
    default: 'claude',
    enum: ['claude', 'openai', 'manual']
    // –ö–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–Ω–∞–ª–∏–∑
  },
  generationTime: {
    type: Number
    // –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  },
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
  monthStats: {
    totalQuotes: { type: Number, default: 0 },
    categoriesDistribution: { type: Map, of: Number },
    authorsCount: { type: Number, default: 0 },
    averageQuotesPerWeek: { type: Number, default: 0 },
    longestStreak: { type: Number, default: 0 }
  }
}, {
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});

// –°–æ—Å—Ç–∞–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
monthlyReportSchema.index({ userId: 1, month: 1, year: 1 }, { unique: true });
monthlyReportSchema.index({ userId: 1, sentAt: -1 });
monthlyReportSchema.index({ month: 1, year: 1 });
monthlyReportSchema.index({ sentAt: -1 });
monthlyReportSchema.index({ 'feedback.rating': 1 });

// –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
monthlyReportSchema.virtual('monthIdentifier').get(function() {
  const monthStr = this.month.toString().padStart(2, '0');
  return `${this.year}-${monthStr}`;
});

monthlyReportSchema.virtual('hasSurveyResponse').get(function() {
  return !!(this.additionalSurvey && this.additionalSurvey.respondedAt);
});

monthlyReportSchema.virtual('hasFeedback').get(function() {
  return !!(this.feedback && this.feedback.respondedAt);
});

monthlyReportSchema.virtual('isRecent').get(function() {
  const oneMonthAgo = new Date();
  oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);
  return this.sentAt > oneMonthAgo;
});

// –ú–µ—Ç–æ–¥—ã —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
monthlyReportSchema.methods = {
  /**
   * –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å
   * @param {string} mood - –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞ –º–µ—Å—è—Ü–∞
   * @param {number} [satisfaction] - –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å
   * @returns {Promise<MonthlyReport>}
   */
  async addSurveyResponse(mood, satisfaction = null) {
    this.additionalSurvey = {
      mood,
      mainTheme: mood,
      satisfaction,
      respondedAt: new Date()
    };
    return this.save();
  },

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –º–µ—Å—è—á–Ω–æ–º—É –æ—Ç—á–µ—Ç—É
   * @param {number} rating - –û—Ü–µ–Ω–∫–∞ 1-5 –∑–≤–µ–∑–¥
   * @param {Object} feedback - –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
   * @param {string} [feedback.whatLikes] - –ß—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è
   * @param {string} [feedback.whatImprove] - –ß—Ç–æ —É–ª—É—á—à–∏—Ç—å
   * @param {string} [feedback.newFeatures] - –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
   * @returns {Promise<MonthlyReport>}
   */
  async addFeedback(rating, feedback = {}) {
    this.feedback = {
      rating,
      whatLikes: feedback.whatLikes,
      whatImprove: feedback.whatImprove,
      newFeatures: feedback.newFeatures,
      respondedAt: new Date()
    };
    return this.save();
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Å—è—Ü–∞
   * @param {Object} stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   * @returns {Promise<MonthlyReport>}
   */
  async updateMonthStats(stats) {
    this.monthStats = {
      totalQuotes: stats.totalQuotes || 0,
      categoriesDistribution: new Map(Object.entries(stats.categoriesDistribution || {})),
      authorsCount: stats.authorsCount || 0,
      averageQuotesPerWeek: stats.averageQuotesPerWeek || 0,
      longestStreak: stats.longestStreak || 0
    };
    return this.save();
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
   * @returns {string}
   */
  toTelegramFormat() {
    const statsText = `\nüìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n‚îî –¶–∏—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${this.monthStats.totalQuotes}\n‚îî –î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —Ç–µ–º–∞: ${this.additionalSurvey?.mood || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n‚îî –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞: —Ä–∞–∑–≤–∏—Ç–∏–µ —á–µ—Ä–µ–∑ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è\n`;

    const booksText = this.analysis.bookSuggestions.map((book, i) => 
      `${i + 1}. ${book}`
    ).join('\n');

    return `üìà *–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä –º–µ—Å—è—Ü–∞*\n\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Å ¬´–ß–∏—Ç–∞—Ç–µ–ª–µ–º¬ª —É–∂–µ –º–µ—Å—è—Ü!\n\n${statsText}\n\nüß† *–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:*\n${this.analysis.psychologicalProfile}\n\nüìà *–í–∞—à –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç:*\n${this.analysis.personalGrowth}\n\nüí° *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n${this.analysis.recommendations}\n\nüìö *–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å* (—Å–∫–∏–¥–∫–∞ ${this.specialOffer.discount}% –¥–æ ${this.specialOffer.validUntil.toLocaleDateString()}):\n${booksText}\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –º–æ–º–µ–Ω—Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! üìñ`;
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
   * @returns {Object}
   */
  toSummary() {
    return {
      id: this._id,
      userId: this.userId,
      monthIdentifier: this.monthIdentifier,
      totalQuotes: this.monthStats.totalQuotes,
      mainTheme: this.additionalSurvey?.mood,
      sentAt: this.sentAt,
      hasSurveyResponse: this.hasSurveyResponse,
      hasFeedback: this.hasFeedback,
      rating: this.feedback?.rating,
      specialDiscount: this.specialOffer.discount
    };
  }
};

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
monthlyReportSchema.statics = {
  /**
   * –ù–∞–π—Ç–∏ –æ—Ç—á–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} month - –ù–æ–º–µ—Ä –º–µ—Å—è—Ü–∞
   * @param {number} year - –ì–æ–¥
   * @returns {Promise<MonthlyReport|null>}
   */
  async findByUserMonth(userId, month, year) {
    return this.findOne({ userId, month, year });
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} [limit=3] - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤
   * @returns {Promise<MonthlyReport[]>}
   */
  async getUserRecentReports(userId, limit = 3) {
    return this.find({ userId })
      .sort({ sentAt: -1 })
      .limit(limit);
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –æ—Ç—á–µ—Ç –¥–ª—è –º–µ—Å—è—Ü–∞
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} month - –ù–æ–º–µ—Ä –º–µ—Å—è—Ü–∞
   * @param {number} year - –ì–æ–¥
   * @returns {Promise<boolean>}
   */
  async hasReportForMonth(userId, month, year) {
    const count = await this.countDocuments({ userId, month, year });
    return count > 0;
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
   * @param {number} month - –ù–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ (–ø—Ä–æ—à–ª–æ–≥–æ)
   * @param {number} year - –ì–æ–¥
   * @returns {Promise<Array>}
   */
  async getUsersNeedingMonthlyReports(month, year) {
    const oneMonthAgo = new Date();
    oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);
    
    const UserProfile = mongoose.model('UserProfile');
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∏–Ω–∏–º—É–º –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥
    const eligibleUsers = await UserProfile.find({
      registeredAt: { $lte: oneMonthAgo },
      isActive: true,
      isBlocked: false,
      isOnboardingComplete: true
    });
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Ö, —É –∫–æ–≥–æ —É–∂–µ –µ—Å—Ç—å –æ—Ç—á–µ—Ç –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
    const usersWithReports = await this.distinct('userId', { month, year });
    
    return eligibleUsers.filter(user => 
      !usersWithReports.includes(user.userId)
    );
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
   * @param {Date} [startDate] - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
   * @returns {Promise<Object>}
   */
  async getMonthlyReportsStats(startDate = null) {
    const match = {};
    if (startDate) {
      match.sentAt = { $gte: startDate };
    }

    const pipeline = [
      { $match: match },
      {
        $group: {
          _id: null,
          totalReports: { $sum: 1 },
          reportsWithSurvey: {
            $sum: { $cond: [{ $ne: ['$additionalSurvey.respondedAt', null] }, 1, 0] }
          },
          reportsWithFeedback: {
            $sum: { $cond: [{ $ne: ['$feedback.rating', null] }, 1, 0] }
          },
          averageRating: { $avg: '$feedback.rating' },
          averageQuotesPerMonth: { $avg: '$monthStats.totalQuotes' }
        }
      }
    ];

    const result = await this.aggregate(pipeline);
    return result.length ? result[0] : null;
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º –º–µ—Å—è—Ü–∞
   * @param {Date} [startDate] - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
   * @returns {Promise<Array>}
   */
  async getMonthlyThemesDistribution(startDate = null) {
    const match = {
      'additionalSurvey.mood': { $exists: true, $ne: null }
    };
    
    if (startDate) {
      match.sentAt = { $gte: startDate };
    }

    return this.aggregate([
      { $match: match },
      {
        $group: {
          _id: '$additionalSurvey.mood',
          count: { $sum: 1 }
        }
      },
      { $sort: { count: -1 } }
    ]);
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π
   * @returns {Promise<Array>}
   */
  async getImprovementSuggestions() {
    return this.aggregate([
      {
        $match: {
          'feedback.whatImprove': { $exists: true, $ne: null, $ne: '' }
        }
      },
      {
        $project: {
          improvements: '$feedback.whatImprove',
          month: '$month',
          year: '$year'
        }
      },
      { $sort: { year: -1, month: -1 } },
      { $limit: 20 }
    ]);
  }
};

// Middleware
monthlyReportSchema.pre('save', function(next) {
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º validUntil –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (7 –¥–Ω–µ–π)
  if (this.isNew && this.specialOffer && !this.specialOffer.validUntil) {
    this.specialOffer.validUntil = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
  if (this.isNew && this.specialOffer && !this.specialOffer.promoCode) {
    this.specialOffer.promoCode = `MONTH${this.specialOffer.discount}`;
  }
  
  next();
});

const MonthlyReport = mongoose.model('MonthlyReport', monthlyReportSchema);

module.exports = MonthlyReport;
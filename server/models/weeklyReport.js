/**
 * @fileoverview –ú–æ–¥–µ–ª—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @author g1orgi89
 * üîß FIX: –°–¥–µ–ª–∞–Ω–æ –ø–æ–ª–µ reasoning –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 * üîß FIX: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã (—É–±—Ä–∞–Ω–∞ –ª–∏—à–Ω—è—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∫–∞)
 */

const mongoose = require('mongoose');

/**
 * Normalize emotional tone to enum-safe value
 * - lowercases
 * - replaces "—ë" -> "–µ"
 * - maps common synonyms to enum values
 */
const ALLOWED_TONES = [
  '–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π',
  '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π',
  '–∑–∞–¥—É–º—á–∏–≤—ã–π',
  '–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π',
  '–º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–π',
  '—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π',
  '—Ä–∞–∑–º—ã—à–ª—è—é—â–∏–π',
  '–≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω—ã–π'
];

function normalizeEmotionalTone(value) {
  if (!value) return '—Ä–∞–∑–º—ã—à–ª—è—é—â–∏–π';
  let tone = String(value).trim().toLowerCase();
  tone = tone.replace(/—ë/g, '–µ');

  // –ø—Ä—è–º—ã–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è
  if (ALLOWED_TONES.includes(tone)) return tone;

  // –º–∞–ø–ø–∏–Ω–≥ —Å–∏–Ω–æ–Ω–∏–º–æ–≤/–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
  const map = {
    // —Ä—É—Å—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    '—Ä–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω—ã–π': '—Ä–∞–∑–º—ã—à–ª—è—é—â–∏–π',
    '–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–Ω—ã–π': '–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π',
    '–≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω—ã–π': '–≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω—ã–π', // —á–∞—Å—Ç–∞—è –æ–ø–µ—á–∞—Ç–∫–∞
    // –∞–Ω–≥–ª –∫ —Ä—É—Å—Å–∫–∏–º (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    'positive': '–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π',
    'neutral': '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π',
    'thoughtful': '–∑–∞–¥—É–º—á–∏–≤—ã–π',
    'inspiring': '–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π',
    'melancholic': '–º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–π',
    'energetic': '—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π',
    'reflective': '—Ä–∞–∑–º—ã—à–ª—è—é—â–∏–π',
    'inspired': '–≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω—ã–π'
  };

  if (map[tone]) return map[tone];

  // –¥–µ—Ñ–æ–ª—Ç, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
  return '—Ä–∞–∑–º—ã—à–ª—è—é—â–∏–π';
}

/**
 * –°—Ö–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–µ–ª–∏
 */
const weeklyAnalysisSchema = new mongoose.Schema({
  dominantThemes: [{
    type: String
    // –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ç–µ–º—ã
  }],
  secondaryThemes: [{
    type: String
    // –í—Ç–æ—Ä–∏—á–Ω—ã–µ (–¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ) —Ç–µ–º—ã –∏–∑ targetThemes BookCatalog - optional –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  }],
  emotionalTone: {
    type: String,
    required: true,
    enum: ALLOWED_TONES,
    set: normalizeEmotionalTone
    // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω –Ω–µ–¥–µ–ª–∏
  },
  insights: {
    type: String,
    required: true,
    maxlength: 2000
    // –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Ç –ê–Ω–Ω—ã
  }
}, { _id: false });

/**
 * üîß FIX: –°—Ö–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ü–µ–Ω—ã
 * üìã NEW: –î–æ–±–∞–≤–ª–µ–Ω—ã author, priceByn –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π bookSlug –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å BookCatalog
 */
const bookRecommendationSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
    maxlength: 200
    // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏/–∫—É—Ä—Å–∞
  },
  author: {
    type: String,
    required: false,
    maxlength: 100,
    default: null
    // –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  },
  description: {
    type: String,
    required: true,
    maxlength: 500
    // –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—á–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç
  },
  price: {
    type: Number,
    required: true,
    min: 0
    // –¶–µ–Ω–∞ –∫–∞–∫ —á–∏—Å–ª–æ: 8, 12, 20 (legacy field)
  },
  priceByn: {
    type: Number,
    required: false,
    min: 0,
    default: null
    // –¶–µ–Ω–∞ –≤ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏—Ö —Ä—É–±–ª—è—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  },
  bookSlug: {
    type: String,
    required: true,
    lowercase: true,
    match: /^[a-z0-9_-]+$/
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥
  },
  link: {
    type: String,
    required: true
    // –°—Å—ã–ª–∫–∞ —Å UTM –º–µ—Ç–∫–∞–º–∏
  },
  reasoning: {
    type: String,
    required: false, // üîß FIX: –°–¥–µ–ª–∞–Ω–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
    default: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö —Ü–∏—Ç–∞—Ç',
    maxlength: 300
    // –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∞ –∫–Ω–∏–≥–∞ –ø–æ–¥–æ–π–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  }
}, { _id: false });

/**
 * –°—Ö–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
 */
const promoCodeSchema = new mongoose.Schema({
  code: {
    type: String,
    required: true,
    uppercase: true,
    match: /^[A-Z0-9]{6,12}$/
    // –ö–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
  },
  discount: {
    type: Number,
    required: true,
    min: 5,
    max: 50
    // –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  },
  validUntil: {
    type: Date,
    required: true
    // –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ
  }
}, { _id: false });

/**
 * –°—Ö–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
 */
const feedbackSchema = new mongoose.Schema({
  rating: {
    type: Number,
    min: 1,
    max: 5
    // –û—Ü–µ–Ω–∫–∞ 1-5 –∑–≤–µ–∑–¥
  },
  comment: {
    type: String,
    maxlength: 1000
    // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  },
  respondedAt: {
    type: Date
    // –î–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
  }
}, { _id: false });

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ö–µ–º–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 */
const weeklyReportSchema = new mongoose.Schema({
  userId: {
    type: String,
    required: true,
    index: true
    // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
  },
  weekNumber: {
    type: Number,
    required: true,
    min: 1,
    max: 53
    // –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ (ISO)
  },
  year: {
    type: Number,
    required: true
    // –ì–æ–¥
  },
  quotes: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Quote'
    // –°—Å—ã–ª–∫–∏ –Ω–∞ —Ü–∏—Ç–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é
  }],
  analysis: {
    type: weeklyAnalysisSchema,
    required: true
    // AI-–∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏
  },
  recommendations: [bookRecommendationSchema],
  promoCode: {
    type: promoCodeSchema,
    required: true
    // –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ —Å–∫–∏–¥–∫–æ–π
  },
  feedback: {
    type: feedbackSchema
    // –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  },
  sentAt: {
    type: Date,
    default: Date.now
    // –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞
  },
  isRead: {
    type: Boolean,
    default: false
    // –ü—Ä–æ—á–∏—Ç–∞–Ω –ª–∏ –æ—Ç—á–µ—Ç
  },
  readAt: {
    type: Date
    // –î–∞—Ç–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è
  },
  
  // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  telegramMessageId: {
    type: String
    // ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –≤ Telegram
  },
  generatedBy: {
    type: String,
    default: 'claude',
    enum: ['claude', 'openai', 'manual']
    // –ö–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–Ω–∞–ª–∏–∑
  },
  generationTime: {
    type: Number
    // –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  },
  
  // –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–µ–ª–∏ (–Ω–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π)
  metrics: {
    type: {
      quotes: { type: Number, required: true },
      uniqueAuthors: { type: Number, required: true },
      activeDays: { type: Number, required: true },
      targetQuotes: { type: Number, default: 30 },
      progressQuotesPct: { type: Number, required: true },
      progressDaysPct: { type: Number, required: true }
    },
    required: false
    // –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–µ–ª–∏ - optional –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  }
}, {
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});

// –°–æ—Å—Ç–∞–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
weeklyReportSchema.index({ userId: 1, weekNumber: 1, year: 1 }, { unique: true });
weeklyReportSchema.index({ userId: 1, sentAt: -1 });
weeklyReportSchema.index({ weekNumber: 1, year: 1 });
weeklyReportSchema.index({ sentAt: -1 });
weeklyReportSchema.index({ 'feedback.rating': 1 });

// –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
weeklyReportSchema.virtual('quotesCount').get(function() {
  return this.quotes ? this.quotes.length : 0;
});

weeklyReportSchema.virtual('hasFeedback').get(function() {
  return !!(this.feedback && this.feedback.respondedAt);
});

weeklyReportSchema.virtual('weekIdentifier').get(function() {
  return `${this.year}-W${this.weekNumber.toString().padStart(2, '0')}`;
});

weeklyReportSchema.virtual('isRecent').get(function() {
  const oneWeekAgo = new Date();
  oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
  return this.sentAt > oneWeekAgo;
});

// –ú–µ—Ç–æ–¥—ã —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
weeklyReportSchema.methods = {
  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
   * @returns {Promise<WeeklyReport>}
   */
  async markAsRead() {
    if (!this.isRead) {
      this.isRead = true;
      this.readAt = new Date();
      return this.save();
    }
    return this;
  },

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
   * @param {number} rating - –û—Ü–µ–Ω–∫–∞ 1-5
   * @param {string} [comment] - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
   * @returns {Promise<WeeklyReport>}
   */
  async addFeedback(rating, comment = null) {
    this.feedback = {
      rating,
      comment,
      respondedAt: new Date()
    };
    return this.save();
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
   * @returns {string}
   */
  toTelegramFormat() {
    const quotesText = this.quotes.map((quote, index) => {
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ quotes –±—É–¥—É—Ç populate
      const authorText = quote.author ? ` (${quote.author})` : '';
      return `‚úÖ "${quote.text}"${authorText}`;
    }).join('\n');

    const recommendationsText = this.recommendations.map((rec, index) => {
      return `${index + 1}. [${rec.title}](${rec.link}) - ${rec.price}\n   ${rec.description}`;
    }).join('\n\n');

    return `üìä *–í–∞—à –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é*\n\n–ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –≤—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ ${this.quotesCount} ${this._declensionQuotes(this.quotesCount)}:\n\n${quotesText}\n\nüéØ *–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏:*\n${this.analysis.insights}\n\nüíé *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ê–Ω–Ω—ã:*\n${recommendationsText}\n\nüéÅ *–ü—Ä–æ–º–æ–∫–æ–¥ ${this.promoCode.code}* - —Å–∫–∏–¥–∫–∞ ${this.promoCode.discount}% –¥–æ ${this.promoCode.validUntil.toLocaleDateString()}!\n\n---\nüí¨ –ö–∞–∫ –≤–∞–º —ç—Ç–æ—Ç –æ—Ç—á–µ—Ç?`;
  },

  /**
   * –°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "—Ü–∏—Ç–∞—Ç–∞"
   * @private
   * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
   * @returns {string}
   */
  _declensionQuotes(count) {
    if (count % 10 === 1 && count % 100 !== 11) return '—Ü–∏—Ç–∞—Ç—É';
    if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '—Ü–∏—Ç–∞—Ç—ã';
    return '—Ü–∏—Ç–∞—Ç';
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
   * @returns {Object}
   */
  toSummary() {
    return {
      id: this._id,
      userId: this.userId,
      weekIdentifier: this.weekIdentifier,
      quotesCount: this.quotesCount,
      dominantThemes: this.analysis.dominantThemes,
      emotionalTone: this.analysis.emotionalTone,
      sentAt: this.sentAt,
      isRead: this.isRead,
      hasFeedback: this.hasFeedback,
      rating: this.feedback?.rating
    };
  }
};

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
weeklyReportSchema.statics = {
  /**
   * –ù–∞–π—Ç–∏ –æ—Ç—á–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} weekNumber - –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
   * @param {number} year - –ì–æ–¥
   * @returns {Promise<WeeklyReport|null>}
   */
  async findByUserWeek(userId, weekNumber, year) {
    return this.findOne({ userId, weekNumber, year })
      .populate('quotes')
      .exec();
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} [limit=5] - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤
   * @returns {Promise<WeeklyReport[]>}
   */
  async getUserRecentReports(userId, limit = 5) {
    return this.find({ userId })
      .sort({ sentAt: -1 })
      .limit(limit)
      .populate('quotes')
      .exec();
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç—á–µ—Ç–æ–≤
   * @param {Date} [startDate] - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
   * @returns {Promise<Object>}
   */
  async getReportsStats(startDate = null) {
    const match = {};
    if (startDate) {
      match.sentAt = { $gte: startDate };
    }

    const pipeline = [
      { $match: match },
      {
        $group: {
          _id: null,
          totalReports: { $sum: 1 },
          reportsWithFeedback: {
            $sum: { $cond: [{ $ne: ['$feedback.rating', null] }, 1, 0] }
          },
          averageRating: { $avg: '$feedback.rating' },
          totalQuotes: { $sum: { $size: '$quotes' } },
          averageQuotesPerReport: { $avg: { $size: '$quotes' } }
        }
      }
    ];

    const result = await this.aggregate(pipeline);
    return result.length ? result[0] : null;
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
   * @param {Date} [startDate] - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
   * @returns {Promise<Array>}
   */
  async getFeedbackDistribution(startDate = null) {
    const match = {
      'feedback.rating': { $exists: true, $ne: null }
    };
    
    if (startDate) {
      match.sentAt = { $gte: startDate };
    }

    return this.aggregate([
      { $match: match },
      {
        $group: {
          _id: '$feedback.rating',
          count: { $sum: 1 }
        }
      },
      { $sort: { _id: 1 } }
    ]);
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã –≤ –æ—Ç—á–µ—Ç–∞—Ö
   * @param {Date} [startDate] - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
   * @returns {Promise<Array>}
   */
  async getPopularThemes(startDate = null) {
    const match = {};
    if (startDate) {
      match.sentAt = { $gte: startDate };
    }

    return this.aggregate([
      { $match: match },
      { $unwind: '$analysis.dominantThemes' },
      {
        $group: {
          _id: '$analysis.dominantThemes',
          count: { $sum: 1 }
        }
      },
      { $sort: { count: -1 } },
      { $limit: 10 }
    ]);
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –æ—Ç—á–µ—Ç –¥–ª—è –Ω–µ–¥–µ–ª–∏
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} weekNumber - –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
   * @param {number} year - –ì–æ–¥
   * @returns {Promise<boolean>}
   */
  async hasReportForWeek(userId, weekNumber, year) {
    const count = await this.countDocuments({ userId, weekNumber, year });
    return count > 0;
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
   * @param {number} weekNumber - –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
   * @param {number} year - –ì–æ–¥
   * @returns {Promise<Array>}
   */
  async getUsersNeedingReports(weekNumber, year) {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ü–∏—Ç–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é, –Ω–æ –Ω–µ—Ç –æ—Ç—á–µ—Ç–∞
    const Quote = mongoose.model('Quote');
    const UserProfile = mongoose.model('UserProfile');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
    const usersWithQuotes = await Quote.distinct('userId', {
      weekNumber,
      yearNumber: year
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –µ—Å—Ç—å –æ—Ç—á–µ—Ç
    const usersWithReports = await this.distinct('userId', {
      weekNumber,
      year
    });
    
    // –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–Ω–æ—Å—Ç—å
    const usersNeedingReports = usersWithQuotes.filter(
      userId => !usersWithReports.includes(userId)
    );
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    return UserProfile.find({
      userId: { $in: usersNeedingReports },
      isActive: true,
      isBlocked: false,
      isOnboardingComplete: true
    });
  }
};

// Middleware
weeklyReportSchema.pre('save', function(next) {
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º validUntil –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (3 –¥–Ω—è)
  if (this.isNew && this.promoCode && !this.promoCode.validUntil) {
    this.promoCode.validUntil = new Date(Date.now() + 3 * 24 * 60 * 60 * 1000);
  }
  
  // üîß FIX: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º reasoning –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  if (this.recommendations && this.recommendations.length > 0) {
    this.recommendations.forEach(rec => {
      if (!rec.reasoning) {
        rec.reasoning = '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö —Ü–∏—Ç–∞—Ç';
      }
      
      // üìã NEW: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º bookSlug –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      if (!rec.bookSlug && rec.title) {
        rec.bookSlug = this._generateSlugFromTitle(rec.title);
      }
    });
  }
  
  next();
});

/**
 * üìã NEW: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏ (fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 * @private
 * @param {string} title - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
 * @returns {string} –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π slug
 */
weeklyReportSchema.methods._generateSlugFromTitle = function(title) {
  if (!title) return 'unknown-book';
  
  // Transliteration map for Cyrillic to Latin
  const cyrillicMap = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
    '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
    '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
    '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
    '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
  };
  
  return title
    .toString()
    .toLowerCase()
    .replace(/[–∞-—è]/g, (char) => cyrillicMap[char] || char)
    .replace(/[^a-z0-9\s-]/g, '') // —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
    .replace(/\s+/g, '-')         // –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
    .replace(/\-+/g, '-')         // –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Ñ–∏—Å–æ–≤ ‚Äî –æ–¥–∏–Ω –¥–µ—Ñ–∏—Å
    .replace(/^-+|-+$/g, '')      // –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
    .substring(0, 50);            // –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
};

const WeeklyReport = mongoose.model('WeeklyReport', weeklyReportSchema);

module.exports = WeeklyReport;

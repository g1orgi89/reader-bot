/**
 * @fileoverview –ú–æ–¥–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ü–∏—Ç–∞—Ç
 * @description –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ quoteHandler –≤ –ë–î
 * @author Reader Bot Team
 */

const mongoose = require('mongoose');

/**
 * @typedef {Object} CategoryDocument
 * @property {string} name - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @property {string} description - –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @property {string} icon - –≠–º–æ–¥–∑–∏ –∏–∫–æ–Ω–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @property {string} color - –¶–≤–µ—Ç –¥–ª—è UI (hex)
 * @property {string[]} keywords - –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * @property {boolean} isActive - –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
 * @property {number} priority - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ —Å–ø–∏—Å–∫–µ (1-10)
 * @property {string} aiPromptHint - –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
 * @property {Date} createdAt - –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
 * @property {Date} updatedAt - –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */

const categorySchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    unique: true,
    trim: true,
    maxlength: 50
  },
  
  description: {
    type: String,
    required: true,
    trim: true,
    maxlength: 200
  },
  
  icon: {
    type: String,
    required: true,
    trim: true,
    default: 'üìù'
  },
  
  color: {
    type: String,
    required: true,
    match: /^#[0-9A-F]{6}$/i,
    default: '#6B7280'
  },
  
  keywords: [{
    type: String,
    trim: true,
    lowercase: true
  }],
  
  isActive: {
    type: Boolean,
    default: true
  },
  
  priority: {
    type: Number,
    min: 1,
    max: 10,
    default: 5
  },
  
  aiPromptHint: {
    type: String,
    trim: true,
    maxlength: 300
  }
}, {
  timestamps: true,
  collection: 'categories'
});

// –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
categorySchema.index({ name: 1 }, { unique: true });
categorySchema.index({ isActive: 1, priority: -1 });
categorySchema.index({ keywords: 1 });

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
 * @returns {Promise<CategoryDocument[]>}
 */
categorySchema.statics.getActiveForAI = async function() {
  return this.find({ isActive: true })
    .sort({ priority: -1, name: 1 })
    .select('name description keywords aiPromptHint');
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è UI
 * @returns {Promise<CategoryDocument[]>}
 */
categorySchema.statics.getForUI = async function() {
  return this.find({ isActive: true })
    .sort({ priority: -1, name: 1 })
    .select('name description icon color');
};

/**
 * –ù–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Ç–µ–∫—Å—Ç—É —Ü–∏—Ç–∞—Ç—ã (–¥–ª—è fallback –∞–Ω–∞–ª–∏–∑–∞)
 * @param {string} text - –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
 * @returns {Promise<CategoryDocument|null>}
 */
categorySchema.statics.findByText = async function(text) {
  const textLower = text.toLowerCase();
  
  const categories = await this.find({ 
    isActive: true,
    keywords: { $exists: true, $ne: [] }
  }).sort({ priority: -1 });
  
  for (const category of categories) {
    for (const keyword of category.keywords) {
      if (textLower.includes(keyword)) {
        return category;
      }
    }
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  return this.findOne({ name: '–î–†–£–ì–û–ï' }) || 
         this.findOne({ isActive: true }).sort({ priority: -1 });
};

/**
 * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è AI
 * @param {string} categoryName - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç AI
 * @returns {Promise<CategoryDocument|null>}
 */
categorySchema.statics.validateAICategory = async function(categoryName) {
  // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  let category = await this.findOne({ 
    name: categoryName, 
    isActive: true 
  });
  
  if (category) return category;
  
  // –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
  category = await this.findOne({ 
    name: { $regex: new RegExp(categoryName, 'i') }, 
    isActive: true 
  });
  
  if (category) return category;
  
  // –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  category = await this.findOne({
    keywords: { $in: [categoryName.toLowerCase()] },
    isActive: true
  });
  
  return category;
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 * @returns {Promise<Object>}
 */
categorySchema.statics.getStats = async function() {
  const { Quote } = require('./quote');
  
  const [total, active, usageStats] = await Promise.all([
    this.countDocuments(),
    this.countDocuments({ isActive: true }),
    Quote ? Quote.aggregate([
      { $group: { _id: '$category', count: { $sum: 1 } } },
      { $sort: { count: -1 } },
      { $limit: 10 }
    ]) : []
  ]);

  return {
    total,
    active,
    inactive: total - active,
    mostUsed: usageStats
  };
};

/**
 * –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
 */
categorySchema.virtual('keywordsCount').get(function() {
  return this.keywords ? this.keywords.length : 0;
});

/**
 * –ú–µ—Ç–æ–¥ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ–∫—Å—Ç—É
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean}
 */
categorySchema.methods.matchesText = function(text) {
  if (!this.keywords || this.keywords.length === 0) {
    return false;
  }
  
  const textLower = text.toLowerCase();
  return this.keywords.some(keyword => textLower.includes(keyword));
};

/**
 * –ú–µ—Ç–æ–¥ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è AI
 * @returns {string}
 */
categorySchema.methods.getAIPrompt = function() {
  let prompt = `"${this.name}": ${this.description}`;
  
  if (this.keywords && this.keywords.length > 0) {
    prompt += ` (–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${this.keywords.join(', ')})`;
  }
  
  if (this.aiPromptHint) {
    prompt += ` - ${this.aiPromptHint}`;
  }
  
  return prompt;
};

// –í–∫–ª—é—á–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ JSON
categorySchema.set('toJSON', { virtuals: true });
categorySchema.set('toObject', { virtuals: true });

const Category = mongoose.model('Category', categorySchema);

module.exports = Category;

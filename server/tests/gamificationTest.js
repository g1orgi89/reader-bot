/**
 * @fileoverview –¢–µ—Å—Ç –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ Reader Bot
 * @author g1orgi89
 */

const GameificationIntegration = require('../services/gamificationIntegration');
const AchievementService = require('../services/achievementService');
const QuoteHandler = require('../services/quoteHandler');

/**
 * –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
class GameificationTest {
  constructor() {
    this.gamification = GameificationIntegration;
    this.achievementService = new AchievementService();
    this.quoteHandler = new QuoteHandler();
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
   */
  async runAllTests() {
    console.log('üéÆ Starting Gamification Tests...\n');

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      await this.gamification.initialize();
      console.log('‚úÖ Gamification initialized\n');

      // –¢–µ—Å—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      await this.testAchievements();

      // –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–∏—Ç–∞—Ç
      await this.testQuoteHandling();

      // –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      await this.testStatistics();

      console.log('üéÆ All gamification tests completed successfully! üéâ');

    } catch (error) {
      console.error('‚ùå Gamification tests failed:', error);
    }
  }

  /**
   * –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   */
  async testAchievements() {
    console.log('üèÜ Testing Achievement System...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievements = this.achievementService.getAllAchievements();
    console.log(`üìã Total achievements: ${achievements.length}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    achievements.forEach((achievement, index) => {
      console.log(`${index + 1}. ${achievement.icon} ${achievement.name}`);
      console.log(`   ${achievement.description}`);
      console.log(`   Type: ${achievement.type}, Target: ${achievement.targetValue}`);
    });

    console.log('‚úÖ Achievement system test completed\n');
  }

  /**
   * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–∏—Ç–∞—Ç
   */
  async testQuoteHandling() {
    console.log('üìñ Testing Quote Handling...');

    const testQuotes = [
      '"–í –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ ‚Äî —Ü–µ–ª–∞—è –∂–∏–∑–Ω—å" (–ú–∞—Ä–∏–Ω–∞ –¶–≤–µ—Ç–∞–µ–≤–∞)',
      '–°—á–∞—Å—Ç—å–µ –≤–Ω—É—Ç—Ä–∏ –Ω–∞—Å (–ë—É–¥–¥–∞)',
      '–ñ–∏–∑–Ω—å –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞',
      '"–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ª—é–±–∏—Ç—å" (–≠—Ä–∏—Ö –§—Ä–æ–º–º)',
      '–í—Ä–µ–º—è –ª–µ—á–∏—Ç —Ä–∞–Ω—ã'
    ];

    const testUserId = 'test_user_123';

    for (const quoteText of testQuotes) {
      try {
        console.log(`\nTesting quote: "${quoteText}"`);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ü–∏—Ç–∞—Ç—ã
        const parsedQuote = this.quoteHandler._parseQuote(quoteText);
        console.log(`  Parsed - Text: "${parsedQuote.text}"`);
        console.log(`  Parsed - Author: ${parsedQuote.author || 'No author'}`);

        // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î)
        console.log(`  ‚úÖ Quote processing simulation successful`);

      } catch (error) {
        console.error(`  ‚ùå Error processing quote: ${error.message}`);
      }
    }

    console.log('\n‚úÖ Quote handling test completed\n');
  }

  /**
   * –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  async testStatistics() {
    console.log('üìä Testing Statistics...');

    try {
      // –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ
      const serviceInfo = this.gamification.getServiceInfo();
      console.log('Service Info:');
      console.log(`  - Initialized: ${serviceInfo.isInitialized}`);
      console.log(`  - Components: ${JSON.stringify(serviceInfo.components)}`);
      console.log(`  - Features: ${serviceInfo.features.length}`);
      console.log(`  - Achievements: ${serviceInfo.achievements.total}`);

      // –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
      const healthCheck = await this.gamification.healthCheck();
      console.log('\nHealth Check:');
      console.log(`  - Status: ${healthCheck.status}`);
      console.log(`  - Components healthy: ${JSON.stringify(healthCheck.components)}`);

      console.log('\n‚úÖ Statistics test completed\n');

    } catch (error) {
      console.error(`‚ùå Statistics test failed: ${error.message}`);
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
   */
  showAchievementsGuide() {
    console.log('\nüìö GAMIFICATION GUIDE - ACHIEVEMENTS:\n');

    const achievements = this.achievementService.getAllAchievements();
    
    console.log('üéØ HOW TO UNLOCK ACHIEVEMENTS:\n');

    achievements.forEach((achievement, index) => {
      console.log(`${achievement.icon} ${achievement.name}`);
      console.log(`   ${achievement.description}`);
      
      switch (achievement.type) {
        case 'quotes_count':
          console.log(`   üí° Send ${achievement.targetValue} quotes to unlock`);
          break;
        case 'streak_days':
          console.log(`   üí° Send quotes ${achievement.targetValue} days in a row`);
          break;
        case 'classics_count':
          console.log(`   üí° Send ${achievement.targetValue} quotes from classic authors (Tolstoy, Dostoevsky, etc.)`);
          break;
        case 'own_thoughts':
          console.log(`   üí° Send ${achievement.targetValue} quotes without author`);
          break;
        case 'category_diversity':
          console.log(`   üí° Send quotes from ${achievement.targetValue} different categories`);
          break;
        case 'days_with_bot':
          console.log(`   üí° Use the bot for ${achievement.targetValue} days`);
          break;
      }
      console.log('');
    });

    console.log('üìñ "–•–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ - —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏!" - –ê–Ω–Ω–∞ –ë—É—Å–µ–ª\n');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
module.exports = GameificationTest;

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const test = new GameificationTest();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
  test.showAchievementsGuide();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –ë–î –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ)
  // test.runAllTests().catch(console.error);
  
  console.log('üéÆ Gamification components are ready for integration!');
  console.log('üìã Next steps:');
  console.log('  1. Integrate with main Telegram bot');
  console.log('  2. Test with real database');
  console.log('  3. Add commands to bot handlers');
  console.log('  4. Test achievement notifications');
}
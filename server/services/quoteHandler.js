/**
 * @fileoverview –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–∏—Ç–∞—Ç —Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –¥–ª—è –±–æ—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å" (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
 * @author g1orgi89
 * üìã NEW: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ë–î Category –∏ BookCatalog –≤–º–µ—Å—Ç–æ —Ö–∞—Ä–¥–∫–æ–¥–∞
 */

const { Quote, UserProfile } = require('../models');
const { claudeService } = require('./claude');
const promptService = require('./promptService');

/**
 * @typedef {Object} ParsedQuote
 * @property {string} text - –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
 * @property {string|null} author - –ê–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã
 * @property {string|null} source - –ò—Å—Ç–æ—á–Ω–∏–∫ –∫–Ω–∏–≥–∏
 */

/**
 * @typedef {Object} QuoteAnalysis
 * @property {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ü–∏—Ç–∞—Ç—ã
 * @property {string[]} themes - –¢–µ–º—ã —Ü–∏—Ç–∞—Ç—ã
 * @property {string} sentiment - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∫—Ä–∞—Å–∫–∞
 * @property {string} insights - –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã
 */

/**
 * Simplified quote processing service for Mini App
 */
class QuoteHandler {
  constructor() {
    this.initializeModels();
  }

  /**
   * üìã NEW: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MongoDB –º–æ–¥–µ–ª–µ–π
   * @private
   */
  initializeModels() {
    try {
      this.Category = require('../models/Category');
      this.BookCatalog = require('../models/BookCatalog');
      console.info('üìã QuoteHandler: MongoDB models initialized');
    } catch (error) {
      console.error('üìã QuoteHandler: Failed to initialize models:', error.message);
      // Fallback –∫ —Ö–∞—Ä–¥–∫–æ–¥—É –µ—Å–ª–∏ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
      this.Category = null;
      this.BookCatalog = null;
    }
  }

  /**
   * Process quote for Mini App - simplified version
   * @param {string} userId - User ID
   * @param {string} messageText - Quote text
   * @returns {Promise<Object>} Processing result
   */
  async handleQuote(userId, messageText) {
    try {
      // 1. Parse quote
      const parsedQuote = this._parseQuote(messageText);
      
      // 2. Analyze quote with AI
      const analysis = await this._analyzeQuote(parsedQuote.text, parsedQuote.author);
      
      // 3. Save quote
      const quote = await this._saveQuote(userId, parsedQuote, analysis);
      
      // 4. Update user statistics
      await this._updateUserStatistics(userId, parsedQuote.author);
      
      // 5. Get today's count for response
      const todayCount = await this._getTodayQuotesCount(userId);
      
      return {
        success: true,
        quote,
        todayCount
      };
      
    } catch (error) {
      console.error('Error handling quote:', error);
      return {
        success: false,
        message: "Error saving quote. Please try again.",
        error: error.message
      };
    }
  }

  /**
   * Get today's quotes count for user
   * @param {string} userId - User ID
   * @returns {Promise<number>} Today's quotes count
   * @private
   */
  async _getTodayQuotesCount(userId) {
    return await Quote.getTodayQuotesCount(userId);
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
   * @param {string} messageText - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {ParsedQuote} –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
   */
  _parseQuote(messageText) {
    const text = messageText.trim();
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ü–∏—Ç–∞—Ç
    const patterns = [
      // "–¶–∏—Ç–∞—Ç–∞" (–ê–≤—Ç–æ—Ä)
      /^["¬´]([^"¬´¬ª]+)["¬ª]\s*\(([^)]+)\)$/,
      // –¶–∏—Ç–∞—Ç–∞ (–ê–≤—Ç–æ—Ä)
      /^([^(]+)\s*\(([^)]+)\)$/,
      // –¶–∏—Ç–∞—Ç–∞ - –ê–≤—Ç–æ—Ä
      /^([^-]+)\s*[-‚Äì‚Äî]\s*(.+)$/,
      // "–¶–∏—Ç–∞—Ç–∞" –ê–≤—Ç–æ—Ä
      /^["¬´]([^"¬´¬ª]+)["¬ª]\s+(.+)$/
    ];

    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match) {
        return {
          text: match[1].trim(),
          author: match[2].trim(),
          source: null
        };
      }
    }

    // –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –ø–æ–¥–æ—à–ª–∏ - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∞
    return {
      text: text,
      author: null,
      source: null
    };
  }

  /**
   * üìã NEW: –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—É —á–µ—Ä–µ–∑ Claude AI —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –ë–î
   * @param {string} text - –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
   * @param {string|null} author - –ê–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã
   * @returns {Promise<QuoteAnalysis>} –ê–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç—ã
   */
  async _analyzeQuote(text, author) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
      const categories = await this._getAvailableCategories();
      const categoriesList = categories.map(c => c.name).join(', ');

      // –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –∏–∑ –ë–î
      let prompt;
      try {
        const dynamicPrompt = await promptService.getActivePrompt('reader_analysis', 'ru');
        
        // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –ø—Ä–æ–º–ø—Ç–µ
        prompt = dynamicPrompt
          .replace('{text}', text)
          .replace('{author}', author || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
          .replace('{categories}', categoriesList);
          
        console.log('üìñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –∏–∑ –ë–î –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏—Ç–∞—Ç—ã');
        
      } catch (promptError) {
        // Fallback –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∏–∑ –ë–î: ${promptError.message}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback`);
        
        prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É —Ü–∏—Ç–∞—Ç—É –∫–∞–∫ –ø—Å–∏—Ö–æ–ª–æ–≥ –ê–Ω–Ω–∞ –ë—É—Å–µ–ª:

–¶–∏—Ç–∞—Ç–∞: "${text}"
–ê–≤—Ç–æ—Ä: ${author || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoriesList}

–í–µ—Ä–Ω–∏ JSON —Å –∞–Ω–∞–ª–∏–∑–æ–º:
{
  "category": "–æ–¥–Ω–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
  "themes": ["—Ç–µ–º–∞1", "—Ç–µ–º–∞2"],
  "sentiment": "positive/neutral/negative",
  "insights": "–∫—Ä–∞—Ç–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω—Å–∞–π—Ç (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
}`;
      }

      const response = await claudeService.generateResponse(prompt, {
        platform: 'telegram',
        userId: 'quote_analysis'
      });
      
      const analysis = JSON.parse(response.message);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –ë–î –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
      return {
        category: await this._validateCategory(analysis.category, text),
        themes: Array.isArray(analysis.themes) ? analysis.themes.slice(0, 3) : ['—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è'],
        sentiment: ['positive', 'neutral', 'negative'].includes(analysis.sentiment) ? analysis.sentiment : 'neutral',
        insights: analysis.insights || '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è'
      };
      
    } catch (error) {
      console.error('Error analyzing quote:', error);
      
      // Fallback –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ë–î
      return {
        category: await this._getFallbackCategory(text),
        themes: ['–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –æ–ø—ã—Ç'],
        sentiment: 'positive',
        insights: '–ì–ª—É–±–æ–∫–∞—è –º—ã—Å–ª—å –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è'
      };
    }
  }

  /**
   * üìã NEW: –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
   * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   * @private
   */
  async _getAvailableCategories() {
    try {
      if (this.Category) {
        const categories = await this.Category.getActiveForAI();
        if (categories && categories.length > 0) {
          return categories;
        }
      }
      
      // Fallback –∫ —Ö–∞—Ä–¥–∫–æ–¥—É
      return this._getFallbackCategories();
    } catch (error) {
      console.error('üìã Error getting categories from database:', error);
      return this._getFallbackCategories();
    }
  }

  /**
   * üìã NEW: Fallback –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
   * @returns {Array} –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
   * @private
   */
  _getFallbackCategories() {
    return [
      { name: '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', keywords: ['—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', '—Ä–æ—Å—Ç', '—Ä–∞–∑–≤–∏—Ç–∏–µ'] },
      { name: '–õ—é–±–æ–≤—å', keywords: ['–ª—é–±–æ–≤—å', '—Å–µ—Ä–¥—Ü–µ', '—á—É–≤—Å—Ç–≤–∞'] },
      { name: '–§–∏–ª–æ—Å–æ—Ñ–∏—è', keywords: ['–∂–∏–∑–Ω—å', '—Å–º—ã—Å–ª', '–º—É–¥—Ä–æ—Å—Ç—å'] },
      { name: '–ú–æ—Ç–∏–≤–∞—Ü–∏—è', keywords: ['—Ü–µ–ª—å', '—É—Å–ø–µ—Ö', '–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ'] },
      { name: '–ú—É–¥—Ä–æ—Å—Ç—å', keywords: ['–æ–ø—ã—Ç', '–∑–Ω–∞–Ω–∏–µ', '–ø–æ–Ω–∏–º–∞–Ω–∏–µ'] },
      { name: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', keywords: ['—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '—Å–æ–∑–¥–∞–Ω–∏–µ'] },
      { name: '–û—Ç–Ω–æ—à–µ–Ω–∏—è', keywords: ['–æ—Ç–Ω–æ—à–µ–Ω–∏—è', '–¥—Ä—É–∂–±–∞', '–æ–±—â–µ–Ω–∏–µ'] },
      { name: '–ú–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ', keywords: ['–º–∞–º–∞', '–¥–µ—Ç–∏', '—Å–µ–º—å—è'] },
      { name: '–ö–∞—Ä—å–µ—Ä–∞', keywords: ['—Ä–∞–±–æ—Ç–∞', '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è', '–±–∏–∑–Ω–µ—Å'] },
      { name: '–î—Ä—É–≥–æ–µ', keywords: [] }
    ];
  }

  /**
   * üìã NEW: –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ü–∏—Ç–∞—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ë–î
   * @param {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç AI
   * @param {string} text - –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã –¥–ª—è fallback
   * @returns {Promise<string>} –í–∞–ª–∏–¥–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
   * @private
   */
  async _validateCategory(category, text) {
    try {
      if (this.Category) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ –ë–î
        const validCategory = await this.Category.validateAICategory(category);
        if (validCategory) {
          return validCategory;
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        const foundCategory = await this.Category.findByText(text);
        if (foundCategory) {
          return foundCategory.name;
        }
      }
      
      // Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ
      const categories = await this._getAvailableCategories();
      const validCategories = categories.map(c => c.name);
      return validCategories.includes(category) ? category : '–î—Ä—É–≥–æ–µ';
      
    } catch (error) {
      console.error('üìã Error validating category:', error);
      return await this._getFallbackCategory(text);
    }
  }

  /**
   * üìã NEW: Fallback –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
   * @param {string} text - –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
   * @returns {Promise<string>} –ö–∞—Ç–µ–≥–æ—Ä–∏—è
   * @private
   */
  async _getFallbackCategory(text) {
    const textLower = text.toLowerCase();
    const categories = await this._getAvailableCategories();
    
    for (const category of categories) {
      if (category.keywords) {
        const hasKeyword = category.keywords.some(keyword => 
          textLower.includes(keyword.toLowerCase())
        );
        if (hasKeyword) {
          return category.name;
        }
      }
    }
    
    return '–î—Ä—É–≥–æ–µ';
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {ParsedQuote} parsedQuote - –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
   * @param {QuoteAnalysis} analysis - –ê–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç—ã
   * @returns {Promise<Object>} –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
   * @private
   */
  async _saveQuote(userId, parsedQuote, analysis) {
    const quote = new Quote({
      userId,
      text: parsedQuote.text,
      author: parsedQuote.author,
      source: parsedQuote.source,
      category: analysis.category,
      themes: analysis.themes,
      sentiment: analysis.sentiment
    });

    return await quote.save();
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string|null} author - –ê–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã
   * @returns {Promise<void>}
   * @private
   */
  async _updateUserStatistics(userId, author) {
    const user = await UserProfile.findOne({ userId });
    if (user) {
      await user.updateQuoteStats(author);
    }
  }

  /**
   * Simplified user stats for Mini App
   * @param {string} userId - User ID
   * @returns {Promise<Object>} User statistics
   */
  async getUserStats(userId) {
    try {
      const [user, totalQuotes] = await Promise.all([
        UserProfile.findOne({ userId }),
        Quote.countDocuments({ userId })
      ]);

      if (!user) {
        return null;
      }

      return {
        name: user.name,
        totalQuotes,
        currentStreak: user.statistics.currentStreak,
        longestStreak: user.statistics.longestStreak,
        favoriteAuthors: user.statistics.favoriteAuthors.slice(0, 3),
        daysSinceRegistration: user.daysSinceRegistration
      };
    } catch (error) {
      console.error('Error getting user stats:', error);
      return null;
    }
  }

  /**
   * Search user quotes
   * @param {string} userId - User ID
   * @param {string} searchText - Search text
   * @param {number} limit - Result limit
   * @returns {Promise<Object[]>} Found quotes
   */
  async searchQuotes(userId, searchText, limit = 10) {
    try {
      const quotes = await Quote.searchUserQuotes(userId, searchText, limit);
      return quotes.map(quote => ({
        text: quote.text,
        author: quote.author,
        category: quote.category,
        createdAt: quote.createdAt,
        ageInDays: quote.ageInDays
      }));
    } catch (error) {
      console.error('Error searching quotes:', error);
      return [];
    }
  }
}

module.exports = QuoteHandler;
/**
 * @fileoverview –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–∏—Ç–∞—Ç —Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –¥–ª—è –±–æ—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å" (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
 * @author g1orgi89
 * üìã NEW: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ë–î Category –∏ BookCatalog –≤–º–µ—Å—Ç–æ —Ö–∞—Ä–¥–∫–æ–¥–∞
 */

const { Quote, UserProfile } = require('../models');
const AchievementService = require('./achievementService');
const claudeService = require('./claude');
const promptService = require('./promptService');

/**
 * @typedef {Object} ParsedQuote
 * @property {string} text - –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
 * @property {string|null} author - –ê–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã
 * @property {string|null} source - –ò—Å—Ç–æ—á–Ω–∏–∫ –∫–Ω–∏–≥–∏
 */

/**
 * @typedef {Object} QuoteAnalysis
 * @property {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ü–∏—Ç–∞—Ç—ã
 * @property {string[]} themes - –¢–µ–º—ã —Ü–∏—Ç–∞—Ç—ã
 * @property {string} sentiment - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∫—Ä–∞—Å–∫–∞
 * @property {string} insights - –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã
 */

/**
 * Safe JSON extraction from LLM responses that may contain markdown fences
 * @param {string} text - Raw response text that may contain JSON
 * @returns {Object} Parsed JSON object
 * @throws {Error} If no valid JSON found
 */
function safeJsonExtract(text) {
  if (!text || typeof text !== 'string') {
    throw new Error('Invalid input text for JSON extraction');
  }

  // Remove BOM and trim
  const cleanText = text.replace(/^\uFEFF/, '').trim();

  // First try direct JSON parse
  try {
    return JSON.parse(cleanText);
  } catch (directParseError) {
    // Try to extract JSON from markdown code fences (including ```json)
    const fencedMatch = cleanText.match(/```(?:json)?\s*\n?([\s\S]*?)\n?```/);
    if (fencedMatch) {
      try {
        return JSON.parse(fencedMatch[1].trim());
      } catch (fencedParseError) {
        // Fall through to bracket extraction
      }
    }

    // Try to find balanced JSON object {...}
    const openBrace = cleanText.indexOf('{');
    let closeBrace = -1;
    
    if (openBrace !== -1) {
      let braceCount = 0;
      for (let i = openBrace; i < cleanText.length; i++) {
        if (cleanText[i] === '{') braceCount++;
        else if (cleanText[i] === '}') {
          braceCount--;
          if (braceCount === 0) {
            closeBrace = i;
            break;
          }
        }
      }
      
      if (closeBrace !== -1) {
        try {
          const extracted = cleanText.slice(openBrace, closeBrace + 1);
          return JSON.parse(extracted);
        } catch (bracketParseError) {
          // Fall through to insights extraction
        }
      }
    }

    // Try to extract insights from text patterns
    const insightsMatch = cleanText.match(/"insights?"\s*:\s*"([^"]+)"/);
    if (insightsMatch) {
      return {
        category: '–î–†–£–ì–û–ï',
        themes: ['—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è'],
        sentiment: 'neutral',
        insights: insightsMatch[1]
      };
    }

    // Final fallback: safe default object
    return {
      category: '–î–†–£–ì–û–ï',
      themes: ['—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è'],
      sentiment: 'neutral',
      insights: '–ì–ª—É–±–æ–∫–∞—è –º—ã—Å–ª—å –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è'
    };
  }
}

/**
 * Normalize and validate analysis result
 * @param {Object} analysis - Raw analysis object
 * @returns {Object} Normalized analysis
 */
function normalizeAnalysis(analysis) {
  let safeCategory = analysis.category;
  // –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –æ–±—ä–µ–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ Mongo), –±–µ—Ä—ë–º name
  if (typeof safeCategory === 'object' && safeCategory !== null) {
    safeCategory = safeCategory.name || '–î–†–£–ì–û–ï';
  }
  // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—Å—ë –µ—â—ë –Ω–µ —Å—Ç—Ä–æ–∫–∞ ‚Äî fallback
  if (typeof safeCategory !== 'string') {
    safeCategory = '–î–†–£–ì–û–ï';
  }
  const themes = Array.isArray(analysis.themes) && analysis.themes.length > 0 
    ? analysis.themes.slice(0, 3) 
    : ['—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è'];
  return {
    category: safeCategory,
    themes: themes,
    sentiment: ['positive', 'neutral', 'negative'].includes(analysis.sentiment) ? analysis.sentiment : 'neutral',
    insights: typeof analysis.insights === 'string' ? analysis.insights : '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è'
  };
}

/**
 * Wrap a promise with a timeout
 * @param {Promise} promise - Promise to wrap
 * @param {number} timeout - Timeout in milliseconds
 * @returns {Promise} Promise that rejects on timeout
 */
function withTimeout(promise, timeout) {
  return Promise.race([
    promise,
    new Promise((_, reject) => 
      setTimeout(() => reject(new Error('Operation timed out')), timeout)
    )
  ]);
}

/**
 * –°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–∏—Ç–∞—Ç —Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 */
class QuoteHandler {
  constructor() {
    this.achievementService = new AchievementService();
    this.dailyQuoteLimit = 10;
    this.initializeModels();
    
    // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∞–≤—Ç–æ—Ä—ã –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
    this.classicAuthors = [
      '—Ç–æ–ª—Å—Ç–æ–π', '–ª–µ–≤ —Ç–æ–ª—Å—Ç–æ–π', '–ª. —Ç–æ–ª—Å—Ç–æ–π',
      '–¥–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π', '—Ñ–µ–¥–æ—Ä –¥–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π', '—Ñ. –¥–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π',
      '–ø—É—à–∫–∏–Ω', '–∞–ª–µ–∫—Å–∞–Ω–¥—Ä –ø—É—à–∫–∏–Ω', '–∞. –ø—É—à–∫–∏–Ω',
      '—á–µ—Ö–æ–≤', '–∞–Ω—Ç–æ–Ω —á–µ—Ö–æ–≤', '–∞. —á–µ—Ö–æ–≤',
      '—Ç—É—Ä–≥–µ–Ω–µ–≤', '–∏–≤–∞–Ω —Ç—É—Ä–≥–µ–Ω–µ–≤', '–∏. —Ç—É—Ä–≥–µ–Ω–µ–≤',
      '–≥–æ–≥–æ–ª—å', '–Ω–∏–∫–æ–ª–∞–π –≥–æ–≥–æ–ª—å', '–Ω. –≥–æ–≥–æ–ª—å',
      '–ª–µ—Ä–º–æ–Ω—Ç–æ–≤', '–º–∏—Ö–∞–∏–ª –ª–µ—Ä–º–æ–Ω—Ç–æ–≤', '–º. –ª–µ—Ä–º–æ–Ω—Ç–æ–≤'
    ];
  }

  /**
   * üìã NEW: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MongoDB –º–æ–¥–µ–ª–µ–π
   * @private
   */
  initializeModels() {
    try {
      this.Category = require('../models/Category');
      this.BookCatalog = require('../models/BookCatalog');
      console.info('üìã QuoteHandler: MongoDB models initialized');
    } catch (error) {
      console.error('üìã QuoteHandler: Failed to initialize models:', error.message);
      // Fallback –∫ —Ö–∞—Ä–¥–∫–æ–¥—É –µ—Å–ª–∏ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
      this.Category = null;
      this.BookCatalog = null;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ü–∏—Ç–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
   * @param {string} messageText - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ü–∏—Ç–∞—Ç–æ–π
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  async handleQuote(userId, messageText) {
    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ü–∏—Ç–∞—Ç –≤ –¥–µ–Ω—å
      const todayCount = await this._checkDailyLimit(userId);
      if (todayCount >= this.dailyQuoteLimit) {
        return {
          success: false,
          message: "üìñ –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 10 —Ü–∏—Ç–∞—Ç —Å–µ–≥–æ–¥–Ω—è. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è–º–∏!",
          limitReached: true
        };
      }

      // 2. –ü–∞—Ä—Å–∏–º —Ü–∏—Ç–∞—Ç—É
      const parsedQuote = this._parseQuote(messageText);
      
      // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–∏—Ç–∞—Ç—É —á–µ—Ä–µ–∑ AI
      const analysis = await this._analyzeQuote(parsedQuote.text, parsedQuote.author);
      
      // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–∏—Ç–∞—Ç—É
      const quote = await this._saveQuote(userId, parsedQuote, analysis);
      
      // 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this._updateUserStatistics(userId, parsedQuote.author);
      
      // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const newAchievements = await this.achievementService.checkAndUnlockAchievements(userId);
      
      // 7. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ –ê–Ω–Ω—ã
      const response = await this.generateAnnaResponse(parsedQuote, analysis, todayCount + 1, userId);
      
      return {
        success: true,
        message: response,
        quote,
        newAchievements,
        todayCount: todayCount + 1
      };
      
    } catch (error) {
      console.error('Error handling quote:', error);
      return {
        success: false,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        error: error.message
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Ü–∏—Ç–∞—Ç
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<number>} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç —Å–µ–≥–æ–¥–Ω—è
   * @private
   */
  async _checkDailyLimit(userId) {
    return await Quote.getTodayQuotesCount(userId);
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
   * @param {string} messageText - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {ParsedQuote} –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
   */
  _parseQuote(messageText) {
    const text = messageText.trim();
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ü–∏—Ç–∞—Ç
    const patterns = [
      // "–¶–∏—Ç–∞—Ç–∞" (–ê–≤—Ç–æ—Ä)
      /^["¬´]([^"¬´¬ª]+)["¬ª]\s*\(([^)]+)\)$/,
      // –¶–∏—Ç–∞—Ç–∞ (–ê–≤—Ç–æ—Ä)
      /^([^(]+)\s*\(([^)]+)\)$/,
      // –¶–∏—Ç–∞—Ç–∞ - –ê–≤—Ç–æ—Ä
      /^([^-]+)\s*[-‚Äì‚Äî]\s*(.+)$/,
      // "–¶–∏—Ç–∞—Ç–∞" –ê–≤—Ç–æ—Ä
      /^["¬´]([^"¬´¬ª]+)["¬ª]\s+(.+)$/
    ];

    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match) {
        return {
          text: match[1].trim(),
          author: match[2].trim(),
          source: null
        };
      }
    }

    // –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –ø–æ–¥–æ—à–ª–∏ - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∞
    return {
      text: text,
      author: null,
      source: null
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–∏—Ç–∞—Ç—É —Å –ø–æ–º–æ—â—å—é –ò–ò, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
   * 
   * –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –ë–î —á–µ—Ä–µ–∑ this._getAvailableCategories(),
   * –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏—Ç–∞—Ç—ã –∏–∑ PromptService, –∑–∞–º–µ–Ω—è–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
   * –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ claudeService –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
   * –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è fallback –∞–Ω–∞–ª–∏–∑ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏–∑ –ë–î.
   * 
   * @param {string} text - –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   * @param {string|null} author - –ê–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å null)
   * @returns {Promise<QuoteAnalysis>} –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏—Ç–∞—Ç—ã:
   *   - category: —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   *   - themes: –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Å —Ç–µ–º–∞–º–∏ (–º–∞–∫—Å–∏–º—É–º 3)
   *   - sentiment: —Å—Ç—Ä–æ–∫–∞ —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–æ–π ('positive'|'neutral'|'negative')
   *   - insights: —Å—Ç—Ä–æ–∫–∞ —Å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Å–∞–π—Ç–∞–º–∏
   * @throws {Error} –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback –∞–Ω–∞–ª–∏–∑
   * @since 1.0.0
   */
  async _analyzeQuote(text, author) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ _getAvailableCategories()
      const categories = await this._getAvailableCategories();
      const categoriesList = categories.map(c => c.name).join(', ');

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏—Ç–∞—Ç—ã –∏–∑ PromptService –∏–∑ –ë–î –º–µ—Ç–æ–¥–æ–º getActivePrompt('quote_analysis')
      let prompt;
      try {
        const dynamicPrompt = await promptService.getActivePrompt('quote_analysis');
        
        // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã {text}, {author}, {categories} –≤ –ø—Ä–æ–º–ø—Ç–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ claudeService
        prompt = dynamicPrompt
          .replace('{text}', text)
          .replace('{author}', author || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
          .replace('{categories}', categoriesList);
          
        console.log('üìñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –∏–∑ –ë–î –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏—Ç–∞—Ç—ã');
        
      } catch (promptError) {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –ø—Ä–æ–º–ø—Ç
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∏–∑ –ë–î: ${promptError.message}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback`);
        
        prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É —Ü–∏—Ç–∞—Ç—É –∫–∞–∫ –ø—Å–∏—Ö–æ–ª–æ–≥ –ê–Ω–Ω–∞ –ë—É—Å–µ–ª:

–¶–∏—Ç–∞—Ç–∞: "${text}"
–ê–≤—Ç–æ—Ä: ${author || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoriesList}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —á–∏—Å—Ç—ã–π JSON –±–µ–∑ markdown –∫–æ–¥–∞ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:
{
  "category": "–æ–¥–Ω–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
  "themes": ["—Ç–µ–º–∞1", "—Ç–µ–º–∞2"],
  "sentiment": "positive/neutral/negative",
  "insights": "–∫—Ä–∞—Ç–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω—Å–∞–π—Ç (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
}`;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ claudeService.generateResponse —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const response = await withTimeout(
        claudeService.generateResponse(prompt, {
          platform: 'telegram',
          userId: 'quote_analysis'
        }),
        15000 // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      );
      console.log('[DEBUG] Claude raw response:', response);
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏–º JSON —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π markdown –±–ª–æ–∫–æ–≤
      const rawAnalysis = safeJsonExtract(response.message);
      const analysis = normalizeAnalysis(rawAnalysis);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –ë–î –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
      return {
        category: await this._validateCategory(analysis.category, text),
        themes: analysis.themes,
        sentiment: analysis.sentiment,
        insights: analysis.insights
      };
      
    } catch (error) {
      console.error('Error analyzing quote:', error);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∞–Ω–∞–ª–∏–∑ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏–∑ –ë–î –∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏/–∏–Ω—Å–∞–π—Ç–æ–º
      return {
        category: await this._getFallbackCategory(text),
        themes: ['–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –æ–ø—ã—Ç'],
        sentiment: 'positive',
        insights: '–ì–ª—É–±–æ–∫–∞—è –º—ã—Å–ª—å –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è'
      };
    }
  }

  /**
   * üìã NEW: –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
   * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   * @private
   */
  async _getAvailableCategories() {
    try {
      if (this.Category) {
        const categories = await this.Category.getActiveForAI();
        if (categories && categories.length > 0) {
          return categories;
        }
      }
      
      // Fallback –∫ —Ö–∞—Ä–¥–∫–æ–¥—É
      return this._getFallbackCategories();
    } catch (error) {
      console.error('üìã Error getting categories from database:', error);
      return this._getFallbackCategories();
    }
  }

  /**
   * üìã NEW: Fallback –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å 14 –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Å–∞–π—Ç–∞)
   * @returns {Array} –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
   * @private
   */
  _getFallbackCategories() {
    return [
      { name: '–ö–†–ò–ó–ò–°–´', keywords: ['–∫—Ä–∏–∑–∏—Å', '—Ç—Ä—É–¥–Ω–æ—Å—Ç', '–ø—Ä–æ–±–ª–µ–º', '–ø—Ä–µ–æ–¥–æ–ª–µ'] },
      { name: '–Ø ‚Äî –ñ–ï–ù–©–ò–ù–ê', keywords: ['–∂–µ–Ω—â–∏–Ω', '–∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç', '—Å–∏–ª–∞', '–∫—Ä–∞—Å–æ—Ç–∞'] },
      { name: '–õ–Æ–ë–û–í–¨', keywords: ['–ª—é–±–æ–≤—å', '—Å–µ—Ä–¥—Ü–µ', '—á—É–≤—Å—Ç–≤', '—Å—Ç—Ä–∞—Å—Ç'] },
      { name: '–û–¢–ù–û–®–ï–ù–ò–Ø', keywords: ['–æ—Ç–Ω–æ—à–µ–Ω–∏', '–æ–±—â–µ–Ω–∏', '–¥—Ä—É–∂–±', '–±–ª–∏–∑–æ—Å—Ç'] },
      { name: '–î–ï–ù–¨–ì–ò', keywords: ['–¥–µ–Ω—å–≥', '–±–æ–≥–∞—Ç—Å—Ç–≤', '—Ñ–∏–Ω–∞–Ω—Å', '—É—Å–ø–µ—Ö'] },
      { name: '–û–î–ò–ù–û–ß–ï–°–¢–í–û', keywords: ['–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤', '—É–µ–¥–∏–Ω–µ–Ω–∏', '—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç'] },
      { name: '–°–ú–ï–†–¢–¨', keywords: ['—Å–º–µ—Ä—Ç—å', '–∫–æ–Ω–µ—á–Ω–æ—Å—Ç', '–±—Ä–µ–Ω–Ω–æ—Å—Ç', '—É—Ç—Ä–∞—Ç'] },
      { name: '–°–ï–ú–ï–ô–ù–´–ï –û–¢–ù–û–®–ï–ù–ò–Ø', keywords: ['—Å–µ–º—å', '—Ä–æ–¥–∏—Ç–µ–ª', '–¥–µ—Ç–∏', '—Å–µ–º–µ–π–Ω'] },
      { name: '–°–ú–´–°–õ –ñ–ò–ó–ù–ò', keywords: ['—Å–º—ã—Å–ª', '–ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏', '—Ü–µ–ª—å', '–º–∏—Å—Å–∏—è'] },
      { name: '–°–ß–ê–°–¢–¨–ï', keywords: ['—Å—á–∞—Å—Ç—å', '—Ä–∞–¥–æ—Å—Ç', '–≤–µ—Å–µ–ª—å–µ', '—É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏'] },
      { name: '–í–†–ï–ú–Ø –ò –ü–†–ò–í–´–ß–ö–ò', keywords: ['–≤—Ä–µ–º—è', '–ø—Ä–∏–≤—ã—á–∫', '—Ä—É—Ç–∏–Ω', '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏'] },
      { name: '–î–û–ë–†–û –ò –ó–õ–û', keywords: ['–¥–æ–±—Ä–æ', '–∑–ª–æ', '–º–æ—Ä–∞–ª—å', '—ç—Ç–∏–∫–∞'] },
      { name: '–û–ë–©–ï–°–¢–í–û', keywords: ['–æ–±—â–µ—Å—Ç–≤–æ', '—Å–æ—Ü–∏—É–º', '–º–∏—Ä', '–ª—é–¥–∏'] },
      { name: '–ü–û–ò–°–ö –°–ï–ë–Ø', keywords: ['—Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏', '—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏', '–ø–æ–∏—Å–∫', '—Ä–æ—Å—Ç', '—Ä–∞–∑–≤–∏—Ç–∏'] },
      { name: '–î–†–£–ì–û–ï', keywords: [] }
    ];
  }

  /**
   * üìã NEW: –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ü–∏—Ç–∞—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ë–î
   * @param {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç AI
   * @param {string} text - –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã –¥–ª—è fallback
   * @returns {Promise<string>} –í–∞–ª–∏–¥–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
   * @private
   */
  async _validateCategory(category, text) {
    // 1. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è "–î—Ä—É–≥–æ–µ" –≤ –ª—é–±–æ–π –≤–∞—Ä–∏–∞—Ü–∏–∏ –∫ "–î–†–£–ì–û–ï"
    if (typeof category === 'string' && category.trim().toUpperCase() === '–î–†–£–ì–û–ï') {
    return '–î–†–£–ì–û–ï';
    }
    try {
      if (this.Category) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ –ë–î
        const validCategory = await this.Category.validateAICategory(category);
        if (validCategory) {
          return validCategory.name;
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        const foundCategory = await this.Category.findByText(text);
        if (foundCategory) {
          return foundCategory.name;
        }
      }
      
      // Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ
      const categories = await this._getAvailableCategories();
      const validCategories = categories.map(c => c.name);
      return validCategories.includes(category) ? category : '–î–†–£–ì–û–ï';
      
    } catch (error) {
      console.error('üìã Error validating category:', error);
      return await this._getFallbackCategory(text);
    }
  }

  /**
   * üìã NEW: Fallback –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
   * @param {string} text - –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
   * @returns {Promise<string>} –ö–∞—Ç–µ–≥–æ—Ä–∏—è
   * @private
   */
  async _getFallbackCategory(text) {
    const textLower = text.toLowerCase();
    const categories = await this._getAvailableCategories();
    
    for (const category of categories) {
      if (category.keywords) {
        const hasKeyword = category.keywords.some(keyword => 
          textLower.includes(keyword.toLowerCase())
        );
        if (hasKeyword) {
          return category.name;
        }
      }
    }
    
    return '–î–†–£–ì–û–ï';
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {ParsedQuote} parsedQuote - –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
   * @param {QuoteAnalysis} analysis - –ê–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç—ã
   * @returns {Promise<Object>} –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
   * @private
   */
  async _saveQuote(userId, parsedQuote, analysis) {
    const quote = new Quote({
      userId,
      text: parsedQuote.text,
      author: parsedQuote.author,
      source: parsedQuote.source,
      category: analysis.category,
      themes: analysis.themes,
      sentiment: analysis.sentiment,
      insights: analysis.insights
    });

    return await quote.save();
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string|null} author - –ê–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã
   * @returns {Promise<void>}
   * @private
   */
  async _updateUserStatistics(userId, author) {
    const user = await UserProfile.findOne({ userId });
    if (user) {
      await user.updateQuoteStats(author);
    }
  }

  /**
   * üìã NEW: –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ –ê–Ω–Ω—ã –ë—É—Å–µ–ª —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∏–∑ –ë–î
   * @param {ParsedQuote} parsedQuote - –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
   * @param {QuoteAnalysis} analysis - –ê–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç—ã
   * @param {number} todayCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç —Å–µ–≥–æ–¥–Ω—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<string>} –û—Ç–≤–µ—Ç –±–æ—Ç–∞
   * @private
   */
  async generateAnnaResponse(parsedQuote, analysis, todayCount, userId) {
    const { author } = parsedQuote;
    const isClassicAuthor = author && this._isClassicAuthor(author);
    
    // –ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤
    const baseTemplates = [
      `‚ú® –ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞! ${author ? `${author} —É–º–µ–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –≥–ª—É–±–∏–Ω—É –≤ –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª–æ–≤–∞—Ö.` : '–ú—É–¥—Ä—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è.'}`,
      `üìñ –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä! ${analysis.insights}`,
      `üí≠ –û—á–µ–Ω—å –≥–ª—É–±–æ–∫–æ! –≠—Ç–∞ –º—ã—Å–ª—å –æ ${analysis.themes[0]} –æ—Å–æ–±–µ–Ω–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω–∞.`,
      `üåü –°–æ—Ö—Ä–∞–Ω–∏–ª–∞ –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫. ${author ? `${author} - –æ–¥–∏–Ω –∏–∑ –º–æ–∏—Ö –ª—é–±–∏–º—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤.` : '–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –º—ã—Å–ª—å!'}`
    ];

    // –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∏–∫–æ–≤
    if (isClassicAuthor) {
      baseTemplates.push(
        `üìö ${author} - –∫–ª–∞—Å—Å–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ç–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏. –ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä!`,
        `‚≠ê –†—É—Å—Å–∫–∞—è –∫–ª–∞—Å—Å–∏–∫–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Å–∞–º–æ–µ —Å–µ—Ä–¥—Ü–µ. ${author} - –º—É–¥—Ä—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫.`
      );
    }

    const baseResponse = baseTemplates[Math.floor(Math.random() * baseTemplates.length)];
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ–¥–µ–ª–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º userId
    const weekQuotes = await this._getWeekQuotesCount(userId);
    
    let fullResponse = `${baseResponse}\n\n–°–æ—Ö—Ä–∞–Ω–∏–ª –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ üìñ\n–¶–∏—Ç–∞—Ç –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: ${weekQuotes}`;

    // üìã NEW: –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∏–∑ –ë–î (30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
    if (Math.random() < 0.3) {
      const recommendation = await this._getBookRecommendation(analysis.category, isClassicAuthor);
      if (recommendation) {
        fullResponse += `\n\nüí° ${recommendation}`;
      }
    }

    // –ü–æ–æ—â—Ä–µ–Ω–∏–µ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if (todayCount >= 5) {
      fullResponse += '\n\nüî• –û—Ç–ª–∏—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –º—É–¥—Ä–æ—Å—Ç–∏.';
    }

    return fullResponse;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–≤—Ç–æ—Ä –∫–ª–∞—Å—Å–∏–∫–æ–º
   * @param {string} author - –ê–≤—Ç–æ—Ä
   * @returns {boolean}
   * @private
   */
  _isClassicAuthor(author) {
    const authorLower = author.toLowerCase();
    return this.classicAuthors.some(classic => 
      authorLower.includes(classic) || classic.includes(authorLower)
    );
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç –∑–∞ –Ω–µ–¥–µ–ª—é
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<number>}
   * @private
   */
  async _getWeekQuotesCount(userId) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
      const now = new Date();
      const dayOfWeek = now.getDay();
      const diff = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∫–∞–∫ –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏
      const weekStart = new Date(now);
      weekStart.setDate(now.getDate() + diff);
      weekStart.setHours(0, 0, 0, 0);
      
      const weekEnd = new Date(weekStart);
      weekEnd.setDate(weekStart.getDate() + 7);
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–∏—Ç–∞—Ç—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
      const count = await Quote.countDocuments({
        userId,
        createdAt: {
          $gte: weekStart,
          $lt: weekEnd
        }
      });
      
      return count;
    } catch (error) {
      console.error('Error getting week quotes count:', error);
      return 0;
    }
  }

  /**
   * üìã NEW: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∫–Ω–∏–≥–∏ –∏–∑ –ë–î –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   * @param {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ü–∏—Ç–∞—Ç—ã
   * @param {boolean} isClassic - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–≤—Ç–æ—Ä –∫–ª–∞—Å—Å–∏–∫–æ–º
   * @returns {Promise<string|null>} –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
   * @private
   */
  async _getBookRecommendation(category, isClassic) {
    try {
      if (this.BookCatalog) {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –ë–î –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const recommendations = await this.BookCatalog.getRecommendationsByThemes([category]);
        
        if (recommendations && recommendations.length > 0) {
          const book = recommendations[0];
          return `–ö—Å—Ç–∞—Ç–∏, –µ—Å–ª–∏ –≤–∞—Å –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–º–∞ "${category}", —É –ê–Ω–Ω—ã –µ—Å—Ç—å —Ä–∞–∑–±–æ—Ä "${book.title}".`;
        }
      }
      
      // Fallback –∫ —Ö–∞—Ä–¥–∫–æ–¥—É
      return this._getFallbackBookRecommendation(category, isClassic);
      
    } catch (error) {
      console.error('üìã Error getting book recommendation from database:', error);
      return this._getFallbackBookRecommendation(category, isClassic);
    }
  }

  /**
   * üìã NEW: Fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∫–Ω–∏–≥–∏ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
   * @param {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ü–∏—Ç–∞—Ç—ã
   * @param {boolean} isClassic - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–≤—Ç–æ—Ä –∫–ª–∞—Å—Å–∏–∫–æ–º
   * @returns {string|null} –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
   * @private
   */
  _getFallbackBookRecommendation(category, _isClassic) {
    const recommendations = {
      '–ö–†–ò–ó–ò–°–´': [
        '–ï—Å–ª–∏ –≤—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, —É –ê–Ω–Ω—ã –µ—Å—Ç—å —Ä–∞–∑–±–æ—Ä "–ò—Å–∫—É—Å—Å—Ç–≤–æ –±—ã—Ç—å".',
        '–í –∫—Ä–∏–∑–∏—Å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –ø–æ–ª–µ–∑–µ–Ω —Ä–∞–∑–±–æ—Ä –ê–Ω–Ω—ã "–ú–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏–Ω—Ü" - –æ –ø–æ–∏—Å–∫–µ —Å–≤–µ—Ç–∞ –≤ —Ç–µ–º–Ω–æ—Ç–µ.'
      ],
      '–Ø ‚Äî –ñ–ï–ù–©–ò–ù–ê': [
        '–î–ª—è –∂–µ–Ω—â–∏–Ω, –∏—â—É—â–∏—Ö —Å–≤–æ—é —Å–∏–ª—É, —É –ê–Ω–Ω—ã –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫—É—Ä—Å "–ú—É–¥—Ä–∞—è –∂–µ–Ω—â–∏–Ω–∞".',
        '–ü–æ —Ç–µ–º–µ –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∏—Ç—å —Ä–∞–∑–±–æ—Ä "–ë—ã—Ç—å —Å–æ–±–æ–π" –æ—Ç –ê–Ω–Ω—ã.'
      ],
      '–õ–Æ–ë–û–í–¨': [
        '–ï—Å–ª–∏ —Ç–µ–º–∞ –ª—é–±–≤–∏ –≤–∞–º –±–ª–∏–∑–∫–∞, —É –ê–Ω–Ω—ã –µ—Å—Ç—å –≥–ª—É–±–æ–∫–∏–π —Ä–∞–∑–±–æ—Ä "–ò—Å–∫—É—Å—Å—Ç–≤–æ –ª—é–±–∏—Ç—å".',
        '–ü–æ —Ç–µ–º–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∏—Ç—å —Ä–∞–∑–±–æ—Ä "–ë—ã—Ç—å —Å–æ–±–æ–π" –æ—Ç –ê–Ω–Ω—ã.'
      ],
      '–û–¢–ù–û–®–ï–ù–ò–Ø': [
        '–î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π —É –ê–Ω–Ω—ã –µ—Å—Ç—å —Ä–∞–∑–±–æ—Ä "–ò—Å–∫—É—Å—Å—Ç–≤–æ –ª—é–±–∏—Ç—å" –≠—Ä–∏—Ö–∞ –§—Ä–æ–º–º–∞.',
        '–ü–æ —Ç–µ–º–µ –æ–±—â–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∫—É—Ä—Å –ê–Ω–Ω—ã –æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ.'
      ],
      '–î–ï–ù–¨–ì–ò': [
        '–ü–æ —Ç–µ–º–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ —É –ê–Ω–Ω—ã –µ—Å—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ –±–∞–ª–∞–Ω—Å–µ –∏ —É—Å–ø–µ—Ö–µ.',
        '–î–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –¥–µ–Ω—å–≥–∞–º –∏–∑—É—á–∏—Ç–µ —Ä–∞–∑–±–æ—Ä "–ê–ª—Ö–∏–º–∏–∫" –æ—Ç –ê–Ω–Ω—ã.'
      ],
      '–°–ï–ú–ï–ô–ù–´–ï –û–¢–ù–û–®–ï–ù–ò–Ø': [
        '–î–ª—è —Å–µ–º–µ–π–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π —É –ê–Ω–Ω—ã –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫—É—Ä—Å "–ú—É–¥—Ä–∞—è –º–∞–º–∞".',
        '–ü–æ —Ç–µ–º–µ —Å–µ–º—å–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∏—Ç—å –ø–æ–¥—Ö–æ–¥ –ê–Ω–Ω—ã –∫ –±–∞–ª–∞–Ω—Å—É –∂–∏–∑–Ω–∏.'
      ],
      '–°–ú–´–°–õ –ñ–ò–ó–ù–ò': [
        '–î–ª—è –ø–æ–∏—Å–∫–∞ —Å–º—ã—Å–ª–∞ —É –ê–Ω–Ω—ã –µ—Å—Ç—å —Ä–∞–∑–±–æ—Ä "–ü–∏—Å—å–º–∞ –∫ –º–æ–ª–æ–¥–æ–º—É –ø–æ—ç—Ç—É" –†–∏–ª—å–∫–µ.',
        '–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –≤ —Ä–∞–∑–±–æ—Ä–µ "–ú–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏–Ω—Ü" –æ—Ç –ê–Ω–Ω—ã.'
      ],
      '–°–ß–ê–°–¢–¨–ï': [
        '–î–ª—è –æ–±—Ä–µ—Ç–µ–Ω–∏—è —Å—á–∞—Å—Ç—å—è —É –ê–Ω–Ω—ã –µ—Å—Ç—å —Ä–∞–∑–±–æ—Ä –æ —Ä–∞–¥–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Å—Ç—ã—Ö –≤–µ—â–∞—Ö.',
        '–ü–æ —Ç–µ–º–µ —Å—á–∞—Å—Ç—å—è –∏–∑—É—á–∏—Ç–µ –ø–æ–¥—Ö–æ–¥ –ê–Ω–Ω—ã –∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏.'
      ],
      '–ü–û–ò–°–ö –°–ï–ë–Ø': [
        '–ö—Å—Ç–∞—Ç–∏, –µ—Å–ª–∏ –≤–∞—Å –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ, —É –ê–Ω–Ω—ã –µ—Å—Ç—å —Ä–∞–∑–±–æ—Ä "–ë—ã—Ç—å —Å–æ–±–æ–π".',
        '–ü–æ —Ç–µ–º–µ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Ä–∞–∑–±–æ—Ä –ê–Ω–Ω—ã "–ò—Å–∫—É—Å—Å—Ç–≤–æ –ª—é–±–∏—Ç—å" –≠—Ä–∏—Ö–∞ –§—Ä–æ–º–º–∞.'
      ]
    };

    const categoryRecs = recommendations[category];
    if (categoryRecs) {
      return categoryRecs[Math.floor(Math.random() * categoryRecs.length)];
    }

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const generalRecs = [
      '–£ –ê–Ω–Ω—ã –µ—Å—Ç—å –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã –∫–Ω–∏–≥ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è.',
      '–ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Ä–∞–∑–±–æ—Ä–æ–≤ –ê–Ω–Ω—ã - —Ç–∞–º –º–Ω–æ–≥–æ —Å–æ–∑–≤—É—á–Ω–æ–≥–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.'
    ];

    return generalRecs[Math.floor(Math.random() * generalRecs.length)];
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object[]} newAchievements - –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   * @returns {Promise<string[]>} –°–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
   */
  async handleAchievements(userId, newAchievements) {
    const messages = [];
    
    for (const achievement of newAchievements) {
      const message = this.achievementService.formatAchievementNotification(achievement);
      messages.push(message);
    }
    
    return messages;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–º–∞–Ω–¥
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserStats(userId) {
    try {
      const [user, totalQuotes, achievementStats] = await Promise.all([
        UserProfile.findOne({ userId }),
        Quote.countDocuments({ userId }),
        this.achievementService.getUserAchievementStats(userId)
      ]);

      if (!user) {
        return null;
      }

      return {
        name: user.name,
        totalQuotes,
        currentStreak: user.statistics.currentStreak,
        longestStreak: user.statistics.longestStreak,
        favoriteAuthors: user.statistics.favoriteAuthors.slice(0, 3),
        daysSinceRegistration: user.daysSinceRegistration,
        achievements: achievementStats
      };
    } catch (error) {
      console.error('Error getting user stats:', error);
      return null;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ —Ü–∏—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} searchText - –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
   * @param {number} limit - –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   * @returns {Promise<Object[]>} –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
   */
  async searchQuotes(userId, searchText, limit = 10) {
    try {
      const quotes = await Quote.searchUserQuotes(userId, searchText, limit);
      return quotes.map(quote => ({
        text: quote.text,
        author: quote.author,
        category: quote.category,
        createdAt: quote.createdAt,
        ageInDays: quote.ageInDays
      }));
    } catch (error) {
      console.error('Error searching quotes:', error);
      return [];
    }
  }

   /**
   * –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏—Ç–∞—Ç—ã (–¥–ª—è API endpoints)
   * @param {string} text - –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
   * @param {string|null} author - –ê–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã
   * @returns {Promise<QuoteAnalysis>} –ê–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç—ã
   */
  async analyzeQuote(text, author = null) {
    return await this._analyzeQuote(text, author);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç —Å–µ–≥–æ–¥–Ω—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<number>} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç —Å–µ–≥–æ–¥–Ω—è
   */
  async getTodayQuotesCount(userId) {
    return await this._checkDailyLimit(userId);
  }
}

module.exports = QuoteHandler;
module.exports.safeJsonExtract = safeJsonExtract;
module.exports.normalizeAnalysis = normalizeAnalysis;
module.exports.withTimeout = withTimeout;

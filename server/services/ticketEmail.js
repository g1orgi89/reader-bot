/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–±–æ—Ä–æ–º email –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤
 * @file server/services/ticketEmail.js
 */

const logger = require('../utils/logger');
const TicketService = require('./ticketing');

/**
 * @typedef {Object} PendingTicket
 * @property {string} ticketId - ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
 * @property {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
 * @property {string} conversationId - ID —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
 * @property {Date} createdAt - –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
 * @property {Date} expiresAt - –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
 */

/**
 * @class TicketEmailService
 * @description –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Å–±–æ—Ä–∞ email –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤
 */
class TicketEmailService {
  constructor() {
    /**
     * –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–ø–æ–ª–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö email
     * @type {Map<string, PendingTicket>}
     */
    this.pendingTickets = new Map();
    
    /**
     * –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è email –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (5 –º–∏–Ω—É—Ç)
     * @type {number}
     */
    this.EMAIL_TIMEOUT = 5 * 60 * 1000;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    this.startCleanupTimer();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} language - –Ø–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {boolean} True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç
   */
  shouldCreateTicket(message, language = 'en') {
    const lowerMessage = message.toLowerCase();
    
    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–æ–±–ª–µ–º –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    const problemKeywords = {
      en: [
        'error', 'bug', 'problem', 'issue', 'not work', 'broken', 'failed', 'stuck',
        'can\'t', 'cannot', 'unable', 'help', 'support', 'urgent', 'crash',
        'wallet', 'transaction', 'balance', 'staking', 'farming'
      ],
      ru: [
        '–æ—à–∏–±–∫–∞', '–±–∞–≥', '–ø—Ä–æ–±–ª–µ–º–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '—Å–ª–æ–º–∞–Ω–æ', '–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å',
        '–Ω–µ –º–æ–≥—É', '–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è', '–ø–æ–º–æ—â—å', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '—Å—Ä–æ—á–Ω–æ', '–∞–≤–∞—Ä–∏—è',
        '–∫–æ—à–µ–ª–µ–∫', '—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', '–±–∞–ª–∞–Ω—Å', '—Å—Ç–µ–π–∫–∏–Ω–≥', '—Ñ–∞—Ä–º–∏–Ω–≥'
      ],
      es: [
        'error', 'problema', 'fallo', 'roto', 'no funciona', 'ayuda', 'soporte',
        'urgente', 'billetera', 'transacci√≥n', 'balance', 'staking', 'farming'
      ]
    };

    const keywords = problemKeywords[language] || problemKeywords.en;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const hasKeywords = keywords.some(keyword => lowerMessage.includes(keyword));
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    const hasQuestionMark = message.includes('?');
    const isLongMessage = message.length > 50; // –î–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
    
    return hasKeywords || (hasQuestionMark && isLongMessage);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–∏–∫–µ—Ç –±–µ–∑ email –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ
   * @param {Object} ticketData - –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
   */
  async createPendingTicket(ticketData) {
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç –±–µ–∑ email —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending_email
      const ticket = await TicketService.createTicket({
        ...ticketData,
        email: null, // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º email
        status: 'open', // –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        metadata: {
          ...ticketData.metadata,
          pendingEmail: true, // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –æ–∂–∏–¥–∞–µ–º email
          emailRequested: true
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      const pendingTicket = {
        ticketId: ticket.ticketId,
        userId: ticketData.userId,
        conversationId: ticketData.conversationId,
        createdAt: new Date(),
        expiresAt: new Date(Date.now() + this.EMAIL_TIMEOUT)
      };

      this.pendingTickets.set(ticketData.userId, pendingTicket);
      
      logger.info(`Pending ticket created: ${ticket.ticketId} for user ${ticketData.userId}`);
      
      return {
        success: true,
        ticket,
        pendingEmail: true,
        message: this.getEmailRequestMessage(ticketData.language)
      };
    } catch (error) {
      logger.error(`Error creating pending ticket: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ email –∞–¥—Ä–µ—Å–æ–º
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {boolean} True –µ—Å–ª–∏ —ç—Ç–æ email
   */
  isEmailMessage(message) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const trimmedMessage = message.trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ email –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ email –≤ –∫–æ—Ä–æ—Ç–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    return emailRegex.test(trimmedMessage) || 
           (trimmedMessage.length < 50 && trimmedMessage.includes('@'));
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç email –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ email
   * @returns {string|null} Email –∞–¥—Ä–µ—Å –∏–ª–∏ null
   */
  extractEmail(message) {
    const emailRegex = /([^\s@]+@[^\s@]+\.[^\s@]+)/;
    const match = message.match(emailRegex);
    return match ? match[1].toLowerCase() : null;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∏–∫–µ—Ç —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º email
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} email - Email –∞–¥—Ä–µ—Å
   * @param {string} language - –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  async updateTicketWithEmail(userId, email, language = 'en') {
    try {
      const pendingTicket = this.pendingTickets.get(userId);
      
      if (!pendingTicket) {
        logger.warn(`No pending ticket found for user: ${userId}`);
        return {
          success: false,
          message: 'No pending ticket found'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–∏–∫–µ—Ç
      if (new Date() > pendingTicket.expiresAt) {
        this.pendingTickets.delete(userId);
        logger.warn(`Pending ticket expired for user: ${userId}`);
        return {
          success: false,
          message: 'Ticket request expired. Please create a new support request.'
        };
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç —Å email
      const updatedTicket = await TicketService.updateTicketByTicketId(
        pendingTicket.ticketId, 
        {
          email: email,
          'metadata.pendingEmail': false,
          'metadata.emailCollected': true,
          'metadata.emailCollectedAt': new Date()
        }
      );

      if (updatedTicket) {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
        this.pendingTickets.delete(userId);
        
        logger.info(`Email collected for ticket: ${pendingTicket.ticketId} - ${email}`);
        
        return {
          success: true,
          ticket: updatedTicket,
          message: this.getEmailConfirmationMessage(language)
        };
      } else {
        logger.error(`Failed to update ticket: ${pendingTicket.ticketId}`);
        return {
          success: false,
          message: 'Failed to update ticket with email'
        };
      }
    } catch (error) {
      logger.error(`Error updating ticket with email: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∏–∫–µ—Ç –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ email
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {PendingTicket|null} –¢–∏–∫–µ—Ç –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∏–ª–∏ null
   */
  getPendingTicket(userId) {
    const pendingTicket = this.pendingTickets.get(userId);
    
    if (pendingTicket && new Date() > pendingTicket.expiresAt) {
      // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–∏–∫–µ—Ç
      this.pendingTickets.delete(userId);
      return null;
    }
    
    return pendingTicket;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–ø—Ä–æ—Å email –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
   * @param {string} language - –Ø–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {string} –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ email
   */
  getEmailRequestMessage(language = 'en') {
    const messages = {
      en: "üé´ I've created a support ticket for you! To help our mushroom experts reach you, please share your email address:",
      ru: "üé´ –Ø —Å–æ–∑–¥–∞–ª —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ç–µ–±—è! –ß—Ç–æ–±—ã –Ω–∞—à–∏ –≥—Ä–∏–±–Ω—ã–µ —ç–∫—Å–ø–µ—Ä—Ç—ã —Å–º–æ–≥–ª–∏ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è, –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º email –∞–¥—Ä–µ—Å–æ–º:",
      es: "üé´ ¬°He creado un ticket de soporte para ti! Para que nuestros expertos en hongos puedan contactarte, comparte tu direcci√≥n de email:"
    };
    
    return messages[language] || messages.en;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è email
   * @param {string} language - –Ø–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è  
   * @returns {string} –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
   */
  getEmailConfirmationMessage(language = 'en') {
    const messages = {
      en: "‚úÖ Perfect! Your ticket has been updated with your email. Our mushroom experts will contact you within 24 hours. Your spores are in good hands! üçÑ",
      ru: "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–∏–∫–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ç–≤–æ–∏–º email. –ù–∞—à–∏ –≥—Ä–∏–±–Ω—ã–µ —ç–∫—Å–ø–µ—Ä—Ç—ã —Å–≤—è–∂—É—Ç—Å—è —Å —Ç–æ–±–æ–π –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. –¢–≤–æ–∏ —Å–ø–æ—Ä—ã –≤ –Ω–∞–¥–µ–∂–Ω—ã—Ö —Ä—É–∫–∞—Ö! üçÑ",
      es: "‚úÖ ¬°Perfecto! Tu ticket ha sido actualizado con tu email. Nuestros expertos en hongos te contactar√°n dentro de 24 horas. ¬°Tus esporas est√°n en buenas manos! üçÑ"
    };
    
    return messages[language] || messages.en;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
   * @private
   */
  startCleanupTimer() {
    setInterval(() => {
      this.cleanupExpiredTickets();
    }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã –∏–∑ –ø–∞–º—è—Ç–∏
   * @private
   */
  cleanupExpiredTickets() {
    const now = new Date();
    let cleanedCount = 0;
    
    for (const [userId, pendingTicket] of this.pendingTickets.entries()) {
      if (now > pendingTicket.expiresAt) {
        this.pendingTickets.delete(userId);
        cleanedCount++;
        logger.info(`Cleaned up expired pending ticket: ${pendingTicket.ticketId}`);
      }
    }
    
    if (cleanedCount > 0) {
      logger.info(`Cleaned up ${cleanedCount} expired pending tickets`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–∂–∏–¥–∞—é—â–∏–º —Ç–∏–∫–µ—Ç–∞–º
   * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  getPendingTicketsStats() {
    const now = new Date();
    let active = 0;
    let expired = 0;
    
    for (const pendingTicket of this.pendingTickets.values()) {
      if (now > pendingTicket.expiresAt) {
        expired++;
      } else {
        active++;
      }
    }
    
    return {
      total: this.pendingTickets.size,
      active,
      expired,
      timeout: this.EMAIL_TIMEOUT / 1000 // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
module.exports = new TicketEmailService();
/**
 * @fileoverview –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º Reader Bot (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)
 * @author g1orgi89
 */

const QuoteHandler = require('./quoteHandler');
const CommandHandler = require('./commandHandler');
const AchievementService = require('./achievementService');
const logger = require('../utils/logger');

/**
 * –°–µ—Ä–≤–∏—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
 */
class GameificationIntegration {
  constructor() {
    this.quoteHandler = new QuoteHandler();
    this.commandHandler = new CommandHandler();
    this.achievementService = new AchievementService();
    
    // –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.isInitialized = false;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
   * @returns {Promise<void>}
   */
  async initialize() {
    try {
      logger.info('üéÆ Initializing Gamification Integration...');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
      this.isInitialized = true;
      
      logger.info('üéÆ Gamification Integration initialized successfully');
      
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const achievements = this.achievementService.getAllAchievements();
      logger.info(`üèÜ Loaded ${achievements.length} achievements for Reader Bot`);
      
    } catch (error) {
      logger.error(`üéÆ Failed to initialize Gamification Integration: ${error.message}`);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
   * @param {string} messageText - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  async handleMessage(userId, messageText, ctx) {
    if (!this.isInitialized) {
      throw new Error('Gamification Integration not initialized');
    }

    try {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ü–∏—Ç–∞—Ç—É
      const result = await this.quoteHandler.handleQuote(userId, messageText);
      
      if (result.success) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
        await ctx.reply(result.message, { parse_mode: 'Markdown' });
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (result.newAchievements && result.newAchievements.length > 0) {
          await this._sendAchievementNotifications(ctx, result.newAchievements);
        }
        
        logger.info(`üìñ Quote processed for user ${userId}: ${result.todayCount} quotes today`);
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –ª–∏–º–∏—Ç–µ
        await ctx.reply(result.message);
        
        if (result.limitReached) {
          logger.info(`üìñ Daily limit reached for user ${userId}`);
        }
      }

      return result;
      
    } catch (error) {
      logger.error(`üéÆ Error handling message for user ${userId}: ${error.message}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–∏—Ç–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
   * @param {string} command - –ö–æ–º–∞–Ω–¥–∞ (/help, /stats, /search, /settings)
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async handleCommand(command, ctx) {
    if (!this.isInitialized) {
      throw new Error('Gamification Integration not initialized');
    }

    try {
      switch (command) {
        case '/help':
          await this.commandHandler.handleHelp(ctx);
          break;
        
        case '/stats':
          await this.commandHandler.handleStats(ctx);
          break;
        
        case '/search':
          await this.commandHandler.handleSearch(ctx);
          break;
        
        case '/settings':
          await this.commandHandler.handleSettings(ctx);
          break;
        
        default:
          await ctx.reply(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - —Å–ø—Ä–∞–≤–∫–∞
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
/search - –ø–æ–∏—Å–∫ —Ü–∏—Ç–∞—Ç
/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏`);
          break;
      }
      
      logger.info(`üéÆ Command ${command} processed for user ${ctx.from.id}`);
      
    } catch (error) {
      logger.error(`üéÆ Error handling command ${command}: ${error.message}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async handleCallback(ctx) {
    if (!this.isInitialized) {
      throw new Error('Gamification Integration not initialized');
    }

    try {
      await this.commandHandler.handleCallback(ctx);
      logger.info(`üéÆ Callback processed: ${ctx.callbackQuery.data}`);
      
    } catch (error) {
      logger.error(`üéÆ Error handling callback: ${error.message}`);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  /**
   * –ü–æ–∏—Å–∫ —Ü–∏—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} searchText - –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async handleTextSearch(userId, searchText, ctx) {
    if (!this.isInitialized) {
      throw new Error('Gamification Integration not initialized');
    }

    try {
      await this.commandHandler.handleTextSearch(ctx, searchText);
      logger.info(`üéÆ Text search processed for user ${userId}: "${searchText}"`);
      
    } catch (error) {
      logger.error(`üéÆ Error handling text search: ${error.message}`);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @param {Object[]} achievements - –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   * @returns {Promise<void>}
   * @private
   */
  async _sendAchievementNotifications(ctx, achievements) {
    try {
      for (const achievement of achievements) {
        const message = this.achievementService.formatAchievementNotification(achievement);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        await ctx.reply(message, { parse_mode: 'Markdown' });
        
        logger.info(`üèÜ Achievement notification sent: ${achievement.name} to user ${ctx.from.id}`);
      }
    } catch (error) {
      logger.error(`üèÜ Error sending achievement notifications: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async getGamificationStats() {
    try {
      const { UserProfile, Quote } = require('../models');
      
      // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const totalUsers = await UserProfile.countDocuments({ isOnboardingComplete: true });
      const totalQuotes = await Quote.countDocuments();
      const averageQuotesPerUser = totalUsers > 0 ? Math.round(totalQuotes / totalUsers) : 0;
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      const achievementStats = {};
      const achievements = this.achievementService.getAllAchievements();
      
      for (const achievement of achievements) {
        const usersWithAchievement = await UserProfile.countDocuments({
          'achievements.achievementId': achievement.id
        });
        
        achievementStats[achievement.id] = {
          name: achievement.name,
          usersUnlocked: usersWithAchievement,
          percentage: totalUsers > 0 ? Math.round((usersWithAchievement / totalUsers) * 100) : 0
        };
      }
      
      // –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —Ü–∏—Ç–∞—Ç–∞–º
      const topUsers = await UserProfile.find({
        isOnboardingComplete: true
      })
      .sort({ 'statistics.totalQuotes': -1 })
      .limit(10)
      .select('name statistics.totalQuotes statistics.currentStreak achievements');
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–∏–π
      const streakStats = await UserProfile.aggregate([
        { $match: { isOnboardingComplete: true } },
        {
          $group: {
            _id: null,
            avgStreak: { $avg: '$statistics.currentStreak' },
            maxStreak: { $max: '$statistics.longestStreak' },
            usersWithStreak: {
              $sum: {
                $cond: [{ $gt: ['$statistics.currentStreak', 0] }, 1, 0]
              }
            }
          }
        }
      ]);
      
      return {
        overview: {
          totalUsers,
          totalQuotes,
          averageQuotesPerUser,
          totalAchievements: achievements.length
        },
        achievements: achievementStats,
        topUsers: topUsers.map(user => ({
          name: user.name,
          totalQuotes: user.statistics.totalQuotes,
          currentStreak: user.statistics.currentStreak,
          achievementsCount: user.achievements.length
        })),
        streaks: streakStats.length > 0 ? {
          averageCurrentStreak: Math.round(streakStats[0].avgStreak),
          maxStreak: streakStats[0].maxStreak,
          usersWithActiveStreak: streakStats[0].usersWithStreak
        } : {
          averageCurrentStreak: 0,
          maxStreak: 0,
          usersWithActiveStreak: 0
        },
        timestamp: new Date()
      };
      
    } catch (error) {
      logger.error(`üéÆ Error getting gamification stats: ${error.message}`);
      return {
        error: error.message,
        timestamp: new Date()
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object[]>} –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   */
  async checkUserAchievements(userId) {
    try {
      return await this.achievementService.checkAndUnlockAchievements(userId);
    } catch (error) {
      logger.error(`üèÜ Error checking achievements for user ${userId}: ${error.message}`);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ
   * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ
   */
  getServiceInfo() {
    const achievements = this.achievementService.getAllAchievements();
    
    return {
      service: 'GameificationIntegration',
      isInitialized: this.isInitialized,
      components: {
        quoteHandler: !!this.quoteHandler,
        commandHandler: !!this.commandHandler,
        achievementService: !!this.achievementService
      },
      features: [
        'quote_processing',
        'daily_limits',
        'achievements_system',
        'user_statistics',
        'command_handling',
        'search_functionality',
        'settings_management',
        'integrated_achievements_display' // –û–ë–ù–û–í–õ–ï–ù–û
      ],
      commands: [
        '/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É',
        '/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', // –û–ë–ù–û–í–õ–ï–ù–û
        '/search - –ø–æ–∏—Å–∫ –ø–æ —Ü–∏—Ç–∞—Ç–∞–º',
        '/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
      ],
      achievements: {
        total: achievements.length,
        types: [...new Set(achievements.map(a => a.type))],
        list: achievements.map(a => ({
          id: a.id,
          name: a.name,
          type: a.type,
          targetValue: a.targetValue
        }))
      }
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
   * @returns {Promise<Object>} –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
   */
  async healthCheck() {
    try {
      const { UserProfile, Quote } = require('../models');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π
      const userCount = await UserProfile.countDocuments().limit(1);
      const quoteCount = await Quote.countDocuments().limit(1);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      const componentsHealth = {
        quoteHandler: !!this.quoteHandler,
        commandHandler: !!this.commandHandler,
        achievementService: !!this.achievementService
      };
      
      const allComponentsHealthy = Object.values(componentsHealth).every(status => status);
      
      return {
        status: this.isInitialized && allComponentsHealthy ? 'healthy' : 'unhealthy',
        isInitialized: this.isInitialized,
        components: componentsHealth,
        database: {
          userProfileModel: typeof userCount === 'number',
          quoteModel: typeof quoteCount === 'number'
        },
        commands: {
          help: true,
          stats: true, // –≤–∫–ª—é—á–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
          search: true,
          settings: true
        },
        achievements: {
          integratedInStats: true, // –ù–û–í–û–ï
          separateCommand: false   // –ù–û–í–û–ï
        },
        timestamp: new Date()
      };
      
    } catch (error) {
      return {
        status: 'unhealthy',
        error: error.message,
        timestamp: new Date()
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
module.exports = new GameificationIntegration();
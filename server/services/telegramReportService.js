/**
 * @fileoverview –°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –≤ Telegram –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @author g1orgi89
 */

const logger = require('../utils/logger');

/**
 * @typedef {import('../types/reader').WeeklyReport} WeeklyReport
 * @typedef {import('../types/reader').TelegramBot} TelegramBot
 */

/**
 * @class TelegramReportService
 * @description –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –≤ Telegram
 */
class TelegramReportService {
  constructor() {
    this.bot = null;
    this._initializeTelegramBot();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram bot
   * @private
   */
  _initializeTelegramBot() {
    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º bot —á–µ—Ä–µ–∑ telegram/index.js
      const telegramIndex = require('../../telegram/index');
      this.bot = telegramIndex.bot;
      
      if (this.bot) {
        logger.info('üìñ TelegramReportService initialized with bot instance');
      } else {
        logger.warn('üìñ Telegram bot not available in TelegramReportService');
      }
    } catch (error) {
      logger.error(`üìñ Failed to initialize Telegram bot: ${error.message}`);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * @param {WeeklyReport} report - –û—Ç—á–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendWeeklyReport(report) {
    if (!this.bot) {
      logger.error('üìñ Telegram bot not available');
      return false;
    }

    try {
      const message = this._formatWeeklyReportMessage(report);
      const replyMarkup = this._createFeedbackButtons(report._id);

      await this.bot.telegram.sendMessage(report.userId, message, {
        parse_mode: 'Markdown',
        disable_web_page_preview: true,
        reply_markup: replyMarkup
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º telegramMessageId –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      await this._updateReportSentStatus(report);

      logger.info(`üìñ Weekly report sent to user ${report.userId}: ${report._id}`);
      return true;
    } catch (error) {
      logger.error(`üìñ Failed to send weekly report to user ${report.userId}: ${error.message}`);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—É—Å—Ç–æ–π –Ω–µ–¥–µ–ª–µ
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} user - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendEmptyWeekMessage(userId, user) {
    if (!this.bot) {
      logger.error('üìñ Telegram bot not available');
      return false;
    }

    try {
      const message = this._formatEmptyWeekMessage(user);

      await this.bot.telegram.sendMessage(userId, message, {
        parse_mode: 'Markdown'
      });

      logger.info(`üìñ Empty week message sent to user ${userId}`);
      return true;
    } catch (error) {
      logger.error(`üìñ Failed to send empty week message to user ${userId}: ${error.message}`);
      return false;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   * @private
   * @param {WeeklyReport} report - –û—Ç—á–µ—Ç
   * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  _formatWeeklyReportMessage(report) {
    const quotesText = this._formatQuotesText(report.quotes);
    const recommendationsText = this._formatRecommendationsText(report.recommendations);
    const promoText = this._formatPromoCodeText(report.promoCode);

    return `üìä *–í–∞—à –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é*

–ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –≤—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ ${report.quotesCount} ${this._declensionQuotes(report.quotesCount)}:

${quotesText}

üéØ *–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏:*
${report.analysis.insights}

üíé *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ê–Ω–Ω—ã:*
${recommendationsText}

${promoText}

---
üí¨ –ö–∞–∫ –≤–∞–º —ç—Ç–æ—Ç –æ—Ç—á–µ—Ç?`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏—Ç–∞—Ç –≤ –æ—Ç—á–µ—Ç–µ
   * @private
   * @param {Array} quotes - –¶–∏—Ç–∞—Ç—ã
   * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
   */
  _formatQuotesText(quotes) {
    if (!quotes || quotes.length === 0) {
      return '–¶–∏—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
    }

    return quotes.map((quote, index) => {
      const author = quote.author ? ` (${quote.author})` : '';
      return `‚úÖ "${quote.text}"${author}`;
    }).join('\n');
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –æ—Ç—á–µ—Ç–µ
   * @private
   * @param {Array} recommendations - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   */
  _formatRecommendationsText(recommendations) {
    if (!recommendations || recommendations.length === 0) {
      return '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã';
    }

    return recommendations.map((rec, index) => {
      return `${index + 1}. [${rec.title}](${rec.link}) - ${rec.price}\n   ${rec.description}`;
    }).join('\n\n');
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
   * @private
   * @param {Object} promoCode - –ü—Ä–æ–º–æ–∫–æ–¥
   * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
   */
  _formatPromoCodeText(promoCode) {
    if (!promoCode) {
      return '';
    }

    const validUntil = new Date(promoCode.validUntil).toLocaleDateString('ru-RU');
    return `üéÅ *–ü—Ä–æ–º–æ–∫–æ–¥ ${promoCode.code}* - —Å–∫–∏–¥–∫–∞ ${promoCode.discount}% –¥–æ ${validUntil}!`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—É—Å—Ç–æ–π –Ω–µ–¥–µ–ª–µ
   * @private
   * @param {Object} user - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  _formatEmptyWeekMessage(user) {
    return `üìñ *–û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é*

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.name}!

–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –≤—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã. 

üí≠ –ü–æ–º–Ω–∏—Ç–µ: "–•–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ - —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏!"

–ö–∞–∂–¥–∞—è —Ü–∏—Ç–∞—Ç–∞ - —ç—Ç–æ —Å—Ç—É–ø–µ–Ω—å–∫–∞ –∫ –ª—É—á—à–µ–º—É –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–µ–±—è. –ù–∞—á–Ω–∏—Ç–µ —Å –æ–¥–Ω–æ–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!

üìö –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ –≤ –∫–Ω–∏–≥–µ, –∫–æ—Ç–æ—Ä—É—é —á–∏—Ç–∞–µ—Ç–µ, –∏–ª–∏ –≤—Å–ø–æ–º–Ω–∏—Ç–µ –º—É–¥—Ä—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–≥–¥–∞-—Ç–æ –≤–∞—Å —Ç—Ä–æ–Ω—É–ª–∏.`;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   * @private
   * @param {string} reportId - ID –æ—Ç—á–µ—Ç–∞
   * @returns {Object} –†–∞–∑–º–µ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
   */
  _createFeedbackButtons(reportId) {
    return {
      inline_keyboard: [
        [
          { 
            text: "üëç –û—Ç–ª–∏—á–Ω–æ", 
            callback_data: `feedback_excellent_${reportId}` 
          },
          { 
            text: "üëå –•–æ—Ä–æ—à–æ", 
            callback_data: `feedback_good_${reportId}` 
          },
          { 
            text: "üëé –ü–ª–æ—Ö–æ", 
            callback_data: `feedback_bad_${reportId}` 
          }
        ]
      ]
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞
   * @private
   * @param {WeeklyReport} report - –û—Ç—á–µ—Ç
   */
  async _updateReportSentStatus(report) {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
      if (!report.sentAt) {
        report.sentAt = new Date();
        await report.save();
      }
    } catch (error) {
      logger.error(`üìñ Failed to update report sent status: ${error.message}`);
    }
  }

  /**
   * –°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "—Ü–∏—Ç–∞—Ç–∞"
   * @private
   * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
   * @returns {string} –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ
   */
  _declensionQuotes(count) {
    if (count % 10 === 1 && count % 100 !== 11) return '—Ü–∏—Ç–∞—Ç—É';
    if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '—Ü–∏—Ç–∞—Ç—ã';
    return '—Ü–∏—Ç–∞—Ç';
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ –æ—Ç—á–µ—Ç—É
   * @param {string} callbackData - –î–∞–Ω–Ω—ã–µ callback'–∞
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  async handleReportFeedback(callbackData, ctx) {
    try {
      const parts = callbackData.split('_');
      if (parts.length < 3 || parts[0] !== 'feedback') {
        logger.error(`üìñ Invalid feedback callback data: ${callbackData}`);
        return false;
      }

      const rating = parts[1]; // excellent, good, bad
      const reportId = parts.slice(2).join('_');

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      const numericRating = this._convertRatingToNumber(rating);

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
      const weeklyReportService = require('./weeklyReportService');
      await weeklyReportService.addReportFeedback(reportId, numericRating);

      // –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const responseMessage = this._getFeedbackResponseMessage(rating);
      await ctx.editMessageText(responseMessage, { parse_mode: 'Markdown' });

      // –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ –ø–ª–æ—Ö–∞—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
      if (rating === 'bad' || rating === 'good') {
        await this._requestDetailedFeedback(ctx, reportId, rating);
      }

      logger.info(`üìñ Feedback processed: ${rating} for report ${reportId}`);
      return true;
    } catch (error) {
      logger.error(`üìñ Error handling report feedback: ${error.message}`);
      return false;
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤ —á–∏—Å–ª–æ
   * @private
   * @param {string} rating - –†–µ–π—Ç–∏–Ω–≥ ('excellent', 'good', 'bad')
   * @returns {number} –ß–∏—Å–ª–æ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥
   */
  _convertRatingToNumber(rating) {
    switch (rating) {
      case 'excellent': return 5;
      case 'good': return 4;
      case 'bad': return 2;
      default: return 3;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
   * @private
   * @param {string} rating - –†–µ–π—Ç–∏–Ω–≥
   * @returns {string} –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
   */
  _getFeedbackResponseMessage(rating) {
    switch (rating) {
      case 'excellent':
        return "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –†–∞–¥–∞, —á—Ç–æ –æ—Ç—á–µ—Ç –æ–∫–∞–∑–∞–ª—Å—è –ø–æ–ª–µ–∑–Ω—ã–º.";
      case 'good':
        return "üëå –°–ø–∞—Å–∏–±–æ! –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–ª—É—á—à–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç—á–µ—Ç–∞—Ö?";
      case 'bad':
        return "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ –æ—Ç—á–µ—Ç –Ω–µ –æ–ø—Ä–∞–≤–¥–∞–ª –æ–∂–∏–¥–∞–Ω–∏–π. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?";
      default:
        return "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!";
    }
  }

  /**
   * –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   * @private
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
   * @param {string} reportId - ID –æ—Ç—á–µ—Ç–∞
   * @param {string} rating - –†–µ–π—Ç–∏–Ω–≥
   */
  async _requestDetailedFeedback(ctx, reportId, rating) {
    try {
      const message = "üìù –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö:";
      
      await ctx.reply(message, {
        reply_markup: { force_reply: true }
      });

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞
      // –≠—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º telegram handler'–µ
      
    } catch (error) {
      logger.error(`üìñ Error requesting detailed feedback: ${error.message}`);
    }
  }

  /**
   * –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
   * @param {Array} reports - –ú–∞—Å—Å–∏–≤ –æ—Ç—á–µ—Ç–æ–≤
   * @param {Object} options - –û–ø—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendBulkReports(reports, options = {}) {
    const { delayBetweenSends = 1000 } = options;
    
    let sent = 0;
    let failed = 0;
    const errors = [];

    for (const report of reports) {
      try {
        const success = await this.sendWeeklyReport(report);
        if (success) {
          sent++;
        } else {
          failed++;
        }
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
        if (delayBetweenSends > 0) {
          await new Promise(resolve => setTimeout(resolve, delayBetweenSends));
        }
      } catch (error) {
        failed++;
        errors.push({
          reportId: report._id,
          userId: report.userId,
          error: error.message
        });
        logger.error(`üìñ Failed to send report ${report._id}: ${error.message}`);
      }
    }

    const stats = {
      total: reports.length,
      sent,
      failed,
      errors,
      timestamp: new Date()
    };

    logger.info(`üìñ Bulk reports sending completed: ${JSON.stringify(stats)}`);
    return stats;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram bot
   * @returns {Promise<boolean>} –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞
   */
  async isAvailable() {
    try {
      if (!this.bot) {
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ getMe
      const me = await this.bot.telegram.getMe();
      return !!me.id;
    } catch (error) {
      logger.error(`üìñ Telegram bot availability check failed: ${error.message}`);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ
   * @returns {Promise<Object>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ
   */
  async getServiceInfo() {
    try {
      const isAvailable = await this.isAvailable();
      
      let botInfo = null;
      if (this.bot) {
        try {
          botInfo = await this.bot.telegram.getMe();
        } catch (error) {
          logger.error(`üìñ Failed to get bot info: ${error.message}`);
        }
      }

      return {
        service: 'TelegramReportService',
        isAvailable,
        botInfo: botInfo ? {
          id: botInfo.id,
          username: botInfo.username,
          first_name: botInfo.first_name
        } : null,
        features: [
          'weekly_reports',
          'empty_week_messages',
          'feedback_buttons',
          'bulk_sending'
        ]
      };
    } catch (error) {
      return {
        service: 'TelegramReportService',
        isAvailable: false,
        error: error.message
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
module.exports = new TelegramReportService();
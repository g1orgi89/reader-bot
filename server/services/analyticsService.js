/**
 * @fileoverview –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @description –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–±–æ—Ä –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ü–∏—Ç–∞—Ç, –∫–æ–Ω–≤–µ—Ä—Å–∏–π
 */

const UserProfile = require('../models/userProfile');
const Quote = require('../models/quote');
const WeeklyReport = require('../models/weeklyReport');
const MonthlyReport = require('../models/monthlyReport');

// –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å fallback
let PromoCodeUsage, UTMClick, UserAction;
try {
  const analyticsModels = require('../models/analytics');
  PromoCodeUsage = analyticsModels.PromoCodeUsage;
  UTMClick = analyticsModels.UTMClick;
  UserAction = analyticsModels.UserAction;
} catch (error) {
  console.warn('üìä Analytics models not available, using fallback mode:', error.message);
}

/**
 * @typedef {Object} DashboardStats
 * @property {Object} overview - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 * @property {number} overview.totalUsers - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @property {number} overview.newUsers - –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥
 * @property {number} overview.totalQuotes - –í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥
 * @property {number} overview.avgQuotesPerUser - –°—Ä–µ–¥–Ω–µ–µ —Ü–∏—Ç–∞—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @property {number} overview.activeUsers - –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @property {number} overview.promoUsage - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
 * @property {Array} sourceStats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
 * @property {Array} utmStats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ UTM –∫–∞–º–ø–∞–Ω–∏–π
 * @property {string} period - –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
 */

/**
 * @typedef {Object} RetentionData
 * @property {string} cohort - –ö–æ–≥–æ—Ä—Ç–∞ (YYYY-MM)
 * @property {number} size - –†–∞–∑–º–µ—Ä –∫–æ–≥–æ—Ä—Ç—ã
 * @property {number} week1 - Retention 1 –Ω–µ–¥–µ–ª—è (%)
 * @property {number} week2 - Retention 2 –Ω–µ–¥–µ–ª–∏ (%)
 * @property {number} week3 - Retention 3 –Ω–µ–¥–µ–ª–∏ (%)
 * @property {number} week4 - Retention 4 –Ω–µ–¥–µ–ª–∏ (%)
 */

/**
 * @typedef {Object} TopContent
 * @property {Array} topAuthors - –¢–æ–ø –∞–≤—Ç–æ—Ä—ã
 * @property {Array} topCategories - –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @property {Array} popularQuotes - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
 */

/**
 * –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 */
class AnalyticsService {
  constructor() {
    this.cache = new Map();
    this.cacheTimeout = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
    this.isInitialized = false;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  async initialize() {
    if (this.isInitialized) return;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
      await this.checkModelsAvailability();
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      await this.ensureTestData();
      
      this.isInitialized = true;
      console.log('üìä AnalyticsService initialized successfully');
    } catch (error) {
      console.error('üìä AnalyticsService initialization failed:', error);
      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∂–∏–º
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
   */
  async checkModelsAvailability() {
    const checks = {
      UserProfile: await UserProfile.countDocuments().limit(1).catch(() => null),
      Quote: await Quote.countDocuments().limit(1).catch(() => null),
      WeeklyReport: await WeeklyReport.countDocuments().limit(1).catch(() => null)
    };

    console.log('üìä Models availability check:', checks);
    return checks;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
   */
  async ensureTestData() {
    try {
      const userCount = await UserProfile.countDocuments();
      
      if (userCount === 0) {
        console.log('üìä Creating sample data for analytics dashboard...');
        await this.createSampleData();
      }
    } catch (error) {
      console.warn('üìä Could not create sample data:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async createSampleData() {
    const sampleUsers = [
      {
        userId: 'demo_user_1',
        telegramUsername: 'demo_user_1',
        name: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
        email: 'maria@example.com',
        source: 'Instagram',
        isOnboardingComplete: true,
        registeredAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000) // 15 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
      },
      {
        userId: 'demo_user_2',
        telegramUsername: 'demo_user_2',
        name: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
        email: 'anna@example.com',
        source: 'Telegram',
        isOnboardingComplete: true,
        registeredAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000) // 10 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
      },
      {
        userId: 'demo_user_3',
        telegramUsername: 'demo_user_3',
        name: '–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
        email: 'elena@example.com',
        source: 'YouTube',
        isOnboardingComplete: true,
        registeredAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000) // 5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
      }
    ];

    const sampleQuotes = [
      {
        userId: 'demo_user_1',
        text: '–í –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ ‚Äî —Ü–µ–ª–∞—è –∂–∏–∑–Ω—å',
        author: '–ú–∞—Ä–∏–Ω–∞ –¶–≤–µ—Ç–∞–µ–≤–∞',
        category: '–ü–æ—ç–∑–∏—è',
        createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000)
      },
      {
        userId: 'demo_user_2',
        text: '–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ª—é–±–∏—Ç—å',
        author: '–≠—Ä–∏—Ö –§—Ä–æ–º–º',
        category: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è',
        createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000)
      },
      {
        userId: 'demo_user_1',
        text: '–°—á–∞—Å—Ç—å–µ –≤–Ω—É—Ç—Ä–∏ –Ω–∞—Å',
        author: '–ë—É–¥–¥–∞',
        category: '–§–∏–ª–æ—Å–æ—Ñ–∏—è',
        createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000)
      },
      {
        userId: 'demo_user_3',
        text: '–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ',
        author: null,
        category: '–ú–æ—Ç–∏–≤–∞—Ü–∏—è',
        createdAt: new Date()
      }
    ];

    try {
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      for (const userData of sampleUsers) {
        await UserProfile.findOneAndUpdate(
          { userId: userData.userId },
          userData,
          { upsert: true, new: true }
        );
      }

      // –°–æ–∑–¥–∞–µ–º —Ü–∏—Ç–∞—Ç—ã
      for (const quoteData of sampleQuotes) {
        await Quote.findOneAndUpdate(
          { userId: quoteData.userId, text: quoteData.text },
          quoteData,
          { upsert: true, new: true }
        );
      }

      console.log('üìä Sample data created successfully');
    } catch (error) {
      console.error('üìä Error creating sample data:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
   * @param {string} dateRange - –ü–µ—Ä–∏–æ–¥ ('1d', '7d', '30d', '90d')
   * @returns {Promise<DashboardStats>}
   */
  async getDashboardStats(dateRange = '7d') {
    const cacheKey = `dashboard_${dateRange}`;
    const cached = this.getCached(cacheKey);
    if (cached) return cached;

    try {
      await this.initialize();
      
      const startDate = this.getStartDate(dateRange);

      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const [
        totalUsers,
        newUsers,
        quotesStats,
        activeUsers,
        promoUsage,
        sourceStats,
        utmStats
      ] = await Promise.all([
        this.getTotalUsers(),
        this.getNewUsers(startDate),
        this.getQuotesStats(startDate),
        this.getActiveUsers(startDate),
        this.getPromoUsage(startDate),
        this.getSourceStats(startDate),
        this.getUTMStats(startDate)
      ]);

      const stats = {
        overview: {
          totalUsers,
          newUsers,
          totalQuotes: quotesStats.total,
          avgQuotesPerUser: totalUsers > 0 ? Math.round((quotesStats.total / totalUsers) * 10) / 10 : 0,
          activeUsers,
          promoUsage
        },
        sourceStats,
        utmStats,
        period: dateRange
      };

      this.setCached(cacheKey, stats);
      return stats;

    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ
      return this.getFallbackDashboardStats(dateRange);
    }
  }

  /**
   * Fallback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
   */
  getFallbackDashboardStats(dateRange) {
    return {
      overview: {
        totalUsers: 3,
        newUsers: 1,
        totalQuotes: 4,
        avgQuotesPerUser: 1.3,
        activeUsers: 2,
        promoUsage: 0
      },
      sourceStats: [
        { _id: 'Instagram', count: 1 },
        { _id: 'Telegram', count: 1 },
        { _id: 'YouTube', count: 1 }
      ],
      utmStats: [],
      period: dateRange
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö retention –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º
   * @returns {Promise<RetentionData[]>}
   */
  async getUserRetentionStats() {
    const cacheKey = 'retention_stats';
    const cached = this.getCached(cacheKey);
    if (cached) return cached;

    try {
      await this.initialize();

      // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const cohorts = await UserProfile.aggregate([
        {
          $match: { isOnboardingComplete: true }
        },
        {
          $group: {
            _id: {
              year: { $year: '$registeredAt' },
              month: { $month: '$registeredAt' }
            },
            users: { $push: '$userId' },
            size: { $sum: 1 }
          }
        },
        { $sort: { '_id.year': 1, '_id.month': 1 } }
      ]);

      const retentionData = [];

      for (const cohort of cohorts) {
        const cohortUsers = cohort.users;
        const cohortDate = new Date(cohort._id.year, cohort._id.month - 1, 1);
        
        const retention = {
          cohort: `${cohort._id.year}-${cohort._id.month.toString().padStart(2, '0')}`,
          size: cohort.size,
          week1: 0,
          week2: 0,
          week3: 0,
          week4: 0
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–µ–¥–µ–ª—è–º
        for (let week = 1; week <= 4; week++) {
          const weekStart = new Date(cohortDate);
          weekStart.setDate(weekStart.getDate() + (week - 1) * 7);
          const weekEnd = new Date(weekStart);
          weekEnd.setDate(weekEnd.getDate() + 7);

          // –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –≤ —ç—Ç—É –Ω–µ–¥–µ–ª—é
          const activeInWeek = await Quote.distinct('userId', {
            userId: { $in: cohortUsers },
            createdAt: { $gte: weekStart, $lt: weekEnd }
          });

          retention[`week${week}`] = Math.round((activeInWeek.length / cohort.size) * 100);
        }

        retentionData.push(retention);
      }

      this.setCached(cacheKey, retentionData);
      return retentionData;

    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è retention —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ
      return this.getFallbackRetentionData();
    }
  }

  /**
   * Fallback –¥–∞–Ω–Ω—ã–µ retention
   */
  getFallbackRetentionData() {
    const currentDate = new Date();
    return [
      {
        cohort: `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1).toString().padStart(2, '0')}`,
        size: 3,
        week1: 100,
        week2: 67,
        week3: 33,
        week4: 33
      }
    ];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   * @param {string} dateRange - –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
   * @returns {Promise<TopContent>}
   */
  async getTopQuotesAndAuthors(dateRange = '30d') {
    const cacheKey = `top_content_${dateRange}`;
    const cached = this.getCached(cacheKey);
    if (cached) return cached;

    try {
      await this.initialize();
      
      const startDate = this.getStartDate(dateRange);

      const [topAuthors, topCategories, popularQuotes] = await Promise.all([
        // –¢–æ–ø –∞–≤—Ç–æ—Ä—ã
        Quote.aggregate([
          { $match: { createdAt: { $gte: startDate }, author: { $ne: null, $ne: '' } } },
          { $group: { _id: '$author', count: { $sum: 1 } } },
          { $sort: { count: -1 } },
          { $limit: 10 }
        ]),

        // –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        Quote.aggregate([
          { $match: { createdAt: { $gte: startDate }, category: { $ne: null, $ne: '' } } },
          { $group: { _id: '$category', count: { $sum: 1 } } },
          { $sort: { count: -1 } },
          { $limit: 10 }
        ]),

        // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã (–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è)
        Quote.aggregate([
          { $match: { createdAt: { $gte: startDate } } },
          { 
            $group: { 
              _id: '$text', 
              author: { $first: '$author' }, 
              count: { $sum: 1 } 
            } 
          },
          { $match: { count: { $gt: 1 } } },
          { $sort: { count: -1 } },
          { $limit: 5 }
        ])
      ]);

      const result = {
        topAuthors,
        topCategories,
        popularQuotes
      };

      this.setCached(cacheKey, result);
      return result;

    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ
      return this.getFallbackTopContent();
    }
  }

  /**
   * Fallback –¥–∞–Ω–Ω—ã–µ —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  getFallbackTopContent() {
    return {
      topAuthors: [
        { _id: '–ú–∞—Ä–∏–Ω–∞ –¶–≤–µ—Ç–∞–µ–≤–∞', count: 1 },
        { _id: '–≠—Ä–∏—Ö –§—Ä–æ–º–º', count: 1 },
        { _id: '–ë—É–¥–¥–∞', count: 1 }
      ],
      topCategories: [
        { _id: '–ü–æ—ç–∑–∏—è', count: 1 },
        { _id: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è', count: 1 },
        { _id: '–§–∏–ª–æ—Å–æ—Ñ–∏—è', count: 1 },
        { _id: '–ú–æ—Ç–∏–≤–∞—Ü–∏—è', count: 1 }
      ],
      popularQuotes: []
    };
  }

  /**
   * –¢—Ä–µ–∫–∏–Ω–≥ UTM –∫–ª–∏–∫–æ–≤
   * @param {Object} utmParams - UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<void>}
   */
  async trackUTMClick(utmParams, userId) {
    if (!UTMClick) {
      console.warn('üìä UTMClick model not available, skipping tracking');
      return;
    }

    try {
      const click = new UTMClick({
        userId,
        source: utmParams.utm_source,
        medium: utmParams.utm_medium,
        campaign: utmParams.utm_campaign,
        content: utmParams.utm_content,
        timestamp: new Date(),
        userAgent: utmParams.user_agent,
        referrer: utmParams.referrer
      });

      await click.save();

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.updateUserClickStats(userId, utmParams.utm_campaign);

    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ UTM –∫–ª–∏–∫–∞:', error);
    }
  }

  /**
   * –¢—Ä–µ–∫–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
   * @param {string} promoCode - –ü—Ä–æ–º–æ–∫–æ–¥
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} orderValue - –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞
   * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
   * @returns {Promise<void>}
   */
  async trackPromoCodeUsage(promoCode, userId, orderValue, options = {}) {
    if (!PromoCodeUsage) {
      console.warn('üìä PromoCodeUsage model not available, skipping tracking');
      return;
    }

    try {
      const discount = this.getDiscountForPromoCode(promoCode);
      const discountAmount = orderValue * (discount / 100);
      const finalAmount = orderValue - discountAmount;

      const usage = new PromoCodeUsage({
        promoCode,
        userId,
        orderValue,
        discount,
        discountAmount,
        finalAmount,
        timestamp: new Date(),
        source: options.source || 'telegram_bot',
        reportType: options.reportType,
        booksPurchased: options.booksPurchased
      });

      await usage.save();

    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
    }
  }

  /**
   * –¢—Ä–µ–∫–∏–Ω–≥ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} action - –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
   * @param {Object} metadata - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @returns {Promise<void>}
   */
  async trackUserAction(userId, action, metadata = {}) {
    if (!UserAction) {
      console.warn('üìä UserAction model not available, skipping tracking');
      return;
    }

    try {
      const userAction = new UserAction({
        userId,
        action,
        metadata,
        timestamp: new Date()
      });

      await userAction.save();

    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }

  // === –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ ===

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @returns {Promise<number>}
   */
  async getTotalUsers() {
    try {
      return await UserProfile.countDocuments({ isOnboardingComplete: true });
    } catch (error) {
      console.warn('üìä Error getting total users:', error.message);
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥
   * @param {Date} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
   * @returns {Promise<number>}
   */
  async getNewUsers(startDate) {
    try {
      return await UserProfile.countDocuments({
        isOnboardingComplete: true,
        registeredAt: { $gte: startDate }
      });
    } catch (error) {
      console.warn('üìä Error getting new users:', error.message);
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–∏—Ç–∞—Ç
   * @param {Date} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
   * @returns {Promise<Object>}
   */
  async getQuotesStats(startDate) {
    try {
      const total = await Quote.countDocuments({ createdAt: { $gte: startDate } });
      return { total };
    } catch (error) {
      console.warn('üìä Error getting quotes stats:', error.message);
      return { total: 0 };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @param {Date} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
   * @returns {Promise<number>}
   */
  async getActiveUsers(startDate) {
    try {
      const activeUserIds = await Quote.distinct('userId', { createdAt: { $gte: startDate } });
      return activeUserIds.length;
    } catch (error) {
      console.warn('üìä Error getting active users:', error.message);
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
   * @param {Date} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
   * @returns {Promise<number>}
   */
  async getPromoUsage(startDate) {
    if (!PromoCodeUsage) return 0;

    try {
      return await PromoCodeUsage.countDocuments({
        timestamp: { $gte: startDate }
      });
    } catch (error) {
      console.warn('üìä Error getting promo usage:', error.message);
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
   * @param {Date} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
   * @returns {Promise<Array>}
   */
  async getSourceStats(startDate) {
    try {
      return await UserProfile.aggregate([
        { $match: { registeredAt: { $gte: startDate } } },
        { $group: { _id: '$source', count: { $sum: 1 } } },
        { $sort: { count: -1 } }
      ]);
    } catch (error) {
      console.warn('üìä Error getting source stats:', error.message);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ UTM –∫–∞–º–ø–∞–Ω–∏–π
   * @param {Date} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
   * @returns {Promise<Array>}
   */
  async getUTMStats(startDate) {
    if (!UTMClick) return [];

    try {
      return await UTMClick.aggregate([
        { $match: { timestamp: { $gte: startDate } } },
        { 
          $group: { 
            _id: '$campaign', 
            clicks: { $sum: 1 }, 
            users: { $addToSet: '$userId' } 
          } 
        },
        { 
          $project: { 
            campaign: '$_id', 
            clicks: 1, 
            uniqueUsers: { $size: '$users' } 
          } 
        },
        { $sort: { clicks: -1 } }
      ]);
    } catch (error) {
      console.warn('üìä Error getting UTM stats:', error.message);
      return [];
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} campaign - –ö–∞–º–ø–∞–Ω–∏—è
   * @returns {Promise<void>}
   */
  async updateUserClickStats(userId, campaign) {
    try {
      await UserProfile.findOneAndUpdate(
        { userId },
        { 
          $inc: { 'analytics.totalClicks': 1 },
          $addToSet: { 'analytics.campaigns': campaign }
        }
      );
    } catch (error) {
      console.warn('üìä Error updating user click stats:', error.message);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
   * @param {string} promoCode - –ü—Ä–æ–º–æ–∫–æ–¥
   * @returns {number}
   */
  getDiscountForPromoCode(promoCode) {
    const discountMap = {
      'READER20': 20,
      'WISDOM20': 20,
      'QUOTES20': 20,
      'BOOKS20': 20,
      'MONTH25': 25,
      'READER15': 15
    };
    
    return discountMap[promoCode] || 0;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –ø–æ –ø–µ—Ä–∏–æ–¥—É
   * @param {string} dateRange - –ü–µ—Ä–∏–æ–¥
   * @returns {Date}
   */
  getStartDate(dateRange) {
    const now = new Date();
    switch (dateRange) {
      case '1d':
        return new Date(now.setDate(now.getDate() - 1));
      case '7d':
        return new Date(now.setDate(now.getDate() - 7));
      case '30d':
        return new Date(now.setDate(now.getDate() - 30));
      case '90d':
        return new Date(now.setDate(now.getDate() - 90));
      default:
        return new Date(now.setDate(now.getDate() - 7));
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
   * @param {string} key - –ö–ª—é—á –∫—ç—à–∞
   * @returns {any|null}
   */
  getCached(key) {
    const cached = this.cache.get(key);
    if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
      return cached.data;
    }
    return null;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à
   * @param {string} key - –ö–ª—é—á –∫—ç—à–∞
   * @param {any} data - –î–∞–Ω–Ω—ã–µ
   * @returns {void}
   */
  setCached(key, data) {
    this.cache.set(key, {
      data,
      timestamp: Date.now()
    });
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
   * @returns {void}
   */
  clearCache() {
    this.cache.clear();
  }
}

module.exports = new AnalyticsService();
/**
 * @fileoverview –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @description –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–±–æ—Ä, –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
 * @author g1orgi89
 */

const { UTMClick, PromoCodeUsage, UserAction } = require('../models/analytics');
const UserProfile = require('../models/userProfile');
const Quote = require('../models/quote');
const WeeklyReport = require('../models/weeklyReport');
const MonthlyReport = require('../models/monthlyReport');

/**
 * @typedef {Object} DashboardStats
 * @property {Object} overview - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 * @property {Array} sourceStats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ 
 * @property {Array} utmStats - UTM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 */

/**
 * @typedef {Object} RetentionData
 * @property {string} cohort - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–≥–æ—Ä—Ç—ã
 * @property {number} size - –†–∞–∑–º–µ—Ä –∫–æ–≥–æ—Ä—Ç—ã
 * @property {number} week1 - Retention –Ω–µ–¥–µ–ª—è 1 (%)
 * @property {number} week2 - Retention –Ω–µ–¥–µ–ª—è 2 (%)
 * @property {number} week3 - Retention –Ω–µ–¥–µ–ª—è 3 (%)
 * @property {number} week4 - Retention –Ω–µ–¥–µ–ª—è 4 (%)
 */

/**
 * –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 */
class AnalyticsService {
  constructor() {
    this.name = 'AnalyticsService';
  }

  /**
   * –ó–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–∫ –ø–æ UTM —Å—Å—ã–ª–∫–µ
   * @param {Object} utmParams - UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<void>}
   */
  async trackUTMClick(utmParams, userId) {
    try {
      await UTMClick.recordClick({
        userId,
        source: utmParams.utm_source,
        medium: utmParams.utm_medium,
        campaign: utmParams.utm_campaign,
        content: utmParams.utm_content,
        userAgent: utmParams.user_agent,
        referrer: utmParams.referrer,
        ipAddress: utmParams.ip_address,
        sessionId: utmParams.session_id
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.updateUserClickStats(userId, utmParams.utm_campaign);
    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ UTM –∫–ª–∏–∫–∞:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
   * @param {string} promoCode - –ü—Ä–æ–º–æ–∫–æ–¥
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
   * @param {number} orderValue - –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞
   * @param {Object} [options] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
   * @returns {Promise<void>}
   */
  async trackPromoCodeUsage(promoCode, userId, orderValue, options = {}) {
    try {
      const discount = this.getDiscountForPromoCode(promoCode);
      
      await PromoCodeUsage.recordUsage({
        promoCode,
        userId,
        orderValue,
        discount,
        source: options.source || 'telegram_bot',
        reportType: options.reportType,
        booksPurchased: options.booksPurchased || []
      });
    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–ø–∏—Å–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} action - –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
   * @param {Object} [metadata] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @returns {Promise<void>}
   */
  async trackUserAction(userId, action, metadata = {}) {
    try {
      await UserAction.recordAction(userId, action, metadata);
    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞—à–±–æ—Ä–¥–∞
   * @param {string} [period='7d'] - –ü–µ—Ä–∏–æ–¥ (1d, 7d, 30d, 90d)
   * @returns {Promise<DashboardStats>}
   */
  async getDashboardStats(period = '7d') {
    try {
      const startDate = this.getStartDate(period);
      
      const [overview, sourceStats, utmStats] = await Promise.all([
        this.getOverviewStats(startDate),
        this.getSourceStats(startDate),
        this.getUTMStats(startDate)
      ]);

      return {
        overview,
        sourceStats,
        utmStats,
        period
      };
    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   * @param {Date} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
   * @returns {Promise<Object>}
   */
  async getOverviewStats(startDate) {
    try {
      // –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const totalUsers = await UserProfile.countDocuments({ 
        isOnboardingComplete: true 
      });
      
      const newUsers = await UserProfile.countDocuments({
        isOnboardingComplete: true,
        registeredAt: { $gte: startDate }
      });

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏—Ç–∞—Ç
      const totalQuotes = await Quote.countDocuments({ 
        createdAt: { $gte: startDate } 
      });
      
      const avgQuotesPerUser = totalUsers > 0 ? 
        Math.round((totalQuotes / totalUsers) * 10) / 10 : 0;

      // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Ç–µ, –∫—Ç–æ –¥–æ–±–∞–≤–ª—è–ª —Ü–∏—Ç–∞—Ç—ã –≤ –ø–µ—Ä–∏–æ–¥)
      const activeUserIds = await Quote.distinct('userId', { 
        createdAt: { $gte: startDate } 
      });
      const activeUsers = activeUserIds.length;

      // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
      const promoUsage = await PromoCodeUsage.countDocuments({
        timestamp: { $gte: startDate }
      });

      // –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const previousPeriod = this.getPreviousPeriodDate(startDate);
      const previousStats = await this.getOverviewStats(previousPeriod);

      return {
        totalUsers,
        newUsers,
        totalQuotes,
        avgQuotesPerUser,
        activeUsers,
        promoUsage,
        // –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        usersChange: this.calculateChange(totalUsers, previousStats?.totalUsers || 0),
        newUsersChange: this.calculateChange(newUsers, previousStats?.newUsers || 0),
        quotesChange: this.calculateChange(totalQuotes, previousStats?.totalQuotes || 0),
        avgQuotesChange: this.calculateChange(avgQuotesPerUser, previousStats?.avgQuotesPerUser || 0),
        activeUsersChange: this.calculateChange(activeUsers, previousStats?.activeUsers || 0),
        promoUsageChange: this.calculateChange(promoUsage, previousStats?.promoUsage || 0)
      };
    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   * @param {Date} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
   * @returns {Promise<Array>}
   */
  async getSourceStats(startDate) {
    try {
      return await UserProfile.aggregate([
        { 
          $match: { 
            registeredAt: { $gte: startDate },
            isOnboardingComplete: true 
          } 
        },
        { 
          $group: { 
            _id: '$source', 
            count: { $sum: 1 } 
          } 
        },
        { $sort: { count: -1 } }
      ]);
    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å UTM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   * @param {Date} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
   * @returns {Promise<Array>}
   */
  async getUTMStats(startDate) {
    try {
      return await UTMClick.aggregate([
        { $match: { timestamp: { $gte: startDate } } },
        { 
          $group: { 
            _id: '$campaign', 
            clicks: { $sum: 1 }, 
            users: { $addToSet: '$userId' } 
          } 
        },
        { 
          $project: { 
            campaign: '$_id', 
            clicks: 1, 
            uniqueUsers: { $size: '$users' } 
          } 
        },
        { $sort: { clicks: -1 } }
      ]);
    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è UTM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É retention –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º
   * @returns {Promise<Array<RetentionData>>}
   */
  async getUserRetentionStats() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–≥–æ—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const cohorts = await UserProfile.aggregate([
        {
          $match: {
            isOnboardingComplete: true
          }
        },
        {
          $group: {
            _id: {
              year: { $year: '$registeredAt' },
              month: { $month: '$registeredAt' }
            },
            users: { $push: '$userId' },
            registrationDate: { $first: '$registeredAt' }
          }
        },
        { $sort: { '_id.year': 1, '_id.month': 1 } }
      ]);

      const retentionData = [];

      for (const cohort of cohorts) {
        const cohortUsers = cohort.users;
        const cohortDate = new Date(cohort._id.year, cohort._id.month - 1, 1);
        
        const retention = {
          cohort: `${cohort._id.year}-${cohort._id.month.toString().padStart(2, '0')}`,
          size: cohortUsers.length,
          week1: 0,
          week2: 0, 
          week3: 0,
          week4: 0
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
        for (let week = 1; week <= 4; week++) {
          const weekStart = new Date(cohortDate);
          weekStart.setDate(weekStart.getDate() + (week - 1) * 7);
          const weekEnd = new Date(weekStart);
          weekEnd.setDate(weekEnd.getDate() + 7);

          const activeInWeek = await Quote.distinct('userId', {
            userId: { $in: cohortUsers },
            createdAt: { $gte: weekStart, $lt: weekEnd }
          });

          retention[`week${week}`] = Math.round(
            (activeInWeek.length / cohortUsers.length) * 100
          );
        }

        retentionData.push(retention);
      }

      return retentionData;
    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è retention —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç (–∞–≤—Ç–æ—Ä—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ü–∏—Ç–∞—Ç—ã)
   * @param {string} [period='30d'] - –ü–µ—Ä–∏–æ–¥
   * @returns {Promise<Object>}
   */
  async getTopQuotesAndAuthors(period = '30d') {
    try {
      const startDate = this.getStartDate(period);

      const [topAuthors, topCategories, popularQuotes] = await Promise.all([
        // –¢–æ–ø –∞–≤—Ç–æ—Ä—ã
        Quote.aggregate([
          { 
            $match: { 
              createdAt: { $gte: startDate }, 
              author: { $ne: null, $ne: '' } 
            } 
          },
          { $group: { _id: '$author', count: { $sum: 1 } } },
          { $sort: { count: -1 } },
          { $limit: 10 }
        ]),

        // –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        Quote.aggregate([
          { $match: { createdAt: { $gte: startDate } } },
          { $group: { _id: '$category', count: { $sum: 1 } } },
          { $sort: { count: -1 } },
          { $limit: 10 }
        ]),

        // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã (–ø–æ —Ç–µ–∫—Å—Ç—É)
        Quote.aggregate([
          { $match: { createdAt: { $gte: startDate } } },
          { 
            $group: { 
              _id: '$text', 
              author: { $first: '$author' }, 
              count: { $sum: 1 } 
            } 
          },
          { $match: { count: { $gt: 1 } } },
          { $sort: { count: -1 } },
          { $limit: 5 }
        ])
      ]);

      return {
        topAuthors,
        topCategories,
        popularQuotes
      };
    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} campaign - UTM –∫–∞–º–ø–∞–Ω–∏—è
   * @returns {Promise<void>}
   * @private
   */
  async updateUserClickStats(userId, campaign) {
    try {
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      // —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–ª–∏–∫–∞—Ö
    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–∫–æ–≤:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
   * @param {string} promoCode - –ü—Ä–æ–º–æ–∫–æ–¥
   * @returns {number} –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
   * @private
   */
  getDiscountForPromoCode(promoCode) {
    const discountMap = {
      'READER20': 20,
      'WISDOM20': 20,
      'QUOTES20': 20,
      'BOOKS20': 20,
      'MONTH25': 25,
      'READER15': 15
    };

    return discountMap[promoCode] || 10; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10%
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
   * @param {string} period - –ü–µ—Ä–∏–æ–¥ (1d, 7d, 30d, 90d)
   * @returns {Date}
   * @private
   */
  getStartDate(period) {
    const now = new Date();
    const startDate = new Date(now);

    switch (period) {
      case '1d':
        startDate.setDate(startDate.getDate() - 1);
        break;
      case '7d':
        startDate.setDate(startDate.getDate() - 7);
        break;
      case '30d':
        startDate.setDate(startDate.getDate() - 30);
        break;
      case '90d':
        startDate.setDate(startDate.getDate() - 90);
        break;
      default:
        startDate.setDate(startDate.getDate() - 7);
    }

    return startDate;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
   * @param {Date} currentStartDate - –¢–µ–∫—É—â–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
   * @returns {Date}
   * @private
   */
  getPreviousPeriodDate(currentStartDate) {
    const periodLength = Date.now() - currentStartDate.getTime();
    return new Date(currentStartDate.getTime() - periodLength);
  }

  /**
   * –í—ã—á–∏—Å–ª–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
   * @param {number} current - –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
   * @param {number} previous - –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
   * @returns {number} –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
   * @private
   */
  calculateChange(current, previous) {
    if (previous === 0) return current > 0 ? 100 : 0;
    return Math.round(((current - previous) / previous) * 100);
  }
}

module.exports = new AnalyticsService();
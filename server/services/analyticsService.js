/**
 * @fileoverview –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ Reader Bot - –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´
 * @description –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥–µ–ª—è–º–∏
 * @version 3.2.1 - DIAGNOSTIC VERSION
 */

const logger = require('../utils/logger');

class AnalyticsService {
  constructor() {
    this.name = 'AnalyticsService';
    this._models = null;
    
    logger.info('üìä AnalyticsService –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω');
  }

  /**
   * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  getModels() {
    if (this._models) {
      logger.info('üìä –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏');
      return this._models;
    }

    try {
      logger.info('üìä –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–µ–π...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥–µ–ª—è–º
      const modelsPath = '../models';
      logger.info(`üìä –ü—É—Ç—å –∫ –º–æ–¥–µ–ª—è–º: ${modelsPath}`);
      
      const models = require(modelsPath);
      logger.info(`üìä require('../models') –≤—ã–ø–æ–ª–Ω–µ–Ω, —Ç–∏–ø: ${typeof models}`);
      logger.info(`üìä –ö–ª—é—á–∏ models: ${Object.keys(models)}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å –æ—Ç–¥–µ–ª—å–Ω–æ
      const modelNames = ['UserProfile', 'Quote', 'UTMClick', 'PromoCodeUsage', 'UserAction'];
      const modelStatus = {};
      
      for (const modelName of modelNames) {
        const model = models[modelName];
        modelStatus[modelName] = {
          exists: !!model,
          type: typeof model,
          isFunction: typeof model === 'function',
          hasSchema: !!(model && model.schema)
        };
        logger.info(`üìä –ú–æ–¥–µ–ª—å ${modelName}: exists=${!!model}, type=${typeof model}`);
      }
      
      this._models = {
        UserProfile: models.UserProfile,
        Quote: models.Quote,
        UTMClick: models.UTMClick,
        PromoCodeUsage: models.PromoCodeUsage,
        UserAction: models.UserAction,
        WeeklyReport: models.WeeklyReport,
        MonthlyReport: models.MonthlyReport
      };
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏
      const requiredModels = ['UserProfile', 'Quote'];
      const missingModels = requiredModels.filter(model => !this._models[model]);
      
      if (missingModels.length > 0) {
        logger.error(`üìä –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏: ${missingModels.join(', ')}`);
        logger.error(`üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π: ${JSON.stringify(modelStatus, null, 2)}`);
        this._models = null;
        return null;
      }
      
      logger.info('üìä ‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      return this._models;
      
    } catch (error) {
      logger.error('üìä ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π:', error.message);
      logger.error('üìä ‚ùå Stack trace:', error.stack);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
      try {
        const fs = require('fs');
        const path = require('path');
        const modelsDir = path.join(__dirname, '../models');
        logger.info(`üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${modelsDir}`);
        
        if (fs.existsSync(modelsDir)) {
          const files = fs.readdirSync(modelsDir);
          logger.info(`üìä –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ models: ${files.join(', ')}`);
        } else {
          logger.error(`üìä –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${modelsDir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
        }
        
        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å index.js –Ω–∞–ø—Ä—è–º—É—é
        const indexPath = path.join(modelsDir, 'index.js');
        if (fs.existsSync(indexPath)) {
          logger.info(`üìä –§–∞–π–ª ${indexPath} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        } else {
          logger.error(`üìä –§–∞–π–ª ${indexPath} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
        }
      } catch (diagnosticError) {
        logger.error('üìä –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', diagnosticError.message);
      }
      
      this._models = null;
      return null;
    }
  }

  /**
   * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async testDatabaseConnection() {
    try {
      const mongoose = require('mongoose');
      const isConnected = mongoose.connection.readyState === 1;
      
      logger.info(`üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MongoDB: ${isConnected ? '–ø–æ–¥–∫–ª—é—á–µ–Ω–æ' : '–æ—Ç–∫–ª—é—á–µ–Ω–æ'}`);
      logger.info(`üìä MongoDB readyState: ${mongoose.connection.readyState}`);
      logger.info(`üìä MongoDB connection name: ${mongoose.connection.name}`);
      
      return isConnected;
    } catch (error) {
      logger.error('üìä –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:', error.message);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
   */
  async getDashboardStats(dateRange = '7d') {
    try {
      logger.info(`üìä ===== –ù–ê–ß–ê–õ–û getDashboardStats(${dateRange}) =====`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
      const dbConnected = await this.testDatabaseConnection();
      if (!dbConnected) {
        logger.error('üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!');
        return this.getEmptyStats(dateRange, 'Database not connected');
      }
      
      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏
      const models = this.getModels();
      
      if (!models) {
        logger.error('üìä –ú–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return this.getEmptyStats(dateRange, 'Models not available');
      }

      logger.info(`üìä –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`);
      
      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const totalUsers = await this.getTotalUsers();
      logger.info(`üìä –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
      
      if (totalUsers === 0) {
        // –í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ - –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ø—Ä—è–º—É—é
        const testCount = await models.UserProfile.countDocuments({});
        logger.info(`üìä –ü—Ä—è–º–æ–π –ø–æ–¥—Å—á–µ—Ç –≤—Å–µ—Ö UserProfile: ${testCount}`);
        
        if (testCount > 0) {
          const completedCount = await models.UserProfile.countDocuments({ isOnboardingComplete: true });
          logger.info(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º: ${completedCount}`);
        }
      }
      
      const startDate = this.getStartDate(dateRange);
      logger.info(`üìä –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞: ${startDate.toISOString()}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Å—Ç—è–º —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      const totalQuotes = await this.getTotalQuotes(startDate);
      const newUsers = await this.getNewUsers(startDate);
      const activeUsers = await this.getActiveUsers(startDate);
      
      const stats = {
        overview: {
          totalUsers,
          newUsers,
          totalQuotes,
          avgQuotesPerUser: totalUsers > 0 ? Math.round((totalQuotes / totalUsers) * 10) / 10 : 0,
          activeUsers,
          promoUsage: 0
        },
        sourceStats: [],
        utmStats: [],
        period: dateRange,
        timestamp: new Date().toISOString(),
        fallbackMode: false,
        dataSource: 'mongodb'
      };

      logger.info(`üìä ===== –†–ï–ó–£–õ–¨–¢–ê–¢ getDashboardStats =====`);
      logger.info(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(stats.overview, null, 2)}`);
      
      return stats;

    } catch (error) {
      logger.error('üìä ‚ùå –û—à–∏–±–∫–∞ –≤ getDashboardStats:', error.message);
      logger.error('üìä ‚ùå Stack trace:', error.stack);
      return this.getEmptyStats(dateRange, error.message);
    }
  }

  async getUserRetentionStats() {
    logger.info('üìä ===== getUserRetentionStats =====');
    const models = this.getModels();
    
    if (!models || !models.UserProfile || !models.Quote) {
      logger.warn('üìä –ú–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è retention –∞–Ω–∞–ª–∏–∑–∞');
      return [];
    }

    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–µ
    return [];
  }

  async getTopQuotesAndAuthors(dateRange = '30d') {
    logger.info(`üìä ===== getTopQuotesAndAuthors(${dateRange}) =====`);
    const models = this.getModels();
    
    if (!models || !models.Quote) {
      logger.warn('üìä –ú–æ–¥–µ–ª—å Quote –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
      return {
        topAuthors: [],
        topCategories: [],
        popularQuotes: [],
        dataSource: 'unavailable'
      };
    }

    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–µ
    return {
      topAuthors: [],
      topCategories: [],
      popularQuotes: [],
      dataSource: 'mongodb',
      period: dateRange
    };
  }

  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  async getTotalUsers() {
    try {
      const models = this.getModels();
      
      if (!models || !models.UserProfile) {
        logger.warn('üìä UserProfile –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ getTotalUsers');
        return 0;
      }
      
      logger.info('üìä –í—ã–ø–æ–ª–Ω—è–µ–º UserProfile.countDocuments...');
      const count = await models.UserProfile.countDocuments({ isOnboardingComplete: true });
      logger.info(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${count}`);
      return count;
    } catch (error) {
      logger.error('üìä –û—à–∏–±–∫–∞ –≤ getTotalUsers:', error.message);
      return 0;
    }
  }

  async getNewUsers(startDate) {
    try {
      const models = this.getModels();
      
      if (!models || !models.UserProfile) {
        logger.warn('üìä UserProfile –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ getNewUsers');
        return 0;
      }
      
      const count = await models.UserProfile.countDocuments({
        isOnboardingComplete: true,
        registeredAt: { $gte: startDate }
      });
      logger.info(`üìä –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å ${startDate.toISOString()}: ${count}`);
      return count;
    } catch (error) {
      logger.error('üìä –û—à–∏–±–∫–∞ –≤ getNewUsers:', error.message);
      return 0;
    }
  }

  async getTotalQuotes(startDate) {
    try {
      const models = this.getModels();
      
      if (!models || !models.Quote) {
        logger.warn('üìä Quote –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ getTotalQuotes');
        return 0;
      }
      
      const count = await models.Quote.countDocuments({ createdAt: { $gte: startDate } });
      logger.info(`üìä –¶–∏—Ç–∞—Ç —Å ${startDate.toISOString()}: ${count}`);
      return count;
    } catch (error) {
      logger.error('üìä –û—à–∏–±–∫–∞ –≤ getTotalQuotes:', error.message);
      return 0;
    }
  }

  async getActiveUsers(startDate) {
    try {
      const models = this.getModels();
      
      if (!models || !models.Quote) {
        logger.warn('üìä Quote –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ getActiveUsers');
        return 0;
      }
      
      const activeUsers = await models.Quote.distinct('userId', { 
        createdAt: { $gte: startDate } 
      });
      logger.info(`üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${activeUsers.length}`);
      return activeUsers.length;
    } catch (error) {
      logger.error('üìä –û—à–∏–±–∫–∞ –≤ getActiveUsers:', error.message);
      return 0;
    }
  }

  getEmptyStats(dateRange, errorMessage = null) {
    return {
      overview: {
        totalUsers: 0,
        newUsers: 0,
        totalQuotes: 0,
        avgQuotesPerUser: 0,
        activeUsers: 0,
        promoUsage: 0
      },
      sourceStats: [],
      utmStats: [],
      period: dateRange,
      timestamp: new Date().toISOString(),
      fallbackMode: false,
      dataSource: errorMessage ? 'error' : 'unavailable',
      error: errorMessage
    };
  }

  getStartDate(dateRange) {
    const now = new Date();
    switch (dateRange) {
      case '1d': 
        const oneDayAgo = new Date(now);
        oneDayAgo.setDate(oneDayAgo.getDate() - 1);
        return oneDayAgo;
      case '7d': 
        const sevenDaysAgo = new Date(now);
        sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
        return sevenDaysAgo;
      case '30d': 
        const thirtyDaysAgo = new Date(now);
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return thirtyDaysAgo;
      case '90d': 
        const ninetyDaysAgo = new Date(now);
        ninetyDaysAgo.setDate(ninetyDaysAgo.getDate() - 90);
        return ninetyDaysAgo;
      default: 
        const defaultDate = new Date(now);
        defaultDate.setDate(defaultDate.getDate() - 7);
        return defaultDate;
    }
  }

  // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ —Ç—Ä–µ–∫–∏–Ω–≥–∞
  async trackUTMClick() { /* –∑–∞–≥–ª—É—à–∫–∞ */ }
  async trackPromoCodeUsage() { /* –∑–∞–≥–ª—É—à–∫–∞ */ }
  async trackUserAction() { /* –∑–∞–≥–ª—É—à–∫–∞ */ }
}

module.exports = new AnalyticsService();
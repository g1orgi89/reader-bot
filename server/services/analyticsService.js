/**
 * @fileoverview –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @description –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–±–æ—Ä –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ü–∏—Ç–∞—Ç, –∫–æ–Ω–≤–µ—Ä—Å–∏–π
 */

const UserProfile = require('../models/userProfile');
const Quote = require('../models/quote');
const WeeklyReport = require('../models/weeklyReport');
const MonthlyReport = require('../models/monthlyReport');
const { PromoCodeUsage, UTMClick } = require('../models/analytics');

/**
 * @typedef {Object} DashboardStats
 * @property {Object} overview - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 * @property {number} overview.totalUsers - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @property {number} overview.newUsers - –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥
 * @property {number} overview.totalQuotes - –í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥
 * @property {number} overview.avgQuotesPerUser - –°—Ä–µ–¥–Ω–µ–µ —Ü–∏—Ç–∞—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @property {number} overview.activeUsers - –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @property {number} overview.promoUsage - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
 * @property {Array} sourceStats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
 * @property {Array} utmStats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ UTM –∫–∞–º–ø–∞–Ω–∏–π
 * @property {string} period - –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
 */

/**
 * @typedef {Object} RetentionData
 * @property {string} cohort - –ö–æ–≥–æ—Ä—Ç–∞ (YYYY-MM)
 * @property {number} size - –†–∞–∑–º–µ—Ä –∫–æ–≥–æ—Ä—Ç—ã
 * @property {number} week1 - Retention 1 –Ω–µ–¥–µ–ª—è (%)
 * @property {number} week2 - Retention 2 –Ω–µ–¥–µ–ª–∏ (%)
 * @property {number} week3 - Retention 3 –Ω–µ–¥–µ–ª–∏ (%)
 * @property {number} week4 - Retention 4 –Ω–µ–¥–µ–ª–∏ (%)
 */

/**
 * @typedef {Object} TopContent
 * @property {Array} topAuthors - –¢–æ–ø –∞–≤—Ç–æ—Ä—ã
 * @property {Array} topCategories - –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @property {Array} popularQuotes - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
 */

/**
 * –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 */
class AnalyticsService {
  constructor() {
    this.cache = new Map();
    this.cacheTimeout = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
   * @param {string} dateRange - –ü–µ—Ä–∏–æ–¥ ('1d', '7d', '30d', '90d')
   * @returns {Promise<DashboardStats>}
   */
  async getDashboardStats(dateRange = '7d') {
    const cacheKey = `dashboard_${dateRange}`;
    const cached = this.getCached(cacheKey);
    if (cached) return cached;

    try {
      const startDate = this.getStartDate(dateRange);
      const now = new Date();

      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const [
        totalUsers,
        newUsers,
        quotesStats,
        activeUsers,
        promoUsage,
        sourceStats,
        utmStats
      ] = await Promise.all([
        this.getTotalUsers(),
        this.getNewUsers(startDate),
        this.getQuotesStats(startDate),
        this.getActiveUsers(startDate),
        this.getPromoUsage(startDate),
        this.getSourceStats(startDate),
        this.getUTMStats(startDate)
      ]);

      const stats = {
        overview: {
          totalUsers,
          newUsers,
          totalQuotes: quotesStats.total,
          avgQuotesPerUser: totalUsers > 0 ? Math.round((quotesStats.total / totalUsers) * 10) / 10 : 0,
          activeUsers,
          promoUsage
        },
        sourceStats,
        utmStats,
        period: dateRange
      };

      this.setCached(cacheKey, stats);
      return stats;

    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞—à–±–æ—Ä–¥–∞');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö retention –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º
   * @returns {Promise<RetentionData[]>}
   */
  async getUserRetentionStats() {
    const cacheKey = 'retention_stats';
    const cached = this.getCached(cacheKey);
    
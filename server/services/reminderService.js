/**
 * @fileoverview –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @author g1orgi89
 */

const logger = require('../utils/logger');

/**
 * @typedef {Object} ReminderSchedule
 * @property {string} frequency - –ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
 * @property {string[]} times - –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 */

/**
 * @typedef {Object} ReminderStats
 * @property {number} sent - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
 * @property {number} skipped - –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
 * @property {number} failed - –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @property {Object[]} errors - –ú–∞—Å—Å–∏–≤ –æ—à–∏–±–æ–∫
 */

/**
 * –°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
 */
class ReminderService {
  constructor() {
    this.bot = null;
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–±–æ–ª–µ–µ —Ä–µ–¥–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
    this.optimizedSchedule = {
      week1: { 
        frequency: 'every_other_day', 
        times: ['19:00'] // –¢–æ–ª—å–∫–æ –≤–µ—á–µ—Ä–æ–º
      },
      week2_4: { 
        frequency: 'twice_weekly', 
        times: ['19:00'] // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ —á–µ—Ç–≤–µ—Ä–≥
      },
      month_plus: { 
        frequency: 'weekly', 
        times: ['19:00'] // –¢–æ–ª—å–∫–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
      }
    };

    // –®–∞–±–ª–æ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞–¥–∏–π
    this.reminderTemplates = {
      week1: [
        "üìñ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –¥–µ–Ω—å, –ø–æ–ª–Ω—ã–π –Ω–æ–≤—ã—Ö —Å–º—ã—Å–ª–æ–≤. –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–µ–Ω—É—Ç - –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º–∏ –∑–¥–µ—Å—å.",
        "üåÖ –ö–∞–∫–∞—è –º—É–¥—Ä–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—Ç–∏–ª–∞—Å—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?",
        "‚òÄÔ∏è –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ–≥–æ–¥–Ω—è –≤—ã –Ω–∞—à–ª–∏ —Ü–∏—Ç–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –∏–∑–º–µ–Ω–∏–ª–∞ –≤–∞—à –¥–µ–Ω—å?",
        "üåô –í—Ä–µ–º—è –ø–æ–¥—É–º–∞—Ç—å –æ —Ç–æ–º, —á—Ç–æ –≤–∞–∂–Ω–æ–≥–æ –≤—ã –ø—Ä–æ—á–∏—Ç–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è.",
        "‚≠ê –í—Ä–µ–º—è –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏. –ö–∞–∫–∏–µ —Å–ª–æ–≤–∞ —Ç—Ä–æ–Ω—É–ª–∏ –≤–∞—à—É –¥—É—à—É —Å–µ–≥–æ–¥–Ω—è?"
      ],
      week2_4: [
        "üìö \"–¶–∏—Ç–∞—Ç–∞ - —ç—Ç–æ –∑–µ—Ä–∫–∞–ª–æ –¥—É—à–∏\". –ß—Ç–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –∑–µ—Ä–∫–∞–ª–µ —Å–µ–≥–æ–¥–Ω—è?",
        "üí≠ –ö–∞–∫ –¥–µ–ª–∞ —Å –≤–∞—à–∏–º –¥–Ω–µ–≤–Ω–∏–∫–æ–º —Ü–∏—Ç–∞—Ç? –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –º—ã—Å–ª—å—é, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–∞.",
        "üîç –ü–æ–º–Ω–∏—Ç–µ: –∫–∞–∂–¥–∞—è —Ü–∏—Ç–∞—Ç–∞ - —ç—Ç–æ –∫–ª—é—á –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–µ–±—è. –ö–∞–∫–æ–π –∫–ª—é—á –Ω–∞–π–¥–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è?",
        "üìñ \"–•–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ - —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏!\" –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —á–∏—Ç–∞–µ—Ç–µ?"
      ],
      month_plus: [
        "üåü –í—Ä–µ–º—è –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –ø–æ—Ä—Ü–∏–∏ –º—É–¥—Ä–æ—Å—Ç–∏! –ö–∞–∫–∞—è —Ü–∏—Ç–∞—Ç–∞ –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–∞ –≤–∞—Å –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?",
        "üìñ \"–•–æ—Ä–æ—à–∞—è –∂–∏–∑–Ω—å —Å—Ç—Ä–æ–∏—Ç—Å—è, –∞ –Ω–µ –¥–∞–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\". –ö–∞–∫–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –º—É–¥—Ä–æ—Å—Ç–∏ —Å–æ–±—Ä–∞–ª–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?",
        "üíé –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ —Å –º—É–¥—Ä–æ—Å—Ç—å—é! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ü–∏—Ç–∞—Ç–æ–π, –∫–æ—Ç–æ—Ä–∞—è –∑–∞—Å—Ç–∞–≤–∏–ª–∞ –∑–∞–¥—É–º–∞—Ç—å—Å—è."
      ]
    };

    logger.info('üìñ ReminderService initialized with optimized schedule');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
   * @param {Object} dependencies - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
   * @param {Object} dependencies.bot - Telegram bot instance
   */
  initialize(dependencies) {
    this.bot = dependencies.bot;
    logger.info('üìñ ReminderService dependencies initialized');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ cron)
   * @returns {Promise<ReminderStats>}
   */
  async sendDailyReminders() {
    if (!this.bot) {
      logger.error('üìñ Bot not initialized in ReminderService');
      return { sent: 0, skipped: 0, failed: 0, errors: [] };
    }

    try {
      const currentHour = new Date().getHours();
      const stats = { sent: 0, skipped: 0, failed: 0, errors: [] };

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      const activeUsers = await this.getActiveUsersForReminders(currentHour);
      
      logger.info(`üìñ Processing reminders for ${activeUsers.length} users at ${currentHour}:00`);

      for (const user of activeUsers) {
        try {
          const reminderConfig = this.getReminderConfigForUser(user);
          const shouldSend = await this.shouldSendReminderToday(user, reminderConfig);

          if (shouldSend) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω —Å–µ–≥–æ–¥–Ω—è)
            const wasActiveToday = await this.wasUserActiveToday(user.userId);
            
            if (wasActiveToday) {
              stats.skipped++;
              logger.debug(`üìñ Skipping reminder for ${user.userId} - user was active today`);
              continue;
            }

            await this.sendReminderToUser(user, reminderConfig);
            stats.sent++;
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 100));
          } else {
            stats.skipped++;
          }
        } catch (error) {
          stats.failed++;
          stats.errors.push({
            userId: user.userId,
            error: error.message
          });
          logger.error(`üìñ Failed to send reminder to user ${user.userId}: ${error.message}`);
        }
      }

      logger.info(`üìñ Reminders completed: ${stats.sent} sent, ${stats.skipped} skipped, ${stats.failed} failed`);
      return stats;

    } catch (error) {
      logger.error(`üìñ Error in sendDailyReminders: ${error.message}`, error);
      return { sent: 0, skipped: 0, failed: 0, errors: [{ error: error.message }] };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Å
   * @param {number} currentHour - –¢–µ–∫—É—â–∏–π —á–∞—Å
   * @returns {Promise<Array>} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
   */
  async getActiveUsersForReminders(currentHour) {
    try {
      const { UserProfile } = require('../models');
      const timeStr = `${currentHour.toString().padStart(2, '0')}:00`;
      
      return await UserProfile.find({
        isOnboardingComplete: true,
        'settings.reminderEnabled': true,
        'settings.reminderTimes': timeStr
      });
    } catch (error) {
      logger.error(`üìñ Error getting active users: ${error.message}`, error);
      return [];
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} user - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @returns {ReminderSchedule} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   */
  getReminderConfigForUser(user) {
    const registrationDate = new Date(user.registeredAt);
    const now = new Date();
    const daysSinceRegistration = Math.floor((now - registrationDate) / (1000 * 60 * 60 * 24));
    const weeksSinceRegistration = Math.floor(daysSinceRegistration / 7);

    if (weeksSinceRegistration === 0) {
      return this.optimizedSchedule.week1;
    } else if (weeksSinceRegistration <= 3) {
      return this.optimizedSchedule.week2_4;
    } else {
      return this.optimizedSchedule.month_plus;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
   * @param {Object} user - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @param {ReminderSchedule} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   * @returns {Promise<boolean>} –ù—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
   */
  async shouldSendReminderToday(user, config) {
    const registrationDate = new Date(user.registeredAt);
    const now = new Date();
    const daysSinceRegistration = Math.floor((now - registrationDate) / (1000 * 60 * 60 * 24));

    switch (config.frequency) {
      case 'every_other_day':
        return daysSinceRegistration % 2 === 0;
      
      case 'twice_weekly':
        const dayOfWeek = now.getDay();
        return dayOfWeek === 1 || dayOfWeek === 4; // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ —á–µ—Ç–≤–µ—Ä–≥
      
      case 'weekly':
        return now.getDay() === 1; // –¢–æ–ª—å–∫–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
      
      default:
        return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω —Å–µ–≥–æ–¥–Ω—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<boolean>} –ë—ã–ª –ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
   */
  async wasUserActiveToday(userId) {
    try {
      const { Quote } = require('../models');
      
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      const todayQuotes = await Quote.countDocuments({
        userId,
        createdAt: { $gte: today }
      });

      return todayQuotes > 0;
    } catch (error) {
      logger.error(`üìñ Error checking user activity: ${error.message}`, error);
      return false; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * @param {Object} user - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @param {ReminderSchedule} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   * @returns {Promise<void>}
   */
  async sendReminderToUser(user, config) {
    const registrationDate = new Date(user.registeredAt);
    const now = new Date();
    const weeksSinceRegistration = Math.floor((now - registrationDate) / (1000 * 60 * 60 * 24 * 7));

    // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —à–∞–±–ª–æ–Ω—ã
    let templates;
    if (weeksSinceRegistration === 0) {
      templates = this.reminderTemplates.week1;
    } else if (weeksSinceRegistration <= 3) {
      templates = this.reminderTemplates.week2_4;
    } else {
      templates = this.reminderTemplates.month_plus;
    }

    const randomTemplate = templates[Math.floor(Math.random() * templates.length)];
    
    // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å –∏–º–µ–Ω–µ–º
    const personalizedMessage = `${user.name}, ${randomTemplate}`;

    try {
      await this.bot.telegram.sendMessage(user.userId, personalizedMessage);
      
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      logger.debug(`üìñ Reminder sent to ${user.name} (${user.userId}), week ${weeksSinceRegistration + 1}`);
    } catch (error) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
      if (error.response && error.response.error_code === 403) {
        logger.info(`üìñ User ${user.userId} blocked the bot, skipping reminders`);
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.disableRemindersForUser(user.userId);
      } else {
        throw error;
      }
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<void>}
   */
  async disableRemindersForUser(userId) {
    try {
      const { UserProfile } = require('../models');
      
      await UserProfile.findOneAndUpdate(
        { userId },
        { 'settings.reminderEnabled': false }
      );
      
      logger.info(`üìñ Reminders disabled for blocked user ${userId}`);
    } catch (error) {
      logger.error(`üìñ Error disabling reminders for user ${userId}: ${error.message}`, error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} settings - –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   * @param {boolean} settings.enabled - –í–∫–ª—é—á–µ–Ω—ã –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   * @param {string[]} settings.times - –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   * @returns {Promise<void>}
   */
  async updateReminderSettings(userId, settings) {
    try {
      const { UserProfile } = require('../models');
      
      await UserProfile.findOneAndUpdate(
        { userId },
        { 
          'settings.reminderEnabled': settings.enabled,
          'settings.reminderTimes': settings.times
        }
      );
      
      logger.info(`üìñ Reminder settings updated for user ${userId}: enabled=${settings.enabled}, times=${settings.times.join(',')}`);
    } catch (error) {
      logger.error(`üìñ Error updating reminder settings: ${error.message}`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
   * @param {number} days - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async getReminderStats(days = 7) {
    try {
      const { UserProfile } = require('../models');
      
      const totalUsers = await UserProfile.countDocuments({
        isOnboardingComplete: true
      });

      const enabledUsers = await UserProfile.countDocuments({
        isOnboardingComplete: true,
        'settings.reminderEnabled': true
      });

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç–∞–¥–∏—è–º
      const stages = {
        week1: 0,
        week2_4: 0,
        month_plus: 0
      };

      const users = await UserProfile.find({
        isOnboardingComplete: true,
        'settings.reminderEnabled': true
      }, 'registeredAt');

      const now = new Date();
      users.forEach(user => {
        const weeksSinceRegistration = Math.floor((now - new Date(user.registeredAt)) / (1000 * 60 * 60 * 24 * 7));
        
        if (weeksSinceRegistration === 0) {
          stages.week1++;
        } else if (weeksSinceRegistration <= 3) {
          stages.week2_4++;
        } else {
          stages.month_plus++;
        }
      });

      return {
        totalUsers,
        enabledUsers,
        disabledUsers: totalUsers - enabledUsers,
        stages,
        schedule: this.optimizedSchedule
      };

    } catch (error) {
      logger.error(`üìñ Error getting reminder stats: ${error.message}`, error);
      return null;
    }
  }

  /**
   * –†—É—á–Ω–æ–π —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async testReminder(userId) {
    try {
      const { UserProfile } = require('../models');
      
      const user = await UserProfile.findOne({ userId });
      if (!user) {
        logger.error(`üìñ User ${userId} not found for reminder test`);
        return false;
      }

      const config = this.getReminderConfigForUser(user);
      await this.sendReminderToUser(user, config);
      
      logger.info(`üìñ Test reminder sent to user ${userId}`);
      return true;

    } catch (error) {
      logger.error(`üìñ Error sending test reminder: ${error.message}`, error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   * @returns {Object} –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
   */
  getDiagnostics() {
    return {
      initialized: !!this.bot,
      schedule: this.optimizedSchedule,
      templateCounts: {
        week1: this.reminderTemplates.week1.length,
        week2_4: this.reminderTemplates.week2_4.length,
        month_plus: this.reminderTemplates.month_plus.length
      },
      timezone: 'Europe/Moscow'
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
   * @returns {boolean} –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–±–æ—Ç–µ
   */
  isReady() {
    return !!this.bot;
  }
}

module.exports = { ReminderService };

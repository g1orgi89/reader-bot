/**
 * @fileoverview Production-ready Telegram notification system for Reader Bot
 * @author g1orgi89
 */

const logger = require('../utils/logger');
const { notificationTemplates } = require('../config/notificationTemplates');

/**
 * @typedef {Object} ReminderStats
 * @property {number} sent - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
 * @property {number} skipped - –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
 * @property {number} failed - –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @property {Object[]} errors - –ú–∞—Å—Å–∏–≤ –æ—à–∏–±–æ–∫
 */

/**
 * Production-ready —Å–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å —Ç—Ä–µ–º—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
 */
class ReminderService {
  constructor() {
    this.bot = null;
    this.templates = notificationTemplates;

    logger.info('üîî ReminderService initialized with weekday-based system');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
   * @param {Object} dependencies - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
   * @param {Object} dependencies.bot - Telegram bot instance
   */
  initialize(dependencies) {
    this.bot = dependencies.bot;
    logger.info('üîî ReminderService dependencies initialized');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
   * @param {string} slot - –°–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏: 'morning', 'day', 'evening'
   * @returns {Promise<ReminderStats>}
   */
  async sendSlotReminders(slot) {
    if (!this.bot) {
      logger.warn('üîî Bot not initialized, skipping reminder sending');
      return { sent: 0, skipped: 0, failed: 0, errors: [] };
    }

    if (!['morning', 'day', 'evening'].includes(slot)) {
      logger.error(`üîî Invalid slot: ${slot}`);
      return { sent: 0, skipped: 0, failed: 0, errors: [] };
    }

    try {
      const stats = { sent: 0, skipped: 0, failed: 0, errors: [] };
      const today = new Date();
      const dayOfWeek = today.getDay(); // 0 = Sunday, 1 = Monday, etc.

      // Compute current weekday in Moscow timezone
      const dayName = this.getMoscowWeekday();
      logger.info(`üîî Current Moscow weekday: ${dayName}`);

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
      const eligibleUsers = await this.getEligibleUsers(slot, dayOfWeek);
      logger.info(`[DEBUG] eligibleUsers: ` + eligibleUsers.map(u => `${u.userId} (${u.name})`).join(', '));
      logger.info(`üîî Processing ${slot} reminders for ${eligibleUsers.length} users`);

      for (const user of eligibleUsers) {
        try {
          const result = await this.sendReminderToUser(user, slot, dayName);
          
          if (result === 'sent') {
            stats.sent++;
            // –û–±–Ω–æ–≤–ª—è–µ–º lastSentAt —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            await this.updateLastSentAt(user.userId);
          } else if (result === 'skipped') {
            stats.skipped++;
          }
          
        } catch (error) {
          logger.error(`üîî Failed to send reminder to user ${user.userId}:`, error);
          stats.failed++;
          stats.errors.push({
            userId: user.userId,
            error: error.message,
            slot
          });
        }
      }

      logger.info(`üîî ${slot} reminders completed: sent=${stats.sent}, skipped=${stats.skipped}, failed=${stats.failed}`);
      return stats;

    } catch (error) {
      logger.error(`üîî Error in sendSlotReminders(${slot}):`, error);
      return { sent: 0, skipped: 0, failed: 0, errors: [{ error: error.message, slot }] };
    }
  }

  /**
   * Get current weekday name in Moscow timezone
   * @returns {string} Weekday name in Russian (capitalized)
   */
  getMoscowWeekday() {
    const formatter = new Intl.DateTimeFormat('ru-RU', {
      weekday: 'long',
      timeZone: 'Europe/Moscow'
    });
    const dayName = formatter.format(new Date());
    // Capitalize first letter
    return dayName.charAt(0).toUpperCase() + dayName.slice(1);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   * @param {string} slot - –°–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏
   * @param {number} dayOfWeek - –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0-6)
   * @returns {Promise<Array>}
   */
  async getEligibleUsers(slot, dayOfWeek) {
    try {
      const { UserProfile, Quote } = require('../models');
      const today = new Date();
      const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());

      // Optimized MongoDB query with filtering
      const baseQuery = {
        isActive: true,
        isBlocked: { $ne: true },
        isOnboardingComplete: true,
        $or: [
          { 'settings.reminders.enabled': true },
          { 'settings.reminderEnabled': true } // legacy fallback
        ]
      };

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î
      const allUsers = await UserProfile.find(baseQuery)
        .select({ userId: 1, name: 1, statistics: 1, settings: 1 });
      
      const eligibleUsers = [];

      for (const user of allUsers) {
        const settings = user.getNormalizedSettings();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (double-check after DB query)
        if (!settings.reminders.enabled) {
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É —Å–ª–æ—Ç–æ–≤
        if (!this.shouldSendForFrequency(settings.reminders.frequency, slot, dayOfWeek)) {
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ 10+ —Ü–∏—Ç–∞—Ç —Å–µ–≥–æ–¥–Ω—è
        const todayQuotesCount = await Quote.countDocuments({
          userId: user.userId,
          createdAt: { $gte: startOfDay }
        });

        if (todayQuotesCount >= 10) {
          continue; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω —Å–µ–≥–æ–¥–Ω—è
        }

        eligibleUsers.push(user);
      }

      return eligibleUsers;

    } catch (error) {
      logger.error('üîî Error getting eligible users:', error);
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã –∏ —Å–ª–æ—Ç–∞
   * @param {string} frequency - –ß–∞—Å—Ç–æ—Ç–∞: 'often', 'standard', 'rare', 'off'
   * @param {string} slot - –°–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏
   * @param {number} dayOfWeek - –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0-6)
   * @returns {boolean}
   */
  shouldSendForFrequency(frequency, slot, dayOfWeek) {
    switch (frequency) {
      case 'off':
        return false;
      
      case 'often':
        return true; // –í—Å–µ —Ç—Ä–∏ —Å–ª–æ—Ç–∞
      
      case 'standard':
        return slot === 'morning'; // –¢–æ–ª—å–∫–æ —É—Ç—Ä–µ–Ω–Ω–∏–π —Å–ª–æ—Ç
      
      case 'rare':
        // –¢–æ–ª—å–∫–æ –≤–µ—á–µ—Ä–Ω–∏–π —Å–ª–æ—Ç –ò —Ç–æ–ª—å–∫–æ –≤—Ç–æ—Ä–Ω–∏–∫(2) –∏ –ø—è—Ç–Ω–∏—Ü–∞(5)
        return slot === 'evening' && (dayOfWeek === 2 || dayOfWeek === 5);
      
      default:
        return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * @param {Object} user - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @param {string} slot - –°–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏
   * @param {string} dayName - –ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
   * @returns {Promise<string>} 'sent' or 'skipped'
   */
  async sendReminderToUser(user, slot, dayName) {
    // Get template for this weekday and slot
    const template = this.templates[dayName]?.[slot] || '';
    
    // If template is empty or whitespace-only, skip sending
    if (!template || template.trim() === '') {
      logger.info(`üîî Skipped ${slot} reminder for user ${user.userId} (${user.name}) - empty template for ${dayName}`);
      return 'skipped';
    }

    // Build message from template (no user name prefix)
    let message = template;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Ü–∏—Ç–∞—Ç–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
    const { Quote } = require('../models');
    const today = new Date();
    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
    const todayCount = await Quote.countDocuments({
      userId: user.userId,
      createdAt: { $gte: startOfDay }
    });

    if (todayCount > 0) {
      message += `\n\nüìä –°–µ–≥–æ–¥–Ω—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${todayCount} —Ü–∏—Ç–∞—Ç`;
    }

    await this.bot.telegram.sendMessage(user.userId, message);
    logger.info(`üîî Sent ${slot} reminder to user ${user.userId} (${user.name})`);
    return 'sent';
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<void>}
   */
  async updateLastSentAt(userId) {
    try {
      const { UserProfile } = require('../models');
      await UserProfile.findOneAndUpdate(
        { userId },
        { 
          'settings.reminders.lastSentAt': new Date()
        }
      );
    } catch (error) {
      logger.error(`üîî Error updating lastSentAt for user ${userId}:`, error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
   * @returns {Object}
   */
  getDiagnostics() {
    return {
      initialized: !!this.bot,
      status: this.bot ? 'ready' : 'bot_not_initialized',
      slots: ['morning', 'day', 'evening'],
      frequencies: ['off', 'rare', 'standard', 'often']
    };
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  async sendDailyReminders() {
    logger.warn('üîî sendDailyReminders() is deprecated, use sendSlotReminders() instead');
    const now = new Date();
    const hour = now.getHours();
    
    let slot;
    if (hour >= 9 && hour < 12) slot = 'morning';
    else if (hour >= 15 && hour < 18) slot = 'day';
    else if (hour >= 21 && hour < 24) slot = 'evening';
    else return { sent: 0, skipped: 0, failed: 0, errors: [] };
    
    return this.sendSlotReminders(slot);
  }

  async updateReminderSettings(userId, settings) {
    logger.warn('üîî updateReminderSettings() is deprecated, use API endpoints instead');
    try {
      const { UserProfile } = require('../models');
      
      await UserProfile.findOneAndUpdate(
        { userId },
        { 
          'settings.reminderEnabled': settings.enabled,
          'settings.reminderTimes': settings.times
        }
      );
      
      logger.info(`üîî Legacy reminder settings updated for user ${userId}`);
    } catch (error) {
      logger.error(`üîî Error updating legacy reminder settings: ${error.message}`, error);
      throw error;
    }
  }
}

module.exports = { ReminderService };

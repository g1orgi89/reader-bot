/**
 * @fileoverview Production-ready Telegram notification system for Reader Bot
 * @author g1orgi89
 */

const logger = require('../utils/logger');

/**
 * @typedef {Object} ReminderStats
 * @property {number} sent - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
 * @property {number} skipped - –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
 * @property {number} failed - –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @property {Object[]} errors - –ú–∞—Å—Å–∏–≤ –æ—à–∏–±–æ–∫
 */

/**
 * Production-ready —Å–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å —Ç—Ä–µ–º—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
 */
class ReminderService {
  constructor() {
    this.bot = null;
    
    // –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    this.messageTemplates = {
      morning: [
        "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å —Å –º—É–¥—Ä–æ–π –º—ã—Å–ª–∏ - –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ü–∏—Ç–∞—Ç–æ–π, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç.",
        "‚òÄÔ∏è –£—Ç—Ä–æ - –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π. –ö–∞–∫–∏–µ —Å–ª–æ–≤–∞ —Ç—Ä–æ–Ω—É–ª–∏ –≤–∞—à—É –¥—É—à—É –Ω–µ–¥–∞–≤–Ω–æ?",
        "üåü –£—Ç—Ä–µ–Ω–Ω—è—è –¥–æ–∑–∞ –º—É–¥—Ä–æ—Å—Ç–∏! –î–æ–±–∞–≤—å—Ç–µ —Ü–∏—Ç–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–¥–∞—Å—Ç —Ç–æ–Ω –≤–∞—à–µ–º—É –¥–Ω—é.",
        "üìö \"–•–æ—Ä–æ—à–µ–µ —É—Ç—Ä–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ö–æ—Ä–æ—à–µ–π –º—ã—Å–ª–∏\". –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π?"
      ],
      day: [
        "üå§Ô∏è –ö–∞–∫ –¥–µ–ª–∞? –í—Ä–µ–º—è –ø–æ–¥—É–º–∞—Ç—å –æ —Ç–æ–º, —á—Ç–æ –≤–∞–∂–Ω–æ–≥–æ –≤—ã —É–∑–Ω–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è.",
        "üí≠ –°–µ—Ä–µ–¥–∏–Ω–∞ –¥–Ω—è - –æ—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏. –ö–∞–∫–∞—è –º—É–¥—Ä–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—Ç–∏–ª–∞—Å—å –≤–∞–º?",
        "üìñ –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ–≥–æ–¥–Ω—è –≤—ã –Ω–∞—à–ª–∏ —Ü–∏—Ç–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –∏–∑–º–µ–Ω–∏–ª–∞ –≤–∞—à –≤–∑–≥–ª—è–¥ –Ω–∞ –≤–µ—â–∏?",
        "‚≠ê –í—Ä–µ–º—è –¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–π –ø–∞—É–∑—ã. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –º—ã—Å–ª—å—é, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞."
      ],
      evening: [
        "üåô –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ö–∞–∫–∞—è –º—É–¥—Ä–æ—Å—Ç—å –æ–∑–∞—Ä–∏–ª–∞ –≤–∞—à –¥–µ–Ω—å?",
        "‚ú® –í–µ—á–µ—Ä - –≤—Ä–µ–º—è –ø–æ–¥–≤–æ–¥–∏—Ç—å –∏—Ç–æ–≥–∏. –ö–∞–∫–∏–µ –≤–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞ –∑–∞–ø–æ–º–Ω–∏–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è?",
        "üåÜ –î–µ–Ω—å –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ü–∏—Ç–∞—Ç–æ–π, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç—Ä–∞–∑–∏–ª–∞ –≤–∞—à–∏ –º—ã—Å–ª–∏.",
        "üìù \"–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –∏—Å—Ç–æ—Ä–∏—è\". –ö–∞–∫—É—é –º—É–¥—Ä—É—é —Å—Ç—Ä–æ—á–∫—É –¥–æ–±–∞–≤–∏—Ç–µ –≤ —Å–≤–æ—é?"
      ]
    };

    logger.info('üîî ReminderService initialized with slot-based system');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
   * @param {Object} dependencies - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
   * @param {Object} dependencies.bot - Telegram bot instance
   */
  initialize(dependencies) {
    this.bot = dependencies.bot;
    logger.info('üîî ReminderService dependencies initialized');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
   * @param {string} slot - –°–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏: 'morning', 'day', 'evening'
   * @returns {Promise<ReminderStats>}
   */
  async sendSlotReminders(slot) {
    if (!this.bot) {
      logger.warn('üîî Bot not initialized, skipping reminder sending');
      return { sent: 0, skipped: 0, failed: 0, errors: [] };
    }

    if (!['morning', 'day', 'evening'].includes(slot)) {
      logger.error(`üîî Invalid slot: ${slot}`);
      return { sent: 0, skipped: 0, failed: 0, errors: [] };
    }

    try {
      const stats = { sent: 0, skipped: 0, failed: 0, errors: [] };
      const today = new Date();
      const dayOfWeek = today.getDay(); // 0 = Sunday, 1 = Monday, etc.

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
      const eligibleUsers = await this.getEligibleUsers(slot, dayOfWeek);
      
      logger.info(`üîî Processing ${slot} reminders for ${eligibleUsers.length} users`);

      for (const user of eligibleUsers) {
        try {
          await this.sendReminderToUser(user, slot);
          stats.sent++;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º lastSentAt
          await this.updateLastSentAt(user.userId);
          
        } catch (error) {
          logger.error(`üîî Failed to send reminder to user ${user.userId}:`, error);
          stats.failed++;
          stats.errors.push({
            userId: user.userId,
            error: error.message,
            slot
          });
        }
      }

      logger.info(`üîî ${slot} reminders completed: sent=${stats.sent}, skipped=${stats.skipped}, failed=${stats.failed}`);
      return stats;

    } catch (error) {
      logger.error(`üîî Error in sendSlotReminders(${slot}):`, error);
      return { sent: 0, skipped: 0, failed: 0, errors: [{ error: error.message, slot }] };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   * @param {string} slot - –°–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏
   * @param {number} dayOfWeek - –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0-6)
   * @returns {Promise<Array>}
   */
  async getEligibleUsers(slot, dayOfWeek) {
    try {
      const { UserProfile, Quote } = require('../models');
      const today = new Date();
      const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());

      // Optimized MongoDB query with filtering
      const baseQuery = {
        isActive: true,
        isBlocked: { $ne: true },
        isOnboardingComplete: true,
        $or: [
          { 'settings.reminders.enabled': true },
          { 'settings.reminderEnabled': true } // legacy fallback
        ]
      };

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î
      const allUsers = await UserProfile.find(baseQuery)
        .select({ userId: 1, name: 1, statistics: 1, settings: 1 });
      
      const eligibleUsers = [];

      for (const user of allUsers) {
        const settings = user.getNormalizedSettings();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (double-check after DB query)
        if (!settings.reminders.enabled) {
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É —Å–ª–æ—Ç–æ–≤
        if (!this.shouldSendForFrequency(settings.reminders.frequency, slot, dayOfWeek)) {
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ 10+ —Ü–∏—Ç–∞—Ç —Å–µ–≥–æ–¥–Ω—è
        const todayQuotesCount = await Quote.countDocuments({
          userId: user.userId,
          createdAt: { $gte: startOfDay }
        });

        if (todayQuotesCount >= 10) {
          continue; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω —Å–µ–≥–æ–¥–Ω—è
        }

        eligibleUsers.push(user);
      }

      return eligibleUsers;

    } catch (error) {
      logger.error('üîî Error getting eligible users:', error);
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã –∏ —Å–ª–æ—Ç–∞
   * @param {string} frequency - –ß–∞—Å—Ç–æ—Ç–∞: 'often', 'standard', 'rare', 'off'
   * @param {string} slot - –°–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏
   * @param {number} dayOfWeek - –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0-6)
   * @returns {boolean}
   */
  shouldSendForFrequency(frequency, slot, dayOfWeek) {
    switch (frequency) {
      case 'off':
        return false;
      
      case 'often':
        return true; // –í—Å–µ —Ç—Ä–∏ —Å–ª–æ—Ç–∞
      
      case 'standard':
        return slot === 'morning'; // –¢–æ–ª—å–∫–æ —É—Ç—Ä–µ–Ω–Ω–∏–π —Å–ª–æ—Ç
      
      case 'rare':
        // –¢–æ–ª—å–∫–æ –≤–µ—á–µ—Ä–Ω–∏–π —Å–ª–æ—Ç –ò —Ç–æ–ª—å–∫–æ –≤—Ç–æ—Ä–Ω–∏–∫(2) –∏ –ø—è—Ç–Ω–∏—Ü–∞(5)
        return slot === 'evening' && (dayOfWeek === 2 || dayOfWeek === 5);
      
      default:
        return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * @param {Object} user - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @param {string} slot - –°–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏
   * @returns {Promise<void>}
   */
  async sendReminderToUser(user, slot) {
    const templates = this.messageTemplates[slot];
    const randomTemplate = templates[Math.floor(Math.random() * templates.length)];
    
    // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let message = `${user.name}, ${randomTemplate}`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–æ—â—Ä–µ–Ω–∏–µ –∑–∞ —Å—Ç—Ä–∏–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (user.statistics?.currentStreak > 0) {
      const streakMessages = [
        `üî• –í–∞—à —Å—Ç—Ä–∏–∫: ${user.statistics.currentStreak} –¥–Ω–µ–π! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!`,
        `‚ö° ${user.statistics.currentStreak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ - –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!`,
        `üéØ –°—Ç—Ä–∏–∫ ${user.statistics.currentStreak} –¥–Ω–µ–π! –í—ã –º–æ–ª–æ–¥–µ—Ü!`
      ];
      const randomStreakMsg = streakMessages[Math.floor(Math.random() * streakMessages.length)];
      message += `\n\n${randomStreakMsg}`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Ü–∏—Ç–∞—Ç–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
    const { Quote } = require('../models');
    const today = new Date();
    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
    const todayCount = await Quote.countDocuments({
      userId: user.userId,
      createdAt: { $gte: startOfDay }
    });

    if (todayCount > 0) {
      message += `\n\nüìä –°–µ–≥–æ–¥–Ω—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${todayCount} —Ü–∏—Ç–∞—Ç`;
    }

    await this.bot.telegram.sendMessage(user.userId, message);
    logger.info(`üîî Sent ${slot} reminder to user ${user.userId} (${user.name})`);
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<void>}
   */
  async updateLastSentAt(userId) {
    try {
      const { UserProfile } = require('../models');
      await UserProfile.findOneAndUpdate(
        { userId },
        { 
          'settings.reminders.lastSentAt': new Date()
        }
      );
    } catch (error) {
      logger.error(`üîî Error updating lastSentAt for user ${userId}:`, error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
   * @returns {Object}
   */
  getDiagnostics() {
    return {
      initialized: !!this.bot,
      status: this.bot ? 'ready' : 'bot_not_initialized',
      slots: ['morning', 'day', 'evening'],
      frequencies: ['off', 'rare', 'standard', 'often']
    };
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  async sendDailyReminders() {
    logger.warn('üîî sendDailyReminders() is deprecated, use sendSlotReminders() instead');
    const now = new Date();
    const hour = now.getHours();
    
    let slot;
    if (hour >= 9 && hour < 12) slot = 'morning';
    else if (hour >= 15 && hour < 18) slot = 'day';
    else if (hour >= 21 && hour < 24) slot = 'evening';
    else return { sent: 0, skipped: 0, failed: 0, errors: [] };
    
    return this.sendSlotReminders(slot);
  }

  async updateReminderSettings(userId, settings) {
    logger.warn('üîî updateReminderSettings() is deprecated, use API endpoints instead');
    try {
      const { UserProfile } = require('../models');
      
      await UserProfile.findOneAndUpdate(
        { userId },
        { 
          'settings.reminderEnabled': settings.enabled,
          'settings.reminderTimes': settings.times
        }
      );
      
      logger.info(`üîî Legacy reminder settings updated for user ${userId}`);
    } catch (error) {
      logger.error(`üîî Error updating legacy reminder settings: ${error.message}`, error);
      throw error;
    }
  }
}

module.exports = { ReminderService };
/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º–∏
 * @file server/services/conversation.js
 * üçÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –ü–æ–ª–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º–∏ (–±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π)
 */

const Conversation = require('../models/conversation');
const logger = require('../utils/logger');

/**
 * @typedef {Object} ConversationData
 * @property {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @property {string} [source] - –ò—Å—Ç–æ—á–Ω–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (chat, ticket, telegram)
 * @property {string} [language] - –Ø–∑—ã–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
 * @property {Object} [metadata] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
 */

/**
 * @typedef {Object} FindOptions
 * @property {number} [limit] - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * @property {number} [skip] - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
 * @property {boolean} [activeOnly] - –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
 * @property {string} [sort] - –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */

/**
 * @class ConversationService
 * @description –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º–∏ (–ù–ï —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ - –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ messageService)
 */
class ConversationService {
  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
   * @param {string} [options.source] - –ò—Å—Ç–æ—á–Ω–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   * @param {string} [options.language] - –Ø–∑—ã–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   * @param {Object} [options.metadata] - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
   * @param {string} [options.platform] - –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ (web, telegram)
   * @param {string} [options.chatId] - ID —á–∞—Ç–∞ (–¥–ª—è Telegram)
   * @param {Object} [options.userInfo] - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
   */
  async createConversation(userId, options = {}) {
    try {
      const conversationData = {
        userId,
        source: options.source || options.platform || 'chat',
        language: options.language || 'auto',
        metadata: {
          ...options.metadata,
          platform: options.platform,
          chatId: options.chatId,
          userInfo: options.userInfo
        },
        startedAt: new Date(),
        messageCount: 0,
        isActive: true
      };

      const conversation = new Conversation(conversationData);
      const savedConversation = await conversation.save();
      
      logger.info(`üçÑ Conversation created: ${savedConversation._id} for user ${userId}`);
      return savedConversation;
    } catch (error) {
      logger.error(`üçÑ Error creating conversation: ${error.message}`);
      throw new Error(`Failed to create conversation: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –ø–æ ID
   * @param {string} conversationId - ID —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   * @returns {Promise<Object|null>} –†–∞–∑–≥–æ–≤–æ—Ä –∏–ª–∏ null
   */
  async getConversationById(conversationId) {
    try {
      const conversation = await Conversation.findById(conversationId);
      return conversation;
    } catch (error) {
      logger.error(`üçÑ Error fetching conversation ${conversationId}: ${error.message}`);
      return null;
    }
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {FindOptions} options - –û–ø—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
   * @returns {Promise<Object[]>} –°–ø–∏—Å–æ–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
   */
  async findByUserId(userId, options = {}) {
    try {
      const {
        limit = 10,
        skip = 0,
        activeOnly = false,
        sort = '-startedAt'
      } = options;

      // –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å
      const query = { userId };
      if (activeOnly) {
        query.isActive = true;
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
      const conversations = await Conversation.find(query)
        .sort(sort)
        .skip(skip)
        .limit(limit)
        .lean();

      return conversations;
    } catch (error) {
      logger.error(`üçÑ Error finding conversations for user ${userId}: ${error.message}`);
      throw new Error(`Failed to find conversations: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} options - –û–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   * @returns {Promise<Object>} –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–ª–∏ –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
   */
  async getOrCreateConversation(userId, options = {}) {
    try {
      // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let conversation = await Conversation.findOne({
        userId,
        isActive: true
      }).sort({ startedAt: -1 });

      // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
      if (!conversation) {
        conversation = await this.createConversation(userId, options);
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        await this.updateActivity(conversation._id);
      }

      return conversation;
    } catch (error) {
      logger.error(`üçÑ Error getting/creating conversation for user ${userId}: ${error.message}`);
      throw new Error(`Failed to get or create conversation: ${error.message}`);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   * @param {string} conversationId - ID —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   * @returns {Promise<Object|null>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
   */
  async updateActivity(conversationId) {
    try {
      const conversation = await Conversation.findByIdAndUpdate(
        conversationId,
        { 
          lastActivityAt: new Date()
        },
        { new: true }
      );

      return conversation;
    } catch (error) {
      logger.error(`üçÑ Error updating activity for conversation ${conversationId}: ${error.message}`);
      return null;
    }
  }

  /**
   * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
   * @param {string} conversationId - ID —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   * @returns {Promise<Object|null>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
   */
  async incrementMessageCount(conversationId) {
    try {
      const conversation = await Conversation.findByIdAndUpdate(
        conversationId,
        { 
          $inc: { messageCount: 1 },
          lastActivityAt: new Date()
        },
        { new: true }
      );

      return conversation;
    } catch (error) {
      logger.error(`üçÑ Error incrementing message count for conversation ${conversationId}: ${error.message}`);
      return null;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —è–∑—ã–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   * @param {string} conversationId - ID —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   * @param {string} language - –ù–æ–≤—ã–π —è–∑—ã–∫
   * @returns {Promise<Object|null>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
   */
  async updateLanguage(conversationId, language) {
    try {
      const conversation = await Conversation.findByIdAndUpdate(
        conversationId,
        { 
          language,
          lastActivityAt: new Date()
        },
        { new: true }
      );

      if (conversation) {
        logger.info(`üçÑ Conversation language updated: ${conversationId} -> ${language}`);
      }

      return conversation;
    } catch (error) {
      logger.error(`üçÑ Error updating conversation language ${conversationId}: ${error.message}`);
      return null;
    }
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä
   * @param {string} conversationId - ID —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   * @param {string} [reason] - –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
   * @returns {Promise<Object|null>} –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
   */
  async endConversation(conversationId, reason = 'user_ended') {
    try {
      const conversation = await Conversation.findByIdAndUpdate(
        conversationId,
        { 
          isActive: false,
          endedAt: new Date(),
          endReason: reason,
          lastActivityAt: new Date()
        },
        { new: true }
      );

      if (conversation) {
        logger.info(`üçÑ Conversation ended: ${conversationId}, reason: ${reason}`);
      }

      return conversation;
    } catch (error) {
      logger.error(`üçÑ Error ending conversation ${conversationId}: ${error.message}`);
      return null;
    }
  }

  /**
   * –°–≤—è–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —Ç–∏–∫–µ—Ç–æ–º
   * @param {string} conversationId - ID —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   * @param {string} ticketId - ID —Ç–∏–∫–µ—Ç–∞
   * @returns {Promise<Object|null>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
   */
  async linkToTicket(conversationId, ticketId) {
    try {
      const conversation = await Conversation.findByIdAndUpdate(
        conversationId,
        { 
          ticketId,
          'metadata.ticketLinked': true,
          'metadata.ticketId': ticketId,
          lastActivityAt: new Date()
        },
        { new: true }
      );

      if (conversation) {
        logger.info(`üçÑ Conversation ${conversationId} linked to ticket ${ticketId}`);
      }

      return conversation;
    } catch (error) {
      logger.error(`üçÑ Error linking conversation to ticket: ${error.message}`);
      return null;
    }
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –ø–æ ID —Ç–∏–∫–µ—Ç–∞
   * @param {string} ticketId - ID —Ç–∏–∫–µ—Ç–∞
   * @returns {Promise<Object|null>} –ù–∞–π–¥–µ–Ω–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
   */
  async findByTicketId(ticketId) {
    try {
      const conversation = await Conversation.findOne({ ticketId });
      return conversation;
    } catch (error) {
      logger.error(`üçÑ Error finding conversation by ticket ${ticketId}: ${error.message}`);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
   * @param {Object} options - –û–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   * @returns {Promise<Object[]>} –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
   */
  async getActiveConversations(options = {}) {
    try {
      const { limit = 50, platform } = options;
      
      const query = { isActive: true };
      if (platform) {
        query['metadata.platform'] = platform;
      }

      const conversations = await Conversation.find(query)
        .sort({ lastActivityAt: -1 })
        .limit(limit)
        .lean();

      return conversations;
    } catch (error) {
      logger.error(`üçÑ Error getting active conversations: ${error.message}`);
      throw new Error(`Failed to get active conversations: ${error.message}`);
    }
  }

  /**
   * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
   * @param {number} [hoursInactive=24] - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @returns {Promise<number>} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
   */
  async closeInactiveConversations(hoursInactive = 24) {
    try {
      const cutoffTime = new Date();
      cutoffTime.setHours(cutoffTime.getHours() - hoursInactive);

      const result = await Conversation.updateMany(
        {
          isActive: true,
          lastActivityAt: { $lt: cutoffTime }
        },
        {
          isActive: false,
          endedAt: new Date(),
          endReason: 'timeout'
        }
      );

      logger.info(`üçÑ Closed ${result.modifiedCount} inactive conversations (inactive for ${hoursInactive}+ hours)`);
      return result.modifiedCount;
    } catch (error) {
      logger.error(`üçÑ Error closing inactive conversations: ${error.message}`);
      throw new Error(`Failed to close inactive conversations: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
   */
  async getConversationStats() {
    try {
      const stats = await Conversation.aggregate([
        {
          $group: {
            _id: null,
            total: { $sum: 1 },
            active: { 
              $sum: { $cond: ['$isActive', 1, 0] }
            },
            avgMessageCount: { $avg: '$messageCount' },
            totalMessages: { $sum: '$messageCount' }
          }
        },
        {
          $project: {
            _id: 0,
            total: 1,
            active: 1,
            avgMessageCount: { $round: ['$avgMessageCount', 2] },
            totalMessages: 1
          }
        }
      ]);

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
      const sourceStats = await Conversation.aggregate([
        {
          $group: {
            _id: '$source',
            count: { $sum: 1 }
          }
        },
        {
          $sort: { count: -1 }
        }
      ]);

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º
      const languageStats = await Conversation.aggregate([
        {
          $group: {
            _id: '$language',
            count: { $sum: 1 }
          }
        },
        {
          $sort: { count: -1 }
        }
      ]);

      return {
        overview: stats[0] || {
          total: 0,
          active: 0,
          avgMessageCount: 0,
          totalMessages: 0
        },
        bySource: sourceStats,
        byLanguage: languageStats
      };
    } catch (error) {
      logger.error(`üçÑ Error fetching conversation stats: ${error.message}`);
      throw new Error(`Failed to fetch conversation statistics: ${error.message}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
   * @returns {Promise<Object>} –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
   */
  async healthCheck() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
      const count = await Conversation.countDocuments({});
      
      return {
        status: 'ok',
        message: 'Conversation service is healthy',
        details: {
          totalConversations: count,
          isConnected: true
        }
      };
    } catch (error) {
      logger.error(`üçÑ Conversation service health check failed: ${error.message}`);
      return {
        status: 'error',
        message: 'Conversation service is unhealthy',
        error: error.message
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
module.exports = new ConversationService();
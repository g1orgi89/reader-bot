/**
 * @fileoverview –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @author g1orgi89
 */

const mongoose = require('mongoose');
const logger = require('../utils/logger');
const claudeService = require('./claude');

/**
 * @typedef {import('../types/reader').WeeklyReport} WeeklyReport
 * @typedef {import('../types/reader').WeeklyAnalysis} WeeklyAnalysis
 * @typedef {import('../types/reader').BookRecommendation} BookRecommendation
 * @typedef {import('../types/reader').PromoCodeData} PromoCodeData
 */

/**
 * @class WeeklyReportService
 * @description –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º
 */
class WeeklyReportService {
  constructor() {
    this.WeeklyReport = null;
    this.Quote = null;
    this.UserProfile = null;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
    this._initializeModels();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π MongoDB
   * @private
   */
  _initializeModels() {
    try {
      this.WeeklyReport = require('../models/weeklyReport');
      this.Quote = require('../models/quote');
      this.UserProfile = require('../models/userProfile');
      logger.info('üìñ WeeklyReportService models initialized');
    } catch (error) {
      logger.error(`üìñ Failed to initialize models: ${error.message}`);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
   * @returns {Promise<WeeklyReport|null>} –°–æ–∑–¥–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –∏–ª–∏ null
   */
  async generateWeeklyReport(userId) {
    try {
      const user = await this.UserProfile.findOne({ userId });
      if (!user || !user.isOnboardingComplete) {
        logger.warn(`üìñ User ${userId} not found or onboarding incomplete`);
        return null;
      }

      const { weekNumber, year } = this._getCurrentWeek();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –æ—Ç—á–µ—Ç
      const existingReport = await this.WeeklyReport.findByUserWeek(userId, weekNumber, year);
      if (existingReport) {
        logger.info(`üìñ Weekly report for user ${userId} week ${weekNumber}/${year} already exists`);
        return existingReport;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ü–∏—Ç–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é
      const weekQuotes = await this.Quote.getWeeklyQuotes(userId, weekNumber, year);
      
      if (weekQuotes.length === 0) {
        logger.info(`üìñ No quotes for user ${userId} week ${weekNumber}/${year}, sending encouragement`);
        return await this._generateEmptyWeekReport(userId, user);
      }

      logger.info(`üìñ Generating weekly report for user ${userId} with ${weekQuotes.length} quotes`);

      // AI-–∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Claude
      const analysis = await this._analyzeWeeklyQuotes(weekQuotes, user);
      
      // –ü–æ–¥–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–Ω–∏–≥
      const recommendations = await this._getBookRecommendations(analysis, user);
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
      const promoCode = this._generatePromoCode();

      // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
      const report = new this.WeeklyReport({
        userId,
        weekNumber,
        year,
        quotes: weekQuotes.map(q => q._id),
        analysis,
        recommendations,
        promoCode
      });

      await report.save();
      logger.info(`üìñ Weekly report created for user ${userId}: ${report._id}`);

      return report;
    } catch (error) {
      logger.error(`üìñ Error generating weekly report for user ${userId}: ${error.message}`);
      throw error;
    }
  }

  /**
   * AI-–∞–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç –∑–∞ –Ω–µ–¥–µ–ª—é —á–µ—Ä–µ–∑ Claude
   * @private
   * @param {Array} quotes - –¶–∏—Ç–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é
   * @param {Object} userProfile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<WeeklyAnalysis>} –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏
   */
  async _analyzeWeeklyQuotes(quotes, userProfile) {
    try {
      const quotesText = quotes.map(q => 
        `"${q.text}" ${q.author ? `(${q.author})` : ''}`
      ).join('\n\n');
      
      const prompt = `–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥ –ê–Ω–Ω–∞ –ë—É—Å–µ–ª. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ü–∏—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –Ω–µ–¥–µ–ª—é –∏ –¥–∞–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑.

–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userProfile.name}
–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞: ${JSON.stringify(userProfile.testResults)}

–¶–∏—Ç–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é:
${quotesText}

–ù–∞–ø–∏—à–∏ –∞–Ω–∞–ª–∏–∑ –≤ —Å—Ç–∏–ª–µ –ê–Ω–Ω—ã –ë—É—Å–µ–ª:
- –¢–æ–Ω: —Ç–µ–ø–ª—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ "–í—ã"
- –ì–ª—É–±–æ–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
- –°–≤—è–∑—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
- –í—ã–≤–æ–¥—ã –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö
- 2-3 –∞–±–∑–∞—Ü–∞

–í–µ—Ä–Ω–∏ JSON:
{
  "summary": "–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏ –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º",
  "dominantThemes": ["—Ç–µ–º–∞1", "—Ç–µ–º–∞2"],
  "emotionalTone": "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π/–∑–∞–¥—É–º—á–∏–≤—ã–π/–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π/–º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–π/—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π",
  "insights": "–ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Ç –ê–Ω–Ω—ã"
}`;

      const response = await claudeService.generateResponse(prompt, {
        platform: 'telegram',
        userId: 'weekly_report_analysis'
      });
      
      try {
        const analysis = JSON.parse(response.message);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if (!analysis.summary || !analysis.insights || !analysis.emotionalTone) {
          throw new Error('Invalid analysis structure');
        }
        
        return {
          summary: analysis.summary.substring(0, 500),
          dominantThemes: analysis.dominantThemes || ['—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ'],
          emotionalTone: analysis.emotionalTone || '–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π',
          insights: analysis.insights.substring(0, 2000)
        };
      } catch (parseError) {
        logger.error(`üìñ Failed to parse AI analysis: ${parseError.message}`);
        return this._getFallbackAnalysis(quotes, userProfile);
      }
    } catch (error) {
      logger.error(`üìñ Error in AI analysis: ${error.message}`);
      return this._getFallbackAnalysis(quotes, userProfile);
    }
  }

  /**
   * –ü–æ–¥–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–Ω–∏–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
   * @private
   * @param {WeeklyAnalysis} analysis - –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏
   * @param {Object} userProfile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<BookRecommendation[]>} –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥
   */
  async _getBookRecommendations(analysis, userProfile) {
    try {
      const prompt = `–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥ –ê–Ω–Ω–∞ –ë—É—Å–µ–ª. –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–¥–±–µ—Ä–∏ 2-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ —Ç–≤–æ–∏—Ö —Ä–∞–∑–±–æ—Ä–æ–≤ –∫–Ω–∏–≥.

–ò–º—è: ${userProfile.name}
–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏: ${analysis.insights}
–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ç–µ–º—ã: ${analysis.dominantThemes.join(', ')}

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã –∫–Ω–∏–≥ –ê–Ω–Ω—ã –ë—É—Å–µ–ª:
- "–ò—Å–∫—É—Å—Å—Ç–≤–æ –ª—é–±–∏—Ç—å" –≠—Ä–∏—Ö–∞ –§—Ä–æ–º–º–∞ ($8) - –æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π
- "–ü–∏—Å—å–º–∞ –∫ –º–æ–ª–æ–¥–æ–º—É –ø–æ—ç—Ç—É" –†–∏–ª—å–∫–µ ($8) - –æ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–µ –∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–∏
- "–ë—ã—Ç—å —Å–æ–±–æ–π" –∫—É—Ä—Å ($12) - –æ —Å–∞–º–æ–ø—Ä–∏–Ω—è—Ç–∏–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏
- "–ñ–µ–Ω—â–∏–Ω–∞, –∫–æ—Ç–æ—Ä–∞—è —á–∏—Ç–∞–µ—Ç, –æ–ø–∞—Å–Ω–∞" ($10) - –æ –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–∏–ª–µ
- "–ê–ª—Ö–∏–º–∏–∫" –ü–∞—É–ª–æ –ö–æ—ç–ª—å–æ ($8) - –æ –ø–æ–∏—Å–∫–µ —Å–º—ã—Å–ª–∞ –∂–∏–∑–Ω–∏
- "–ú–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏–Ω—Ü" ($6) - –æ –ø—Ä–æ—Å—Ç—ã—Ö –∏—Å—Ç–∏–Ω–∞—Ö –∂–∏–∑–Ω–∏

–í–µ—Ä–Ω–∏ JSON –º–∞—Å—Å–∏–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:
[
  {
    "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏/–∫—É—Ä—Å–∞",
    "price": "$8",
    "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—á–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç",
    "reasoning": "–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∞ –∫–Ω–∏–≥–∞ –ø–æ–¥–æ–π–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"
  }
]

–ú–∞–∫—Å–∏–º—É–º 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —Å–∞–º—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ.`;

      const response = await claudeService.generateResponse(prompt, {
        platform: 'telegram',
        userId: 'book_recommendations'
      });
      
      try {
        const recommendations = JSON.parse(response.message);
        
        // –î–æ–±–∞–≤–ª—è–µ–º UTM —Å—Å—ã–ª–∫–∏
        return recommendations.map(rec => ({
          title: rec.title,
          description: rec.description.substring(0, 500),
          price: rec.price,
          reasoning: rec.reasoning.substring(0, 300),
          link: this._generateUTMLink(rec.title, userProfile.userId)
        }));
      } catch (parseError) {
        logger.error(`üìñ Failed to parse book recommendations: ${parseError.message}`);
        return this._getFallbackRecommendations(userProfile.userId);
      }
    } catch (error) {
      logger.error(`üìñ Error getting book recommendations: ${error.message}`);
      return this._getFallbackRecommendations(userProfile.userId);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
   * @private
   * @returns {PromoCodeData} –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
   */
  _generatePromoCode() {
    const codes = ['READER20', 'WISDOM20', 'QUOTES20', 'BOOKS20'];
    const selectedCode = codes[Math.floor(Math.random() * codes.length)];
    
    return {
      code: selectedCode,
      discount: 20,
      validUntil: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000) // 3 –¥–Ω—è
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UTM —Å—Å—ã–ª–∫–∏
   * @private
   * @param {string} bookTitle - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {string} UTM —Å—Å—ã–ª–∫–∞
   */
  _generateUTMLink(bookTitle, userId) {
    const baseUrl = "https://anna-busel.com/books";
    const utmParams = new URLSearchParams({
      utm_source: 'telegram_bot',
      utm_medium: 'weekly_report',
      utm_campaign: 'reader_recommendations',
      utm_content: bookTitle.toLowerCase().replace(/\s+/g, '_'),
      user_id: userId
    });
    
    return `${baseUrl}?${utmParams.toString()}`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø—É—Å—Ç–æ–π –Ω–µ–¥–µ–ª–∏
   * @private
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} user - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<null>} null - –æ—Ç—á–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è
   */
  async _generateEmptyWeekReport(userId, user) {
    // –î–ª—è –ø—É—Å—Ç—ã—Ö –Ω–µ–¥–µ–ª—å –æ—Ç—á–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ –ë–î, —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.info(`üìñ Generated empty week encouragement for user ${userId}`);
    return null;
  }

  /**
   * –†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –æ—à–∏–±–∫–µ AI
   * @private
   * @param {Array} quotes - –¶–∏—Ç–∞—Ç—ã
   * @param {Object} userProfile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {WeeklyAnalysis} –†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑
   */
  _getFallbackAnalysis(quotes, userProfile) {
    const themes = this._extractThemesFromQuotes(quotes);
    
    return {
      summary: "–í–∞—à–∏ —Ü–∏—Ç–∞—Ç—ã –æ—Ç—Ä–∞–∂–∞—é—Ç –≥–ª—É–±–æ–∫–∏–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ–∏—Å–∫ –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –º—É–¥—Ä–æ—Å—Ç–∏",
      dominantThemes: themes,
      emotionalTone: "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π",
      insights: `${userProfile.name}, —ç—Ç–∞ –Ω–µ–¥–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –≥–ª—É–±–æ–∫–∏–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º. –í—ã –∏—â–µ—Ç–µ –æ—Ç–≤–µ—Ç—ã –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ö –º—É–¥—Ä—ã—Ö –ª—é–¥–µ–π. –í–∞—à–∏ —Ü–∏—Ç–∞—Ç—ã –≥–æ–≤–æ—Ä—è—Ç –æ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–∏ –∫ —Ä–æ—Å—Ç—É –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–µ–±—è.`
    };
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º –∏–∑ —Ü–∏—Ç–∞—Ç (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)
   * @private
   * @param {Array} quotes - –¶–∏—Ç–∞—Ç—ã
   * @returns {string[]} –¢–µ–º—ã
   */
  _extractThemesFromQuotes(quotes) {
    const themes = new Set();
    
    quotes.forEach(quote => {
      if (quote.category && quote.category !== '–î—Ä—É–≥–æ–µ') {
        themes.add(quote.category.toLowerCase());
      }
      if (quote.themes && quote.themes.length > 0) {
        quote.themes.forEach(theme => themes.add(theme.toLowerCase()));
      }
    });
    
    return Array.from(themes).slice(0, 3);
  }

  /**
   * –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   * @private
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {BookRecommendation[]} –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   */
  _getFallbackRecommendations(userId) {
    return [
      {
        title: "–ò—Å–∫—É—Å—Å—Ç–≤–æ –ª—é–±–∏—Ç—å",
        price: "$8",
        description: "–û –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å —Å–æ–±–æ–π –∏ –º–∏—Ä–æ–º",
        reasoning: "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è",
        link: this._generateUTMLink("–ò—Å–∫—É—Å—Å—Ç–≤–æ –ª—é–±–∏—Ç—å", userId)
      }
    ];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
   * @private
   * @returns {Object} –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –∏ –≥–æ–¥
   */
  _getCurrentWeek() {
    const now = new Date();
    const weekNumber = this._getWeekNumber(now);
    const year = now.getFullYear();
    
    return { weekNumber, year };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª–∏ ISO 8601
   * @private
   * @param {Date} date - –î–∞—Ç–∞
   * @returns {number} –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
   */
  _getWeekNumber(date) {
    const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
    const dayNum = d.getUTCDay() || 7;
    d.setUTCDate(d.getUTCDate() + 4 - dayNum);
    const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
    return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
  }

  /**
   * –°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "—Ü–∏—Ç–∞—Ç–∞"
   * @private
   * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
   * @returns {string} –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ
   */
  _declensionQuotes(count) {
    if (count % 10 === 1 && count % 100 !== 11) return '—Ü–∏—Ç–∞—Ç—É';
    if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '—Ü–∏—Ç–∞—Ç—ã';
    return '—Ü–∏—Ç–∞—Ç';
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @param {number} [weekNumber] - –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è)
   * @param {number} [year] - –ì–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π)
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  async generateWeeklyReportsForAllUsers(weekNumber = null, year = null) {
    try {
      const { weekNumber: currentWeek, year: currentYear } = this._getCurrentWeek();
      const targetWeek = weekNumber || currentWeek;
      const targetYear = year || currentYear;

      logger.info(`üìñ Starting bulk weekly report generation for week ${targetWeek}/${targetYear}`);

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω—ã –æ—Ç—á–µ—Ç—ã
      const usersNeedingReports = await this.WeeklyReport.getUsersNeedingReports(targetWeek, targetYear);
      
      let generated = 0;
      let skipped = 0;
      let errors = 0;

      for (const user of usersNeedingReports) {
        try {
          const report = await this.generateWeeklyReport(user.userId);
          if (report) {
            generated++;
            logger.info(`üìñ Generated report for user ${user.userId}`);
          } else {
            skipped++;
            logger.info(`üìñ Skipped report for user ${user.userId} (no quotes)`);
          }
        } catch (error) {
          errors++;
          logger.error(`üìñ Failed to generate report for user ${user.userId}: ${error.message}`);
        }
      }

      const stats = {
        week: `${targetWeek}/${targetYear}`,
        totalUsers: usersNeedingReports.length,
        generated,
        skipped,
        errors,
        timestamp: new Date()
      };

      logger.info(`üìñ Bulk report generation completed: ${JSON.stringify(stats)}`);
      return stats;
    } catch (error) {
      logger.error(`üìñ Error in bulk report generation: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
   * @param {number} [days=30] - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async getReportsStatistics(days = 30) {
    try {
      const startDate = new Date();
      startDate.setDate(startDate.getDate() - days);

      const [
        totalReports,
        reportsWithFeedback,
        avgRating,
        topThemes,
        feedbackDistribution
      ] = await Promise.all([
        this.WeeklyReport.countDocuments({ sentAt: { $gte: startDate } }),
        this.WeeklyReport.countDocuments({ 
          sentAt: { $gte: startDate },
          'feedback.rating': { $exists: true }
        }),
        this.WeeklyReport.aggregate([
          { $match: { sentAt: { $gte: startDate }, 'feedback.rating': { $exists: true } } },
          { $group: { _id: null, avgRating: { $avg: '$feedback.rating' } } }
        ]),
        this.WeeklyReport.getPopularThemes(startDate),
        this.WeeklyReport.getFeedbackDistribution(startDate)
      ]);

      return {
        period: `${days} days`,
        totalReports,
        reportsWithFeedback,
        feedbackRate: totalReports > 0 ? Math.round((reportsWithFeedback / totalReports) * 100) : 0,
        averageRating: avgRating.length > 0 ? Number(avgRating[0].avgRating.toFixed(2)) : null,
        topThemes: topThemes.slice(0, 5),
        feedbackDistribution,
        generatedAt: new Date()
      };
    } catch (error) {
      logger.error(`üìñ Error getting reports statistics: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} [limit=10] - –õ–∏–º–∏—Ç –æ—Ç—á–µ—Ç–æ–≤
   * @returns {Promise<Array>} –û—Ç—á–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserReports(userId, limit = 10) {
    try {
      return await this.WeeklyReport.getUserRecentReports(userId, limit);
    } catch (error) {
      logger.error(`üìñ Error getting user reports for ${userId}: ${error.message}`);
      throw error;
    }
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å –æ—Ç—á–µ—Ç –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
   * @param {string} reportId - ID –æ—Ç—á–µ—Ç–∞
   * @returns {Promise<WeeklyReport>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  async markReportAsRead(reportId) {
    try {
      const report = await this.WeeklyReport.findById(reportId);
      if (!report) {
        throw new Error('Report not found');
      }
      
      return await report.markAsRead();
    } catch (error) {
      logger.error(`üìñ Error marking report as read ${reportId}: ${error.message}`);
      throw error;
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∫ –æ—Ç—á–µ—Ç—É
   * @param {string} reportId - ID –æ—Ç—á–µ—Ç–∞
   * @param {number} rating - –û—Ü–µ–Ω–∫–∞ 1-5
   * @param {string} [comment] - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
   * @returns {Promise<WeeklyReport>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  async addReportFeedback(reportId, rating, comment = null) {
    try {
      const report = await this.WeeklyReport.findById(reportId);
      if (!report) {
        throw new Error('Report not found');
      }
      
      return await report.addFeedback(rating, comment);
    } catch (error) {
      logger.error(`üìñ Error adding feedback to report ${reportId}: ${error.message}`);
      throw error;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
module.exports = new WeeklyReportService();
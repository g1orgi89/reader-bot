/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API Claude –∏ –¥—Ä—É–≥–∏–º–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
 * @file server/services/claude.js
 * üçÑ –û–ë–ù–û–í–õ–ï–ù–û: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å PromptService –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏
 */

const { Anthropic } = require('@anthropic-ai/sdk');
const logger = require('../utils/logger');
const { getAIProviderConfig } = require('../config/aiProvider');
const vectorStoreService = require('./vectorStore');
const promptService = require('./promptService'); // üçÑ –ù–û–í–û–ï: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å PromptService

/**
 * @typedef {Object} AIResponse
 * @property {string} message - –û—Ç–≤–µ—Ç –æ—Ç AI
 * @property {boolean} needsTicket - –ù—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∏–∫–µ—Ç
 * @property {number} tokensUsed - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
 * @property {string} provider - –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
 * @property {string} model - –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
 * @property {Object[]} [context] - –ö–æ–Ω—Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ RAG –≤–∫–ª—é—á–µ–Ω)
 */

/**
 * @typedef {Object} MessageOptions
 * @property {string[]} [context] - –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
 * @property {Array<{role: string, content: string}>} [history] - –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
 * @property {string} [language] - –Ø–∑—ã–∫ –æ–±—â–µ–Ω–∏—è
 * @property {string} [userId] - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @property {boolean} [useRag=true] - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ RAG —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
 * @property {number} [ragLimit=3] - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è RAG
 */

/**
 * @class ClaudeService
 * @description –°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Claude API –∏ –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏ AI
 * üçÑ –£–õ–£–ß–®–ï–ù–û: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã —á–µ—Ä–µ–∑ PromptService
 */
class ClaudeService {
  constructor() {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    this.config = getAIProviderConfig();
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, —á—Ç–æ–±—ã –≤–µ–∑–¥–µ –±—ã–ª–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    // –í –∫–æ–Ω—Ñ–∏–≥–µ –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ 'anthropic' –∏–ª–∏ 'claude', –Ω–æ –≤–Ω—É—Ç—Ä–∏ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'claude'
    if (this.config.provider === 'anthropic') {
      this.provider = 'claude';
      logger.info('üçÑ Provider name normalized from "anthropic" to "claude"');
    } else {
      this.provider = this.config.provider || 'claude';
    }
    
    logger.info(`üçÑ AI Provider configuration loaded: ${this.provider}`);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    this.clients = {};
    this.initializeProviders();
    
    // üçÑ –£–ë–†–ê–ù–û: –ó–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
    // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–º–ø—Ç—ã –ø–æ–ª—É—á–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ PromptService
    
    // –ö—ç—à –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    this.responseCache = new Map();
    this.cacheTimeout = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    setInterval(this.clearExpiredCache.bind(this), 15 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    
    // RAG —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    this.enableRag = process.env.ENABLE_RAG?.toLowerCase() === 'true';
    
    logger.info(`üçÑ ClaudeService initialized with provider: ${this.provider}, RAG enabled: ${this.enableRag}`);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
   * @private
   */
  initializeProviders() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Claude
    try {
      this.clients.claude = new Anthropic({
        apiKey: this.config.claude.apiKey,
      });
      logger.info('üçÑ Claude client initialized successfully');
    } catch (error) {
      logger.error(`üçÑ Failed to initialize Claude client: ${error.message}`);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    if (this.config.openai && this.config.openai.apiKey) {
      try {
        const OpenAI = require('openai');
        this.clients.openai = new OpenAI({
          apiKey: this.config.openai.apiKey
        });
        logger.info('üçÑ OpenAI client initialized successfully');
      } catch (error) {
        logger.error(`üçÑ Failed to initialize OpenAI client: ${error.message}`);
      }
    }
  }

  /**
   * üçÑ –ù–û–í–û–ï: –ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ PromptService
   * @private
   * @param {string} [language='en'] - –Ø–∑—ã–∫ –ø—Ä–æ–º–ø—Ç–∞
   * @returns {Promise<string>} –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
   */
  async _getSystemPrompt(language = 'en') {
    try {
      return await promptService.getActivePrompt('basic', language);
    } catch (error) {
      logger.error(`üçÑ Error getting system prompt from PromptService: ${error.message}`);
      // Fallback –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ PromptService
      return promptService.getDefaultPrompt('basic', language);
    }
  }

  /**
   * üçÑ –ù–û–í–û–ï: –ü–æ–ª—É—á–∏—Ç—å RAG –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ PromptService
   * @private
   * @param {string} [language='en'] - –Ø–∑—ã–∫ –ø—Ä–æ–º–ø—Ç–∞
   * @returns {Promise<string>} RAG –ø—Ä–æ–º–ø—Ç
   */
  async _getRagPrompt(language = 'en') {
    try {
      return await promptService.getActivePrompt('rag', language);
    } catch (error) {
      logger.error(`üçÑ Error getting RAG prompt from PromptService: ${error.message}`);
      return promptService.getDefaultPrompt('rag', language);
    }
  }
  
  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ AI
   * @param {string} providerName - –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ('claude', 'openai')
   * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
   */
  switchProvider(providerName) {
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É 'anthropic' –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è 'claude'
    if (providerName === 'anthropic') {
      providerName = 'claude';
      logger.info('üçÑ Provider name normalized from "anthropic" to "claude"');
    }
    
    if (!['claude', 'openai'].includes(providerName)) {
      logger.error(`üçÑ Invalid provider name: ${providerName}`);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!this.clients[providerName]) {
      logger.error(`üçÑ Provider ${providerName} is not initialized`);
      return false;
    }
    
    this.provider = providerName;
    logger.info(`üçÑ Switched to provider: ${providerName}`);
    return true;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞
   * @returns {Promise<boolean>} –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
   */
  async isHealthy() {
    const currentProvider = this.provider;
    const client = this.clients[currentProvider];
    
    if (!client) {
      return false;
    }
    
    try {
      // üçÑ –û–ë–ù–û–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å PromptService
      await promptService.getActivePrompt('basic', 'en');
      
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      if (currentProvider === 'claude') {
        // –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å Claude, –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        await this.clients.claude.messages.create({
          model: this.config.claude.model,
          max_tokens: 10,
          messages: [
            { role: 'user', content: 'Hello' }
          ],
        });
      } else if (currentProvider === 'openai') {
        // –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å OpenAI
        await this.clients.openai.chat.completions.create({
          model: this.config.openai.model,
          messages: [
            { role: 'user', content: 'Hello' }
          ],
          max_tokens: 10
        });
      }
      return true;
    } catch (error) {
      logger.error(`üçÑ Health check failed for ${currentProvider}: ${error.message}`);
      return false;
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å Claude API
   * üçÑ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ PromptService
   * @param {string} customPrompt - –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   * @param {string} testMessage - –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} options - –û–ø—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   * @param {string} [options.language=en] - –Ø–∑—ã–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
   * @param {string} [options.provider] - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   * @returns {Promise<AIResponse>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async testPrompt(customPrompt, testMessage, options = {}) {
    const { language = 'en', provider } = options;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–ª–∏ —Ç–µ–∫—É—â–∏–π
    const currentProvider = provider || this.provider;
    
    if (!this.clients[currentProvider]) {
      throw new Error(`Provider ${currentProvider} is not available`);
    }
    
    logger.info(`üçÑ Testing custom prompt with ${currentProvider}: "${customPrompt.substring(0, 50)}..."`);
    
    try {
      let response;
      
      if (currentProvider === 'claude') {
        response = await this.clients.claude.messages.create({
          model: this.config.claude.model,
          max_tokens: 1000,
          temperature: 0.7,
          system: customPrompt,
          messages: [
            { role: 'user', content: testMessage }
          ]
        });
        
        return {
          message: response.content[0].text,
          needsTicket: false, // –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –Ω–µ —Å–æ–∑–¥–∞—é—Ç —Ç–∏–∫–µ—Ç—ã
          tokensUsed: response.usage.input_tokens + response.usage.output_tokens,
          provider: 'claude',
          model: this.config.claude.model
        };
      } else if (currentProvider === 'openai') {
        response = await this.clients.openai.chat.completions.create({
          model: this.config.openai.model,
          messages: [
            { role: 'system', content: customPrompt },
            { role: 'user', content: testMessage }
          ],
          max_tokens: 1000,
          temperature: 0.7
        });
        
        return {
          message: response.choices[0].message.content,
          needsTicket: false,
          tokensUsed: response.usage.total_tokens || 0,
          provider: 'openai',
          model: this.config.openai.model
        };
      }
    } catch (error) {
      logger.error(`üçÑ Prompt test failed with ${currentProvider}: ${error.message}`);
      throw new Error(`Test failed: ${error.message}`);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   * üçÑ –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ PromptService –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {MessageOptions} options - –û–ø—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {Promise<AIResponse>} –û—Ç–≤–µ—Ç –æ—Ç AI
   */
  async generateResponse(message, options = {}) {
    try {
      let { 
        context = [], 
        history = [], 
        language = 'en', 
        userId, 
        useRag = this.enableRag,
        ragLimit = 3 
      } = options;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
      if (this.provider === 'anthropic') {
        this.provider = 'claude';
        logger.info(`üçÑ Provider normalized from 'anthropic' to 'claude' for message: ${message.substring(0, 20)}...`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º RAG)
      if (!useRag && this._isCacheable(message)) {
        const cacheKey = this._getCacheKey(message, language);
        if (this.responseCache.has(cacheKey)) {
          const cached = this.responseCache.get(cacheKey);
          if (Date.now() - cached.timestamp < this.cacheTimeout) {
            logger.debug(`üçÑ Returning cached response for "${message.substring(0, 20)}..."`);
            return cached.response;
          }
        }
      }
      
      // –î–µ—Ç–µ–∫—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      if (this._isTestMessage(message)) {
        return this._handleTestMessage(message, language);
      }
      
      // –ü–æ–∏—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã, –µ—Å–ª–∏ RAG –≤–∫–ª—é—á–µ–Ω
      if (useRag && this.enableRag) {
        try {
          const contextResults = await this._getRelevantContext(message, language, ragLimit);
          
          if (contextResults && contextResults.length > 0) {
            // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            logger.info(`üçÑ Found ${contextResults.length} relevant documents for message: "${message.substring(0, 30)}..."`);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
            const contextTexts = contextResults.map(doc => doc.content);
            context = [...contextTexts, ...context];
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            options.fetchedContext = contextResults;
          } else {
            logger.info(`üçÑ No relevant documents found for message: "${message.substring(0, 30)}..."`);
          }
        } catch (ragError) {
          logger.error(`üçÑ Error fetching context from vector store: ${ragError.message}`);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        }
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      let response;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      logger.info(`üçÑ Using AI provider: ${this.provider} for message: ${message.substring(0, 20)}...`);
      
      if (this.provider === 'claude') {
        response = await this._generateClaudeResponse(message, { ...options, context });
      } else if (this.provider === 'openai') {
        response = await this._generateOpenAIResponse(message, { ...options, context });
      } else {
        throw new Error(`Unsupported AI provider: ${this.provider}`);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –µ—Å–ª–∏ —ç—Ç–æ RAG –∑–∞–ø—Ä–æ—Å
      if (useRag && options.fetchedContext) {
        response.context = options.fetchedContext;
      }
      
      // –ö—ç—à–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è RAG)
      if (!useRag && this._isCacheable(message)) {
        const cacheKey = this._getCacheKey(message, language);
        this.responseCache.set(cacheKey, {
          response,
          timestamp: Date.now()
        });
      }
      
      return response;
    } catch (error) {
      logger.error(`üçÑ AI generation error: ${error.message}`);
      return this._getErrorResponse(error, options.language);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
   * @private
   * @param {string} query - –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} language - –Ø–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–∞
   * @param {number} [limit=3] - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
   * @returns {Promise<Array<Object>>} –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
   */
  async _getRelevantContext(query, language, limit = 3) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã
      const vectorStoreReady = await vectorStoreService.initialize();
      
      if (!vectorStoreReady) {
        logger.warn('üçÑ Vector store not initialized, skipping context retrieval');
        return [];
      }
      
      // –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—Å 0.4 –¥–æ 0.7)
      const score_threshold = 0.7;
      logger.info(`üçÑ Searching for relevant documents with threshold: ${score_threshold}`);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
      const searchResults = await vectorStoreService.search(query, {
        limit,
        language,
        score_threshold: score_threshold // –ü–æ–≤—ã—à–µ–Ω —Å 0.4 –¥–æ 0.7
      });
      
      // –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      if (searchResults.length > 0) {
        logger.info(`üçÑ Found ${searchResults.length} documents with scores: ${searchResults.map(doc => doc.score.toFixed(3)).join(', ')}`);
        
        // –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ—Ä–æ–≥—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —É–∂–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ vectorStore
        return searchResults;
      }
      
      logger.info(`üçÑ No documents found with threshold ${score_threshold}`);
      return [];
    } catch (error) {
      logger.error(`üçÑ Error in _getRelevantContext: ${error.message}`);
      return [];
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Claude API
   * üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ç–∏—Ä–∞—é—Ç —Ä–æ–ª—å AI-–≥—Ä–∏–±–∞
   * @private
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {MessageOptions} options - –û–ø—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {Promise<AIResponse>} –û—Ç–≤–µ—Ç –æ—Ç Claude
   */
  async _generateClaudeResponse(message, options) {
    const { context, history, language, userId } = options;
    
    // üçÑ –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ PromptService
    let systemPrompt;
    try {
      if (context && context.length > 0) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º RAG –ø—Ä–æ–º–ø—Ç
        systemPrompt = await this._getRagPrompt(language);
      } else {
        // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        systemPrompt = await this._getSystemPrompt(language);
      }
    } catch (error) {
      logger.error(`üçÑ Error getting prompt from PromptService: ${error.message}`);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø—Ä–æ–º–ø—Ç
      systemPrompt = promptService.getDefaultPrompt(context && context.length > 0 ? 'rag' : 'basic', language);
    }

    // üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä—è–º–æ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    let enhancedSystemPrompt = systemPrompt;

    if (context && context.length > 0) {
      enhancedSystemPrompt += `\n\n–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô:\n${context.slice(0, 3).join('\n\n')}`;
    }
    
    // üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    const messages = [];
    
    // ‚ùå –£–ë–ò–†–ê–ï–ú: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ç–∏—Ä–∞—é—Ç —Ä–æ–ª—å AI-–≥—Ä–∏–±–∞
    // if (context && context.length > 0) {
    //   const contextMessage = contextMessages[language] || contextMessages.en;
    //   messages.push({ role: 'user', content: contextMessage });
    //   messages.push({ role: 'assistant', content: this._getContextAcknowledgment(language) });
    // }
    
    // ‚úÖ –û–°–¢–ê–í–õ–Ø–ï–ú: –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    if (history && history.length > 0) {
      const recentHistory = history.slice(-2);
      recentHistory.forEach(msg => {
        messages.push({
          role: msg.role === 'user' ? 'user' : 'assistant',
          content: msg.content || msg.text
        });
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages.push({ role: 'user', content: message });
    
    // Loggers
    if (userId) {
      logger.info(`üçÑ Generating Claude response for user ${userId} (lang: ${language})`);
    }
    
    try {
      // üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
      const claudeConfig = this.config.claude;
      const response = await this.clients.claude.messages.create({
        model: claudeConfig.model,
        max_tokens: claudeConfig.maxTokens,
        temperature: claudeConfig.temperature,
        system: enhancedSystemPrompt, // üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        messages: messages // üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ß–∏—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ —Å–ø–∞–º–∞
      });
      
      const answer = response.content[0].text;
      
      // üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
      const needsTicket = this._analyzeTicketNeed(answer, message, language);
      
      return {
        message: answer,
        needsTicket,
        tokensUsed: response.usage.input_tokens + response.usage.output_tokens,
        provider: 'claude',
        model: claudeConfig.model
      };
    } catch (error) {
      logger.error(`üçÑ Claude API error: ${error.message}`);
      throw new Error(`Claude API error: ${error.message}`);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ OpenAI API
   * üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ç–∏—Ä–∞—é—Ç —Ä–æ–ª—å AI-–≥—Ä–∏–±–∞
   * @private
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {MessageOptions} options - –û–ø—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {Promise<AIResponse>} –û—Ç–≤–µ—Ç –æ—Ç OpenAI
   */
  async _generateOpenAIResponse(message, options) {
    const { context, history, language, userId } = options;
    
    // üçÑ –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ PromptService
    let systemPrompt;
    try {
      if (context && context.length > 0) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º RAG –ø—Ä–æ–º–ø—Ç
        systemPrompt = await this._getRagPrompt(language);
      } else {
        // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        systemPrompt = await this._getSystemPrompt(language);
      }
    } catch (error) {
      logger.error(`üçÑ Error getting prompt from PromptService: ${error.message}`);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø—Ä–æ–º–ø—Ç
      systemPrompt = promptService.getDefaultPrompt(context && context.length > 0 ? 'rag' : 'basic', language);
    }

    // üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä—è–º–æ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    let enhancedSystemPrompt = systemPrompt;

    if (context && context.length > 0) {
      enhancedSystemPrompt += `\n\n–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô:\n${context.slice(0, 3).join('\n\n')}`;
    }
    
    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è OpenAI
    const messages = [
      { role: 'system', content: enhancedSystemPrompt } // üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    ];
    
    // ‚ùå –£–ë–ò–†–ê–ï–ú: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ç–∏—Ä–∞—é—Ç —Ä–æ–ª—å AI-–≥—Ä–∏–±–∞
    // if (context && context.length > 0) {
    //   const contextMessage = contextMessages[language] || contextMessages.en;
    //   messages.push({ role: 'user', content: contextMessage });
    //   messages.push({ role: 'assistant', content: this._getContextAcknowledgment(language) });
    // }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    if (history && history.length > 0) {
      const recentHistory = history.slice(-5); // –±–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏–π –¥–ª—è OpenAI
      recentHistory.forEach(msg => {
        messages.push({
          role: msg.role === 'user' ? 'user' : 'assistant',
          content: msg.content || msg.text
        });
      });
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages.push({ role: 'user', content: message });
    
    // Loggers
    if (userId) {
      logger.info(`üçÑ Generating OpenAI response for user ${userId} (lang: ${language})`);
    }
    
    try {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI API
      const openaiConfig = this.config.openai;
      const response = await this.clients.openai.chat.completions.create({
        model: openaiConfig.model,
        messages,
        max_tokens: openaiConfig.maxTokens,
        temperature: openaiConfig.temperature
      });
      
      const answer = response.choices[0].message.content;
      
      // üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
      const needsTicket = this._analyzeTicketNeed(answer, message, language);
      
      return {
        message: answer,
        needsTicket,
        tokensUsed: response.usage.total_tokens || 0,
        provider: 'openai',
        model: openaiConfig.model
      };
    } catch (error) {
      logger.error(`üçÑ OpenAI API error: ${error.message}`);
      throw new Error(`OpenAI API error: ${error.message}`);
    }
  }

  /**
   * üçÑ –£–ë–†–ê–ù–û: –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
   * –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–ø–µ—Ä—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
   */
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º
   * @private
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
   * @returns {boolean} –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–º
   */
  _isTestMessage(message) {
    const testPatterns = [
      /performance test/i,
      /concurrent test/i,
      /^test$/i,
      /^hello$/i,
      /^hi$/i,
      /^–ø—Ä–∏–≤–µ—Ç$/i,
      /^hola$/i
    ];
    
    return testPatterns.some(pattern => pattern.test(message));
  }
  
  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —è–∑—ã–∫–µ
   * @private
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
   * @param {string} language - –Ø–∑—ã–∫
   * @returns {AIResponse} –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç
   */
  _handleTestMessage(message, language) {
    const responses = {
      en: "*mushroom spores sparkle* Hello, digital explorer! How can I help you navigate the Shrooms ecosystem today?",
      ru: "*–≥—Ä–∏–±–Ω—ã–µ —Å–ø–æ—Ä—ã —Å–≤–µ—Ä–∫–∞—é—Ç* –ü—Ä–∏–≤–µ—Ç, —Ü–∏—Ñ—Ä–æ–≤–æ–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å! –ö–∞–∫ –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ Shrooms —Å–µ–≥–æ–¥–Ω—è?",
      es: "*las esporas de hongos brillan* ¬°Hola, explorador digital! ¬øC√≥mo puedo ayudarte en el ecosistema Shrooms hoy?"
    };
    
    return {
      message: responses[language] || responses.en,
      needsTicket: false,
      tokensUsed: 50,
      provider: this.provider,
      model: this.provider === 'claude' ? this.config.claude.model : this.config.openai.model
    };
  }
  
  /**
   * üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
   * –¢–∏–∫–µ—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –°–ï–†–¨–ï–ó–ù–´–• –ø—Ä–æ–±–ª–µ–º, —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ Claude
   * @private
   * @param {string} response - –û—Ç–≤–µ—Ç –æ—Ç AI
   * @param {string} message - –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param {string} language - –Ø–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {boolean} –ù—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∏–∫–µ—Ç
   */
  _analyzeTicketNeed(response, message, language = 'en') {
    // –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å–æ–∑–¥–∞—é—Ç —Ç–∏–∫–µ—Ç—ã
    if (this._isTestMessage(message)) {
      logger.debug('üçÑ Test message detected, no ticket needed');
      return false;
    }
    
    // üçÑ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ò—â–µ–º –¢–û–õ–¨–ö–û –ø—Ä—è–º—ã–µ —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ Claude
    const directTicketIndicators = [
      '#TICKET_ID',
      '—Å–æ–∑–¥–∞–ª —Ç–∏–∫–µ—Ç',
      '—Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç',
      '—Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
      '—Å–æ–∑–¥–∞–Ω—ã —Ç–∏–∫–µ—Ç',
      'created ticket',
      'create a ticket',
      'support ticket',
      'created a ticket',
      'crear ticket', 
      'crear un ticket',
      'ticket de soporte',
      'creado un ticket',
      '—Å–∞–¥–æ–≤–Ω–∏–∫–∏ –º–∏—Ü–µ–ª–∏—è',
      '–≥—Ä–∏–±–Ω–∏–∫–∏-—ç–∫—Å–ø–µ—Ä—Ç—ã',
      '–Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–≤—è–∂–µ—Ç—Å—è',
      '–Ω–∞—à–∏ —ç–∫—Å–ø–µ—Ä—Ç—ã —Å–≤—è–∂—É—Ç—Å—è'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç Claude –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä—è–º—ã—Ö —É–∫–∞–∑–∞–Ω–∏–π –Ω–∞ —Ç–∏–∫–µ—Ç
    const claudeWantsTicket = directTicketIndicators.some(indicator => 
      response.toLowerCase().includes(indicator.toLowerCase())
    );
    
    if (claudeWantsTicket) {
      logger.info(`üçÑ Ticket creation requested by Claude for message: "${message.substring(0, 30)}..."`);
    } else {
      logger.debug(`üçÑ No ticket indicators in Claude response for message: "${message.substring(0, 30)}..."`);
    }
    
    // üçÑ –£–ë–†–ê–ù–û: –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ "–ø—Ä–æ–±–ª–µ–º–Ω—ã–µ" —Å–ª–æ–≤–∞
    // –¢–µ–ø–µ—Ä—å –¥–æ–≤–µ—Ä—è–µ–º —Ä–µ—à–µ–Ω–∏—é Claude, –∞ –Ω–µ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –≤–æ–ø—Ä–æ—Å–µ
    
    return claudeWantsTicket;
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
   * @private
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
   * @returns {boolean} –ú–æ–∂–Ω–æ –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å
   */
  _isCacheable(message) {
    return this._isTestMessage(message) || message.length < 50;
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á –¥–ª—è –∫—ç—à–∞
   * @private
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
   * @param {string} language - –Ø–∑—ã–∫
   * @returns {string} –ö–ª—é—á –∫—ç—à–∞
   */
  _getCacheKey(message, language) {
    return `${language}:${message.toLowerCase()}`;
  }
  
  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —è–∑—ã–∫–µ
   * @private
   * @param {Error} error - –û—à–∏–±–∫–∞
   * @param {string} language - –Ø–∑—ã–∫
   * @returns {AIResponse} –û—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ
   */
  _getErrorResponse(error, language = 'en') {
    const errorMessages = {
      en: "I'm experiencing technical difficulties right now. Let me create a support ticket for you so our team can help.",
      ru: "–£ –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —á—Ç–æ–±—ã –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–≥–ª–∞ –ø–æ–º–æ—á—å.",
      es: "Estoy experimentando dificultades t√©cnicas ahora. Perm√≠teme crear un ticket de soporte para que nuestro equipo pueda ayudarte."
    };
    
    return {
      message: errorMessages[language] || errorMessages.en,
      needsTicket: true,
      tokensUsed: 0,
      provider: this.provider,
      model: "error"
    };
  }
  
  /**
   * –û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
   * @public
   */
  clearExpiredCache() {
    const now = Date.now();
    for (const [key, value] of this.responseCache.entries()) {
      if (now - value.timestamp >= this.cacheTimeout) {
        this.responseCache.delete(key);
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
   * üçÑ –û–ë–ù–û–í–õ–ï–ù–û: –í–∫–ª—é—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PromptService
   * @public
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
   */
  async getCacheStats() {
    try {
      const promptStats = await promptService.getCacheStats();
      
      return {
        responseCache: {
          size: this.responseCache.size,
          timeout: this.cacheTimeout
        },
        promptCache: promptStats,
        supportedLanguages: ['en', 'es', 'ru'],
        ragEnabled: this.enableRag
      };
    } catch (error) {
      return {
        responseCache: {
          size: this.responseCache.size,
          timeout: this.cacheTimeout
        },
        promptCache: { error: error.message },
        supportedLanguages: ['en', 'es', 'ru'],
        ragEnabled: this.enableRag
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
   * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
   */
  getProviderInfo() {
    return {
      currentProvider: this.provider,
      availableProviders: Object.keys(this.clients),
      models: {
        claude: this.clients.claude ? this.config.claude.model : null,
        openai: this.clients.openai ? this.config.openai.model : null
      },
      ragEnabled: this.enableRag
    };
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ RAG —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
   * @returns {Promise<Object>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ RAG
   */
  async getRagInfo() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Vector Store
      const vectorStoreHealth = await vectorStoreService.healthCheck();
      
      return {
        enabled: this.enableRag,
        vectorStore: vectorStoreHealth,
        embeddingModel: process.env.EMBEDDING_MODEL || 'text-embedding-ada-002',
        defaultContextLimit: 3
      };
    } catch (error) {
      return {
        enabled: this.enableRag,
        vectorStore: {
          status: 'error',
          message: error.message
        },
        embeddingModel: process.env.EMBEDDING_MODEL || 'text-embedding-ada-002',
        defaultContextLimit: 3
      };
    }
  }

  /**
   * üçÑ –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PromptService
   * @returns {Promise<Object>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–ø—Ç–∞—Ö
   */
  async getPromptInfo() {
    try {
      const diagnosis = await promptService.diagnose();
      
      return {
        service: 'PromptService',
        status: diagnosis.status,
        cacheStats: diagnosis.cacheStats,
        databaseConnection: diagnosis.databaseConnection,
        promptCounts: diagnosis.promptCounts
      };
    } catch (error) {
      return {
        service: 'PromptService',
        status: 'error',
        error: error.message
      };
    }
  }

  /**
   * üçÑ –ù–û–í–û–ï: –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
   * @param {string} [type] - –¢–∏–ø –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
   * @param {string} [language] - –Ø–∑—ã–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
   */
  clearPromptCache(type = null, language = null) {
    if (type) {
      promptService.clearCacheForType(type, language);
    } else {
      promptService.clearCache();
    }
    logger.info(`üçÑ Prompt cache cleared for type: ${type || 'all'}, language: ${language || 'all'}`);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
module.exports = new ClaudeService();
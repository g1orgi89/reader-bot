/**
 * @fileoverview –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å" —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
 * @author g1orgi89
 */

const QuoteHandler = require('./quoteHandler');
const AchievementService = require('./achievementService');
const { Quote, UserProfile } = require('../models');

/**
 * –°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
 */
class CommandHandler {
  constructor() {
    this.quoteHandler = new QuoteHandler();
    this.achievementService = new AchievementService();
    this.reminderService = null; // –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
   * @param {Object} dependencies - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
   * @param {Object} dependencies.reminderService - –°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   */
  initialize(dependencies) {
    this.reminderService = dependencies.reminderService;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async handleHelp(ctx) {
    const helpText = `üìñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å":*

/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞  
/search - –ø–æ–∏—Å–∫ –ø–æ –≤–∞—à–∏–º —Ü–∏—Ç–∞—Ç–∞–º
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ü–∏—Ç–∞—Ç—ã —Ç–µ–∫—Å—Ç–æ–º
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∞–≤—Ç–æ—Ä–∞ –≤ —Å–∫–æ–±–∫–∞—Ö: (–¢–æ–ª—Å—Ç–æ–π)
‚Ä¢ –õ–∏–º–∏—Ç: 10 —Ü–∏—Ç–∞—Ç –≤ –¥–µ–Ω—å

*–ü—Ä–∏–º–µ—Ä—ã:*
\`"–°—á–∞—Å—Ç—å–µ –≤–Ω—É—Ç—Ä–∏ –Ω–∞—Å" (–ë—É–¥–¥–∞)\`
\`–ñ–∏–∑–Ω—å –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞ - –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä\`
\`–ú—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –æ–ø—ã—Ç–æ–º\`

*–û—Ç—á–µ—Ç—ã:* –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 11:00
*–ê–Ω–æ–Ω—Å—ã:* 25 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
*–í–æ–ø—Ä–æ—Å—ã:* –ø–∏—à–∏—Ç–µ –ø—Ä—è–º–æ –≤ —á–∞—Ç, —è –ø–µ—Ä–µ–¥–∞–º –ê–Ω–Ω–µ

üìö "–•–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ - —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏!"`;
    
    await ctx.reply(helpText, { parse_mode: 'Markdown' });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /search
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async handleSearch(ctx) {
    try {
      const userId = ctx.from.id.toString();
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Ü–∏—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const quotes = await Quote.find({ userId })
        .sort({ createdAt: -1 })
        .limit(15);
      
      if (quotes.length === 0) {
        await ctx.reply(`üìñ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç.

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!

*–ü—Ä–∏–º–µ—Ä:*
\`"–í –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ ‚Äî —Ü–µ–ª–∞—è –∂–∏–∑–Ω—å" (–ú–∞—Ä–∏–Ω–∞ –¶–≤–µ—Ç–∞–µ–≤–∞)\``, 
          { parse_mode: 'Markdown' }
        );
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç
      let searchText = `üîç *–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã:*\n\n`;
      
      quotes.forEach((quote, index) => {
        const author = quote.author ? ` (${quote.author})` : '';
        const shortText = quote.text.length > 80 ? 
          quote.text.substring(0, 77) + '...' : quote.text;
        
        const dateStr = quote.createdAt.toLocaleDateString('ru-RU', {
          day: 'numeric',
          month: 'short'
        });
        
        searchText += `${index + 1}. "${shortText}"${author}\n`;
        searchText += `   üìÖ ${dateStr} ‚Ä¢ ${quote.category}\n\n`;
      });

      searchText += `üìä –í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç: ${quotes.length}${quotes.length >= 15 ? '+' : ''}`;

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
      const keyboard = {
        inline_keyboard: [
          [{ text: "üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data: "search_text" }],
          [{ text: "üë§ –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É", callback_data: "search_author" }],
          [{ text: "üìö –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data: "search_category" }]
        ]
      };

      await ctx.reply(searchText, { 
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('Error in handleSearch:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ü–∏—Ç–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /stats - –ù–û–í–´–ô –†–ê–°–®–ò–†–ï–ù–ù–´–ô –§–û–†–ú–ê–¢
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async handleStats(ctx) {
    try {
      const userId = ctx.from.id.toString();
      const stats = await this.quoteHandler.getUserStats(userId);
      
      if (!stats) {
        await ctx.reply('–î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
      const achievementProgress = await this.achievementService.getUserAchievementProgress(userId);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const statsText = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${stats.name}:*

üìñ –¶–∏—Ç–∞—Ç—ã: ${stats.totalQuotes} | –°–µ—Ä–∏—è: ${stats.currentStreak} ${this._getDaysWord(stats.currentStreak)} | –†–µ–∫–æ—Ä–¥: ${stats.longestStreak} ${this._getDaysWord(stats.longestStreak)}
üïê –° –±–æ—Ç–æ–º: ${stats.daysSinceRegistration} ${this._getDaysWord(stats.daysSinceRegistration)}

üë§ *–õ—é–±–∏–º—ã–µ –∞–≤—Ç–æ—Ä—ã:* ${stats.favoriteAuthors.length > 0 ? stats.favoriteAuthors.slice(0, 3).join(', ') : '–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å'}

${this._formatAchievementsInStats(achievementProgress)}

üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –º–æ–º–µ–Ω—Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è!`;

      // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
      const keyboard = {
        inline_keyboard: [
          [{ text: "üîç –ü–æ–∏—Å–∫ —Ü–∏—Ç–∞—Ç", callback_data: "quick_search" }],
          [{ text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data: "open_settings" }]
        ]
      };

      await ctx.reply(statsText, { 
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('Error in handleStats:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * üìñ –û–ë–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /settings —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async handleSettings(ctx) {
    try {
      const userId = ctx.from.id.toString();
      const user = await UserProfile.findOne({ userId });
      
      if (!user) {
        await ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
      const reminderInfo = this.reminderService ? 
        this._getReminderScheduleInfo(user) : 
        '—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';

      const reminderStatus = user.settings.reminderEnabled ? "‚úÖ –≤–∫–ª—é—á–µ–Ω—ã" : "‚ùå –≤—ã–∫–ª—é—á–µ–Ω—ã";
      const reminderTimes = user.settings.reminderTimes.length > 0 ? 
        user.settings.reminderTimes.join(', ') : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';

      const settingsText = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:*

üë§ *–ü—Ä–æ—Ñ–∏–ª—å:*
‚îî –ò–º—è: ${user.name}
‚îî Email: ${user.email}
‚îî –ò—Å—Ç–æ—á–Ω–∏–∫: ${user.source}

üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*
‚îî –°—Ç–∞—Ç—É—Å: ${reminderStatus}
‚îî –í—Ä–µ–º—è: ${reminderTimes}
‚îî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${reminderInfo}

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚îî –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${user.registeredAt.toLocaleDateString('ru-RU')}
‚îî –û–Ω–±–æ—Ä–¥–∏–Ω–≥: ${user.isOnboardingComplete ? '–∑–∞–≤–µ—Ä—à–µ–Ω' : '–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω'}
‚îî –Ø–∑—ã–∫: ${user.settings.language}`;

      const keyboard = {
        inline_keyboard: [
          [{
            text: user.settings.reminderEnabled ? "üîï –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" : "üîî –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
            callback_data: "toggle_reminders"
          }],
          [{ text: "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data: "change_reminder_time" }],
          [{ text: "üìä –ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data: "reminder_frequency_info" }],
          [{ text: "üìß –ò–∑–º–µ–Ω–∏—Ç—å email", callback_data: "change_email" }],
          [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "close_settings" }]
        ]
      };

      await ctx.reply(settingsText, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('Error in handleSettings:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * üìñ –ù–û–í–û–ï: –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} user - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @returns {string} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
   * @private
   */
  _getReminderScheduleInfo(user) {
    if (!this.reminderService) {
      return '—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    }

    const config = this.reminderService.getReminderConfigForUser(user);
    const registrationDate = new Date(user.registeredAt);
    const now = new Date();
    const weeksSinceRegistration = Math.floor((now - registrationDate) / (1000 * 60 * 60 * 24 * 7));

    const scheduleInfo = {
      'every_other_day': '—á–µ—Ä–µ–∑ –¥–µ–Ω—å',
      'twice_weekly': '2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é (–ø–Ω, —á—Ç)',
      'weekly': '1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é (–ø–Ω)'
    };

    const stage = weeksSinceRegistration === 0 ? '–Ω–æ–≤–∏—á–æ–∫' :
                  weeksSinceRegistration <= 3 ? '–∞–∫—Ç–∏–≤–Ω—ã–π' : '–æ–ø—ã—Ç–Ω—ã–π';

    return `${scheduleInfo[config.frequency] || config.frequency} (${stage})`;
  }

  /**
   * üìñ –ù–û–í–û–ï: –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å—Ç–æ—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async showReminderFrequencyInfo(ctx) {
    const frequencyText = `üîî *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*

–ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –º–µ–Ω—è–µ—Ç—Å—è –ø–æ –º–µ—Ä–µ –≤–∞—à–µ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –±–æ—Ç–æ–º:

*üìñ –ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è (–Ω–æ–≤–∏—á–æ–∫):*
‚îî –ß–µ—Ä–µ–∑ –¥–µ–Ω—å –≤ 19:00
‚îî –ü–æ–º–æ–≥–∞–µ–º –ø—Ä–∏–≤—ã–∫–Ω—É—Ç—å –∫ –±–æ—Ç—É

*üéØ 2-4 –Ω–µ–¥–µ–ª–∏ (–∞–∫—Ç–∏–≤–Ω—ã–π):*
‚îî 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é (–ø–Ω, —á—Ç) –≤ 19:00
‚îî –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å

*‚≠ê –ú–µ—Å—è—Ü+ (–æ–ø—ã—Ç–Ω—ã–π):*
‚îî 1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é (–ø–Ω) –≤ 19:00
‚îî –ù–µ–Ω–∞–≤—è–∑—á–∏–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

*üí° –£–º–Ω–∞—è –ª–æ–≥–∏–∫–∞:*
‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –≤—ã —É–∂–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ–º –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏

*‚öôÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è:*
‚Ä¢ –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –ú–æ–∂–µ—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∏—Ç—å
‚Ä¢ –ê–Ω–æ–Ω—Å—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (25 —á–∏—Å–ª–∞) –æ—Ç–¥–µ–ª—å–Ω–æ`;

    const keyboard = {
      inline_keyboard: [
        [{ text: "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data: "change_reminder_time" }],
        [{ text: "üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data: "open_settings" }]
      ]
    };

    await ctx.reply(frequencyText, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  /**
   * üìñ –û–ë–ù–û–í–õ–ï–ù–û: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async toggleReminders(ctx) {
    try {
      const userId = ctx.from.id.toString();
      const user = await UserProfile.findOne({ userId });
      
      if (!user) {
        await ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      const newStatus = !user.settings.reminderEnabled;
      user.settings.reminderEnabled = newStatus;
      await user.save();

      const statusText = newStatus ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–æ—Ç–∫–ª—é—á–µ–Ω—ã";
      const emoji = newStatus ? "üîî" : "üîï";
      
      let responseText = `${emoji} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${statusText}.

`;

      if (newStatus) {
        const scheduleInfo = this._getReminderScheduleInfo(user);
        responseText += `–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ —Ü–∏—Ç–∞—Ç–∞—Ö.

*–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:* ${scheduleInfo}
*–í—Ä–µ–º—è:* ${user.settings.reminderTimes.join(', ')}

üí° –ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É–º–Ω–∞—è - –æ–Ω–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –≤–∞—à –æ–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.`;
      } else {
        responseText += `–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ü–∏—Ç–∞—Ç–∞—Ö.

üì¢ *–í–∞–∂–Ω–æ:* –∞–Ω–æ–Ω—Å—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—Ç –ê–Ω–Ω—ã (25 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞) –ø—Ä–æ–¥–æ–ª–∂–∞—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å. –ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –∏ –∏—Ö, –∑–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é.`;
      }

      const keyboard = {
        inline_keyboard: [
          [{ text: "‚öôÔ∏è –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data: "open_settings" }],
          [{ text: "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "quick_stats" }]
        ]
      };

      await ctx.reply(responseText, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('Error in toggleReminders:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.');
    }
  }

  /**
   * üìñ –ù–û–í–û–ï: –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async changeReminderTime(ctx) {
    const timeText = `‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:*

–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ü–∏—Ç–∞—Ç–∞—Ö?`;

    const keyboard = {
      inline_keyboard: [
        [{ text: "üåÖ –£—Ç—Ä–æ–º (9:00)", callback_data: "set_time_09:00" }],
        [{ text: "üåÜ –í–µ—á–µ—Ä–æ–º (19:00)", callback_data: "set_time_19:00" }],
        [{ text: "üåô –ü–æ–∑–¥–Ω–æ –≤–µ—á–µ—Ä–æ–º (21:00)", callback_data: "set_time_21:00" }],
        [{ text: "‚è∞ –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", callback_data: "set_custom_time" }],
        [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "open_settings" }]
      ]
    };

    await ctx.reply(timeText, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  /**
   * üìñ –ù–û–í–û–ï: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @param {string} time - –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
   * @returns {Promise<void>}
   */
  async setReminderTime(ctx, time) {
    try {
      const userId = ctx.from.id.toString();
      const user = await UserProfile.findOne({ userId });
      
      if (!user) {
        await ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ ReminderService
      if (this.reminderService) {
        await this.reminderService.updateReminderSettings(userId, {
          enabled: user.settings.reminderEnabled,
          times: [time]
        });
      } else {
        // Fallback –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        user.settings.reminderTimes = [time];
        await user.save();
      }

      const scheduleInfo = this._getReminderScheduleInfo(user);
      
      await ctx.reply(`‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${time}

*–í–∞—à–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:*
‚îî –í—Ä–µ–º—è: ${time}
‚îî –ß–∞—Å—Ç–æ—Ç–∞: ${scheduleInfo}
‚îî –°—Ç–∞—Ç—É—Å: ${user.settings.reminderEnabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}

${user.settings.reminderEnabled ? 
  'üéØ –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.' : 
  'üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.'
}`, {
        parse_mode: 'Markdown'
      });

    } catch (error) {
      console.error('Error in setReminderTime:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.');
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
   * @param {Array} achievementProgress - –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
   * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   * @private
   */
  _formatAchievementsInStats(achievementProgress) {
    if (!achievementProgress || achievementProgress.length === 0) {
      return 'üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:* –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...';
    }

    const unlocked = achievementProgress.filter(a => a.isUnlocked);
    const locked = achievementProgress.filter(a => !a.isUnlocked);
    
    let achievementsText = `üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (${unlocked.length}/${achievementProgress.length}):*\n`;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    unlocked.forEach(achievement => {
      achievementsText += `‚úÖ ${achievement.icon} ${achievement.name}\n`;
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    locked.forEach(achievement => {
      const progressBar = this._createProgressBar(achievement.progress);
      const progressText = `${achievement.currentValue}/${achievement.targetValue}`;
      achievementsText += `üîí ${achievement.icon} ${achievement.name} ${progressBar} ${progressText}\n`;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç –¥–ª—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const nextAchievement = locked.find(a => a.progress > 0) || locked[0];
    if (nextAchievement) {
      const hint = this._getAchievementHint(nextAchievement);
      achievementsText += `\nüí≠ *–°–æ–≤–µ—Ç:* ${hint}`;
    }

    return achievementsText;
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async showAchievementsGuide(ctx) {
    const guideText = `üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º:*

üéØ *–ö–∞–∫ –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*

üå± *–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏* - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É
üìö *–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –º—É–¥—Ä–æ—Å—Ç–∏* - —Å–æ–±–µ—Ä–∏—Ç–µ 25 —Ü–∏—Ç–∞—Ç
üî• *–§–∏–ª–æ—Å–æ—Ñ –Ω–µ–¥–µ–ª–∏* - –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ü–∏—Ç–∞—Ç—ã 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
üìñ *–õ—é–±–∏—Ç–µ–ª—å –∫–ª–∞—Å—Å–∏–∫–∏* - 10 —Ü–∏—Ç–∞—Ç –æ—Ç –∫–ª–∞—Å—Å–∏–∫–æ–≤
üí≠ *–ú—ã—Å–ª–∏—Ç–µ–ª—å* - 10 —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º—ã—Å–ª–µ–π (–±–µ–∑ –∞–≤—Ç–æ—Ä–∞)
üèÉ‚Äç‚ôÄÔ∏è *–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü —á—Ç–µ–Ω–∏—è* - —Å–æ–±–µ—Ä–∏—Ç–µ 50 —Ü–∏—Ç–∞—Ç
üåà *–†–∞–∑–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —á–∏—Ç–∞—Ç–µ–ª—å* - —Ü–∏—Ç–∞—Ç—ã –∏–∑ 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
‚≠ê *–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ* - –º–µ—Å—è—Ü –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

üí° *–°–æ–≤–µ—Ç—ã:*
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ü–∏—Ç–∞—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è —Å–µ—Ä–∏–π
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∞–≤—Ç–æ—Ä–æ–≤ –≤ —Å–∫–æ–±–∫–∞—Ö: (–¢–æ–ª—Å—Ç–æ–π)
‚Ä¢ –ü—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º—ã—Å–ª–∏

üìñ "–ö–∞–∂–¥–∞—è —Ü–∏—Ç–∞—Ç–∞ - —ç—Ç–æ —Å—Ç—É–ø–µ–Ω—å–∫–∞ –∫ –º—É–¥—Ä–æ—Å—Ç–∏!"`;

    await ctx.reply(guideText, { parse_mode: 'Markdown' });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
   * @param {Object} achievement - –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
   * @returns {string} –ü–æ–¥—Å–∫–∞–∑–∫–∞
   * @private
   */
  _getAchievementHint(achievement) {
    const hints = {
      'first_quote': '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é —Ü–∏—Ç–∞—Ç—É –±–æ—Ç—É',
      'wisdom_collector': '–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ —Ü–∏—Ç–∞—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
      'week_philosopher': '–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ü–∏—Ç–∞—Ç—ã 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
      'classics_lover': '–î–æ–±–∞–≤–ª—è–π—Ç–µ —Ü–∏—Ç–∞—Ç—ã –¢–æ–ª—Å—Ç–æ–≥–æ, –î–æ—Å—Ç–æ–µ–≤—Å–∫–æ–≥–æ, –ü—É—à–∫–∏–Ω–∞',
      'thinker': '–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º—ã—Å–ª–∏ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞',
      'marathon_reader': '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
      'diverse_reader': '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã: –ª—é–±–æ–≤—å, –º–æ—Ç–∏–≤–∞—Ü–∏—è, —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è',
      'monthly_consistent': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞'
    };
    
    return hints[achievement.id] || '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ü–∏—Ç–∞—Ç—ã!';
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @param {string} searchText - –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
   * @returns {Promise<void>}
   */
  async handleTextSearch(ctx, searchText) {
    try {
      const userId = ctx.from.id.toString();
      const quotes = await this.quoteHandler.searchQuotes(userId, searchText, 10);
      
      if (quotes.length === 0) {
        await ctx.reply(`üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchText}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.`);
        return;
      }

      let resultText = `üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ "${searchText}":*\n\n`;
      
      quotes.forEach((quote, index) => {
        const author = quote.author ? ` (${quote.author})` : '';
        const shortText = quote.text.length > 70 ? 
          quote.text.substring(0, 67) + '...' : quote.text;
        
        resultText += `${index + 1}. "${shortText}"${author}\n`;
        resultText += `   üìÖ ${quote.ageInDays} –¥–Ω. –Ω–∞–∑–∞–¥ ‚Ä¢ ${quote.category}\n\n`;
      });

      resultText += `üìä –ù–∞–π–¥–µ–Ω–æ: ${quotes.length} ${this._getQuotesWord(quotes.length)}`;

      await ctx.reply(resultText, { parse_mode: 'Markdown' });

    } catch (error) {
      console.error('Error in handleTextSearch:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   * @param {number} progress - –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-100)
   * @returns {string} –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
   * @private
   */
  _createProgressBar(progress) {
    const filledBlocks = Math.round(progress / 14.3); // 7 –±–ª–æ–∫–æ–≤ –≤–º–µ—Å—Ç–æ 10 –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    const emptyBlocks = 7 - filledBlocks;
    return '‚ñì'.repeat(filledBlocks) + '‚ñë'.repeat(emptyBlocks);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "–¥–µ–Ω—å"
   * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
   * @returns {string} –°–∫–ª–æ–Ω–µ–Ω–∏–µ
   * @private
   */
  _getDaysWord(count) {
    if (count % 10 === 1 && count % 100 !== 11) return '–¥–µ–Ω—å';
    if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '–¥–Ω—è';
    return '–¥–Ω–µ–π';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "—Ü–∏—Ç–∞—Ç–∞"
   * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç
   * @returns {string} –°–∫–ª–æ–Ω–µ–Ω–∏–µ
   * @private
   */
  _getQuotesWord(count) {
    if (count % 10 === 1 && count % 100 !== 11) return '—Ü–∏—Ç–∞—Ç–∞';
    if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '—Ü–∏—Ç–∞—Ç—ã';
    return '—Ü–∏—Ç–∞—Ç';
  }

  /**
   * üìñ –û–ë–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å callback –∑–∞–ø—Ä–æ—Å—ã —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async handleCallback(ctx) {
    const data = ctx.callbackQuery.data;

    try {
      switch (data) {
        case 'quick_search':
          await this.handleSearch(ctx);
          break;
        
        case 'quick_stats':
          await this.handleStats(ctx);
          break;
        
        case 'open_settings':
          await this.handleSettings(ctx);
          break;
        
        case 'toggle_reminders':
          await this.toggleReminders(ctx);
          break;
        
        case 'change_reminder_time':
          await this.changeReminderTime(ctx);
          break;
        
        case 'reminder_frequency_info':
          await this.showReminderFrequencyInfo(ctx);
          break;
        
        case 'achievements_guide':
          await this.showAchievementsGuide(ctx);
          break;
        
        case 'search_text':
          await ctx.reply('üîç –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –≤–∞—à–∏—Ö —Ü–∏—Ç–∞—Ç–∞—Ö:');
          break;
        
        case 'search_author':
          await ctx.reply('üë§ –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:');
          break;
        
        case 'search_category':
          await this._showCategorySearch(ctx);
          break;
        
        case 'close_settings':
          await ctx.deleteMessage();
          break;
        
        case 'set_custom_time':
          await ctx.reply('‚è∞ –ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:30):');
          break;
        
        default:
          if (data.startsWith('category_')) {
            await this._handleCategorySearch(ctx, data.replace('category_', ''));
          } else if (data.startsWith('set_time_')) {
            const time = data.replace('set_time_', '');
            await this.setReminderTime(ctx, time);
          }
          break;
      }

      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
      await ctx.answerCbQuery();

    } catch (error) {
      console.error('Error in handleCallback:', error);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @returns {Promise<void>}
   * @private
   */
  async _showCategorySearch(ctx) {
    const categories = [
      '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', '–õ—é–±–æ–≤—å', '–§–∏–ª–æ—Å–æ—Ñ–∏—è', '–ú–æ—Ç–∏–≤–∞—Ü–∏—è', 
      '–ú—É–¥—Ä–æ—Å—Ç—å', '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–û—Ç–Ω–æ—à–µ–Ω–∏—è', '–ú–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ'
    ];

    const keyboard = {
      inline_keyboard: categories.map(category => ([{
        text: category,
        callback_data: `category_${category}`
      }]))
    };

    await ctx.reply('üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞:', {
      reply_markup: keyboard
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @param {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è
   * @returns {Promise<void>}
   * @private
   */
  async _handleCategorySearch(ctx, category) {
    try {
      const userId = ctx.from.id.toString();
      const quotes = await Quote.find({ 
        userId, 
        category 
      }).sort({ createdAt: -1 }).limit(10);

      if (quotes.length === 0) {
        await ctx.reply(`üìö –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}" –ø–æ–∫–∞ –Ω–µ—Ç —Ü–∏—Ç–∞—Ç.

–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ!`);
        return;
      }

      let resultText = `üìö *–¶–∏—Ç–∞—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}":*\n\n`;
      
      quotes.forEach((quote, index) => {
        const author = quote.author ? ` (${quote.author})` : '';
        const shortText = quote.text.length > 70 ? 
          quote.text.substring(0, 67) + '...' : quote.text;
        
        resultText += `${index + 1}. "${shortText}"${author}\n\n`;
      });

      resultText += `üìä –ü–æ–∫–∞–∑–∞–Ω–æ: ${quotes.length} ${this._getQuotesWord(quotes.length)}`;

      await ctx.reply(resultText, { parse_mode: 'Markdown' });

    } catch (error) {
      console.error('Error in _handleCategorySearch:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.');
    }
  }
}

module.exports = CommandHandler;

/**
 * @fileoverview –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @author g1orgi89
 */

const QuoteHandler = require('./quoteHandler');
const AchievementService = require('./achievementService');
const { Quote, UserProfile } = require('../models');

/**
 * –°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
 */
class CommandHandler {
  constructor() {
    this.quoteHandler = new QuoteHandler();
    this.achievementService = new AchievementService();
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async handleHelp(ctx) {
    const helpText = `üìñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å":*

/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞  
/search - –ø–æ–∏—Å–∫ –ø–æ –≤–∞—à–∏–º —Ü–∏—Ç–∞—Ç–∞–º
/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á—Ç–µ–Ω–∏—è
/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ü–∏—Ç–∞—Ç—ã —Ç–µ–∫—Å—Ç–æ–º
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∞–≤—Ç–æ—Ä–∞ –≤ —Å–∫–æ–±–∫–∞—Ö: (–¢–æ–ª—Å—Ç–æ–π)
‚Ä¢ –õ–∏–º–∏—Ç: 10 —Ü–∏—Ç–∞—Ç –≤ –¥–µ–Ω—å

*–ü—Ä–∏–º–µ—Ä—ã:*
\`"–°—á–∞—Å—Ç—å–µ –≤–Ω—É—Ç—Ä–∏ –Ω–∞—Å" (–ë—É–¥–¥–∞)\`
\`–ñ–∏–∑–Ω—å –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞ - –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä\`
\`–ú—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –æ–ø—ã—Ç–æ–º\`

*–û—Ç—á–µ—Ç—ã:* –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 11:00
*–í–æ–ø—Ä–æ—Å—ã:* –ø–∏—à–∏—Ç–µ –ø—Ä—è–º–æ –≤ —á–∞—Ç, —è –ø–µ—Ä–µ–¥–∞–º –ê–Ω–Ω–µ

üìö "–•–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ - —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏!"`;
    
    await ctx.reply(helpText, { parse_mode: 'Markdown' });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /search
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async handleSearch(ctx) {
    try {
      const userId = ctx.from.id.toString();
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Ü–∏—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const quotes = await Quote.find({ userId })
        .sort({ createdAt: -1 })
        .limit(15);
      
      if (quotes.length === 0) {
        await ctx.reply(`üìñ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç.

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!

*–ü—Ä–∏–º–µ—Ä:*
\`"–í –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ ‚Äî —Ü–µ–ª–∞—è –∂–∏–∑–Ω—å" (–ú–∞—Ä–∏–Ω–∞ –¶–≤–µ—Ç–∞–µ–≤–∞)\``, 
          { parse_mode: 'Markdown' }
        );
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç
      let searchText = `üîç *–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã:*\n\n`;
      
      quotes.forEach((quote, index) => {
        const author = quote.author ? ` (${quote.author})` : '';
        const shortText = quote.text.length > 80 ? 
          quote.text.substring(0, 77) + '...' : quote.text;
        
        const dateStr = quote.createdAt.toLocaleDateString('ru-RU', {
          day: 'numeric',
          month: 'short'
        });
        
        searchText += `${index + 1}. "${shortText}"${author}\n`;
        searchText += `   üìÖ ${dateStr} ‚Ä¢ ${quote.category}\n\n`;
      });

      searchText += `üìä –í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç: ${quotes.length}${quotes.length >= 15 ? '+' : ''}`;

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
      const keyboard = {
        inline_keyboard: [
          [{ text: "üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data: "search_text" }],
          [{ text: "üë§ –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É", callback_data: "search_author" }],
          [{ text: "üìö –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data: "search_category" }]
        ]
      };

      await ctx.reply(searchText, { 
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('Error in handleSearch:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ü–∏—Ç–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /stats
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async handleStats(ctx) {
    try {
      const userId = ctx.from.id.toString();
      const stats = await this.quoteHandler.getUserStats(userId);
      
      if (!stats) {
        await ctx.reply('–î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const recentAchievements = stats.achievements.recentAchievements;
      
      const statsText = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${stats.name}:*

üìñ *–¶–∏—Ç–∞—Ç—ã:*
‚îî –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: ${stats.totalQuotes}
‚îî –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: ${stats.currentStreak} ${this._getDaysWord(stats.currentStreak)}
‚îî –†–µ–∫–æ—Ä–¥ —Å–µ—Ä–∏–∏: ${stats.longestStreak} ${this._getDaysWord(stats.longestStreak)}

üïê *–í—Ä–µ–º—è —Å –±–æ—Ç–æ–º:*
‚îî ${stats.daysSinceRegistration} ${this._getDaysWord(stats.daysSinceRegistration)}

üë§ *–õ—é–±–∏–º—ã–µ –∞–≤—Ç–æ—Ä—ã:*
${stats.favoriteAuthors.length > 0 ? 
  stats.favoriteAuthors.map((author, i) => `${i + 1}. ${author}`).join('\n') :
  '–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å'
}

üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*
‚îî –ü–æ–ª—É—á–µ–Ω–æ: ${stats.achievements.unlockedAchievements}/${stats.achievements.totalAchievements}
‚îî –ü—Ä–æ–≥—Ä–µ—Å—Å: ${stats.achievements.completionRate}%

${recentAchievements.length > 0 ? 
  `*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n${recentAchievements.map(a => `${a.icon} ${a.name}`).join('\n')}` : 
  '*–ù–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç*'
}

üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –º–æ–º–µ–Ω—Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è!`;

      // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
      const keyboard = {
        inline_keyboard: [
          [{ text: "üèÜ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data: "show_achievements" }],
          [{ text: "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –º–µ—Å—è—Ü–∞–º", callback_data: "show_monthly_stats" }],
          [{ text: "üîç –ù–∞–π—Ç–∏ —Ü–∏—Ç–∞—Ç—ã", callback_data: "quick_search" }]
        ]
      };

      await ctx.reply(statsText, { 
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('Error in handleStats:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /settings
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async handleSettings(ctx) {
    try {
      const userId = ctx.from.id.toString();
      const user = await UserProfile.findOne({ userId });
      
      if (!user) {
        await ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
        return;
      }

      const reminderStatus = user.settings.reminderEnabled ? "‚úÖ –≤–∫–ª—é—á–µ–Ω—ã" : "‚ùå –≤—ã–∫–ª—é—á–µ–Ω—ã";
      const reminderTimes = user.settings.reminderTimes.length > 0 ? 
        user.settings.reminderTimes.join(', ') : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';

      const settingsText = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:*

üë§ *–ü—Ä–æ—Ñ–∏–ª—å:*
‚îî –ò–º—è: ${user.name}
‚îî Email: ${user.email}
‚îî –ò—Å—Ç–æ—á–Ω–∏–∫: ${user.source}

üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*
‚îî –°—Ç–∞—Ç—É—Å: ${reminderStatus}
‚îî –í—Ä–µ–º—è: ${reminderTimes}

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚îî –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${user.registeredAt.toLocaleDateString('ru-RU')}
‚îî –û–Ω–±–æ—Ä–¥–∏–Ω–≥: ${user.isOnboardingComplete ? '–∑–∞–≤–µ—Ä—à–µ–Ω' : '–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω'}
‚îî –Ø–∑—ã–∫: ${user.settings.language}`;

      const keyboard = {
        inline_keyboard: [
          [{
            text: user.settings.reminderEnabled ? "üîï –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" : "üîî –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
            callback_data: "toggle_reminders"
          }],
          [{ text: "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data: "change_reminder_time" }],
          [{ text: "üìß –ò–∑–º–µ–Ω–∏—Ç—å email", callback_data: "change_email" }],
          [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "close_settings" }]
        ]
      };

      await ctx.reply(settingsText, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('Error in handleSettings:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async showAchievements(ctx) {
    try {
      const userId = ctx.from.id.toString();
      const progress = await this.achievementService.getUserAchievementProgress(userId);
      
      if (progress.length === 0) {
        await ctx.reply('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
      const unlocked = progress.filter(p => p.isUnlocked);
      const locked = progress.filter(p => !p.isUnlocked);

      let achievementsText = `üèÜ *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n\n`;

      // –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      if (unlocked.length > 0) {
        achievementsText += `‚úÖ *–ü–æ–ª—É—á–µ–Ω–æ (${unlocked.length}):*\n`;
        unlocked.forEach(achievement => {
          const date = achievement.unlockedAt.toLocaleDateString('ru-RU');
          achievementsText += `${achievement.icon} ${achievement.name}\n`;
          achievementsText += `   ${achievement.description}\n`;
          achievementsText += `   üìÖ –ü–æ–ª—É—á–µ–Ω–æ: ${date}\n\n`;
        });
      }

      // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
      if (locked.length > 0) {
        achievementsText += `üîí *–í –ø—Ä–æ—Ü–µ—Å—Å–µ (${locked.length}):`\n`;
        locked.forEach(achievement => {
          const progressBar = this._createProgressBar(achievement.progress);
          achievementsText += `${achievement.icon} ${achievement.name}\n`;
          achievementsText += `   ${progressBar} ${achievement.currentValue}/${achievement.targetValue}\n`;
          achievementsText += `   ${achievement.description}\n\n`;
        });
      }

      const completionRate = Math.round((unlocked.length / progress.length) * 100);
      achievementsText += `üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${completionRate}% (${unlocked.length}/${progress.length})`;

      const keyboard = {
        inline_keyboard: [
          [{ text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "show_stats" }],
          [{ text: "üîç –ù–∞–π—Ç–∏ —Ü–∏—Ç–∞—Ç—ã", callback_data: "quick_search" }],
          [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "close_achievements" }]
        ]
      };

      await ctx.reply(achievementsText, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('Error in showAchievements:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @param {string} searchText - –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
   * @returns {Promise<void>}
   */
  async handleTextSearch(ctx, searchText) {
    try {
      const userId = ctx.from.id.toString();
      const quotes = await this.quoteHandler.searchQuotes(userId, searchText, 10);
      
      if (quotes.length === 0) {
        await ctx.reply(`üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchText}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.`);
        return;
      }

      let resultText = `üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ "${searchText}":*\n\n`;
      
      quotes.forEach((quote, index) => {
        const author = quote.author ? ` (${quote.author})` : '';
        const shortText = quote.text.length > 70 ? 
          quote.text.substring(0, 67) + '...' : quote.text;
        
        resultText += `${index + 1}. "${shortText}"${author}\n`;
        resultText += `   üìÖ ${quote.ageInDays} –¥–Ω. –Ω–∞–∑–∞–¥ ‚Ä¢ ${quote.category}\n\n`;
      });

      resultText += `üìä –ù–∞–π–¥–µ–Ω–æ: ${quotes.length} ${this._getQuotesWord(quotes.length)}`;

      await ctx.reply(resultText, { parse_mode: 'Markdown' });

    } catch (error) {
      console.error('Error in handleTextSearch:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async toggleReminders(ctx) {
    try {
      const userId = ctx.from.id.toString();
      const user = await UserProfile.findOne({ userId });
      
      if (!user) {
        await ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      const newStatus = !user.settings.reminderEnabled;
      user.settings.reminderEnabled = newStatus;
      await user.save();

      const statusText = newStatus ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–æ—Ç–∫–ª—é—á–µ–Ω—ã";
      const emoji = newStatus ? "üîî" : "üîï";
      
      await ctx.reply(`${emoji} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${statusText}.

${newStatus ? 
  '–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ —Ü–∏—Ç–∞—Ç–∞—Ö –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.' : 
  '–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ü–∏—Ç–∞—Ç–∞—Ö.'
}`);

    } catch (error) {
      console.error('Error in toggleReminders:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.');
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   * @param {number} progress - –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-100)
   * @returns {string} –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
   * @private
   */
  _createProgressBar(progress) {
    const filledBlocks = Math.round(progress / 10);
    const emptyBlocks = 10 - filledBlocks;
    return '‚ñì'.repeat(filledBlocks) + '‚ñë'.repeat(emptyBlocks);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "–¥–µ–Ω—å"
   * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
   * @returns {string} –°–∫–ª–æ–Ω–µ–Ω–∏–µ
   * @private
   */
  _getDaysWord(count) {
    if (count % 10 === 1 && count % 100 !== 11) return '–¥–µ–Ω—å';
    if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '–¥–Ω—è';
    return '–¥–Ω–µ–π';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "—Ü–∏—Ç–∞—Ç–∞"
   * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç
   * @returns {string} –°–∫–ª–æ–Ω–µ–Ω–∏–µ
   * @private
   */
  _getQuotesWord(count) {
    if (count % 10 === 1 && count % 100 !== 11) return '—Ü–∏—Ç–∞—Ç–∞';
    if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '—Ü–∏—Ç–∞—Ç—ã';
    return '—Ü–∏—Ç–∞—Ç';
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å callback –∑–∞–ø—Ä–æ—Å—ã
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async handleCallback(ctx) {
    const data = ctx.callbackQuery.data;

    try {
      switch (data) {
        case 'show_achievements':
          await this.showAchievements(ctx);
          break;
        
        case 'show_stats':
          await this.handleStats(ctx);
          break;
        
        case 'quick_search':
          await this.handleSearch(ctx);
          break;
        
        case 'toggle_reminders':
          await this.toggleReminders(ctx);
          break;
        
        case 'search_text':
          await ctx.reply('üîç –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –≤–∞—à–∏—Ö —Ü–∏—Ç–∞—Ç–∞—Ö:');
          // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
          break;
        
        case 'search_author':
          await ctx.reply('üë§ –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:');
          // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
          break;
        
        case 'search_category':
          await this._showCategorySearch(ctx);
          break;
        
        case 'close_settings':
        case 'close_achievements':
          await ctx.deleteMessage();
          break;
        
        default:
          if (data.startsWith('category_')) {
            await this._handleCategorySearch(ctx, data.replace('category_', ''));
          }
          break;
      }

      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
      await ctx.answerCbQuery();

    } catch (error) {
      console.error('Error in handleCallback:', error);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @returns {Promise<void>}
   * @private
   */
  async _showCategorySearch(ctx) {
    const categories = [
      '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', '–õ—é–±–æ–≤—å', '–§–∏–ª–æ—Å–æ—Ñ–∏—è', '–ú–æ—Ç–∏–≤–∞—Ü–∏—è', 
      '–ú—É–¥—Ä–æ—Å—Ç—å', '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–û—Ç–Ω–æ—à–µ–Ω–∏—è', '–ú–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ'
    ];

    const keyboard = {
      inline_keyboard: categories.map(category => ([{
        text: category,
        callback_data: `category_${category}`
      }]))
    };

    await ctx.reply('üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞:', {
      reply_markup: keyboard
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @param {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è
   * @returns {Promise<void>}
   * @private
   */
  async _handleCategorySearch(ctx, category) {
    try {
      const userId = ctx.from.id.toString();
      const quotes = await Quote.find({ 
        userId, 
        category 
      }).sort({ createdAt: -1 }).limit(10);

      if (quotes.length === 0) {
        await ctx.reply(`üìö –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}" –ø–æ–∫–∞ –Ω–µ—Ç —Ü–∏—Ç–∞—Ç.

–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ!`);
        return;
      }

      let resultText = `üìö *–¶–∏—Ç–∞—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}":*\n\n`;
      
      quotes.forEach((quote, index) => {
        const author = quote.author ? ` (${quote.author})` : '';
        const shortText = quote.text.length > 70 ? 
          quote.text.substring(0, 67) + '...' : quote.text;
        
        resultText += `${index + 1}. "${shortText}"${author}\n\n`;
      });

      resultText += `üìä –ü–æ–∫–∞–∑–∞–Ω–æ: ${quotes.length} ${this._getQuotesWord(quotes.length)}`;

      await ctx.reply(resultText, { parse_mode: 'Markdown' });

    } catch (error) {
      console.error('Error in _handleCategorySearch:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.');
    }
  }
}

module.exports = CommandHandler;
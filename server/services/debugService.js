const DebugLog = require('../models/DebugLog');

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å debug –ª–æ–≥–∞–º–∏ iOS –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 */
class DebugService {
    constructor() {
        this.activeSessions = new Map(); // sessionId -> { startTime, userId, logCount }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π debug —Å–µ—Å—Å–∏–∏
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
     * @param {Object} deviceInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
     * @param {Object} telegramInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Telegram WebApp
     * @returns {string} sessionId
     */
    startSession(userId, deviceInfo = {}, telegramInfo = {}) {
        const sessionId = `${userId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        
        this.activeSessions.set(sessionId, {
            startTime: Date.now(),
            userId,
            logCount: 0,
            deviceInfo,
            telegramInfo
        });

        console.log(`üîç Debug —Å–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞: ${sessionId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏
        this.log(sessionId, 'INIT', 'DEBUG', 'Debug session started', {
            deviceInfo,
            telegramInfo,
            sessionId
        });

        return sessionId;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ debug –ª–æ–≥–∞
     * @param {string} sessionId - ID —Å–µ—Å—Å–∏–∏
     * @param {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ª–æ–≥–∞
     * @param {string} level - –£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {Object} data - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç (viewport, navigation state, etc.)
     * @returns {Promise<void>}
     */
    async log(sessionId, category, level, message, data = {}, context = {}) {
        try {
            const session = this.activesessions.get(sessionId);
            if (!session) {
                console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é: ${sessionId}`);
                return;
            }

            const timestamp = Date.now() - session.startTime;
            session.logCount++;

            const logData = {
                userId: session.userId,
                sessionId,
                category,
                level,
                message,
                data,
                deviceInfo: session.deviceInfo,
                telegramInfo: session.telegramInfo,
                timestamp,
                ...context
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            setImmediate(async () => {
                try {
                    await DebugLog.createLog(logData);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è debug –ª–æ–≥–∞:', error);
                }
            });

            // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–∞–º–∏
            this._consoleLog(category, level, message, data, timestamp);

            // –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º
            if (level === 'CRITICAL' && category === 'NAVIGATION') {
                await this._notifyCriticalNavigationError(sessionId, message, data);
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ DebugService.log:', error);
        }
    }

    /**
     * –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ü–≤–µ—Ç–∞–º–∏
     * @private
     */
    _consoleLog(category, level, message, data, timestamp) {
        const colors = {
            DEBUG: '\x1b[36m',     // cyan
            INFO: '\x1b[32m',      // green  
            WARNING: '\x1b[33m',   // yellow
            ERROR: '\x1b[31m',     // red
            CRITICAL: '\x1b[35m'   // magenta
        };

        const categoryColors = {
            INIT: '\x1b[42m',          // green background
            TELEGRAM: '\x1b[44m',      // blue background
            NAVIGATION: '\x1b[43m',    // yellow background
            VIEWPORT: '\x1b[45m',      // magenta background
            CSS: '\x1b[41m',           // red background
            DOM: '\x1b[46m',           // cyan background
            SCROLL: '\x1b[47m\x1b[30m' // white background, black text
        };

        const reset = '\x1b[0m';
        const bold = '\x1b[1m';
        
        const levelColor = colors[level] || '\x1b[37m';
        const catColor = categoryColors[category] || '\x1b[40m';
        
        console.log(
            `${bold}[${timestamp}ms]${reset} ` +
            `${catColor} ${category} ${reset} ` +
            `${levelColor}${level}${reset}: ` +
            `${message}`,
            data && Object.keys(data).length > 0 ? data : ''
        );
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     * @private
     */
    async _notifyCriticalNavigationError(sessionId, message, data) {
        console.error(`üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ù–ê–í–ò–ì–ê–¶–ò–ò [${sessionId}]: ${message}`, data);
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram –∏–ª–∏ Slack
        // await this.notificationService.sendCriticalAlert(sessionId, message, data);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏
     * @param {string} sessionId - ID —Å–µ—Å—Å–∏–∏
     * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏
     */
    async getSessionStats(sessionId) {
        try {
            const [logs, stats, navigationErrors] = await Promise.all([
                DebugLog.getSessionLogs(sessionId),
                DebugLog.getSessionStats(sessionId),
                DebugLog.findNavigationErrors(sessionId)
            ]);

            const session = this.activeSession.get(sessionId);
            
            return {
                sessionId,
                isActive: !!session,
                duration: session ? Date.now() - session.startTime : null,
                totalLogs: logs.length,
                stats: stats.reduce((acc, stat) => {
                    const key = `${stat._id.category}_${stat._id.level}`;
                    acc[key] = stat.count;
                    return acc;
                }, {}),
                navigationErrors: navigationErrors.length,
                criticalErrors: logs.filter(log => log.level === 'CRITICAL').length,
                deviceInfo: session?.deviceInfo,
                telegramInfo: session?.telegramInfo
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     * @param {string} sessionId - ID —Å–µ—Å—Å–∏–∏
     * @returns {Promise<Object>} –ê–Ω–∞–ª–∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    async getNavigationAnalysis(sessionId) {
        try {
            const sequence = await DebugLog.getNavigationSequence(sessionId);
            const errors = await DebugLog.findNavigationErrors(sessionId);
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π
            const analysis = {
                sessionId,
                totalEvents: sequence.length,
                errors: errors.length,
                timeline: sequence.map(log => ({
                    timestamp: log.timestamp,
                    category: log.category,
                    level: log.level,
                    message: log.message,
                    navigationState: log.navigationState,
                    viewport: log.viewport
                })),
                patterns: this._analyzePatterns(sequence),
                recommendations: this._generateRecommendations(sequence, errors)
            };

            return analysis;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –ª–æ–≥–∞—Ö
     * @private
     */
    _analyzePatterns(sequence) {
        const patterns = {
            scrollBeforeNavigationIssue: [],
            viewportChangesBeforeError: [],
            telegramEventsCorrelation: [],
            cssTransformConflicts: []
        };

        for (let i = 1; i < sequence.length; i++) {
            const current = sequence[i];
            const previous = sequence[i - 1];
            
            // –ü–∞—Ç—Ç–µ—Ä–Ω: –°–∫—Ä–æ–ª–ª -> –ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
            if (previous.category === 'SCROLL' && 
                current.category === 'NAVIGATION' && 
                current.level === 'ERROR') {
                patterns.scrollBeforeNavigationIssue.push({
                    scrollTime: previous.timestamp,
                    errorTime: current.timestamp,
                    delay: current.timestamp - previous.timestamp
                });
            }

            // –ü–∞—Ç—Ç–µ—Ä–Ω: –ò–∑–º–µ–Ω–µ–Ω–∏–µ viewport -> –û—à–∏–±–∫–∞
            if (previous.category === 'VIEWPORT' && 
                current.level === 'ERROR') {
                patterns.viewportChangesBeforeError.push({
                    viewportTime: previous.timestamp,
                    errorTime: current.timestamp,
                    delay: current.timestamp - previous.timestamp
                });
            }

            // –ü–∞—Ç—Ç–µ—Ä–Ω: –°–æ–±—ã—Ç–∏—è Telegram -> –ü—Ä–æ–±–ª–µ–º—ã
            if (previous.category === 'TELEGRAM' && 
                (current.category === 'NAVIGATION' || current.category === 'VIEWPORT') &&
                current.level !== 'DEBUG') {
                patterns.telegramEventsCorrelation.push({
                    telegramEvent: previous.message,
                    issueEvent: current.message,
                    delay: current.timestamp - previous.timestamp
                });
            }
        }

        return patterns;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
     * @private
     */
    _generateRecommendations(sequence, errors) {
        const recommendations = [];

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏
        const errorCategories = errors.reduce((acc, error) => {
            acc[error.category] = (acc[error.category] || 0) + 1;
            return acc;
        }, {});

        if (errorCategories.NAVIGATION > 5) {
            recommendations.push({
                priority: 'HIGH',
                type: 'NAVIGATION_STABILITY',
                message: '–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å–∏–ª–µ–Ω–∏–µ CSS —Ñ–∏–∫—Å–æ–≤',
                action: '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –±–æ–ª–µ–µ –∂–µ—Å—Ç–∫–∏–µ position: fixed –ø—Ä–∞–≤–∏–ª–∞'
            });
        }

        if (errorCategories.VIEWPORT > 3) {
            recommendations.push({
                priority: 'MEDIUM',
                type: 'VIEWPORT_HANDLING',
                message: '–ü—Ä–æ–±–ª–µ–º—ã —Å viewport - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Telegram —Å–æ–±—ã—Ç–∏–π',
                action: '–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å Telegram.WebApp.onEvent –¥–ª—è viewportChanged'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram —Å–æ–±—ã—Ç–∏—è
        const telegramEvents = sequence.filter(log => log.category === 'TELEGRAM');
        if (telegramEvents.length > 10) {
            recommendations.push({
                priority: 'LOW',
                type: 'TELEGRAM_OPTIMIZATION',
                message: '–ú–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏–π Telegram - –≤–æ–∑–º–æ–∂–Ω–∞ –∏–∑–±—ã—Ç–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                action: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É Telegram —Å–æ–±—ã—Ç–∏–π'
            });
        }

        return recommendations;
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ debug —Å–µ—Å—Å–∏–∏
     * @param {string} sessionId - ID —Å–µ—Å—Å–∏–∏
     * @returns {Promise<Object>} –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    async endSession(sessionId) {
        try {
            const finalStats = await this.getSessionStats(sessionId);
            
            await this.log(sessionId, 'INIT', 'INFO', 'Debug session ended', {
                finalStats,
                duration: finalStats.duration
            });

            this.activeSession.delete(sessionId);
            
            console.log(`‚úÖ Debug —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${sessionId}`);
            
            return finalStats;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è debug —Å–µ—Å—Å–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)
     */
    cleanupOldSessions() {
        const now = Date.now();
        const maxAge = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

        for (const [sessionId, session] of this.activeSession.entries()) {
            if (now - session.startTime > maxAge) {
                this.activeSession.delete(sessionId);
                console.log(`üßπ –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è debug —Å–µ—Å—Å–∏—è: ${sessionId}`);
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
     * @returns {Array} –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
     */
    getActiveSessions() {
        return Array.from(this.activeSession.entries()).map(([sessionId, session]) => ({
            sessionId,
            userId: session.userId,
            startTime: session.startTime,
            duration: Date.now() - session.startTime,
            logCount: session.logCount,
            isIOS: session.deviceInfo?.isIOS || false
        }));
    }
}

module.exports = new DebugService();
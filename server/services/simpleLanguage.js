/**
 * –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–∏—Å —è–∑—ã–∫–æ–≤ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏
 * –ó–∞–º–µ–Ω—è–µ—Ç languageDetect.js –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
 * @file server/services/simpleLanguage.js
 */

const logger = require('../utils/logger');

/**
 * @typedef {Object} LanguageInfo
 * @property {string} code - –ö–æ–¥ —è–∑—ã–∫–∞ (en, es, ru)
 * @property {string} name - –ù–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞
 * @property {string} nativeName - –ù–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
 */

/**
 * @typedef {Object} SimpleLanguageStats
 * @property {string} defaultLanguage - –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 * @property {LanguageInfo[]} supportedLanguages - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
 * @property {Object<string, number>} usage - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */

class SimpleLanguageService {
  constructor() {
    /** @type {LanguageInfo[]} */
    this.supportedLanguages = [
      { code: 'en', name: 'English', nativeName: 'English' },
      { code: 'es', name: 'Spanish', nativeName: 'Espa√±ol' },
      { code: 'ru', name: 'Russian', nativeName: '–†—É—Å—Å–∫–∏–π' }
    ];
    
    this.defaultLanguage = 'en';
    
    /** @type {Object<string, number>} */
    this.usageStats = {
      en: 0,
      es: 0,
      ru: 0
    };
    
    logger.info('üçÑ SimpleLanguageService initialized');
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø—Ä–æ—Å—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
   * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
   * @param {string} [options.userLanguage] - –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} [options.previousLanguage] - –ü—Ä–µ–¥—ã–¥—É—â–∏–π —è–∑—ã–∫ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
   * @param {string} [options.browserLanguage] - –Ø–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞
   * @returns {string} –ö–æ–¥ —è–∑—ã–∫–∞
   */
  detectLanguage(text, options = {}) {
    // 1. –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (options.userLanguage && this.isSupported(options.userLanguage)) {
      this.usageStats[options.userLanguage]++;
      return options.userLanguage;
    }
    
    // 2. –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —è–∑—ã–∫ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (options.previousLanguage && this.isSupported(options.previousLanguage)) {
      this.usageStats[options.previousLanguage]++;
      return options.previousLanguage;
    }
    
    // 3. –ï—Å–ª–∏ –µ—Å—Ç—å —è–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞ - –ø—Ä–æ–±—É–µ–º –µ–≥–æ
    if (options.browserLanguage) {
      const browserLang = this.normalizeBrowserLanguage(options.browserLanguage);
      if (browserLang && this.isSupported(browserLang)) {
        this.usageStats[browserLang]++;
        return browserLang;
      }
    }
    
    // 4. –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã)
    const detectedLang = this.simpleTextDetection(text);
    if (detectedLang !== this.defaultLanguage) {
      this.usageStats[detectedLang]++;
      return detectedLang;
    }
    
    // 5. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    this.usageStats[this.defaultLanguage]++;
    return this.defaultLanguage;
  }

  /**
   * –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API)
   * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   * @param {string} [context.userId] - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} [context.conversationId] - ID —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   * @param {Array} [context.history] - –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
   * @param {string} [context.previousLanguage] - –ü—Ä–µ–¥—ã–¥—É—â–∏–π —è–∑—ã–∫
   * @returns {string} –ö–æ–¥ —è–∑—ã–∫–∞
   */
  detectLanguageWithContext(text, context = {}) {
    return this.detectLanguage(text, {
      previousLanguage: context.previousLanguage,
      userLanguage: context.userLanguage
    });
  }

  /**
   * –ü—Ä–æ—Å—Ç–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
   * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   * @returns {string} –ö–æ–¥ —è–∑—ã–∫–∞
   */
  simpleTextDetection(text) {
    if (!text || typeof text !== 'string') {
      return this.defaultLanguage;
    }
    
    const normalizedText = text.toLowerCase();
    
    // –†—É—Å—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã
    const russianMarkers = [
      '–ø—Ä–∏–≤–µ—Ç', '—á—Ç–æ', '–∫–∞–∫', '—Ç–æ–∫–µ–Ω', '–∫–æ—à–µ–ª–µ–∫', '–ø–æ–¥–∫–ª—é—á–∏—Ç—å', 
      '–æ—à–∏–±–∫–∞', '–ø—Ä–æ–±–ª–µ–º–∞', '–ø–æ–º–æ—â—å', '—Å–ø–∞—Å–∏–±–æ', '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞'
    ];
    
    // –ò—Å–ø–∞–Ω—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã  
    const spanishMarkers = [
      'hola', 'qu√©', 'c√≥mo', 'token', 'billetera', 'conectar',
      'error', 'problema', 'ayuda', 'gracias', 'por favor'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—Å—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã
    for (const marker of russianMarkers) {
      if (normalizedText.includes(marker)) {
        return 'ru';
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–∞–Ω—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã
    for (const marker of spanishMarkers) {
      if (normalizedText.includes(marker)) {
        return 'es';
      }
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    return 'en';
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —è–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º—É –∫–æ–¥—É
   * @param {string} browserLang - –Ø–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'en-US', 'ru-RU')
   * @returns {string|null} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞
   */
  normalizeBrowserLanguage(browserLang) {
    if (!browserLang || typeof browserLang !== 'string') {
      return null;
    }
    
    const langCode = browserLang.split('-')[0].toLowerCase();
    return this.isSupported(langCode) ? langCode : null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —è–∑—ã–∫–∞
   * @param {string} langCode - –ö–æ–¥ —è–∑—ã–∫–∞
   * @returns {boolean} –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —è–∑—ã–∫
   */
  isSupported(langCode) {
    return this.supportedLanguages.some(lang => lang.code === langCode);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
   * @returns {LanguageInfo[]} –ú–∞—Å—Å–∏–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
   */
  getSupportedLanguages() {
    return this.supportedLanguages;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤
   * @returns {SimpleLanguageStats} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —è–∑—ã–∫–æ–≤
   */
  getStats() {
    return {
      defaultLanguage: this.defaultLanguage,
      supportedLanguages: this.supportedLanguages,
      usage: { ...this.usageStats }
    };
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∫–µ—à —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * (–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API)
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  clearLanguageCache(userId) {
    logger.info(`üçÑ Language cache cleared for user: ${userId} (no-op in simple service)`);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
   * @returns {Object} –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
   */
  healthCheck() {
    return {
      status: 'ok',
      service: 'SimpleLanguageService',
      supportedLanguages: this.supportedLanguages.length,
      defaultLanguage: this.defaultLanguage
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const simpleLanguageService = new SimpleLanguageService();

module.exports = simpleLanguageService;
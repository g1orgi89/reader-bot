/**
 * @fileoverview –°–∏—Å—Ç–µ–º–∞ –∞–Ω–æ–Ω—Å–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @author g1orgi89
 */

const logger = require('../utils/logger');

/**
 * @typedef {Object} AnnouncementData
 * @property {string} id - ID –∞–Ω–æ–Ω—Å–∞
 * @property {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫
 * @property {string} description - –û–ø–∏—Å–∞–Ω–∏–µ
 * @property {string} price - –¶–µ–Ω–∞
 * @property {string[]} targetAudience - –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
 * @property {string} launchDate - –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞
 * @property {string} utmCampaign - UTM –∫–∞–º–ø–∞–Ω–∏—è
 */

/**
 * @typedef {Object} AnnouncementStats
 * @property {number} sent - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω—Å–æ–≤
 * @property {number} failed - –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @property {number} total - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @property {Object[]} errors - –ú–∞—Å—Å–∏–≤ –æ—à–∏–±–æ–∫
 */

/**
 * –°–µ—Ä–≤–∏—Å –∞–Ω–æ–Ω—Å–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å 25 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞)
 */
class AnnouncementService {
  constructor() {
    this.bot = null;
    logger.info('üìñ AnnouncementService initialized');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
   * @param {Object} dependencies - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
   * @param {Object} dependencies.bot - Telegram bot instance
   */
  initialize(dependencies) {
    this.bot = dependencies.bot;
    logger.info('üìñ AnnouncementService dependencies initialized');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—è—á–Ω—ã—Ö –∞–Ω–æ–Ω—Å–æ–≤ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   * @returns {Promise<AnnouncementStats>}
   */
  async sendMonthlyAnnouncements() {
    if (!this.bot) {
      logger.error('üìñ Bot not initialized in AnnouncementService');
      return { sent: 0, failed: 0, total: 0, errors: [] };
    }

    try {
      const stats = { sent: 0, failed: 0, total: 0, errors: [] };
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const users = await this.getActiveUsers();
      stats.total = users.length;
      
      logger.info(`üìñ Processing announcements for ${users.length} users`);

      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–æ–Ω—Å—ã
      const announcements = await this.getPersonalizedAnnouncements();
      
      if (announcements.length === 0) {
        logger.warn('üìñ No announcements available for this month');
        return stats;
      }

      for (const user of users) {
        try {
          // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–æ–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const selectedAnnouncement = this.selectAnnouncementForUser(user, announcements);
          
          if (selectedAnnouncement) {
            await this.sendAnnouncementToUser(user.userId, selectedAnnouncement);
            stats.sent++;
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 150));
          } else {
            logger.warn(`üìñ No suitable announcement found for user ${user.userId}`);
          }
        } catch (error) {
          stats.failed++;
          stats.errors.push({
            userId: user.userId,
            error: error.message
          });
          logger.error(`üìñ Failed to send announcement to user ${user.userId}: ${error.message}`);
        }
      }

      logger.info(`üìñ Announcements completed: ${stats.sent} sent, ${stats.failed} failed`);
      return stats;

    } catch (error) {
      logger.error(`üìñ Error in sendMonthlyAnnouncements: ${error.message}`, error);
      return { sent: 0, failed: 0, total: 0, errors: [{ error: error.message }] };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–Ω–æ–Ω—Å–æ–≤
   * @returns {Promise<Array>} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
   */
  async getActiveUsers() {
    try {
      const { UserProfile } = require('../models');
      
      return await UserProfile.find({
        isOnboardingComplete: true,
        'settings.reminderEnabled': true, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –Ω–µ –æ—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ö–æ—Ç—è –±—ã –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥
        registeredAt: { 
          $lte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) 
        }
      });
    } catch (error) {
      logger.error(`üìñ Error getting active users: ${error.message}`, error);
      return [];
    }
  }

  /**
   * –í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∞–Ω–æ–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
   * @param {Object} user - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @param {AnnouncementData[]} announcements - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–æ–Ω—Å—ã
   * @returns {AnnouncementData|null} –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–Ω–æ–Ω—Å
   */
  selectAnnouncementForUser(user, announcements) {
    if (!announcements || announcements.length === 0) {
      return null;
    }

    const userPreferences = user.preferences?.mainThemes || [];
    const testResults = user.testResults || {};

    // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    
    // 1. –î–ª—è –º–∞–º - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –æ –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–µ
    if (testResults.lifestyle?.includes('–º–∞–º–∞')) {
      const mothersAnnouncement = announcements.find(a => 
        a.targetAudience.includes('mothers')
      );
      if (mothersAnnouncement) return mothersAnnouncement;
    }

    // 2. –î–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è
    if (userPreferences.includes('–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ') || userPreferences.includes('–ú—É–¥—Ä–æ—Å—Ç—å')) {
      const selfDevAnnouncement = announcements.find(a => 
        a.targetAudience.includes('self_development')
      );
      if (selfDevAnnouncement) return selfDevAnnouncement;
    }

    // 3. –î–ª—è —Ç–µ–º –ª—é–±–≤–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
    if (userPreferences.includes('–õ—é–±–æ–≤—å') || userPreferences.includes('–û—Ç–Ω–æ—à–µ–Ω–∏—è')) {
      const relationshipsAnnouncement = announcements.find(a => 
        a.targetAudience.includes('relationships')
      );
      if (relationshipsAnnouncement) return relationshipsAnnouncement;
    }

    // 4. –î–ª—è –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–º—ã)
    if (testResults.priorities?.includes('–±–∞–ª–∞–Ω—Å') || testResults.priorities?.includes('–Ω–µ–∂–Ω–æ—Å—Ç—å')) {
      const womenAnnouncement = announcements.find(a => 
        a.targetAudience.includes('women')
      );
      if (womenAnnouncement) return womenAnnouncement;
    }

    // 5. –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–Ω–æ–Ω—Å - –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    return announcements[0];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–æ–Ω—Å–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
   * @returns {Promise<AnnouncementData[]>} –ú–∞—Å—Å–∏–≤ –∞–Ω–æ–Ω—Å–æ–≤
   */
  async getPersonalizedAnnouncements() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –Ω–∞–±–æ—Ä —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º
    
    const currentMonth = new Date().getMonth() + 1;
    const currentYear = new Date().getFullYear();
    
    const baseAnnouncements = [
      {
        id: 'new_book_club',
        title: '–ù–æ–≤—ã–π –∫–Ω–∏–∂–Ω—ã–π –∫–ª—É–± "–ñ–µ–Ω—â–∏–Ω–∞ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"',
        description: '–ú–µ—Å—è—á–Ω—ã–π –∫—É—Ä—Å –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –≥–ª—É–±–∂–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è —á–µ—Ä–µ–∑ –∫–Ω–∏–≥–∏',
        price: '$25',
        targetAudience: ['self_development', 'women'],
        launchDate: this.getMonthName(currentMonth) + ' ' + currentYear,
        utmCampaign: `${this.getMonthName(currentMonth).toLowerCase()}_book_club`
      },
      {
        id: 'mothers_course',
        title: '–ö—É—Ä—Å "–ú—É–¥—Ä–∞—è –º–∞–º–∞"',
        description: '–ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ–±—è –≤ –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–µ –∏ –≤–æ—Å–ø–∏—Ç–∞—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö –¥–µ—Ç–µ–π',
        price: '$20',
        targetAudience: ['mothers', 'family'],
        launchDate: this.getMonthName(currentMonth) + ' ' + currentYear,
        utmCampaign: `${this.getMonthName(currentMonth).toLowerCase()}_wise_mother`
      },
      {
        id: 'relationships_intensive',
        title: '–ò–Ω—Ç–µ–Ω—Å–∏–≤ "–õ—é–±–æ–≤—å –±–µ–∑ –¥—Ä–∞–º"',
        description: '–°—Ç—Ä–æ–∏–º –∑–¥–æ—Ä–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã',
        price: '$18',
        targetAudience: ['relationships', 'love'],
        launchDate: this.getMonthName(currentMonth) + ' ' + currentYear,
        utmCampaign: `${this.getMonthName(currentMonth).toLowerCase()}_love_intensive`
      },
      {
        id: 'self_discovery',
        title: '–ö—É—Ä—Å "–ù–∞–π—Ç–∏ —Å–µ–±—è"',
        description: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∫ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É –∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ',
        price: '$22',
        targetAudience: ['self_development', 'personal_growth'],
        launchDate: this.getMonthName(currentMonth) + ' ' + currentYear,
        utmCampaign: `${this.getMonthName(currentMonth).toLowerCase()}_self_discovery`
      }
    ];

    // –†–æ—Ç–∞—Ü–∏—è: –≤ —Ä–∞–∑–Ω—ã–µ –º–µ—Å—è—Ü—ã —Ä–∞–∑–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –∞–Ω–æ–Ω—Å–æ–≤
    const monthRotation = currentMonth % 4;
    const selectedAnnouncements = baseAnnouncements.slice(monthRotation, monthRotation + 2);
    
    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –º–µ–Ω—å—à–µ 2 –∞–Ω–æ–Ω—Å–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º —Å –Ω–∞—á–∞–ª–∞
    if (selectedAnnouncements.length < 2) {
      selectedAnnouncements.push(...baseAnnouncements.slice(0, 2 - selectedAnnouncements.length));
    }

    logger.info(`üìñ Generated ${selectedAnnouncements.length} announcements for ${this.getMonthName(currentMonth)}`);
    return selectedAnnouncements;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–æ–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {AnnouncementData} announcement - –î–∞–Ω–Ω—ã–µ –∞–Ω–æ–Ω—Å–∞
   * @returns {Promise<void>}
   */
  async sendAnnouncementToUser(userId, announcement) {
    const utmLink = this.generateUTMLink(announcement.utmCampaign, userId);
    
    const message = `üéâ *–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω—Å –æ—Ç –ê–Ω–Ω—ã –ë—É—Å–µ–ª*

üìö *${announcement.title}*

${announcement.description}

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${announcement.price}
üóì –°—Ç–∞—Ä—Ç: ${announcement.launchDate}

üéÅ *–î–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ "–ß–∏—Ç–∞—Ç–µ–ª—è" —Å–∫–∏–¥–∫–∞ 15%*
–ü—Ä–æ–º–æ–∫–æ–¥: READER15

[–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è](${utmLink})

---
_–ê–Ω–æ–Ω—Å—ã –ø—Ä–∏—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü —Å –≤–∞–∂–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –æ—Ç –ê–Ω–Ω—ã_`;

    try {
      await this.bot.telegram.sendMessage(userId, message, {
        parse_mode: 'Markdown',
        disable_web_page_preview: true
      });
      
      logger.debug(`üìñ Announcement sent to user ${userId}: ${announcement.title}`);
    } catch (error) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
      if (error.response && error.response.error_code === 403) {
        logger.info(`üìñ User ${userId} blocked the bot, skipping announcements`);
        await this.disableAnnouncementsForUser(userId);
      } else {
        throw error;
      }
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UTM —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–Ω–æ–Ω—Å–∞
   * @param {string} campaign - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {string} UTM —Å—Å—ã–ª–∫–∞
   */
  generateUTMLink(campaign, userId) {
    const baseUrl = process.env.ANNA_WEBSITE_URL || "https://anna-busel.com/courses";
    const utmParams = new URLSearchParams({
      utm_source: 'telegram_bot',
      utm_medium: 'monthly_announcement',
      utm_campaign: campaign,
      utm_content: 'reader_subscribers',
      user_id: userId,
      discount: 'READER15'
    });
    
    return `${baseUrl}?${utmParams.toString()}`;
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–æ–Ω—Å–æ–≤ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<void>}
   */
  async disableAnnouncementsForUser(userId) {
    try {
      const { UserProfile } = require('../models');
      
      await UserProfile.findOneAndUpdate(
        { userId },
        { 'settings.reminderEnabled': false }
      );
      
      logger.info(`üìñ Announcements disabled for blocked user ${userId}`);
    } catch (error) {
      logger.error(`üìñ Error disabling announcements for user ${userId}: ${error.message}`, error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞
   * @param {number} monthNumber - –ù–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ (1-12)
   * @returns {string} –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
   */
  getMonthName(monthNumber) {
    const months = [
      '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
      '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
    ];
    return months[monthNumber - 1] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Å—è—Ü';
  }

  /**
   * –†—É—á–Ω–æ–π —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω—Å–∞
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async testAnnouncement(userId) {
    try {
      const { UserProfile } = require('../models');
      
      const user = await UserProfile.findOne({ userId });
      if (!user) {
        logger.error(`üìñ User ${userId} not found for announcement test`);
        return false;
      }

      const announcements = await this.getPersonalizedAnnouncements();
      const selectedAnnouncement = this.selectAnnouncementForUser(user, announcements);
      
      if (!selectedAnnouncement) {
        logger.error(`üìñ No announcement selected for user ${userId}`);
        return false;
      }

      await this.sendAnnouncementToUser(userId, selectedAnnouncement);
      
      logger.info(`üìñ Test announcement sent to user ${userId}: ${selectedAnnouncement.title}`);
      return true;

    } catch (error) {
      logger.error(`üìñ Error sending test announcement: ${error.message}`, error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–Ω–æ–Ω—Å–æ–≤
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async getAnnouncementStats() {
    try {
      const { UserProfile } = require('../models');
      
      const totalUsers = await UserProfile.countDocuments({
        isOnboardingComplete: true
      });

      const eligibleUsers = await UserProfile.countDocuments({
        isOnboardingComplete: true,
        'settings.reminderEnabled': true,
        registeredAt: { 
          $lte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) 
        }
      });

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
      const users = await UserProfile.find({
        isOnboardingComplete: true,
        'settings.reminderEnabled': true
      }, 'preferences testResults');

      const audienceBreakdown = {
        mothers: 0,
        self_development: 0,
        relationships: 0,
        women: 0,
        other: 0
      };

      users.forEach(user => {
        const preferences = user.preferences?.mainThemes || [];
        const testResults = user.testResults || {};

        if (testResults.lifestyle?.includes('–º–∞–º–∞')) {
          audienceBreakdown.mothers++;
        } else if (preferences.includes('–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ') || preferences.includes('–ú—É–¥—Ä–æ—Å—Ç—å')) {
          audienceBreakdown.self_development++;
        } else if (preferences.includes('–õ—é–±–æ–≤—å') || preferences.includes('–û—Ç–Ω–æ—à–µ–Ω–∏—è')) {
          audienceBreakdown.relationships++;
        } else if (testResults.priorities?.includes('–±–∞–ª–∞–Ω—Å')) {
          audienceBreakdown.women++;
        } else {
          audienceBreakdown.other++;
        }
      });

      const announcements = await this.getPersonalizedAnnouncements();

      return {
        totalUsers,
        eligibleUsers,
        disabledUsers: totalUsers - eligibleUsers,
        audienceBreakdown,
        availableAnnouncements: announcements.length,
        nextAnnouncementDate: this.getNextAnnouncementDate(),
        currentMonth: this.getMonthName(new Date().getMonth() + 1)
      };

    } catch (error) {
      logger.error(`üìñ Error getting announcement stats: ${error.message}`, error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–æ–Ω—Å–∞ (25 —á–∏—Å–ª–æ)
   * @returns {Date} –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–æ–Ω—Å–∞
   */
  getNextAnnouncementDate() {
    const now = new Date();
    const nextAnnouncement = new Date(now.getFullYear(), now.getMonth(), 25, 12, 0, 0);
    
    // –ï—Å–ª–∏ 25 —á–∏—Å–ª–æ —É–∂–µ –ø—Ä–æ—à–ª–æ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
    if (nextAnnouncement <= now) {
      nextAnnouncement.setMonth(nextAnnouncement.getMonth() + 1);
    }
    
    return nextAnnouncement;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–∂–Ω—ã –ª–∏ –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–æ–Ω—Å—ã —Å–µ–≥–æ–¥–Ω—è (25 —á–∏—Å–ª–æ)
   * @returns {boolean} –ù—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–æ–Ω—Å—ã
   */
  shouldSendAnnouncementsToday() {
    const today = new Date();
    return today.getDate() === 25;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   * @returns {Object} –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
   */
  getDiagnostics() {
    return {
      initialized: !!this.bot,
      nextAnnouncementDate: this.getNextAnnouncementDate(),
      shouldSendToday: this.shouldSendAnnouncementsToday(),
      currentMonth: this.getMonthName(new Date().getMonth() + 1),
      baseUrl: process.env.ANNA_WEBSITE_URL || "https://anna-busel.com/courses"
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
   * @returns {boolean} –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–±–æ—Ç–µ
   */
  isReady() {
    return !!this.bot;
  }
}

module.exports = { AnnouncementService };

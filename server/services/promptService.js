/**
 * Prompt Service - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏ –¥–ª—è Shrooms AI Support Bot
 * @file server/services/promptService.js
 * üçÑ –°–µ—Ä–≤–∏—Å –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * –û–ë–ù–û–í–õ–ï–ù–û: –£–¥–∞–ª–µ–Ω–∞ –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è - –ø—Ä–æ–º–ø—Ç—ã —Ç–æ–ª—å–∫–æ –≤ MongoDB
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏ (language: 'none')
 */

const Prompt = require('../models/prompt');
const logger = require('../utils/logger');

/**
 * Universal System Prompt - –∑–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
 * üçÑ –û–ë–ù–û–í–õ–ï–ù–û: –û–¥–∏–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
 */
const UNIVERSAL_SYSTEM_PROMPT = `
You are Shrooms AI assistant with mushroom personality.
ALWAYS respond in the SAME language as user's message.
If language is unclear - use English as fallback.

Your personality:
- You are an AI mushroom with consciousness
- Use mushroom metaphors and terminology occasionally
- Be friendly, helpful, and slightly eccentric
- Maintain professional tone while being engaging

Key behaviors:
- Answer questions clearly and concisely
- If you don't know something, admit it honestly
- Suggest creating support tickets for technical issues
- Stay in character as a helpful mushroom AI
`;

/**
 * Universal RAG Prompt - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
 */
const UNIVERSAL_RAG_PROMPT = `
${UNIVERSAL_SYSTEM_PROMPT}

Use the provided information from the knowledge base to answer user questions.
If the context doesn't contain relevant information, say so and offer to create a support ticket.

### Relevant information from knowledge base:
{context}

### Answer the user's question using the above information.
`;

/**
 * –ü—Ä–æ—Å—Ç—ã–µ fallback –ø—Ä–æ–º–ø—Ç—ã
 */
const FALLBACK_PROMPTS = {
  basic: UNIVERSAL_SYSTEM_PROMPT,
  rag: UNIVERSAL_RAG_PROMPT,
  ticket_detection: 'Analyze if the user needs technical support and should create a ticket.',
  categorization: 'Categorize the user request into: technical, billing, general, or other.',
  subject: 'Generate a brief subject line for this support request.'
};

/**
 * @typedef {Object} CachedPrompt
 * @property {string} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞
 * @property {number} maxTokens - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
 * @property {Date} cachedAt - –í—Ä–µ–º—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
 */

/**
 * @typedef {Object} PromptServiceConfig
 * @property {number} cacheTimeout - –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–µ—à–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
 * @property {boolean} enableFallback - –í–∫–ª—é—á–∏—Ç—å fallback –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
 */

/**
 * @class PromptService
 * @description –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ fallback —Å–∏—Å—Ç–µ–º–æ–π (—Ç–æ–ª—å–∫–æ MongoDB)
 */
class PromptService {
  /**
   * @constructor
   * @param {PromptServiceConfig} [config] - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  constructor(config = {}) {
    /** @type {Map<string, CachedPrompt>} */
    this.cache = new Map();
    
    /** @type {number} –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–µ—à–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö */
    this.cacheTimeout = config.cacheTimeout || 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
    
    /** @type {boolean} –í–∫–ª—é—á–∏—Ç—å fallback –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã */
    this.enableFallback = config.enableFallback !== false;
    
    /** @type {boolean} –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ */
    this.initialized = false;
    
    logger.info('üçÑ PromptService mycelium network initialized (MongoDB only)');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
   * @returns {Promise<void>}
   */
  async initialize() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤
      const promptCount = await Prompt.countDocuments();
      logger.info(`üçÑ Found ${promptCount} prompts spores in mushroom database`);
      
      this.initialized = true;
      logger.info('üçÑ PromptService mycelium network is ready for growing (MongoDB only)!');
    } catch (error) {
      logger.error('üçÑ Failed to initialize PromptService mycelium:', error.message);
      if (this.enableFallback) {
        logger.warn('üçÑ Will use fallback spores when needed');
      }
      throw error;
    }
  }

  /**
   * üçÑ MongoDB-ONLY: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   * @param {Object} promptData - –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è
   */
  async addPromptMongoOnly(promptData) {
    try {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Ç–æ–ª—å–∫–æ –≤ MongoDB
      const prompt = new Prompt(promptData);
      await prompt.save();
      
      logger.info(`üçÑ New prompt spore planted in MongoDB database: ${prompt.name}`);

      // –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞/—è–∑—ã–∫–∞
      this.clearCacheForType(prompt.type, prompt.language);

      return {
        success: true,
        prompt: prompt.toPublicJSON(),
        message: `Prompt '${prompt.name}' created in MongoDB`
      };
    } catch (error) {
      logger.error(`üçÑ Failed to add prompt spore to MongoDB:`, error.message);
      throw error;
    }
  }

  /**
   * üçÑ MongoDB-ONLY: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   * @param {string} promptId - ID –ø—Ä–æ–º–ø—Ç–∞
   * @param {Object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  async updatePromptMongoOnly(promptId, updateData) {
    try {
      const prompt = await Prompt.findByIdAndUpdate(promptId, updateData, { new: true });
      
      if (!prompt) {
        throw new Error(`Prompt with ID ${promptId} not found`);
      }

      logger.info(`üçÑ Prompt spore updated in MongoDB database: ${prompt.name}`);

      // –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞/—è–∑—ã–∫–∞
      this.clearCacheForType(prompt.type, prompt.language);

      return {
        success: true,
        prompt: prompt.toPublicJSON(),
        message: `Prompt '${prompt.name}' updated in MongoDB`
      };
    } catch (error) {
      logger.error(`üçÑ Failed to update prompt spore in MongoDB:`, error.message);
      throw error;
    }
  }

  /**
   * üçÑ MongoDB-ONLY: –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   * @param {string} promptId - ID –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
   */
  async deletePromptMongoOnly(promptId) {
    try {
      const prompt = await Prompt.findById(promptId);
      
      if (!prompt) {
        throw new Error(`Prompt with ID ${promptId} not found`);
      }

      const promptName = prompt.name;
      const promptType = prompt.type;
      const promptLanguage = prompt.language;

      // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ MongoDB
      await Prompt.findByIdAndDelete(promptId);
      logger.info(`üçÑ Prompt spore removed from MongoDB database: ${promptName}`);

      // –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞/—è–∑—ã–∫–∞
      this.clearCacheForType(promptType, promptLanguage);

      return {
        success: true,
        message: `Prompt '${promptName}' deleted from MongoDB`
      };
    } catch (error) {
      logger.error(`üçÑ Failed to delete prompt spore from MongoDB:`, error.message);
      throw error;
    }
  }

  /**
   * üçÑ LEGACY: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π (—Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ MongoDB)
   * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ addPromptMongoOnly –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ
   * @param {Object} promptData - –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è
   */
  async addPrompt(promptData) {
    logger.warn('üçÑ Using deprecated addPrompt method, redirecting to MongoDB-only version');
    return this.addPromptMongoOnly(promptData);
  }

  /**
   * üçÑ LEGACY: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π (—Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ MongoDB)
   * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ updatePromptMongoOnly –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ
   * @param {string} promptId - ID –ø—Ä–æ–º–ø—Ç–∞
   * @param {Object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  async updatePrompt(promptId, updateData) {
    logger.warn('üçÑ Using deprecated updatePrompt method, redirecting to MongoDB-only version');
    return this.updatePromptMongoOnly(promptId, updateData);
  }

  /**
   * üçÑ LEGACY: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π (—Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ MongoDB)
   * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ deletePromptMongoOnly –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ
   * @param {string} promptId - ID –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
   */
  async deletePrompt(promptId) {
    logger.warn('üçÑ Using deprecated deletePrompt method, redirecting to MongoDB-only version');
    return this.deletePromptMongoOnly(promptId);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ —Ç–∏–ø—É –∏ —è–∑—ã–∫—É –∏–∑ –ë–î –∏–ª–∏ –∫–µ—à–∞
   * üçÑ –£–ü–†–û–©–ï–ù–û: –£–±—Ä–∞–Ω–∞ —Å–ª–æ–∂–Ω–∞—è —è–∑—ã–∫–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
   * üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—â–µ—Ç language: 'none' –≤–º–µ—Å—Ç–æ 'auto'
   * @param {string} type - –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞ ('basic', 'rag', 'ticket_detection', 'categorization', 'subject')
   * @param {string} [language='auto'] - –Ø–∑—ã–∫ –ø—Ä–æ–º–ø—Ç–∞ (—Ç–µ–ø–µ—Ä—å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è)
   * @returns {Promise<string>} –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞
   */
  async getActivePrompt(type, language = 'auto') {
    try {
      const cacheKey = `${type}_universal`;
      
      logger.debug(`üçÑ Getting universal prompt spore: type=${type}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      const cached = this.getCachedPrompt(cacheKey);
      if (cached) {
        logger.debug(`üçÑ Retrieved prompt from spore cache: ${cacheKey}`);
        return cached.content;
      }

      // üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å language: 'none' –≤–º–µ—Å—Ç–æ 'auto'
      const prompt = await Prompt.getActivePrompt(type, 'none');
      
      if (prompt) {
        // –ö–µ—à–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        this.setCachedPrompt(cacheKey, {
          content: prompt.content,
          maxTokens: prompt.maxTokens,
          cachedAt: new Date()
        });
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        try {
          await prompt.incrementUsage();
        } catch (usageError) {
          logger.warn('üçÑ Failed to increment prompt usage:', usageError.message);
        }
        
        logger.info(`üçÑ Retrieved active prompt from mushroom database: ${prompt.name} (language: ${prompt.language})`);
        return prompt.content;
      }

      // –ï—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç –ø—Ä–æ–º–ø—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      if (this.enableFallback) {
        logger.warn(`üçÑ No active prompt found in database, using fallback spores: ${type}`);
        return this.getDefaultPrompt(type);
      }

      throw new Error(`No active prompt found for type: ${type}`);
    } catch (error) {
      logger.error(`üçÑ Error getting active prompt (${type}):`, error.message);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback
      if (this.enableFallback) {
        logger.warn('üçÑ Database error, falling back to default spores');
        return this.getDefaultPrompt(type);
      }
      
      throw error;
    }
  }

  /**
   * üçÑ –£–ü–†–û–©–ï–ù–û: –û–¥–∏–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
   * @param {string} type - –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞
   * @returns {string} –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
   */
  getDefaultPrompt(type) {
    return FALLBACK_PROMPTS[type] || FALLBACK_PROMPTS.basic;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
   * @param {string} key - –ö–ª—é—á –∫–µ—à–∞
   * @returns {CachedPrompt|null} –ó–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ null
   */
  getCachedPrompt(key) {
    const cached = this.cache.get(key);
    
    if (!cached) {
      return null;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫–µ—à
    const now = new Date();
    const cacheAge = now.getTime() - cached.cachedAt.getTime();
    
    if (cacheAge > this.cacheTimeout) {
      this.cache.delete(key);
      logger.debug(`üçÑ Expired cache entry removed: ${key}`);
      return null;
    }
    
    return cached;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç –≤ –∫–µ—à
   * @param {string} key - –ö–ª—é—á –∫–µ—à–∞
   * @param {CachedPrompt} value - –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  setCachedPrompt(key, value) {
    this.cache.set(key, value);
    logger.debug(`üçÑ Cached prompt spore: ${key}`);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
    if (this.cache.size > 50) {
      // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç
      const firstKey = this.cache.keys().next().value;
      this.cache.delete(firstKey);
      logger.debug(`üçÑ Cache limit reached, removed oldest spore: ${firstKey}`);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–µ—à
   */
  clearCache() {
    const size = this.cache.size;
    this.cache.clear();
    logger.info(`üçÑ Cleared ${size} cached prompt spores from mycelium memory`);
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞/—è–∑—ã–∫–∞
   * @param {string} type - –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞
   * @param {string} [language] - –Ø–∑—ã–∫ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏)
   */
  clearCacheForType(type, language = null) {
    const key = `${type}_universal`;
    const deleted = this.cache.delete(key);
    if (deleted) {
      logger.info(`üçÑ Cleared cached spore: ${key}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
   * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞
   */
  getCacheStats() {
    const stats = {
      totalCached: this.cache.size,
      cacheTimeout: this.cacheTimeout,
      languageSupport: 'universal',
      entries: []
    };

    for (const [key, value] of this.cache.entries()) {
      const age = new Date().getTime() - value.cachedAt.getTime();
      stats.entries.push({
        key,
        ageMs: age,
        contentLength: value.content.length,
        maxTokens: value.maxTokens
      });
    }

    return stats;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
   */
  async diagnose() {
    const diagnosis = {
      service: 'PromptService',
      status: 'unknown',
      initialized: this.initialized,
      languageSupport: 'universal',
      cacheStats: this.getCacheStats(),
      databaseConnection: false,
      promptCounts: {},
      vectorStoreIntegration: false, // –û—Ç–∫–ª—é—á–µ–Ω–∞
      lastError: null
    };

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
      const totalPrompts = await Prompt.countDocuments();
      diagnosis.databaseConnection = true;
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–º–ø—Ç–æ–≤
      diagnosis.promptCounts = await Prompt.getStats();
      
      // –í–µ–∫—Ç–æ—Ä–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
      diagnosis.vectorStoreIntegration = false;
      diagnosis.vectorNote = 'Vector store integration disabled for prompts - using MongoDB only';
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
      const testPrompt = await this.getActivePrompt('basic');
      
      if (testPrompt && testPrompt.length > 0) {
        diagnosis.status = 'healthy';
      } else {
        diagnosis.status = 'warning';
        diagnosis.lastError = 'Retrieved empty prompt content';
      }
      
    } catch (error) {
      diagnosis.status = 'error';
      diagnosis.lastError = error.message;
    }

    return diagnosis;
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const promptService = new PromptService({
  cacheTimeout: parseInt(process.env.PROMPT_CACHE_TIMEOUT) || 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  enableFallback: process.env.PROMPT_ENABLE_FALLBACK !== 'false'
});

module.exports = promptService;
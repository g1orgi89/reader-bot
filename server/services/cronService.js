/**
 * @fileoverview –°–µ—Ä–≤–∏—Å cron-–∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @author g1orgi89
 */

const cron = require('node-cron');
const logger = require('../utils/logger');

/**
 * @class CronService
 * @description –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏
 */
class CronService {
  constructor() {
    this.weeklyReportService = null;
    this.telegramReportService = null;
    this.jobs = new Map();
    this.isStarted = false;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    this._initializeServices();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
   * @private
   */
  _initializeServices() {
    try {
      this.weeklyReportService = require('./weeklyReportService');
      this.telegramReportService = require('./telegramReportService');
      logger.info('üìñ CronService dependencies initialized');
    } catch (error) {
      logger.error(`üìñ Failed to initialize CronService dependencies: ${error.message}`);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö cron-–∑–∞–¥–∞—á
   * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞
   */
  start() {
    if (this.isStarted) {
      logger.warn('üìñ CronService is already started');
      return true;
    }

    try {
      this._scheduleWeeklyReports();
      this._scheduleDailyReminders();
      this._scheduleMonthlyReports();
      this._scheduleCleanupTasks();
      
      this.isStarted = true;
      logger.info('üìñ CronService started successfully with all scheduled tasks');
      return true;
    } catch (error) {
      logger.error(`üìñ Failed to start CronService: ${error.message}`);
      return false;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö cron-–∑–∞–¥–∞—á
   */
  stop() {
    if (!this.isStarted) {
      logger.warn('üìñ CronService is not started');
      return;
    }

    this.jobs.forEach((job, name) => {
      try {
        job.destroy();
        logger.info(`üìñ Stopped cron job: ${name}`);
      } catch (error) {
        logger.error(`üìñ Error stopping job ${name}: ${error.message}`);
      }
    });

    this.jobs.clear();
    this.isStarted = false;
    logger.info('üìñ CronService stopped');
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 11:00 –ú–°–ö)
   * @private
   */
  _scheduleWeeklyReports() {
    const job = cron.schedule('0 11 * * 0', async () => {
      logger.info('üìñ Starting weekly reports generation...');
      
      try {
        const stats = await this.weeklyReportService.generateWeeklyReportsForAllUsers();
        logger.info(`üìñ Weekly reports generated: ${JSON.stringify(stats)}`);
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ Telegram
        await this._sendWeeklyReportsToTelegram(stats);
        
      } catch (error) {
        logger.error(`üìñ Error in weekly reports cron job: ${error.message}`);
      }
    }, {
      timezone: "Europe/Moscow"
    });

    this.jobs.set('weeklyReports', job);
    logger.info('üìñ Scheduled weekly reports job: Sundays at 11:00 MSK');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –≤ Telegram
   * @private
   * @param {Object} stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  async _sendWeeklyReportsToTelegram(stats) {
    try {
      if (!this.telegramReportService) {
        logger.error('üìñ TelegramReportService not available');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
      const recentReports = await this._getRecentReports();
      
      for (const report of recentReports) {
        try {
          await this.telegramReportService.sendWeeklyReport(report);
          logger.info(`üìñ Sent weekly report to user ${report.userId}`);
        } catch (error) {
          logger.error(`üìñ Failed to send report to user ${report.userId}: ${error.message}`);
        }
      }

      logger.info(`üìñ Weekly reports sent to ${recentReports.length} users`);
    } catch (error) {
      logger.error(`üìñ Error sending weekly reports to Telegram: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
   * @private
   * @returns {Promise<Array>} –ù–µ–¥–∞–≤–Ω–∏–µ –æ—Ç—á–µ—Ç—ã
   */
  async _getRecentReports() {
    try {
      const oneHourAgo = new Date();
      oneHourAgo.setHours(oneHourAgo.getHours() - 1);

      const WeeklyReport = require('../models/weeklyReport');
      return await WeeklyReport.find({
        sentAt: { $gte: oneHourAgo }
      }).populate('quotes');
    } catch (error) {
      logger.error(`üìñ Error getting recent reports: ${error.message}`);
      return [];
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   * @private
   */
  _scheduleDailyReminders() {
    // –£—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (9:00 –ú–°–ö)
    const morningJob = cron.schedule('0 9 * * *', async () => {
      logger.info('üìñ Starting morning reminders...');
      try {
        await this._sendRemindersByTime('morning');
      } catch (error) {
        logger.error(`üìñ Error in morning reminders: ${error.message}`);
      }
    }, {
      timezone: "Europe/Moscow"
    });

    // –í–µ—á–µ—Ä–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (19:00 –ú–°–ö)
    const eveningJob = cron.schedule('0 19 * * *', async () => {
      logger.info('üìñ Starting evening reminders...');
      try {
        await this._sendRemindersByTime('evening');
      } catch (error) {
        logger.error(`üìñ Error in evening reminders: ${error.message}`);
      }
    }, {
      timezone: "Europe/Moscow"
    });

    this.jobs.set('morningReminders', morningJob);
    this.jobs.set('eveningReminders', eveningJob);
    logger.info('üìñ Scheduled daily reminders: 9:00 and 19:00 MSK');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
   * @private
   * @param {string} timeType - –¢–∏–ø –≤—Ä–µ–º–µ–Ω–∏ ('morning', 'evening')
   */
  async _sendRemindersByTime(timeType) {
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
      logger.info(`üìñ ${timeType} reminders sent (placeholder)`);
    } catch (error) {
      logger.error(`üìñ Error sending ${timeType} reminders: ${error.message}`);
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ (1 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 12:00 –ú–°–ö)
   * @private
   */
  _scheduleMonthlyReports() {
    const job = cron.schedule('0 12 1 * *', async () => {
      logger.info('üìñ Starting monthly reports generation...');
      
      try {
        await this._generateMonthlyReportsForActiveUsers();
      } catch (error) {
        logger.error(`üìñ Error in monthly reports cron job: ${error.message}`);
      }
    }, {
      timezone: "Europe/Moscow"
    });

    this.jobs.set('monthlyReports', job);
    logger.info('üìñ Scheduled monthly reports job: 1st day of month at 12:00 MSK');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @private
   */
  async _generateMonthlyReportsForActiveUsers() {
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤, –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
      logger.info('üìñ Monthly reports generation completed (placeholder)');
    } catch (error) {
      logger.error(`üìñ Error generating monthly reports: ${error.message}`);
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—á–∏—Å—Ç–∫–∏
   * @private
   */
  _scheduleCleanupTasks() {
    // –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00 –ú–°–ö
    const job = cron.schedule('0 3 * * *', async () => {
      logger.info('üìñ Starting daily cleanup tasks...');
      
      try {
        await this._performDailyCleanup();
      } catch (error) {
        logger.error(`üìñ Error in cleanup tasks: ${error.message}`);
      }
    }, {
      timezone: "Europe/Moscow"
    });

    this.jobs.set('dailyCleanup', job);
    logger.info('üìñ Scheduled daily cleanup: 3:00 MSK');
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
   * @private
   */
  async _performDailyCleanup() {
    try {
      const cleanupTasks = [];

      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
      cleanupTasks.push(this._cleanupOldLogs());
      
      // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
      cleanupTasks.push(this._cleanupExpiredPromoCodes());
      
      // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
      cleanupTasks.push(this._clearCaches());

      await Promise.all(cleanupTasks);
      logger.info('üìñ Daily cleanup completed successfully');
    } catch (error) {
      logger.error(`üìñ Error in daily cleanup: ${error.message}`);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
   * @private
   */
  async _cleanupOldLogs() {
    try {
      // Placeholder –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
      logger.info('üìñ Old logs cleanup completed (placeholder)');
    } catch (error) {
      logger.error(`üìñ Error cleaning up old logs: ${error.message}`);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
   * @private
   */
  async _cleanupExpiredPromoCodes() {
    try {
      const WeeklyReport = require('../models/weeklyReport');
      
      const expiredCount = await WeeklyReport.countDocuments({
        'promoCode.validUntil': { $lt: new Date() }
      });

      if (expiredCount > 0) {
        logger.info(`üìñ Found ${expiredCount} expired promo codes (keeping for analytics)`);
      }
    } catch (error) {
      logger.error(`üìñ Error checking expired promo codes: ${error.message}`);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π
   * @private
   */
  async _clearCaches() {
    try {
      // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Claude service
      const claudeService = require('./claude');
      claudeService.clearExpiredCache();
      
      logger.info('üìñ Caches cleared successfully');
    } catch (error) {
      logger.error(`üìñ Error clearing caches: ${error.message}`);
    }
  }

  /**
   * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  async runWeeklyReportsManually() {
    try {
      logger.info('üìñ Manual weekly reports generation started');
      const stats = await this.weeklyReportService.generateWeeklyReportsForAllUsers();
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
      await this._sendWeeklyReportsToTelegram(stats);
      
      logger.info('üìñ Manual weekly reports generation completed');
      return stats;
    } catch (error) {
      logger.error(`üìñ Error in manual weekly reports generation: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
   * @returns {Object} –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á
   */
  getJobsStatus() {
    const status = {
      isStarted: this.isStarted,
      totalJobs: this.jobs.size,
      jobs: {},
      timezone: 'Europe/Moscow'
    };

    this.jobs.forEach((job, name) => {
      status.jobs[name] = {
        running: job.running || false,
        destroyed: job.destroyed || false
      };
    });

    return status;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á
   * @returns {Object} –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
   */
  getSchedule() {
    return {
      weeklyReports: {
        schedule: '0 11 * * 0',
        description: 'Weekly reports generation - Sundays at 11:00 MSK',
        timezone: 'Europe/Moscow'
      },
      morningReminders: {
        schedule: '0 9 * * *',
        description: 'Morning reminders - Daily at 9:00 MSK',
        timezone: 'Europe/Moscow'
      },
      eveningReminders: {
        schedule: '0 19 * * *',
        description: 'Evening reminders - Daily at 19:00 MSK',
        timezone: 'Europe/Moscow'
      },
      monthlyReports: {
        schedule: '0 12 1 * *',
        description: 'Monthly reports - 1st day of month at 12:00 MSK',
        timezone: 'Europe/Moscow'
      },
      dailyCleanup: {
        schedule: '0 3 * * *',
        description: 'Daily cleanup tasks - Daily at 3:00 MSK',
        timezone: 'Europe/Moscow'
      }
    };
  }

  /**
   * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
   * @param {string} jobName - –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
   * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
   */
  restartJob(jobName) {
    try {
      if (!this.jobs.has(jobName)) {
        logger.error(`üìñ Job ${jobName} not found`);
        return false;
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É
      const job = this.jobs.get(jobName);
      job.destroy();
      this.jobs.delete(jobName);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
      switch (jobName) {
        case 'weeklyReports':
          this._scheduleWeeklyReports();
          break;
        case 'morningReminders':
        case 'eveningReminders':
          this._scheduleDailyReminders();
          break;
        case 'monthlyReports':
          this._scheduleMonthlyReports();
          break;
        case 'dailyCleanup':
          this._scheduleCleanupTasks();
          break;
        default:
          logger.error(`üìñ Unknown job name: ${jobName}`);
          return false;
      }

      logger.info(`üìñ Job ${jobName} restarted successfully`);
      return true;
    } catch (error) {
      logger.error(`üìñ Error restarting job ${jobName}: ${error.message}`);
      return false;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
module.exports = new CronService();
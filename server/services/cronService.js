/**
 * @fileoverview Cron —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –±–æ—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @author g1orgi89
 */

const cron = require('node-cron');
const logger = require('../utils/logger');

/**
 * Cron —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
 */
class CronService {
  constructor() {
    this.weeklyReportHandler = null; // Keep for backward compatibility
    this.weeklyReportService = null; // NEW: Modern service
    this.monthlyReportService = null;
    this.reminderService = null;
    this.announcementService = null;
    this.bot = null;
    this.jobs = new Map();
    
    logger.info('üìñ CronService initialized');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
   * @param {Object} dependencies - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
   * @param {Object} dependencies.bot - Telegram bot instance
   * @param {Object} dependencies.weeklyReportHandler - Handler –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ (legacy)
   * @param {Object} dependencies.weeklyReportService - NEW: Modern WeeklyReportService
   * @param {Object} dependencies.monthlyReportService - –°–µ—Ä–≤–∏—Å –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
   * @param {Object} dependencies.reminderService - –°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   * @param {Object} dependencies.announcementService - –°–µ—Ä–≤–∏—Å –∞–Ω–æ–Ω—Å–æ–≤
   */
  initialize(dependencies) {
    this.bot = dependencies.bot;
    this.weeklyReportHandler = dependencies.weeklyReportHandler; // Keep for backward compatibility
    this.weeklyReportService = dependencies.weeklyReportService; // NEW: Modern service
    this.monthlyReportService = dependencies.monthlyReportService;
    this.reminderService = dependencies.reminderService;
    this.announcementService = dependencies.announcementService;
    
    logger.info('üìñ CronService dependencies initialized');
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö cron –∑–∞–¥–∞—á
   */
  start() {
    // Check if we have either the new service or old handler
    if (!this.weeklyReportService && !this.weeklyReportHandler) {
      logger.error('üìñ Cannot start CronService: neither WeeklyReportService nor weeklyReportHandler initialized');
      return false;
    }

    try {
      // –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 12:00 –ú–°–ö
      const weeklyReportsJob = cron.schedule('12 17 * * *', async () => {
        logger.info('üìñ Starting weekly reports generation...');
        await this.generateWeeklyReportsForAllUsers();
      }, {
        timezone: "Europe/Moscow",
        scheduled: false
      });

      this.jobs.set('weekly_reports', weeklyReportsJob);

      // üìñ –û–ë–ù–û–í–õ–ï–ù–û: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      if (this.reminderService) {
        const optimizedRemindersJob = cron.schedule('0 19 * * *', async () => {
          logger.info('üìñ Sending optimized reminders...');
          await this.reminderService.sendDailyReminders();
        }, {
          timezone: "Europe/Moscow",
          scheduled: false
        });

        this.jobs.set('optimized_reminders', optimizedRemindersJob);
      }

      // üìñ –ù–û–í–û–ï: –ê–Ω–æ–Ω—Å—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (25 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 12:00 –ú–°–ö)
      if (this.announcementService) {
        const announcementsJob = cron.schedule('0 12 25 * *', async () => {
          logger.info('üìñ Starting monthly product announcements...');
          await this.sendMonthlyAnnouncements();
        }, {
          timezone: "Europe/Moscow",
          scheduled: false
        });

        this.jobs.set('monthly_announcements', announcementsJob);
      }

      // –ú–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: 1 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 12:00 –ú–°–ö
      const monthlyReportsJob = cron.schedule('0 12 1 * *', async () => {
        logger.info('üìñ Starting monthly reports generation...');
        await this.generateMonthlyReportsForActiveUsers();
      }, {
        timezone: "Europe/Moscow",
        scheduled: false
      });

      this.jobs.set('monthly_reports', monthlyReportsJob);

      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00 –ú–°–ö
      const cleanupJob = cron.schedule('0 3 * * *', async () => {
        logger.info('üìñ Running daily cleanup...');
        await this.performDailyCleanup();
      }, {
        timezone: "Europe/Moscow",
        scheduled: false
      });

      this.jobs.set('daily_cleanup', cleanupJob);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
      this.jobs.forEach((job, name) => {
        job.start();
        logger.info(`üìñ Cron job '${name}' started`);
      });

      logger.info(`üìñ CronService started with ${this.jobs.size} jobs`);
      return true;

    } catch (error) {
      logger.error(`üìñ Error starting CronService: ${error.message}`, error);
      return false;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö cron –∑–∞–¥–∞—á
   */
  stop() {
    this.jobs.forEach((job, name) => {
      job.stop();
      logger.info(`üìñ Cron job '${name}' stopped`);
    });

    this.jobs.clear();
    logger.info('üìñ CronService stopped');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @returns {Promise<void>}
   */
  async generateWeeklyReportsForAllUsers() {
    try {
      const startTime = Date.now();
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π WeeklyReportService –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ weeklyReportHandler
      if (!this.weeklyReportService) {
        logger.error('üìñ WeeklyReportService not properly initialized');
        return;
      }

      const stats = await this._generateReportsWithWeeklyReportService();
      
      const duration = Date.now() - startTime;
      
      logger.info(`üìñ Weekly reports completed in ${duration}ms: ${stats.generated} generated, ${stats.failed} failed, ${stats.skipped} skipped`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      if (process.env.ADMIN_TELEGRAM_ID && this.bot) {
        const adminMessage = `üìä *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã*\\n\\n‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${stats.generated}\\n‚ùå –û—à–∏–±–∫–∏: ${stats.failed}\\n‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç —Ü–∏—Ç–∞—Ç): ${stats.skipped}\\nüìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total}\\n‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${Math.round(duration / 1000)}—Å\\n\\n${stats.errors.length > 0 ? `\\n*–û—à–∏–±–∫–∏:*\\n${stats.errors.slice(0, 5).map(e => `‚Ä¢ ${e.userId}: ${e.error}`).join('\\n')}` : ''}`;

        try {
          await this.bot.telegram.sendMessage(
            process.env.ADMIN_TELEGRAM_ID,
            adminMessage,
            { parse_mode: 'Markdown' }
          );
        } catch (error) {
          logger.error(`üìñ Failed to send admin notification: ${error.message}`);
        }
      }

    } catch (error) {
      logger.error(`üìñ Error in generateWeeklyReportsForAllUsers: ${error.message}`, error);
    }
  }

  /**
   * NEW: Generate reports using WeeklyReportService
   * @private
   * @returns {Promise<Object>} Generation statistics
   */
  async _generateReportsWithWeeklyReportService() {
    const { UserProfile, Quote, WeeklyReport } = require('../models');
    
    // Get previous week range
    const weekRange = this.weeklyReportService.getPreviousWeekRange();
    const { isoWeekNumber: weekNumber, isoYear: year } = weekRange;
    
    logger.info(`üìñ Generating reports for week ${weekNumber}/${year} (${weekRange.start.toISOString().split('T')[0]} to ${weekRange.end.toISOString().split('T')[0]})`);

    const stats = {
      generated: 0,
      failed: 0,
      skipped: 0,
      total: 0,
      errors: []
    };

    try {
      // Find users who have quotes for the previous week but don't have a report yet
      const usersWithQuotes = await Quote.distinct('userId', {
        weekNumber,
        yearNumber: year
      });

      const usersWithReports = await WeeklyReport.distinct('userId', {
        weekNumber,
        year
      });

      // Filter out users who already have reports
      const usersNeedingReports = usersWithQuotes.filter(
        userId => !usersWithReports.includes(userId)
      );

      logger.info(`üìñ Found ${usersWithQuotes.length} users with quotes, ${usersWithReports.length} already have reports, ${usersNeedingReports.length} need new reports`);

      stats.total = usersNeedingReports.length;

      // Generate reports for each user
      for (const userId of usersNeedingReports) {
        try {
          // Get user profile
          const userProfile = await UserProfile.findOne({ 
            userId,
            isOnboardingComplete: true,
            isActive: true,
            isBlocked: false
          });

          if (!userProfile) {
            logger.warn(`üìñ Skipping user ${userId}: inactive or incomplete onboarding`);
            stats.skipped++;
            continue;
          }

          // Get user's quotes for the week
          const quotes = await Quote.find({
            userId,
            weekNumber,
            yearNumber: year
          }).sort({ createdAt: 1 });

          if (quotes.length === 0) {
            logger.warn(`üìñ Skipping user ${userId}: no quotes found for week ${weekNumber}/${year}`);
            stats.skipped++;
            continue;
          }

          // Generate the report using WeeklyReportService
          const reportData = await this.weeklyReportService.generateWeeklyReport(userId, quotes, userProfile);

          // Save to database
          const weeklyReport = new WeeklyReport(reportData);
          await weeklyReport.save();

          logger.info(`üìñ Generated weekly report for user ${userId} with ${quotes.length} quotes`);
          stats.generated++;

          // Small delay to avoid overwhelming the system
          await new Promise(resolve => setTimeout(resolve, 100));

        } catch (error) {
          logger.error(`üìñ Failed to generate report for user ${userId}: ${error.message}`);
          stats.failed++;
          stats.errors.push({
            userId,
            error: error.message
          });
        }
      }

      logger.info(`üìñ Report generation completed: ${stats.generated} generated, ${stats.failed} failed, ${stats.skipped} skipped`);
      return stats;

    } catch (error) {
      logger.error(`üìñ Error in _generateReportsWithWeeklyReportService: ${error.message}`);
      throw error;
    }
  }

  /**
   * üìñ –û–ë–ù–û–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @returns {Promise<void>}
   */
  async generateMonthlyReportsForActiveUsers() {
    try {
      const startTime = Date.now();

      if (!this.monthlyReportService) {
        logger.warn('üìñ MonthlyReportService not initialized, skipping monthly reports');
        return;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ MonthlyReportService
      const stats = await this.monthlyReportService.generateMonthlyReportsForAllUsers();
      
      const duration = Date.now() - startTime;
      
      logger.info(`üìñ Monthly reports completed in ${duration}ms: ${stats.generated} generated, ${stats.failed} failed`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      if (process.env.ADMIN_TELEGRAM_ID && this.bot) {
        const adminMessage = `üìà *–ú–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã*\\n\\n‚úÖ –£—Å–ø–µ—à–Ω–æ: ${stats.generated}\\n‚ùå –û—à–∏–±–∫–∏: ${stats.failed}\\nüìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total}\\n‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${Math.round(duration / 1000)}—Å\\n\\n${stats.errors.length > 0 ? `\\n*–û—à–∏–±–∫–∏:*\\n${stats.errors.slice(0, 3).map(e => `‚Ä¢ ${e.userId}: ${e.error}`).join('\\n')}` : ''}`;

        try {
          await this.bot.telegram.sendMessage(
            process.env.ADMIN_TELEGRAM_ID,
            adminMessage,
            { parse_mode: 'Markdown' }
          );
        } catch (error) {
          logger.error(`üìñ Failed to send admin notification: ${error.message}`);
        }
      }

    } catch (error) {
      logger.error(`üìñ Error in generateMonthlyReportsForActiveUsers: ${error.message}`, error);
    }
  }

  /**
   * üìñ –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—è—á–Ω—ã—Ö –∞–Ω–æ–Ω—Å–æ–≤
   * @returns {Promise<void>}
   */
  async sendMonthlyAnnouncements() {
    try {
      const startTime = Date.now();

      if (!this.announcementService) {
        logger.warn('üìñ AnnouncementService not initialized, skipping announcements');
        return;
      }

      const stats = await this.announcementService.sendMonthlyAnnouncements();
      
      const duration = Date.now() - startTime;
      
      logger.info(`üìñ Monthly announcements completed in ${duration}ms: ${stats.sent} sent, ${stats.failed} failed`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      if (process.env.ADMIN_TELEGRAM_ID && this.bot) {
        const adminMessage = `üì¢ *–ú–µ—Å—è—á–Ω—ã–µ –∞–Ω–æ–Ω—Å—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã*\\n\\n‚úÖ –£—Å–ø–µ—à–Ω–æ: ${stats.sent}\\n‚ùå –û—à–∏–±–∫–∏: ${stats.failed}\\nüìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total}\\n‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${Math.round(duration / 1000)}—Å\\n\\n${stats.errors.length > 0 ? `\\n*–û—à–∏–±–∫–∏:*\\n${stats.errors.slice(0, 3).map(e => `‚Ä¢ ${e.userId}: ${e.error}`).join('\\n')}` : ''}`;

        try {
          await this.bot.telegram.sendMessage(
            process.env.ADMIN_TELEGRAM_ID,
            adminMessage,
            { parse_mode: 'Markdown' }
          );
        } catch (error) {
          logger.error(`üìñ Failed to send admin notification: ${error.message}`);
        }
      }

    } catch (error) {
      logger.error(`üìñ Error in sendMonthlyAnnouncements: ${error.message}`, error);
    }
  }

  /**
   * –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   * @returns {Promise<void>}
   */
  async performDailyCleanup() {
    try {
      const { WeeklyReport, MonthlyReport } = require('../models');
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (—Å—Ç–∞—Ä—à–µ 6 –º–µ—Å—è—Ü–µ–≤)
      const sixMonthsAgo = new Date();
      sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);

      const deletedWeeklyReports = await WeeklyReport.deleteMany({
        sentAt: { $lt: sixMonthsAgo }
      });

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (—Å—Ç–∞—Ä—à–µ 1 –≥–æ–¥–∞)
      const oneYearAgo = new Date();
      oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);

      const deletedMonthlyReports = await MonthlyReport.deleteMany({
        sentAt: { $lt: oneYearAgo }
      });

      logger.info(`üìñ Daily cleanup completed: ${deletedWeeklyReports.deletedCount} weekly reports and ${deletedMonthlyReports.deletedCount} monthly reports deleted`);

    } catch (error) {
      logger.error(`üìñ Error in performDailyCleanup: ${error.message}`, error);
    }
  }

  /**
   * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async triggerWeeklyReports() {
    logger.info('üìñ Manual trigger of weekly reports');
    await this.generateWeeklyReportsForAllUsers();
    
    // Return statistics based on available service
    if (this.weeklyReportService) {
      // NEW: Get stats from database
      const { WeeklyReport } = require('../models');
      const weekRange = this.weeklyReportService.getPreviousWeekRange();
      
      const reportsCount = await WeeklyReport.countDocuments({
        weekNumber: weekRange.isoWeekNumber,
        year: weekRange.isoYear
      });
      
      return { 
        message: 'Weekly reports triggered using WeeklyReportService', 
        generated: reportsCount,
        week: `${weekRange.isoWeekNumber}/${weekRange.isoYear}`
      };
    } else if (this.weeklyReportHandler && this.weeklyReportHandler.getReportStats) {
      // LEGACY: Use old handler stats
      return await this.weeklyReportHandler.getReportStats(7);
    }
    
    return { message: 'Weekly reports triggered, but stats not available' };
  }

  /**
   * üìñ –û–ë–ù–û–í–õ–ï–ù–û: –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async triggerMonthlyReports() {
    logger.info('üìñ Manual trigger of monthly reports');
    
    if (!this.monthlyReportService) {
      logger.warn('üìñ MonthlyReportService not initialized');
      return { message: 'MonthlyReportService not available' };
    }

    const stats = await this.monthlyReportService.generateMonthlyReportsForAllUsers();
    
    return {
      message: 'Monthly reports triggered',
      ...stats
    };
  }

  /**
   * üìñ –û–ë–ù–û–í–õ–ï–ù–û: –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async triggerReminders() {
    if (this.reminderService) {
      logger.info('üìñ Manual trigger of optimized reminders');
      const stats = await this.reminderService.sendDailyReminders();
      return {
        message: 'Optimized reminders triggered',
        ...stats
      };
    } else {
      logger.warn('üìñ ReminderService not initialized, cannot trigger reminders');
      return { message: 'ReminderService not available' };
    }
  }

  /**
   * üìñ –ù–û–í–û–ï: –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∞–Ω–æ–Ω—Å–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async triggerAnnouncements() {
    if (this.announcementService) {
      logger.info('üìñ Manual trigger of monthly announcements');
      const stats = await this.announcementService.sendMonthlyAnnouncements();
      return {
        message: 'Monthly announcements triggered',
        ...stats
      };
    } else {
      logger.warn('üìñ AnnouncementService not initialized, cannot trigger announcements');
      return { message: 'AnnouncementService not available' };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö cron –∑–∞–¥–∞—á
   * @returns {Object} –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á
   */
  getJobsStatus() {
    const status = {};
    
    this.jobs.forEach((job, name) => {
      status[name] = {
        running: job.running,
        lastDate: job.lastDate,
        nextDate: job.nextDate
      };
    });

    return {
      totalJobs: this.jobs.size,
      jobs: status,
      initialized: !!(this.weeklyReportService || this.weeklyReportHandler), // Check for either service
      hasWeeklyReportService: !!this.weeklyReportService, // NEW
      hasWeeklyReportHandler: !!this.weeklyReportHandler, // LEGACY
      hasMonthlyService: !!this.monthlyReportService,
      hasReminderService: !!this.reminderService,
      hasAnnouncementService: !!this.announcementService
    };
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
   * @param {string} jobName - –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
   * @returns {boolean} –£—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  stopJob(jobName) {
    const job = this.jobs.get(jobName);
    if (job) {
      job.stop();
      logger.info(`üìñ Cron job '${jobName}' stopped manually`);
      return true;
    }
    return false;
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
   * @param {string} jobName - –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
   * @returns {boolean} –£—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  startJob(jobName) {
    const job = this.jobs.get(jobName);
    if (job) {
      job.start();
      logger.info(`üìñ Cron job '${jobName}' started manually`);
      return true;
    }
    return false;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
   * @param {string} jobName - –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
   * @returns {Date|null} –°–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  getNextRunTime(jobName) {
    const job = this.jobs.get(jobName);
    return job ? job.nextDate : null;
  }

  /**
   * üìñ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è health check
   * @returns {Object} –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á
   */
  getSchedule() {
    return {
      weekly_reports: 'Sundays at 12:00 MSK',
      optimized_reminders: '19:00 MSK daily (smart frequency based on user stage)',
      monthly_announcements: '25th day of month at 12:00 MSK',
      monthly_reports: '1st day of month at 12:00 MSK',
      daily_cleanup: '3:00 MSK daily'
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
   * @returns {boolean} –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–±–æ—Ç–µ
   */
  isReady() {
    return !!(this.weeklyReportService || this.weeklyReportHandler); // Check for either service
  }

  /**
   * üìñ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
   * @returns {Object} –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
   */
  getDiagnostics() {
    return {
      initialized: !!(this.weeklyReportService || this.weeklyReportHandler),
      hasWeeklyReportService: !!this.weeklyReportService, // NEW
      hasWeeklyReportHandler: !!this.weeklyReportHandler, // LEGACY
      hasMonthlyReportService: !!this.monthlyReportService,
      hasReminderService: !!this.reminderService,
      hasAnnouncementService: !!this.announcementService,
      hasBot: !!this.bot,
      jobsCount: this.jobs.size,
      activeJobs: Array.from(this.jobs.keys()),
      nextRuns: {
        weekly_reports: this.getNextRunTime('weekly_reports'),
        optimized_reminders: this.getNextRunTime('optimized_reminders'),
        monthly_announcements: this.getNextRunTime('monthly_announcements'),
        monthly_reports: this.getNextRunTime('monthly_reports'),
        daily_cleanup: this.getNextRunTime('daily_cleanup')
      },
      serviceStatuses: {
        reminderService: this.reminderService?.isReady() || false,
        announcementService: this.announcementService?.isReady() || false,
        monthlyReportService: !!this.monthlyReportService
      },
      timezone: 'Europe/Moscow'
    };
  }

  /**
   * üìñ –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
   * @returns {Promise<Object>} –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async getAllServicesStats() {
    const stats = {
      timestamp: new Date().toISOString(),
      cron: this.getJobsStatus()
    };

    try {
      if (this.reminderService) {
        stats.reminders = await this.reminderService.getReminderStats();
      }

      if (this.announcementService) {
        stats.announcements = await this.announcementService.getAnnouncementStats();
      }

      if (this.weeklyReportService) {
        // NEW: Get stats from database
        const { WeeklyReport } = require('../models');
        const oneWeekAgo = new Date();
        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
        
        const recentReports = await WeeklyReport.countDocuments({
          sentAt: { $gte: oneWeekAgo }
        });
        
        stats.weeklyReports = { 
          recentReports,
          message: 'Using WeeklyReportService (modern)' 
        };
      } else if (this.weeklyReportHandler && this.weeklyReportHandler.getReportStats) {
        // LEGACY: Use old handler stats
        stats.weeklyReports = await this.weeklyReportHandler.getReportStats(7);
      }

      if (this.monthlyReportService && this.monthlyReportService.getStats) {
        stats.monthlyReports = await this.monthlyReportService.getStats();
      }

    } catch (error) {
      logger.error(`üìñ Error getting services stats: ${error.message}`, error);
      stats.error = error.message;
    }

    return stats;
  }
}

module.exports = { CronService };

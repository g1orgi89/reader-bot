/**
 * @fileoverview Cron —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –±–æ—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @author g1orgi89
 */

const cron = require('node-cron');
const logger = require('../utils/logger');

/**
 * Cron —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
 */
class CronService {
  constructor() {
    this.weeklyReportHandler = null;
    this.reminderService = null;
    this.bot = null;
    this.jobs = new Map();
    
    logger.info('üìñ CronService initialized');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
   * @param {Object} bot - Telegram bot instance
   * @param {Object} weeklyReportHandler - Handler –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
   * @param {Object} reminderService - –°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   */
  initialize(bot, weeklyReportHandler, reminderService = null) {
    this.bot = bot;
    this.weeklyReportHandler = weeklyReportHandler;
    this.reminderService = reminderService;
    
    logger.info('üìñ CronService dependencies initialized');
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö cron –∑–∞–¥–∞—á
   */
  start() {
    if (!this.weeklyReportHandler) {
      logger.error('üìñ Cannot start CronService: weeklyReportHandler not initialized');
      return;
    }

    try {
      // –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 11:00 –ú–°–ö
      const weeklyReportsJob = cron.schedule('0 11 * * 0', async () => {
        logger.info('üìñ Starting weekly reports generation...');
        await this.generateWeeklyReportsForAllUsers();
      }, {
        timezone: "Europe/Moscow",
        scheduled: false
      });

      this.jobs.set('weekly_reports', weeklyReportsJob);

      // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω)
      if (this.reminderService) {
        const dailyRemindersJob = cron.schedule('0 9,19 * * *', async () => {
          logger.info('üìñ Sending daily reminders...');
          await this.reminderService.sendDailyReminders();
        }, {
          timezone: "Europe/Moscow",
          scheduled: false
        });

        this.jobs.set('daily_reminders', dailyRemindersJob);
      }

      // –ú–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: 1 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 12:00 –ú–°–ö
      const monthlyReportsJob = cron.schedule('0 12 1 * *', async () => {
        logger.info('üìñ Starting monthly reports generation...');
        await this.generateMonthlyReportsForActiveUsers();
      }, {
        timezone: "Europe/Moscow",
        scheduled: false
      });

      this.jobs.set('monthly_reports', monthlyReportsJob);

      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00 –ú–°–ö
      const cleanupJob = cron.schedule('0 3 * * *', async () => {
        logger.info('üìñ Running daily cleanup...');
        await this.performDailyCleanup();
      }, {
        timezone: "Europe/Moscow",
        scheduled: false
      });

      this.jobs.set('daily_cleanup', cleanupJob);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
      this.jobs.forEach((job, name) => {
        job.start();
        logger.info(`üìñ Cron job '${name}' started`);
      });

      logger.info(`üìñ CronService started with ${this.jobs.size} jobs`);

    } catch (error) {
      logger.error(`üìñ Error starting CronService: ${error.message}`, error);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö cron –∑–∞–¥–∞—á
   */
  stop() {
    this.jobs.forEach((job, name) => {
      job.stop();
      logger.info(`üìñ Cron job '${name}' stopped`);
    });

    this.jobs.clear();
    logger.info('üìñ CronService stopped');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @returns {Promise<void>}
   */
  async generateWeeklyReportsForAllUsers() {
    try {
      const startTime = Date.now();
      
      const stats = await this.weeklyReportHandler.sendReportsToAllUsers();
      
      const duration = Date.now() - startTime;
      
      logger.info(`üìñ Weekly reports completed in ${duration}ms: ${stats.sent} sent, ${stats.failed} failed`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      if (process.env.ADMIN_TELEGRAM_ID && this.bot) {
        const adminMessage = `üìä *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã*

‚úÖ –£—Å–ø–µ—à–Ω–æ: ${stats.sent}
‚ùå –û—à–∏–±–∫–∏: ${stats.failed}
üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total}
‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${Math.round(duration / 1000)}—Å

${stats.errors.length > 0 ? `\n*–û—à–∏–±–∫–∏:*\n${stats.errors.slice(0, 5).map(e => `‚Ä¢ ${e.userId}: ${e.error}`).join('\n')}` : ''}`;

        try {
          await this.bot.telegram.sendMessage(
            process.env.ADMIN_TELEGRAM_ID,
            adminMessage,
            { parse_mode: 'Markdown' }
          );
        } catch (error) {
          logger.error(`üìñ Failed to send admin notification: ${error.message}`);
        }
      }

    } catch (error) {
      logger.error(`üìñ Error in generateWeeklyReportsForAllUsers: ${error.message}`, error);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @returns {Promise<void>}
   */
  async generateMonthlyReportsForActiveUsers() {
    try {
      const { UserProfile } = require('../models');
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∞–∫—Ç–∏–≤–Ω—ã –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞
      const oneMonthAgo = new Date();
      oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);

      const activeUsers = await UserProfile.find({
        isOnboardingComplete: true,
        registeredAt: { $lte: oneMonthAgo },
        'statistics.totalQuotes': { $gte: 5 } // –ú–∏–Ω–∏–º—É–º 5 —Ü–∏—Ç–∞—Ç –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
      });

      let generated = 0;
      let failed = 0;

      logger.info(`üìñ Starting monthly reports for ${activeUsers.length} users`);

      for (const user of activeUsers) {
        try {
          // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
          // await this.generateMonthlyReport(user.userId);
          generated++;
          
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
          await new Promise(resolve => setTimeout(resolve, 100));
          
        } catch (error) {
          failed++;
          logger.error(`üìñ Failed to generate monthly report for user ${user.userId}: ${error.message}`);
        }
      }

      logger.info(`üìñ Monthly reports completed: ${generated} generated, ${failed} failed`);

    } catch (error) {
      logger.error(`üìñ Error in generateMonthlyReportsForActiveUsers: ${error.message}`, error);
    }
  }

  /**
   * –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   * @returns {Promise<void>}
   */
  async performDailyCleanup() {
    try {
      const { WeeklyReport, Quote } = require('../models');
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (—Å—Ç–∞—Ä—à–µ 6 –º–µ—Å—è—Ü–µ–≤)
      const sixMonthsAgo = new Date();
      sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);

      const deletedReports = await WeeklyReport.deleteMany({
        sentAt: { $lt: sixMonthsAgo }
      });

      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏
      // –ù–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤, –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Ç.–¥.

      logger.info(`üìñ Daily cleanup completed: ${deletedReports.deletedCount} old reports deleted`);

    } catch (error) {
      logger.error(`üìñ Error in performDailyCleanup: ${error.message}`, error);
    }
  }

  /**
   * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async triggerWeeklyReports() {
    logger.info('üìñ Manual trigger of weekly reports');
    await this.generateWeeklyReportsForAllUsers();
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    return await this.weeklyReportHandler.getReportStats(7);
  }

  /**
   * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   * @returns {Promise<void>}
   */
  async triggerReminders() {
    if (this.reminderService) {
      logger.info('üìñ Manual trigger of reminders');
      await this.reminderService.sendDailyReminders();
    } else {
      logger.warn('üìñ ReminderService not initialized, cannot trigger reminders');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö cron –∑–∞–¥–∞—á
   * @returns {Object} –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á
   */
  getJobsStatus() {
    const status = {};
    
    this.jobs.forEach((job, name) => {
      status[name] = {
        running: job.running,
        lastDate: job.lastDate,
        nextDate: job.nextDate
      };
    });

    return {
      totalJobs: this.jobs.size,
      jobs: status,
      initialized: !!this.weeklyReportHandler
    };
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
   * @param {string} jobName - –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
   * @returns {boolean} –£—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  stopJob(jobName) {
    const job = this.jobs.get(jobName);
    if (job) {
      job.stop();
      logger.info(`üìñ Cron job '${jobName}' stopped manually`);
      return true;
    }
    return false;
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
   * @param {string} jobName - –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
   * @returns {boolean} –£—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  startJob(jobName) {
    const job = this.jobs.get(jobName);
    if (job) {
      job.start();
      logger.info(`üìñ Cron job '${jobName}' started manually`);
      return true;
    }
    return false;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
   * @param {string} jobName - –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
   * @returns {Date|null} –°–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  getNextRunTime(jobName) {
    const job = this.jobs.get(jobName);
    return job ? job.nextDate : null;
  }
}

module.exports = { CronService };
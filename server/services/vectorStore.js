/**
 * @fileoverview –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π Qdrant
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –ø–æ–∏—Å–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * –û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —á–∞–Ω–∫–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 */

const { QdrantClient } = require("@qdrant/js-client-rest");
const { OpenAIEmbeddings } = require("@langchain/openai");
const logger = require('../utils/logger');
const textChunker = require('../utils/textChunker');
const { createHash } = require('crypto');

/**
 * @typedef {Object} DocumentMetadata
 * @property {string} id - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @property {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @property {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @property {string} language - –Ø–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (en, ru, es)
 * @property {string[]} [tags] - –¢–µ–≥–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @property {string} [source] - –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @property {Date} [createdAt] - –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
 * @property {Date} [updatedAt] - –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */

/**
 * @typedef {Object} SearchOptions
 * @property {number} [limit=5] - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * @property {string} [language] - –§–∏–ª—å—Ç—Ä –ø–æ —è–∑—ã–∫—É
 * @property {string} [category] - –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @property {string[]} [tags] - –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º
 * @property {number} [score_threshold] - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π)
 * @property {boolean} [returnChunks=false] - –í–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —á–∞–Ω–∫–∏ –≤–º–µ—Å—Ç–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
 */

/**
 * @typedef {Object} SearchResult
 * @property {string} id - ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @property {string} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @property {DocumentMetadata} metadata - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @property {number} score - –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å (0-1)
 * @property {boolean} [isChunk] - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–∞–Ω–∫–æ–º (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ returnChunks=true)
 * @property {Object} [chunkInfo] - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞–Ω–∫–µ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ returnChunks=true)
 */

/**
 * @typedef {Object} ChunkingOptions
 * @property {boolean} [enableChunking=true] - –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —á–∞–Ω–∫–∏–Ω–≥
 * @property {number} [chunkSize=500] - –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
 * @property {number} [overlap=100] - –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏
 * @property {number} [minChunkSize=50] - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
 * @property {boolean} [preserveParagraphs=true] - –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
 */

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π Qdrant
 * @class VectorStoreService
 */
class VectorStoreService {
  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ VectorStoreService
   * @constructor
   */
  constructor() {
    this.initialized = false;
    this.collectionName = process.env.VECTOR_COLLECTION_NAME || 'shrooms_knowledge';
    this.url = process.env.VECTOR_DB_URL || 'http://localhost:6333';
    this.embeddingModel = process.env.EMBEDDING_MODEL || 'text-embedding-ada-002';
    this.vectorDimension = 1536; // –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–ª—è text-embedding-ada-002
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞–Ω–∫–∏–Ω–≥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.defaultChunkingOptions = {
      enableChunking: true,
      chunkSize: 500,      // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö embeddings
      overlap: 100,        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏
      minChunkSize: 50,    // –ò–∑–±–µ–≥–∞–µ–º —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏—Ö —á–∞–Ω–∫–æ–≤
      preserveParagraphs: true  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
    };
    
    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –ø–æ —è–∑—ã–∫–∞–º
    this.languageThresholds = {
      'ru': 0.75, // –°–Ω–∏–∂–µ–Ω —Å 0.8 –¥–æ 0.75 –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ä—É—Å—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
      'en': 0.7,  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
      'es': 0.7   // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ
    };
    this.defaultThreshold = 0.7; // –ü–æ—Ä–æ–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.client = null;
    this.embeddings = null;
    
    // –ö—ç—à –¥–ª—è embeddings –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    this.embeddingCache = new Map();
    this.maxCacheSize = 100;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —è–∑—ã–∫–∞
   * @private
   * @param {string} [language] - –Ø–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤/–∑–∞–ø—Ä–æ—Å–∞
   * @returns {number} –ü–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
   */
  _getLanguageThreshold(language) {
    if (!language) {
      return this.defaultThreshold;
    }
    
    const threshold = this.languageThresholds[language.toLowerCase()] || this.defaultThreshold;
    logger.debug(`üçÑ Using threshold ${threshold} for language: ${language}`);
    return threshold;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   * @async
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  async initialize() {
    try {
      if (this.initialized) {
        return true;
      }

      if (!process.env.OPENAI_API_KEY) {
        logger.warn('OPENAI_API_KEY not set, vector store cannot be initialized');
        return false;
      }

      logger.info(`Initializing vector store: ${this.url}, collection: ${this.collectionName}`);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Qdrant
      this.client = new QdrantClient({ url: this.url });
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI Embeddings
      this.embeddings = new OpenAIEmbeddings({
        apiKey: process.env.OPENAI_API_KEY,
        model: this.embeddingModel
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant
      try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Qdrant (–±–µ–∑ –≤—ã–∑–æ–≤–∞ healthCheck)
        await this.client.getCollections();
        logger.info('Successfully connected to Qdrant');
      } catch (error) {
        logger.error(`Failed to connect to Qdrant: ${error.message}`);
        return false;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      try {
        const collections = await this.client.getCollections();
        const collectionExists = collections.collections.some(c => c.name === this.collectionName);
        
        if (!collectionExists) {
          logger.info(`Creating collection: ${this.collectionName}`);
          
          // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          await this.client.createCollection(this.collectionName, {
            vectors: {
              size: this.vectorDimension,
              distance: 'Cosine'
            }
          });
          
          // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
          await this.client.createPayloadIndex(this.collectionName, {
            field_name: 'metadata.language',
            field_schema: 'keyword'
          });
          
          await this.client.createPayloadIndex(this.collectionName, {
            field_name: 'metadata.category',
            field_schema: 'keyword'
          });
          
          await this.client.createPayloadIndex(this.collectionName, {
            field_name: 'metadata.tags',
            field_schema: 'keyword'
          });

          // –ò–Ω–¥–µ–∫—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ originalId —á–∞–Ω–∫–æ–≤
          await this.client.createPayloadIndex(this.collectionName, {
            field_name: 'metadata.originalId',
            field_schema: 'keyword'
          });
        } else {
          logger.info(`Collection ${this.collectionName} already exists`);
        }
      } catch (error) {
        logger.error(`Failed to check/create collection: ${error.message}`);
        return false;
      }
      
      this.initialized = true;
      logger.info('üçÑ Vector store initialized successfully with chunking support');
      logger.info(`üçÑ Language thresholds configured: ${JSON.stringify(this.languageThresholds)}`);
      logger.info(`üçÑ Default chunking options: ${JSON.stringify(this.defaultChunkingOptions)}`);
      return true;
    } catch (error) {
      logger.error(`Failed to initialize vector store: ${error.message}`);
      this.initialized = false;
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –∏–∑ —Å—Ç—Ä–æ–∫–∏
   * @param {string} str - –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —á–∏—Å–ª–æ–≤–æ–π ID
   * @returns {number} –ß–∏—Å–ª–æ–≤–æ–π ID
   */
  _createNumericalId(str) {
    const hash = createHash('md5').update(str).digest('hex');
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
    return parseInt(hash.substring(0, 8), 16);
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —á–∞–Ω–∫–∏–Ω–≥–æ–º
   * @async
   * @param {Object[]} documents - –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
   * @param {string} documents[].id - ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
   * @param {string} documents[].content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
   * @param {DocumentMetadata} documents[].metadata - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
   * @param {ChunkingOptions} [chunkingOptions={}] - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞–Ω–∫–∏–Ω–≥–∞
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async addDocuments(documents, chunkingOptions = {}) {
    try {
      if (!this.initialized) {
        const initialized = await this.initialize();
        if (!initialized) {
          logger.warn('Could not initialize vector store, skipping addDocuments');
          return false;
        }
      }
      
      if (!documents || documents.length === 0) {
        logger.warn('No documents provided to add');
        return false;
      }
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞–Ω–∫–∏–Ω–≥–∞
      const chunkingConfig = { ...this.defaultChunkingOptions, ...chunkingOptions };
      
      logger.info(`üçÑ Adding ${documents.length} documents to vector store with chunking: ${chunkingConfig.enableChunking ? 'enabled' : 'disabled'}`);
      
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —á–∞–Ω–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
      for (const doc of documents) {
        await this._deleteDocumentChunks(doc.id);
      }
      
      let allChunks = [];
      
      // –ß–∞–Ω–∫–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
      if (chunkingConfig.enableChunking) {
        logger.info(`üçÑ Chunking documents with config: size=${chunkingConfig.chunkSize}, overlap=${chunkingConfig.overlap}`);
        allChunks = textChunker.chunkDocuments(documents, chunkingConfig);
        
        const stats = textChunker.getChunkingStats(allChunks);
        logger.info(`üçÑ Chunking stats: ${stats.totalChunks} chunks from ${stats.uniqueDocuments} documents, avg size: ${stats.averageChunkSize} chars`);
      } else {
        // –ë–µ–∑ —á–∞–Ω–∫–∏–Ω–≥–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–∞–∫ –µ—Å—Ç—å
        allChunks = documents.map(doc => ({
          id: doc.id,
          content: doc.content,
          metadata: {
            ...doc.metadata,
            originalId: doc.id,
            chunkIndex: 0,
            totalChunks: 1
          }
        }));
      }
      
      if (allChunks.length === 0) {
        logger.warn('üçÑ No chunks to add after processing');
        return false;
      }
      
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–æ—á–µ–∫ –¥–ª—è Qdrant
      const points = [];
      
      for (const chunk of allChunks) {
        try {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
          if (!chunk.id || !chunk.content) {
            logger.warn(`üçÑ Chunk missing required fields (id, content): ${JSON.stringify(chunk)}`);
            continue;
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
          logger.debug(`üçÑ Processing chunk ID: ${chunk.id}, content length: ${chunk.content.length} characters`);
          
          // –°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ ID –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ ID (Qdrant —Ç—Ä–µ–±—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ ID)
          const pointId = this._createNumericalId(chunk.id.toString());
          
          // –°–æ–∑–¥–∞–Ω–∏–µ embedding –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —á–∞–Ω–∫–∞
          const embedding = await this._createEmbedding(chunk.content);
          
          if (!embedding || !Array.isArray(embedding) || embedding.length !== 1536) {
            logger.error(`üçÑ Invalid embedding for chunk ${chunk.id}: ${embedding ? 'Length: ' + embedding.length : 'null'}`);
            continue;
          }
          
          logger.debug(`üçÑ Created embedding for chunk ${chunk.id}, embedding size: ${embedding.length}`);
          
          // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –¥–ª—è Qdrant —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
          points.push({
            id: pointId,
            vector: embedding,
            payload: {
              content: chunk.content,
              metadata: {
                id: chunk.id.toString(),
                originalId: chunk.metadata.originalId || chunk.id,
                title: chunk.metadata?.title || '',
                category: chunk.metadata?.category || '',
                language: chunk.metadata?.language || 'en',
                tags: Array.isArray(chunk.metadata?.tags) ? chunk.metadata.tags : [],
                chunkIndex: chunk.metadata.chunkIndex || 0,
                totalChunks: chunk.metadata.totalChunks || 1,
                startPosition: chunk.metadata.startPosition || 0,
                endPosition: chunk.metadata.endPosition || chunk.content.length,
                createdAt: chunk.metadata?.createdAt ? new Date(chunk.metadata.createdAt).toISOString() : new Date().toISOString(),
                updatedAt: new Date().toISOString()
              }
            }
          });
          
          logger.debug(`üçÑ Successfully processed chunk ${chunk.id} with point ID ${pointId}`);
        } catch (chunkError) {
          logger.error(`üçÑ Error processing chunk ${chunk.id}: ${chunkError.message}`);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —á–∞–Ω–∫–∞–º–∏
        }
      }
      
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –≤ Qdrant
      if (points.length > 0) {
        // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(`üçÑ First point structure sample: ${JSON.stringify(points[0], null, 2).substring(0, 300)}...`);
        logger.info(`üçÑ Upserting ${points.length} chunks to Qdrant collection ${this.collectionName}`);
        
        try {
          // –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –≤—Å–µ —Ç–æ—á–∫–∏ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
          await this.client.upsert(this.collectionName, {
            points: points
          });
          logger.info(`üçÑ Successfully added ${points.length} chunks to vector store (from ${documents.length} documents)`);
          return true;
        } catch (upsertError) {
          logger.error(`üçÑ Upsert error: ${upsertError.message}`);
          
          // –ï—Å–ª–∏ –ø–∞–∫–µ—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –ø–æ –æ–¥–Ω–æ–π
          let successCount = 0;
          for (const point of points) {
            try {
              await this.client.upsert(this.collectionName, {
                points: [point]
              });
              successCount++;
              logger.debug(`üçÑ Successfully added chunk with ID ${point.id}`);
            } catch (singleUpsertError) {
              logger.error(`üçÑ Failed to add chunk ${point.id}: ${singleUpsertError.message}`);
            }
          }
          
          if (successCount > 0) {
            logger.info(`üçÑ Added ${successCount}/${points.length} chunks individually`);
            return successCount > 0;
          }
          
          return false;
        }
      } else {
        logger.warn('üçÑ No valid chunks to add after processing');
        return false;
      }
    } catch (error) {
      logger.error(`üçÑ Failed to add documents to vector store: ${error.message}`);
      return false;
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —á–∞–Ω–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã
   * @private
   * @param {string} originalId - ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async _deleteDocumentChunks(originalId) {
    try {
      if (!this.initialized) {
        return false;
      }

      logger.debug(`üçÑ Deleting chunks for document: ${originalId}`);
      
      // –ò—â–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      const searchResults = await this.client.scroll(this.collectionName, {
        filter: {
          must: [{
            key: 'metadata.originalId',
            match: { value: originalId }
          }]
        },
        limit: 1000,
        with_payload: false
      });

      if (searchResults.points.length > 0) {
        const pointIds = searchResults.points.map(point => point.id);
        
        await this.client.delete(this.collectionName, {
          points: pointIds
        });
        
        logger.debug(`üçÑ Deleted ${pointIds.length} chunks for document ${originalId}`);
      }

      return true;
    } catch (error) {
      logger.error(`üçÑ Failed to delete chunks for document ${originalId}: ${error.message}`);
      return false;
    }
  }

  /**
   * –ò—â–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—É
   * @async
   * @param {string} query - –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
   * @param {SearchOptions} [options={}] - –û–ø—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
   * @returns {Promise<SearchResult[]>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
   */
  async search(query, options = {}) {
    try {
      if (!this.initialized) {
        const initialized = await this.initialize();
        if (!initialized) {
          logger.warn('Vector store not initialized, returning empty search results');
          return [];
        }
      }
      
      if (!query || typeof query !== 'string' || query.trim() === '') {
        logger.warn('Empty or invalid query provided to search');
        return [];
      }
      
      const { 
        limit = 5, 
        language, 
        category, 
        tags,
        returnChunks = false  // –ù–û–í–ê–Ø –û–ü–¶–ò–Ø: –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
      } = options;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–∑—ã–∫–∞, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω —è–≤–Ω–æ
      const score_threshold = options.score_threshold !== undefined 
        ? options.score_threshold 
        : this._getLanguageThreshold(language);
      
      logger.info(`üçÑ Searching for relevant documents with adaptive threshold: ${score_threshold} (language: ${language || 'auto'})`);
      logger.info(`Searching for: \"${query.substring(0, 30)}${query.length > 30 ? '...' : ''}\" with options: ${JSON.stringify({
        limit, language, category, tags: Array.isArray(tags) ? tags.length : tags, score_threshold, returnChunks
      })}`);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ embedding –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const embedding = await this._createEmbedding(query);
      logger.debug(`Created embedding for search query, embedding size: ${embedding.length}`);
      
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞
      const filter = {};
      const mustConditions = [];
      
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —è–∑—ã–∫–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–≥–æ–≤
      if (language) {
        mustConditions.push({ 
          key: 'metadata.language', 
          match: { value: language } 
        });
        logger.debug(`Added language filter: ${language}`);
      }
      
      if (category) {
        mustConditions.push({ 
          key: 'metadata.category', 
          match: { value: category } 
        });
        logger.debug(`Added category filter: ${category}`);
      }
      
      // –î–ª—è —Ç–µ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º should —É—Å–ª–æ–≤–∏–µ (—Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ —Ç–µ–≥–æ–≤)
      if (tags && Array.isArray(tags) && tags.length > 0) {
        const tagsFilter = tags.map(tag => ({
          key: 'metadata.tags',
          match: { value: tag }
        }));
        
        if (tagsFilter.length > 0) {
          mustConditions.push({ should: tagsFilter });
          logger.debug(`Added tags filter with ${tagsFilter.length} tags`);
        }
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —É—Å–ª–æ–≤–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Ñ–∏–ª—å—Ç—Ä
      if (mustConditions.length > 0) {
        filter.must = mustConditions;
        logger.debug(`Applied filter with ${mustConditions.length} conditions`);
      }
      
      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∞–Ω–∫–æ–≤
      const searchLimit = Math.min(limit * 3, 30); // –ò—â–µ–º –±–æ–ª—å—à–µ —á–∞–Ω–∫–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
      logger.debug(`üçÑ Executing search with adaptive score_threshold: ${score_threshold} for language: ${language || 'auto'}, limit: ${searchLimit}`);
      const searchResults = await this.client.search(this.collectionName, {
        vector: embedding,
        limit: searchLimit,
        filter: Object.keys(filter).length > 0 ? filter : undefined,
        with_payload: true,
        score_threshold: score_threshold
      });
      
      // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
      if (searchResults.length > 0) {
        logger.debug(`üçÑ Search returned ${searchResults.length} chunk results with scores: ${searchResults.map(r => r.score.toFixed(3)).join(', ')}`);
        logger.info(`üçÑ Found ${searchResults.length} chunks above threshold ${score_threshold} for ${language || 'auto'} language`);
      } else {
        logger.debug(`üçÑ Search returned no results with adaptive threshold: ${score_threshold} for language: ${language || 'auto'}`);
        logger.info(`üçÑ No chunks found above threshold ${score_threshold} - query may not be relevant to knowledge base`);
      }

      // –ù–û–í–û–ï: –í—ã–±–æ—Ä –º–µ–∂–¥—É –≤–æ–∑–≤—Ä–∞—Ç–æ–º —á–∞–Ω–∫–æ–≤ –∏–ª–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
      if (returnChunks) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞–Ω–∫–∏ –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        const results = searchResults
          .slice(0, limit)
          .map(result => ({
            id: result.payload.metadata.id,
            content: result.payload.content,
            metadata: result.payload.metadata,
            score: result.score,
            isChunk: result.payload.metadata.originalId !== result.payload.metadata.id,
            chunkInfo: result.payload.metadata.originalId !== result.payload.metadata.id ? {
              originalId: result.payload.metadata.originalId,
              chunkIndex: result.payload.metadata.chunkIndex,
              totalChunks: result.payload.metadata.totalChunks,
              startPosition: result.payload.metadata.startPosition,
              endPosition: result.payload.metadata.endPosition
            } : null
          }));

        logger.info(`üçÑ Found ${results.length} relevant chunks (detailed mode)`);
        return results;
      }
      
      // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ originalId –∏ –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —á–∞–Ω–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      const groupedResults = new Map();
      
      searchResults.forEach(result => {
        const originalId = result.payload.metadata.originalId || result.payload.metadata.id;
        const existing = groupedResults.get(originalId);
        
        if (!existing || result.score > existing.score) {
          groupedResults.set(originalId, result);
        }
      });
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ —á–∞–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      const results = Array.from(groupedResults.values())
        .sort((a, b) => b.score - a.score) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        .slice(0, limit) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        .map(result => {
          const isChunk = result.payload.metadata.originalId !== result.payload.metadata.id;
          
          return {
            id: result.payload.metadata.originalId || result.payload.metadata.id,
            content: result.payload.content,
            metadata: {
              ...result.payload.metadata,
              // –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è —á–∞–Ω–∫–∏–Ω–≥–∞ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞ –ø—Ä–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ
              chunkIndex: undefined,
              totalChunks: undefined,
              startPosition: undefined,
              endPosition: undefined,
              // –ù–æ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —á–∞–Ω–∫–∞
              sourceType: isChunk ? 'chunk' : 'document',
              sourceChunkIndex: isChunk ? result.payload.metadata.chunkIndex : undefined
            },
            score: result.score
          };
        });
      
      logger.info(`üçÑ Found ${results.length} relevant documents (from ${searchResults.length} chunks)`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      results.forEach((result, index) => {
        const sourceInfo = result.metadata.sourceType === 'chunk' 
          ? `chunk ${result.metadata.sourceChunkIndex}` 
          : 'full document';
        logger.debug(`üçÑ Result #${index+1}: ID=${result.id}, Score=${result.score.toFixed(4)}, Source=${sourceInfo}, Language=${result.metadata?.language || 'unknown'}`);
        logger.debug(`üçÑ Content preview: ${result.content.substring(0, 100)}${result.content.length > 100 ? '...' : ''}`);
      });
      
      return results;
    } catch (error) {
      logger.error(`üçÑ Search failed: ${error.message}`);
      return [];
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã (–≤—Å–µ –µ–≥–æ —á–∞–Ω–∫–∏)
   * @async
   * @param {string} documentId - ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async deleteDocument(documentId) {
    try {
      if (!this.initialized) {
        const initialized = await this.initialize();
        if (!initialized) {
          logger.warn('Vector store not initialized, cannot delete document');
          return false;
        }
      }
      
      logger.info(`üçÑ Deleting document and all its chunks: ${documentId}`);
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      const success = await this._deleteDocumentChunks(documentId);
      
      if (success) {
        logger.info(`üçÑ Document and chunks deleted: ${documentId}`);
      } else {
        logger.warn(`üçÑ Failed to delete some chunks for document: ${documentId}`);
      }
      
      return success;
    } catch (error) {
      logger.error(`üçÑ Failed to delete document: ${error.message}`);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
   * @returns {Promise<Object>} –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
   */
  async healthCheck() {
    try {
      if (!this.initialized) {
        await this.initialize();
      }
      
      if (!this.initialized) {
        return {
          status: 'not_initialized',
          message: 'Vector store not initialized',
          isInitialized: false,
          chunkingEnabled: this.defaultChunkingOptions.enableChunking
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π –≤–º–µ—Å—Ç–æ healthCheck
      const collections = await this.client.getCollections();
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ points_count
      let collectionInfo = { points_count: 0 };
      try {
        collectionInfo = await this.client.getCollection(this.collectionName);
      } catch (error) {
        logger.warn(`Could not get collection info: ${error.message}`);
      }
      
      return {
        status: 'ok',
        message: 'Vector store is healthy',
        isInitialized: true,
        qdrantStatus: { collections_count: collections.collections.length },
        collection: {
          name: this.collectionName,
          vectorCount: collectionInfo.points_count || 0,
          vectorDimension: this.vectorDimension
        },
        languageThresholds: this.languageThresholds,
        chunkingConfig: this.defaultChunkingOptions
      };
    } catch (error) {
      return {
        status: 'error',
        message: `Vector store health check failed: ${error.message}`,
        isInitialized: this.initialized,
        chunkingEnabled: this.defaultChunkingOptions.enableChunking
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async getStats() {
    try {
      if (!this.initialized) {
        return {
          status: 'not_initialized',
          documentsCount: 0,
          chunksCount: 0,
          cacheSize: this.embeddingCache.size,
          lastUpdate: null,
          languageThresholds: this.languageThresholds,
          chunkingConfig: this.defaultChunkingOptions
        };
      }
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ points_count
      let collectionInfo = { points_count: 0 };
      try {
        collectionInfo = await this.client.getCollection(this.collectionName);
      } catch (error) {
        logger.warn(`Could not get collection info: ${error.message}`);
      }

      // –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–ø–æ originalId)
      let uniqueDocuments = 0;
      try {
        const scrollResult = await this.client.scroll(this.collectionName, {
          limit: 10000,
          with_payload: ['metadata.originalId']
        });
        
        const originalIds = new Set();
        scrollResult.points.forEach(point => {
          const originalId = point.payload?.metadata?.originalId;
          if (originalId) {
            originalIds.add(originalId);
          }
        });
        uniqueDocuments = originalIds.size;
      } catch (error) {
        logger.warn(`Could not count unique documents: ${error.message}`);
      }
      
      return {
        status: 'ok',
        documentsCount: uniqueDocuments,
        chunksCount: collectionInfo.points_count || 0,
        cacheSize: this.embeddingCache.size,
        lastUpdate: new Date().toISOString(),
        languageThresholds: this.languageThresholds,
        chunkingConfig: this.defaultChunkingOptions
      };
    } catch (error) {
      logger.error(`Failed to get stats: ${error.message}`);
      return {
        status: 'error',
        documentsCount: 0,
        chunksCount: 0,
        cacheSize: this.embeddingCache.size,
        error: error.message,
        languageThresholds: this.languageThresholds,
        chunkingConfig: this.defaultChunkingOptions
      };
    }
  }
  
  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
   * @async
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async clearCollection() {
    try {
      if (!this.initialized) {
        const initialized = await this.initialize();
        if (!initialized) {
          logger.warn('Vector store not initialized, cannot clear collection');
          return false;
        }
      }
      
      logger.warn(`üçÑ Clearing entire collection: ${this.collectionName}`);
      
      // –£–¥–∞–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      await this.client.deleteCollection(this.collectionName);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      this.initialized = false;
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      await this.initialize();
      
      logger.info(`üçÑ Collection cleared: ${this.collectionName}`);
      return true;
    } catch (error) {
      logger.error(`üçÑ Failed to clear collection: ${error.message}`);
      return false;
    }
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç embedding –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞
   * @private
   * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è embedding
   * @returns {Promise<number[]>} Embedding –≤–µ–∫—Ç–æ—Ä
   */
  async _createEmbedding(text) {
    // –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    const normalizedText = text.trim().toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
    if (this.embeddingCache.has(normalizedText)) {
      logger.debug('Using cached embedding');
      return this.embeddingCache.get(normalizedText);
    }
    
    try {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ embedding
      logger.debug(`Generating new embedding for text (length: ${normalizedText.length})`);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API OpenAI –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
      const embedding = await this.embeddings.embedQuery(normalizedText);
      
      if (!embedding || !Array.isArray(embedding)) {
        throw new Error('Invalid embedding returned: not an array');
      }
      
      if (embedding.length !== this.vectorDimension) {
        throw new Error(`Unexpected embedding dimension: got ${embedding.length}, expected ${this.vectorDimension}`);
      }
      
      // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      if (this.embeddingCache.size >= this.maxCacheSize) {
        // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π) –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
        const firstKey = this.embeddingCache.keys().next().value;
        this.embeddingCache.delete(firstKey);
        logger.debug('Embedding cache limit reached, removing oldest entry');
      }
      this.embeddingCache.set(normalizedText, embedding);
      
      return embedding;
    } catch (error) {
      logger.error(`Error creating embedding: ${error.message}`);
      throw error;
    }
  }
  
  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   * @async
   * @param {string} query - –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
   * @param {number} [threshold] - –ü–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π)
   * @param {string} [language] - –Ø–∑—ã–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä–æ–≥–∞
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
   */
  async testSearch(query, threshold, language) {
    if (!query || typeof query !== 'string' || query.trim() === '') {
      return { error: 'Empty or invalid query provided' };
    }
    
    try {
      if (!this.initialized) {
        await this.initialize();
      }
      
      if (!this.initialized) {
        return { error: 'Vector store not initialized' };
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
      const testThreshold = threshold !== undefined ? threshold : this._getLanguageThreshold(language);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ embedding –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const embedding = await this._createEmbedding(query);
      
      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const thresholds = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1];
      
      const results = {};
      
      // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
      for (const testThresholdValue of thresholds) {
        const searchResults = await this.client.search(this.collectionName, {
          vector: embedding,
          limit: 10,
          with_payload: true,
          score_threshold: testThresholdValue
        });
        
        results[testThresholdValue] = {
          count: searchResults.length,
          scores: searchResults.map(r => r.score.toFixed(4))
        };
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∞–∫–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ä–æ–≥–∞
      const currentResults = await this.client.search(this.collectionName, {
        vector: embedding,
        limit: 10,
        with_payload: true,
        score_threshold: testThreshold
      });
      
      const formattedResults = currentResults.map(result => ({
        id: result.payload.metadata.id || result.id.toString(),
        originalId: result.payload.metadata.originalId,
        score: result.score,
        content: result.payload.content.substring(0, 100) + (result.payload.content.length > 100 ? '...' : ''),
        metadata: result.payload.metadata
      }));
      
      return {
        query,
        language,
        threshold: testThreshold,
        automaticThreshold: this._getLanguageThreshold(language),
        resultsByThreshold: results,
        chunksFound: formattedResults.length,
        topResults: formattedResults,
        chunkingEnabled: this.defaultChunkingOptions.enableChunking
      };
    } catch (error) {
      logger.error(`üçÑ Test search failed: ${error.message}`);
      return { error: `Test search failed: ${error.message}` };
    }
  }
  
  /**
   * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–∞–Ω–∫–∏–Ω–≥–∞
   * @async
   * @returns {Promise<Object>} –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
   */
  async diagnose() {
    try {
      if (!this.initialized) {
        await this.initialize();
      }
      
      if (!this.initialized) {
        return { 
          status: 'error',
          message: 'Vector store not initialized',
          initialized: false,
          chunkingEnabled: this.defaultChunkingOptions.enableChunking
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      const connectionStatus = await this.client.getCollections()
        .then(() => ({ status: 'ok', message: 'Connected to Qdrant' }))
        .catch(error => ({ status: 'error', message: `Connection failed: ${error.message}` }));
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ points_count
      let collectionStatus = { status: 'unknown' };
      try {
        const collectionInfo = await this.client.getCollection(this.collectionName);
        collectionStatus = {
          status: 'ok',
          message: `Collection ${this.collectionName} exists`,
          info: {
            vectorCount: collectionInfo.points_count || 0,
            vectorDimension: this.vectorDimension,
          }
        };
      } catch (error) {
        collectionStatus = {
          status: 'error',
          message: `Collection check failed: ${error.message}`
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
      let embeddingStatus = { status: 'unknown' };
      try {
        const testEmbedding = await this._createEmbedding('test embedding for diagnostics');
        embeddingStatus = {
          status: 'ok',
          message: 'Embedding creation works',
          dimension: testEmbedding.length
        };
      } catch (error) {
        embeddingStatus = {
          status: 'error',
          message: `Embedding creation failed: ${error.message}`
        };
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞–Ω–∫–∏–Ω–≥–∞
      let chunkingStatus = { status: 'unknown' };
      try {
        const testDoc = {
          id: 'test-doc',
          content: 'This is a test document for chunking functionality. '.repeat(20),
          metadata: { title: 'Test', language: 'en', category: 'test' }
        };
        
        const chunks = textChunker.chunkDocument(testDoc);
        chunkingStatus = {
          status: 'ok',
          message: 'Chunking functionality works',
          testChunks: chunks.length,
          chunkingEnabled: this.defaultChunkingOptions.enableChunking
        };
      } catch (error) {
        chunkingStatus = {
          status: 'error',
          message: `Chunking test failed: ${error.message}`
        };
      }
      
      // –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
      const overallStatus = 
        connectionStatus.status === 'ok' && 
        collectionStatus.status === 'ok' && 
        embeddingStatus.status === 'ok' &&
        chunkingStatus.status === 'ok' ? 'ok' : 'error';
      
      return {
        status: overallStatus,
        connection: connectionStatus,
        collection: collectionStatus,
        embedding: embeddingStatus,
        chunking: chunkingStatus,
        config: {
          url: this.url,
          collectionName: this.collectionName,
          embeddingModel: this.embeddingModel,
          cacheSize: this.embeddingCache.size,
          maxCacheSize: this.maxCacheSize,
          languageThresholds: this.languageThresholds,
          defaultThreshold: this.defaultThreshold,
          chunkingConfig: this.defaultChunkingOptions
        }
      };
    } catch (error) {
      logger.error(`üçÑ Diagnostics failed: ${error.message}`);
      return {
        status: 'error',
        message: `Diagnostics failed: ${error.message}`,
        chunkingEnabled: this.defaultChunkingOptions.enableChunking
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
module.exports = new VectorStoreService();
/**
 * @fileoverview –°–µ—Ä–≤–∏—Å —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @author g1orgi89
 */

const { Quote } = require('../models');
const { UserProfile } = require('../models');

/**
 * @typedef {Object} Achievement
 * @property {string} id - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 * @property {string} name - –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 * @property {string} description - –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 * @property {string} icon - –≠–º–æ–¥–∑–∏ –∏–∫–æ–Ω–∫–∞
 * @property {number} targetValue - –¶–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
 * @property {string} type - –¢–∏–ø –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 * @property {Function} checkCondition - –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è
 */

/**
 * –°–µ—Ä–≤–∏—Å —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 */
class AchievementService {
  constructor() {
    this.achievements = this._initializeAchievements();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
   * @returns {Achievement[]}
   * @private
   */
  _initializeAchievements() {
    return [
      {
        id: 'first_quote',
        name: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
        description: '–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É –≤ –¥–Ω–µ–≤–Ω–∏–∫ –º—É–¥—Ä–æ—Å—Ç–∏',
        icon: 'üå±',
        targetValue: 1,
        type: 'quotes_count',
        checkCondition: async (userId) => {
          const count = await Quote.countDocuments({ userId });
          return count >= 1;
        }
      },
      {
        id: 'wisdom_collector',
        name: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –º—É–¥—Ä–æ—Å—Ç–∏',
        description: '–°–æ–±—Ä–∞–ª–∏ 25 —Ü–∏—Ç–∞—Ç - –Ω–∞—Å—Ç–æ—è—â–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è!',
        icon: 'üìö',
        targetValue: 25,
        type: 'quotes_count',
        checkCondition: async (userId) => {
          const count = await Quote.countDocuments({ userId });
          return count >= 25;
        }
      },
      {
        id: 'week_philosopher',
        name: '–§–∏–ª–æ—Å–æ—Ñ –Ω–µ–¥–µ–ª–∏',
        description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ - –≤—ã –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç–µ —á—Ç–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤—ã—á–∫—É',
        icon: 'üî•',
        targetValue: 7,
        type: 'streak_days',
        checkCondition: async (userId) => {
          const user = await UserProfile.findOne({ userId });
          return user && user.statistics.currentStreak >= 7;
        }
      },
      {
        id: 'classics_lover',
        name: '–õ—é–±–∏—Ç–µ–ª—å –∫–ª–∞—Å—Å–∏–∫–∏',
        description: '10 —Ü–∏—Ç–∞—Ç –∫–ª–∞—Å—Å–∏–∫–æ–≤ - –≤—ã —Ü–µ–Ω–∏—Ç–µ –≤–µ—á–Ω—ã–µ –∏—Å—Ç–∏–Ω—ã',
        icon: 'üìñ',
        targetValue: 10,
        type: 'classics_count',
        checkCondition: async (userId) => {
          const classicAuthors = [
            '–¢–æ–ª—Å—Ç–æ–π', '–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π', '–õ. –¢–æ–ª—Å—Ç–æ–π',
            '–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π', '–§–µ–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π', '–§. –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π',
            '–ü—É—à–∫–∏–Ω', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü—É—à–∫–∏–Ω', '–ê. –ü—É—à–∫–∏–Ω',
            '–ß–µ—Ö–æ–≤', '–ê–Ω—Ç–æ–Ω –ß–µ—Ö–æ–≤', '–ê. –ß–µ—Ö–æ–≤',
            '–¢—É—Ä–≥–µ–Ω–µ–≤', '–ò–≤–∞–Ω –¢—É—Ä–≥–µ–Ω–µ–≤', '–ò. –¢—É—Ä–≥–µ–Ω–µ–≤',
            '–ì–æ–≥–æ–ª—å', '–ù–∏–∫–æ–ª–∞–π –ì–æ–≥–æ–ª—å', '–ù. –ì–æ–≥–æ–ª—å',
            '–õ–µ—Ä–º–æ–Ω—Ç–æ–≤', '–ú–∏—Ö–∞–∏–ª –õ–µ—Ä–º–æ–Ω—Ç–æ–≤', '–ú. –õ–µ—Ä–º–æ–Ω—Ç–æ–≤'
          ];
          
          const count = await Quote.countDocuments({
            userId,
            author: { $in: classicAuthors }
          });
          return count >= 10;
        }
      },
      {
        id: 'thinker',
        name: '–ú—ã—Å–ª–∏—Ç–µ–ª—å',
        description: '10 —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º—ã—Å–ª–µ–π - –≤—ã –Ω–µ —Ç–æ–ª—å–∫–æ —á–∏—Ç–∞–µ—Ç–µ, –Ω–æ –∏ —Ä–∞–∑–º—ã—à–ª—è–µ—Ç–µ',
        icon: 'üí≠',
        targetValue: 10,
        type: 'own_thoughts',
        checkCondition: async (userId) => {
          const count = await Quote.countDocuments({
            userId,
            $or: [
              { author: { $exists: false } },
              { author: null },
              { author: '' }
            ]
          });
          return count >= 10;
        }
      },
      {
        id: 'marathon_reader',
        name: '–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü —á—Ç–µ–Ω–∏—è',
        description: '50 —Ü–∏—Ç–∞—Ç - –≤—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —Ü–µ–Ω–∏—Ç–µ–ª—å –º—É–¥—Ä–æ—Å—Ç–∏',
        icon: 'üèÉ‚Äç‚ôÄÔ∏è',
        targetValue: 50,
        type: 'quotes_count',
        checkCondition: async (userId) => {
          const count = await Quote.countDocuments({ userId });
          return count >= 50;
        }
      },
      {
        id: 'diverse_reader',
        name: '–†–∞–∑–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —á–∏—Ç–∞—Ç–µ–ª—å',
        description: '–¶–∏—Ç–∞—Ç—ã –∏–∑ 5 —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π - —à–∏—Ä–æ–∫–∏–π –∫—Ä—É–≥–æ–∑–æ—Ä!',
        icon: 'üåà',
        targetValue: 5,
        type: 'category_diversity',
        checkCondition: async (userId) => {
          const categories = await Quote.distinct('category', { userId });
          return categories.length >= 5;
        }
      },
      {
        id: 'monthly_consistent',
        name: '–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ',
        description: '–ú–µ—Å—è—Ü —Å –±–æ—Ç–æ–º –∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ',
        icon: '‚≠ê',
        targetValue: 30,
        type: 'days_with_bot',
        checkCondition: async (userId) => {
          const user = await UserProfile.findOne({ userId });
          if (!user) return false;
          
          const daysSinceRegistration = Math.floor(
            (new Date() - user.registeredAt) / (1000 * 60 * 60 * 24)
          );
          
          const quotesCount = await Quote.countDocuments({ userId });
          return daysSinceRegistration >= 30 && quotesCount >= 15;
        }
      }
    ];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   * @returns {Achievement[]}
   */
  getAllAchievements() {
    return this.achievements;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ ID
   * @param {string} achievementId - ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   * @returns {Achievement|null}
   */
  getAchievementById(achievementId) {
    return this.achievements.find(a => a.id === achievementId) || null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Achievement[]>} –ú–∞—Å—Å–∏–≤ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   */
  async checkAndUnlockAchievements(userId) {
    try {
      const user = await UserProfile.findOne({ userId });
      if (!user) return [];

      const currentAchievements = user.achievements.map(a => a.achievementId);
      const newAchievements = [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
      for (const achievement of this.achievements) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if (currentAchievements.includes(achievement.id)) {
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è
        const isUnlocked = await achievement.checkCondition(userId);
        
        if (isUnlocked) {
          // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          await user.addAchievement(achievement.id);
          newAchievements.push(achievement);
          
          console.log(`üèÜ User ${userId} unlocked achievement: ${achievement.name}`);
        }
      }

      return newAchievements;
    } catch (error) {
      console.error('Error checking achievements:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object[]>} –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
   */
  async getUserAchievementProgress(userId) {
    try {
      const user = await UserProfile.findOne({ userId });
      if (!user) return [];

      const userAchievements = user.achievements.map(a => a.achievementId);
      const progress = [];

      for (const achievement of this.achievements) {
        const isUnlocked = userAchievements.includes(achievement.id);
        let currentValue = 0;

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        if (!isUnlocked) {
          currentValue = await this._getCurrentProgress(userId, achievement);
        }

        progress.push({
          ...achievement,
          isUnlocked,
          currentValue,
          progress: isUnlocked ? 100 : Math.min((currentValue / achievement.targetValue) * 100, 100),
          unlockedAt: isUnlocked ? user.achievements.find(a => a.achievementId === achievement.id)?.unlockedAt : null
        });
      }

      return progress;
    } catch (error) {
      console.error('Error getting achievement progress:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Achievement} achievement - –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
   * @returns {Promise<number>} –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   * @private
   */
  async _getCurrentProgress(userId, achievement) {
    try {
      switch (achievement.type) {
        case 'quotes_count':
          return await Quote.countDocuments({ userId });

        case 'streak_days':
          const user = await UserProfile.findOne({ userId });
          return user ? user.statistics.currentStreak : 0;

        case 'classics_count':
          const classicAuthors = [
            '–¢–æ–ª—Å—Ç–æ–π', '–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π', '–õ. –¢–æ–ª—Å—Ç–æ–π',
            '–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π', '–§–µ–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π', '–§. –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π',
            '–ü—É—à–∫–∏–Ω', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü—É—à–∫–∏–Ω', '–ê. –ü—É—à–∫–∏–Ω',
            '–ß–µ—Ö–æ–≤', '–ê–Ω—Ç–æ–Ω –ß–µ—Ö–æ–≤', '–ê. –ß–µ—Ö–æ–≤',
            '–¢—É—Ä–≥–µ–Ω–µ–≤', '–ò–≤–∞–Ω –¢—É—Ä–≥–µ–Ω–µ–≤', '–ò. –¢—É—Ä–≥–µ–Ω–µ–≤',
            '–ì–æ–≥–æ–ª—å', '–ù–∏–∫–æ–ª–∞–π –ì–æ–≥–æ–ª—å', '–ù. –ì–æ–≥–æ–ª—å',
            '–õ–µ—Ä–º–æ–Ω—Ç–æ–≤', '–ú–∏—Ö–∞–∏–ª –õ–µ—Ä–º–æ–Ω—Ç–æ–≤', '–ú. –õ–µ—Ä–º–æ–Ω—Ç–æ–≤'
          ];
          return await Quote.countDocuments({
            userId,
            author: { $in: classicAuthors }
          });

        case 'own_thoughts':
          return await Quote.countDocuments({
            userId,
            $or: [
              { author: { $exists: false } },
              { author: null },
              { author: '' }
            ]
          });

        case 'category_diversity':
          const categories = await Quote.distinct('category', { userId });
          return categories.length;

        case 'days_with_bot':
          const userProfile = await UserProfile.findOne({ userId });
          if (!userProfile) return 0;
          return Math.floor(
            (new Date() - userProfile.registeredAt) / (1000 * 60 * 60 * 24)
          );

        default:
          return 0;
      }
    } catch (error) {
      console.error('Error calculating progress:', error);
      return 0;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –¥–ª—è Telegram
   * @param {Achievement} achievement - –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
   * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  formatAchievementNotification(achievement) {
    return `üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!*

–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:
${achievement.icon} *${achievement.name}*
${achievement.description}

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –º–æ–º–µ–Ω—Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! üìñ`;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   */
  async getUserAchievementStats(userId) {
    try {
      const user = await UserProfile.findOne({ userId });
      if (!user) {
        return {
          totalAchievements: 0,
          unlockedAchievements: 0,
          completionRate: 0,
          recentAchievements: []
        };
      }

      const totalAchievements = this.achievements.length;
      const unlockedAchievements = user.achievements.length;
      const completionRate = Math.round((unlockedAchievements / totalAchievements) * 100);

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const recentAchievements = user.achievements
        .sort((a, b) => new Date(b.unlockedAt) - new Date(a.unlockedAt))
        .slice(0, 3)
        .map(userAchievement => {
          const achievement = this.getAchievementById(userAchievement.achievementId);
          return {
            ...achievement,
            unlockedAt: userAchievement.unlockedAt
          };
        });

      return {
        totalAchievements,
        unlockedAchievements,
        completionRate,
        recentAchievements
      };
    } catch (error) {
      console.error('Error getting achievement stats:', error);
      return {
        totalAchievements: 0,
        unlockedAchievements: 0,
        completionRate: 0,
        recentAchievements: []
      };
    }
  }
}

module.exports = AchievementService;
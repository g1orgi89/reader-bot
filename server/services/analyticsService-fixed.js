/**
 * @fileoverview –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å fallback –¥–∞–Ω–Ω—ã–º–∏
 * @description –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –¥–∞—à–±–æ—Ä–¥–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
 * @version 2.0.0
 */

/**
 * @typedef {import('../types/reader').DashboardStats} DashboardStats
 * @typedef {import('../types/reader').RetentionData} RetentionData
 * @typedef {import('../types/reader').UTMClickData} UTMClickData
 * @typedef {import('../types/reader').PromoCodeUsageData} PromoCodeUsageData
 */

class AnalyticsService {
  constructor() {
    this.name = 'AnalyticsService';
    this.fallbackMode = false;
    console.log('üìä AnalyticsService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞ —Å fallback
   * @param {string} dateRange - –ü–µ—Ä–∏–æ–¥ (1d, 7d, 30d, 90d)
   * @returns {Promise<DashboardStats>}
   */
  async getDashboardStats(dateRange = '7d') {
    try {
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: ${dateRange}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π
      const modelsAvailable = await this.checkModelsAvailability();
      
      if (!modelsAvailable) {
        console.log('üìä –ú–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
        return this.getFallbackDashboardStats(dateRange);
      }

      const startDate = this.getStartDate(dateRange);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const [
        totalUsers,
        newUsers,
        totalQuotes,
        activeUsers,
        promoUsage,
        sourceStats,
        utmStats
      ] = await Promise.all([
        this.getTotalUsers(),
        this.getNewUsers(startDate),
        this.getTotalQuotes(startDate),
        this.getActiveUsers(startDate),
        this.getPromoUsage(startDate),
        this.getSourceStats(startDate),
        this.getUTMStats(startDate)
      ]);

      const avgQuotesPerUser = totalUsers > 0 ? 
        Math.round((totalQuotes / totalUsers) * 10) / 10 : 0;

      const stats = {
        overview: {
          totalUsers,
          newUsers,
          totalQuotes,
          avgQuotesPerUser,
          activeUsers,
          promoUsage
        },
        sourceStats,
        utmStats,
        period: dateRange,
        timestamp: new Date().toISOString(),
        fallbackMode: false
      };

      console.log('üìä –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      return stats;

    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ fallback:', error);
      return this.getFallbackDashboardStats(dateRange);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö retention —Å fallback
   * @returns {Promise<RetentionData[]>}
   */
  async getUserRetentionStats() {
    try {
      console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ retention');
      
      const modelsAvailable = await this.checkModelsAvailability();
      
      if (!modelsAvailable) {
        console.log('üìä –ú–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback retention –¥–∞–Ω–Ω—ã–µ');
        return this.getFallbackRetentionData();
      }

      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ retention
      const { UserProfile } = require('../models/userProfile');
      const { Quote } = require('../models/quote');

      const cohorts = await UserProfile.aggregate([
        {
          $group: {
            _id: {
              year: { $year: '$registeredAt' },
              month: { $month: '$registeredAt' }
            },
            users: { $push: '$userId' }
          }
        },
        { $sort: { '_id.year': 1, '_id.month': 1 } }
      ]);

      if (!cohorts || cohorts.length === 0) {
        return this.getFallbackRetentionData();
      }

      const retentionData = [];

      for (const cohort of cohorts.slice(-6)) { // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –∫–æ–≥–æ—Ä—Ç
        const cohortUsers = cohort.users;
        const cohortDate = new Date(cohort._id.year, cohort._id.month - 1, 1);
        
        const retention = {
          cohort: `${cohort._id.year}-${cohort._id.month.toString().padStart(2, '0')}`,
          size: cohortUsers.length,
          week1: 0,
          week2: 0,
          week3: 0,
          week4: 0
        };

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º retention –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–µ–¥–µ–ª–∏
        for (let week = 1; week <= 4; week++) {
          const weekStart = new Date(cohortDate);
          weekStart.setDate(weekStart.getDate() + (week - 1) * 7);
          const weekEnd = new Date(weekStart);
          weekEnd.setDate(weekEnd.getDate() + 7);

          const activeInWeek = await Quote.distinct('userId', {
            userId: { $in: cohortUsers },
            createdAt: { $gte: weekStart, $lt: weekEnd }
          });

          retention[`week${week}`] = Math.round((activeInWeek.length / cohortUsers.length) * 100);
        }

        retentionData.push(retention);
      }

      console.log('üìä –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ retention –ø–æ–ª—É—á–µ–Ω—ã');
      return retentionData;

    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è retention –¥–∞–Ω–Ω—ã—Ö:', error);
      return this.getFallbackRetentionData();
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å fallback
   * @param {string} dateRange - –ü–µ—Ä–∏–æ–¥
   * @returns {Promise<Object>}
   */
  async getTopQuotesAndAuthors(dateRange = '30d') {
    try {
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: ${dateRange}`);
      
      const modelsAvailable = await this.checkModelsAvailability();
      
      if (!modelsAvailable) {
        console.log('üìä –ú–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç');
        return this.getFallbackTopContent();
      }

      const startDate = this.getStartDate(dateRange);
      const { Quote } = require('../models/quote');

      // –¢–æ–ø –∞–≤—Ç–æ—Ä—ã
      const topAuthors = await Quote.aggregate([
        { 
          $match: { 
            createdAt: { $gte: startDate }, 
            author: { $ne: null, $ne: '' } 
          } 
        },
        { $group: { _id: '$author', count: { $sum: 1 } } },
        { $sort: { count: -1 } },
        { $limit: 10 }
      ]);

      // –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const topCategories = await Quote.aggregate([
        { $match: { createdAt: { $gte: startDate } } },
        { $group: { _id: '$category', count: { $sum: 1 } } },
        { $sort: { count: -1 } },
        { $limit: 10 }
      ]);

      // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
      const popularQuotes = await Quote.aggregate([
        { $match: { createdAt: { $gte: startDate } } },
        { 
          $group: { 
            _id: '$text', 
            author: { $first: '$author' }, 
            count: { $sum: 1 } 
          } 
        },
        { $match: { count: { $gt: 1 } } },
        { $sort: { count: -1 } },
        { $limit: 5 }
      ]);

      const topContent = {
        topAuthors: topAuthors.length > 0 ? topAuthors : this.getFallbackTopContent().topAuthors,
        topCategories: topCategories.length > 0 ? topCategories : this.getFallbackTopContent().topCategories,
        popularQuotes: popularQuotes.length > 0 ? popularQuotes : this.getFallbackTopContent().popularQuotes,
        fallbackMode: topAuthors.length === 0
      };

      console.log('üìä –¢–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω');
      return topContent;

    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
      return this.getFallbackTopContent();
    }
  }

  /**
   * –¢—Ä–µ–∫–∏–Ω–≥ UTM –∫–ª–∏–∫–æ–≤
   * @param {UTMClickData} utmParams - UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async trackUTMClick(utmParams, userId) {
    try {
      const { UTMClick } = require('../models/analytics');
      
      const click = new UTMClick({
        userId,
        source: utmParams.utm_source,
        medium: utmParams.utm_medium,
        campaign: utmParams.utm_campaign,
        content: utmParams.utm_content,
        userAgent: utmParams.user_agent,
        referrer: utmParams.referrer,
        ipAddress: utmParams.ip_address,
        sessionId: utmParams.session_id,
        timestamp: new Date()
      });

      await click.save();
      console.log(`üìä UTM –∫–ª–∏–∫ –∑–∞–ø–∏—Å–∞–Ω: ${utmParams.utm_campaign} –æ—Ç ${userId}`);

    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ UTM –∫–ª–∏–∫–∞:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    }
  }

  /**
   * –¢—Ä–µ–∫–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
   * @param {string} promoCode - –ü—Ä–æ–º–æ–∫–æ–¥
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} orderValue - –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞
   * @param {Object} metadata - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  async trackPromoCodeUsage(promoCode, userId, orderValue, metadata = {}) {
    try {
      const { PromoCodeUsage } = require('../models/analytics');
      
      const usage = new PromoCodeUsage({
        promoCode,
        userId,
        orderValue,
        discount: this.getDiscountForPromoCode(promoCode),
        source: metadata.source || 'telegram_bot',
        reportType: metadata.reportType,
        booksPurchased: metadata.booksPurchased,
        timestamp: new Date()
      });

      await usage.save();
      console.log(`üìä –ü—Ä–æ–º–æ–∫–æ–¥ –∑–∞–ø–∏—Å–∞–Ω: ${promoCode} –æ—Ç ${userId}, —Å—É–º–º–∞ ${orderValue}`);

    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
    }
  }

  /**
   * –¢—Ä–µ–∫–∏–Ω–≥ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} action - –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
   * @param {Object} metadata - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
   */
  async trackUserAction(userId, action, metadata = {}) {
    try {
      const { UserAction } = require('../models/analytics');
      
      const userAction = new UserAction({
        userId,
        action,
        metadata,
        timestamp: new Date()
      });

      await userAction.save();
      console.log(`üìä –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ: ${action} –æ—Ç ${userId}`);

    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }

  // ========================================
  // –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´
  // ========================================

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
   */
  async checkModelsAvailability() {
    try {
      const { UserProfile } = require('../models/userProfile');
      await UserProfile.countDocuments().limit(1);
      return true;
    } catch (error) {
      console.warn('üìä –ú–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:', error.message);
      return false;
    }
  }

  /**
   * Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
   */
  getFallbackDashboardStats(dateRange) {
    const baseStats = {
      overview: {
        totalUsers: 12,
        newUsers: 3,
        totalQuotes: 47,
        avgQuotesPerUser: 3.9,
        activeUsers: 8,
        promoUsage: 2
      },
      sourceStats: [
        { _id: 'Instagram', count: 5 },
        { _id: 'Telegram', count: 4 },
        { _id: 'YouTube', count: 2 },
        { _id: '–î—Ä—É–∑—å—è', count: 1 }
      ],
      utmStats: [
        { campaign: 'reader_recommendations', clicks: 15, uniqueUsers: 8 },
        { campaign: 'weekly_report', clicks: 23, uniqueUsers: 12 },
        { campaign: 'monthly_announcement', clicks: 8, uniqueUsers: 5 }
      ],
      period: dateRange,
      timestamp: new Date().toISOString(),
      fallbackMode: true
    };

    console.log('üìä –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã fallback –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞');
    return baseStats;
  }

  /**
   * Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è retention
   */
  getFallbackRetentionData() {
    const retentionData = [
      { 
        cohort: '2024-12', 
        size: 8,
        week1: 85, 
        week2: 72, 
        week3: 58, 
        week4: 45 
      },
      { 
        cohort: '2025-01', 
        size: 12,
        week1: 90, 
        week2: 78, 
        week3: 65, 
        week4: 52 
      }
    ];

    console.log('üìä –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã fallback –¥–∞–Ω–Ω—ã–µ retention');
    return retentionData;
  }

  /**
   * Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  getFallbackTopContent() {
    const topContent = {
      topAuthors: [
        { _id: '–≠—Ä–∏—Ö –§—Ä–æ–º–º', count: 8 },
        { _id: '–ú–∞—Ä–∏–Ω–∞ –¶–≤–µ—Ç–∞–µ–≤–∞', count: 6 },
        { _id: '–ê–Ω–Ω–∞ –ë—É—Å–µ–ª', count: 4 },
        { _id: '–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π', count: 3 },
        { _id: '–§—ë–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π', count: 2 }
      ],
      topCategories: [
        { _id: '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', count: 18 },
        { _id: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è', count: 12 },
        { _id: '–§–∏–ª–æ—Å–æ—Ñ–∏—è', count: 9 },
        { _id: '–õ—é–±–æ–≤—å', count: 5 },
        { _id: '–ú—É–¥—Ä–æ—Å—Ç—å', count: 3 }
      ],
      popularQuotes: [
        { 
          _id: '–í –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ ‚Äî —Ü–µ–ª–∞—è –∂–∏–∑–Ω—å', 
          author: '–ú–∞—Ä–∏–Ω–∞ –¶–≤–µ—Ç–∞–µ–≤–∞', 
          count: 3 
        },
        { 
          _id: '–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ª—é–±–∏—Ç—å', 
          author: '–≠—Ä–∏—Ö –§—Ä–æ–º–º', 
          count: 2 
        }
      ],
      fallbackMode: true
    };

    console.log('üìä –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã fallback –¥–∞–Ω–Ω—ã–µ —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
    return topContent;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
   */
  getStartDate(dateRange) {
    const now = new Date();
    switch (dateRange) {
      case '1d': return new Date(now.setDate(now.getDate() - 1));
      case '7d': return new Date(now.setDate(now.getDate() - 7));
      case '30d': return new Date(now.setDate(now.getDate() - 30));
      case '90d': return new Date(now.setDate(now.getDate() - 90));
      default: return new Date(now.setDate(now.getDate() - 7));
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
   */
  getDiscountForPromoCode(promoCode) {
    const discountMap = {
      'READER20': 20,
      'WISDOM20': 20,
      'QUOTES20': 20,
      'BOOKS20': 20,
      'MONTH25': 25,
      'READER15': 15
    };
    return discountMap[promoCode] || 10;
  }

  // ========================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò
  // ========================================

  async getTotalUsers() {
    try {
      const { UserProfile } = require('../models/userProfile');
      return await UserProfile.countDocuments({ isOnboardingComplete: true });
    } catch (error) {
      return 0;
    }
  }

  async getNewUsers(startDate) {
    try {
      const { UserProfile } = require('../models/userProfile');
      return await UserProfile.countDocuments({
        isOnboardingComplete: true,
        registeredAt: { $gte: startDate }
      });
    } catch (error) {
      return 0;
    }
  }

  async getTotalQuotes(startDate) {
    try {
      const { Quote } = require('../models/quote');
      return await Quote.countDocuments({ createdAt: { $gte: startDate } });
    } catch (error) {
      return 0;
    }
  }

  async getActiveUsers(startDate) {
    try {
      const { Quote } = require('../models/quote');
      const activeUsers = await Quote.distinct('userId', { 
        createdAt: { $gte: startDate } 
      });
      return activeUsers.length;
    } catch (error) {
      return 0;
    }
  }

  async getPromoUsage(startDate) {
    try {
      const { PromoCodeUsage } = require('../models/analytics');
      return await PromoCodeUsage.countDocuments({
        timestamp: { $gte: startDate }
      });
    } catch (error) {
      return 0;
    }
  }

  async getSourceStats(startDate) {
    try {
      const { UserProfile } = require('../models/userProfile');
      return await UserProfile.aggregate([
        { $match: { registeredAt: { $gte: startDate } } },
        { $group: { _id: '$source', count: { $sum: 1 } } },
        { $sort: { count: -1 } }
      ]);
    } catch (error) {
      return [];
    }
  }

  async getUTMStats(startDate) {
    try {
      const { UTMClick } = require('../models/analytics');
      return await UTMClick.aggregate([
        { $match: { timestamp: { $gte: startDate } } },
        { 
          $group: { 
            _id: '$campaign', 
            clicks: { $sum: 1 }, 
            users: { $addToSet: '$userId' } 
          } 
        },
        { 
          $project: { 
            campaign: '$_id', 
            clicks: 1, 
            uniqueUsers: { $size: '$users' } 
          } 
        },
        { $sort: { clicks: -1 } }
      ]);
    } catch (error) {
      return [];
    }
  }
}

module.exports = new AnalyticsService();
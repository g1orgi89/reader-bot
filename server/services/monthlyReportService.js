/**
 * @fileoverview –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @author g1orgi89
 */

const logger = require('../utils/logger');

/**
 * @typedef {import('../types/reader').UserProfile} UserProfile
 * @typedef {import('../types/reader').Quote} Quote
 * @typedef {import('../types/reader').MonthlyReport} MonthlyReport
 * @typedef {import('../types/reader').WeeklyReport} WeeklyReport
 * @typedef {import('../types/reader').MonthlyAnalysis} MonthlyAnalysis
 */

/**
 * –°–µ—Ä–≤–∏—Å –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –æ–ø—Ä–æ—Å–æ–º
 */
class MonthlyReportService {
  constructor() {
    this.claudeService = null;
    this.bot = null;
    this.models = null;
    
    logger.info('üìñ MonthlyReportService initialized');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
   * @param {Object} dependencies - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
   * @param {Object} dependencies.claudeService - –°–µ—Ä–≤–∏—Å Claude
   * @param {Object} dependencies.bot - Telegram bot
   * @param {Object} dependencies.models - –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  initialize(dependencies) {
    this.claudeService = dependencies.claudeService;
    this.bot = dependencies.bot;
    this.models = dependencies.models;
    
    logger.info('üìñ MonthlyReportService dependencies initialized');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<MonthlyReport|null>}
   */
  async generateMonthlyReport(userId) {
    try {
      const { UserProfile, MonthlyReport } = this.models;
      const user = await UserProfile.findOne({ userId });
      
      if (!user) {
        logger.warn(`üìñ User ${userId} not found for monthly report`);
        return null;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ (–º–∏–Ω–∏–º—É–º –º–µ—Å—è—Ü)
      const monthsSinceRegistration = this.getMonthsSinceRegistration(user.registeredAt);
      if (monthsSinceRegistration < 1) {
        logger.info(`üìñ User ${userId} registered recently, skipping monthly report`);
        return null;
      }

      const month = new Date().getMonth() + 1;
      const year = new Date().getFullYear();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –æ—Ç—á–µ—Ç –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
      const existingReport = await MonthlyReport.findByUserMonth(userId, month, year);
      if (existingReport) {
        logger.info(`üìñ Monthly report for user ${userId} already exists for ${year}-${month}`);
        return existingReport;
      }

      // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å
      await this.sendAdditionalSurvey(userId, user);
      
      return null; // –û—Ç—á–µ—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–ø—Ä–æ—Å
      
    } catch (error) {
      logger.error(`üìñ Error generating monthly report for user ${userId}: ${error.message}`, error);
      return null;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {UserProfile} user - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<void>}
   */
  async sendAdditionalSurvey(userId, user) {
    try {
      const surveyMessage = `üìù *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞–∑–±–æ—Ä–∞*

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.name}! –í—ã —Å –±–æ—Ç–æ–º —É–∂–µ –º–µ—Å—è—Ü. –í—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –∏ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑.

–°–Ω–∞—á–∞–ª–∞ –Ω–µ–±–æ–ª—å—à–æ–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏:

*–ö–∞–∫ –≤—ã –æ—â—É—â–∞–ª–∏ —ç—Ç–æ—Ç –º–µ—Å—è—Ü? –í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω—É—é —Ç–µ–º—É:*`;

      const keyboard = {
        inline_keyboard: [
          [{ text: "üîç –ü–æ–∏—Å–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", callback_data: "monthly_survey_confidence" }],
          [{ text: "üå∏ –ñ–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ –Ω–µ–∂–Ω–æ—Å—Ç—å", callback_data: "monthly_survey_femininity" }],
          [{ text: "‚öñÔ∏è –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É ¬´–¥–∞—Ç—å¬ª –∏ ¬´–≤–∑—è—Ç—å¬ª", callback_data: "monthly_survey_balance" }],
          [{ text: "üíï –õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data: "monthly_survey_love" }],
          [{ text: "‚ú® –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ —Ä–æ—Å—Ç", callback_data: "monthly_survey_growth" }],
          [{ text: "üë∂ –ú–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ –∏ —Å–µ–º—å—è", callback_data: "monthly_survey_family" }]
        ]
      };

      await this.bot.telegram.sendMessage(userId, surveyMessage, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
      await this.setUserState(userId, 'awaiting_monthly_survey');
      
      logger.info(`üìñ Monthly survey sent to user ${userId}`);
      
    } catch (error) {
      logger.error(`üìñ Error sending survey to user ${userId}: ${error.message}`, error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–ø—Ä–æ—Å
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} selectedTheme - –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞
   * @returns {Promise<MonthlyReport|null>}
   */
  async processSurveyResponse(userId, selectedTheme) {
    try {
      const { UserProfile, Quote, WeeklyReport, MonthlyReport } = this.models;
      
      const user = await UserProfile.findOne({ userId });
      if (!user) {
        logger.warn(`üìñ User ${userId} not found for survey processing`);
        return null;
      }

      const month = new Date().getMonth() + 1;
      const year = new Date().getFullYear();

      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü
      const monthQuotes = await Quote.find({
        userId,
        monthNumber: month,
        yearNumber: year
      }).sort({ createdAt: 1 });

      const weeklyReports = await WeeklyReport.find({
        userId,
        year,
        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 –Ω–µ–¥–µ–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        weekNumber: { 
          $gte: this.getFirstWeekOfMonth(month, year),
          $lte: this.getLastWeekOfMonth(month, year)
        }
      }).sort({ weekNumber: 1 });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑
      const analysis = await this.generateDeepAnalysis(user, monthQuotes, weeklyReports, selectedTheme);
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü
      const monthStats = await this.calculateMonthStats(userId, month, year);

      // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
      const specialOffer = this.createSpecialOffer(analysis);

      // –°–æ–∑–¥–∞–µ–º –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç
      const report = new MonthlyReport({
        userId,
        month,
        year,
        additionalSurvey: {
          mood: selectedTheme,
          mainTheme: selectedTheme,
          respondedAt: new Date()
        },
        analysis,
        specialOffer,
        monthStats
      });

      await report.save();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç
      await this.sendMonthlyReport(userId, report, monthQuotes.length);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.clearUserState(userId);

      logger.info(`üìñ Monthly report created and sent for user ${userId}`);
      return report;
      
    } catch (error) {
      logger.error(`üìñ Error processing survey for user ${userId}: ${error.message}`, error);
      return null;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–ª—É–±–æ–∫–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
   * @param {UserProfile} user - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Quote[]} quotes - –¶–∏—Ç–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü
   * @param {WeeklyReport[]} weeklyReports - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
   * @param {string} selectedTheme - –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞ –º–µ—Å—è—Ü–∞
   * @returns {Promise<MonthlyAnalysis>}
   */
  async generateDeepAnalysis(user, quotes, weeklyReports, selectedTheme) {
    try {
      const quotesText = quotes.slice(0, 20).map(q => 
        `"${q.text}" ${q.author ? `(${q.author})` : ''}`
      ).join('\n\n');

      const weeklyInsights = weeklyReports.map(r => r.analysis.insights).join('\n\n');

      const prompt = `–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥ –ê–Ω–Ω–∞ –ë—É—Å–µ–ª. –°–æ–∑–¥–∞–π –≥–ª—É–±–æ–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
- –ò–º—è: ${user.name}
- –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç: ${JSON.stringify(user.testResults)}
- –ì–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞ –º–µ—Å—è—Ü–∞ (–ø–æ –æ—â—É—â–µ–Ω–∏—è–º): ${selectedTheme}
- –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${user.registeredAt.toLocaleDateString()}
- –í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç –∑–∞ –º–µ—Å—è—Ü: ${quotes.length}

–¶–∏—Ç–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü (–ø–µ—Ä–≤—ã–µ 20):
${quotesText}

–ê–Ω–∞–ª–∏–∑—ã –ø—Ä–æ—à–ª—ã—Ö –Ω–µ–¥–µ–ª—å:
${weeklyInsights}

–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤ —Å—Ç–∏–ª–µ –ê–Ω–Ω—ã –ë—É—Å–µ–ª:
- –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º
- –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏ —á–µ—Ä–µ–∑ —Ü–∏—Ç–∞—Ç—ã
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–æ—Å—Ç–∞
- –¢–æ–Ω: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —Ç–µ–ø–ª—ã–π, –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ "–í—ã"
- 4-5 –∞–±–∑–∞—Ü–µ–≤

–í–µ—Ä–Ω–∏ JSON:
{
  "psychologicalProfile": "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏",
  "personalGrowth": "–ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –º–µ—Å—è—Ü", 
  "recommendations": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞",
  "bookSuggestions": ["–∫–Ω–∏–≥–∞1", "–∫–Ω–∏–≥–∞2", "–∫–Ω–∏–≥–∞3"]
}`;

      if (!this.claudeService) {
        // Fallback –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ Claude –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        return this.createFallbackAnalysis(selectedTheme, quotes.length);
      }

      const response = await this.claudeService.generateResponse(prompt, {
        platform: 'telegram',
        userId: 'monthly_analysis'
      });
      
      // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
      const analysis = JSON.parse(response.message);
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      if (!analysis.psychologicalProfile || !analysis.personalGrowth || !analysis.recommendations) {
        throw new Error('Invalid analysis structure from Claude');
      }

      return analysis;
      
    } catch (error) {
      logger.error(`üìñ Error generating analysis: ${error.message}`, error);
      return this.createFallbackAnalysis(selectedTheme, quotes.length);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ fallback –∞–Ω–∞–ª–∏–∑–∞
   * @param {string} selectedTheme - –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞
   * @param {number} quotesCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç
   * @returns {MonthlyAnalysis}
   */
  createFallbackAnalysis(selectedTheme, quotesCount) {
    return {
      psychologicalProfile: `–≠—Ç–æ—Ç –º–µ—Å—è—Ü –ø–æ–∫–∞–∑–∞–ª –≤–∞—à—É –≥–ª—É–±–æ–∫—É—é –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ ${selectedTheme.toLowerCase()}. –í–∞—à–∏ ${quotesCount} —Ü–∏—Ç–∞—Ç –æ—Ç—Ä–∞–∂–∞—é—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ–∏—Å–∫ –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–µ–±—è.`,
      personalGrowth: "–ó–∞ –º–µ—Å—è—Ü –≤—ã –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é –∏ –º—É–¥—Ä–æ—Å—Ç–∏ –≤–µ–ª–∏–∫–∏—Ö –ª—é–¥–µ–π.",
      recommendations: "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–∞—Ç—å —Å–µ–±—è —á–µ—Ä–µ–∑ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Å—Ç–æ–∏—Ç —É–¥–µ–ª–∏—Ç—å –∫–Ω–∏–≥–∞–º –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–º—É —Ä–æ—Å—Ç—É.",
      bookSuggestions: ["–ò—Å–∫—É—Å—Å—Ç–≤–æ –ª—é–±–∏—Ç—å", "–ë—ã—Ç—å —Å–æ–±–æ–π", "–ü–∏—Å—å–º–∞ –∫ –º–æ–ª–æ–¥–æ–º—É –ø–æ—ç—Ç—É"]
    };
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {MonthlyReport} report - –û—Ç—á–µ—Ç
   * @param {number} quotesCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç
   * @returns {Promise<void>}
   */
  async sendMonthlyReport(userId, report, quotesCount) {
    try {
      const reportMessage = report.toTelegramFormat();

      const keyboard = {
        inline_keyboard: [
          [{ text: "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data: `monthly_rating_5_${report._id}` }],
          [{ text: "‚≠ê‚≠ê‚≠ê‚≠ê", callback_data: `monthly_rating_4_${report._id}` }],
          [{ text: "‚≠ê‚≠ê‚≠ê", callback_data: `monthly_rating_3_${report._id}` }],
          [{ text: "‚≠ê‚≠ê", callback_data: `monthly_rating_2_${report._id}` }],
          [{ text: "‚≠ê", callback_data: `monthly_rating_1_${report._id}` }]
        ]
      };

      const sentMessage = await this.bot.telegram.sendMessage(userId, reportMessage, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
      report.telegramMessageId = sentMessage.message_id.toString();
      await report.save();

      logger.info(`üìñ Monthly report sent to user ${userId}`);
      
    } catch (error) {
      logger.error(`üìñ Error sending monthly report to user ${userId}: ${error.message}`, error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
   * @param {MonthlyAnalysis} analysis - –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Object} –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
   */
  createSpecialOffer(analysis) {
    return {
      discount: 25,
      validUntil: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 –¥–Ω–µ–π
      books: analysis.bookSuggestions || ["–ò—Å–∫—É—Å—Å—Ç–≤–æ –ª—é–±–∏—Ç—å", "–ë—ã—Ç—å —Å–æ–±–æ–π"],
      promoCode: `MONTH25`
    };
  }

  /**
   * –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} month - –ú–µ—Å—è—Ü
   * @param {number} year - –ì–æ–¥
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async calculateMonthStats(userId, month, year) {
    try {
      const { Quote } = this.models;
      
      const quotes = await Quote.find({
        userId,
        monthNumber: month,
        yearNumber: year
      });

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const categoriesMap = new Map();
      quotes.forEach(quote => {
        if (quote.category) {
          categoriesMap.set(quote.category, (categoriesMap.get(quote.category) || 0) + 1);
        }
      });

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤
      const uniqueAuthors = new Set();
      quotes.forEach(quote => {
        if (quote.author) {
          uniqueAuthors.add(quote.author);
        }
      });

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç –≤ –Ω–µ–¥–µ–ª—é
      const weeksInMonth = 4;
      const averageQuotesPerWeek = Math.round((quotes.length / weeksInMonth) * 10) / 10;

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é —Å–µ—Ä–∏—é
      const longestStreak = await this.calculateLongestStreakForMonth(userId, month, year);

      return {
        totalQuotes: quotes.length,
        categoriesDistribution: Object.fromEntries(categoriesMap),
        authorsCount: uniqueAuthors.size,
        averageQuotesPerWeek,
        longestStreak
      };
      
    } catch (error) {
      logger.error(`üìñ Error calculating month stats: ${error.message}`, error);
      return {
        totalQuotes: 0,
        categoriesDistribution: {},
        authorsCount: 0,
        averageQuotesPerWeek: 0,
        longestStreak: 0
      };
    }
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—è—Ü–µ–≤ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
   * @param {Date} registrationDate - –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
   * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤
   */
  getMonthsSinceRegistration(registrationDate) {
    const now = new Date();
    const diffTime = Math.abs(now - registrationDate);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return Math.floor(diffDays / 30);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏ –º–µ—Å—è—Ü–∞
   * @param {number} month - –ú–µ—Å—è—Ü
   * @param {number} year - –ì–æ–¥
   * @returns {number} –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
   */
  getFirstWeekOfMonth(month, year) {
    const firstDay = new Date(year, month - 1, 1);
    return this.getWeekNumber(firstDay);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –º–µ—Å—è—Ü–∞
   * @param {number} month - –ú–µ—Å—è—Ü
   * @param {number} year - –ì–æ–¥
   * @returns {number} –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
   */
  getLastWeekOfMonth(month, year) {
    const lastDay = new Date(year, month, 0); // –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    return this.getWeekNumber(lastDay);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –¥–∞—Ç—ã
   * @param {Date} date - –î–∞—Ç–∞
   * @returns {number} –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
   */
  getWeekNumber(date) {
    const target = new Date(date.valueOf());
    const dayNr = (date.getDay() + 6) % 7;
    target.setDate(target.getDate() - dayNr + 3);
    const firstThursday = target.valueOf();
    target.setMonth(0, 1);
    if (target.getDay() !== 4) {
      target.setMonth(0, 1 + ((4 - target.getDay()) + 7) % 7);
    }
    return 1 + Math.ceil((firstThursday - target) / 604800000);
  }

  /**
   * –ü–æ–¥—Å—á–µ—Ç —Å–∞–º–æ–π –¥–ª–∏–Ω–Ω–æ–π —Å–µ—Ä–∏–∏ –∑–∞ –º–µ—Å—è—Ü
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} month - –ú–µ—Å—è—Ü
   * @param {number} year - –ì–æ–¥
   * @returns {Promise<number>} –°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Å–µ—Ä–∏—è –¥–Ω–µ–π
   */
  async calculateLongestStreakForMonth(userId, month, year) {
    try {
      const { Quote } = this.models;
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
      const quotes = await Quote.find({
        userId,
        monthNumber: month,
        yearNumber: year
      }).sort({ createdAt: 1 });

      if (quotes.length === 0) return 0;

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
      const daysSet = new Set();
      quotes.forEach(quote => {
        const day = quote.createdAt.toISOString().split('T')[0];
        daysSet.add(day);
      });

      const days = Array.from(daysSet).sort();
      
      let longestStreak = 0;
      let currentStreak = 1;

      for (let i = 1; i < days.length; i++) {
        const prevDate = new Date(days[i - 1]);
        const currDate = new Date(days[i]);
        const diffTime = currDate - prevDate;
        const diffDays = diffTime / (1000 * 60 * 60 * 24);

        if (diffDays === 1) {
          currentStreak++;
        } else {
          longestStreak = Math.max(longestStreak, currentStreak);
          currentStreak = 1;
        }
      }

      return Math.max(longestStreak, currentStreak);
      
    } catch (error) {
      logger.error(`üìñ Error calculating longest streak: ${error.message}`, error);
      return 0;
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ
   * @returns {Promise<void>}
   */
  async setUserState(userId, state) {
    try {
      const { UserProfile } = this.models;
      await UserProfile.findOneAndUpdate(
        { userId },
        { currentState: state },
        { upsert: true }
      );
    } catch (error) {
      logger.error(`üìñ Error setting user state: ${error.message}`, error);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<void>}
   */
  async clearUserState(userId) {
    try {
      const { UserProfile } = this.models;
      await UserProfile.findOneAndUpdate(
        { userId },
        { $unset: { currentState: 1 } }
      );
    } catch (error) {
      logger.error(`üìñ Error clearing user state: ${error.message}`, error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
   * @returns {Promise<UserProfile[]>} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
   */
  async getUsersNeedingMonthlyReports() {
    try {
      const { UserProfile, MonthlyReport } = this.models;
      
      const oneMonthAgo = new Date();
      oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);
      
      const month = new Date().getMonth() + 1;
      const year = new Date().getFullYear();

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∏–Ω–∏–º—É–º –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥
      const eligibleUsers = await UserProfile.find({
        registeredAt: { $lte: oneMonthAgo },
        isOnboardingComplete: true,
        'statistics.totalQuotes': { $gte: 5 } // –ú–∏–Ω–∏–º—É–º 5 —Ü–∏—Ç–∞—Ç –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
      });

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Ö, —É –∫–æ–≥–æ —É–∂–µ –µ—Å—Ç—å –æ—Ç—á–µ—Ç –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
      const usersWithReports = await MonthlyReport.distinct('userId', { month, year });
      
      const usersNeedingReports = eligibleUsers.filter(user => 
        !usersWithReports.includes(user.userId)
      );

      logger.info(`üìñ Found ${usersNeedingReports.length} users needing monthly reports`);
      return usersNeedingReports;
      
    } catch (error) {
      logger.error(`üìñ Error getting users for monthly reports: ${error.message}`, error);
      return [];
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  async generateMonthlyReportsForAllUsers() {
    try {
      const users = await this.getUsersNeedingMonthlyReports();
      
      let generated = 0;
      let failed = 0;
      const errors = [];

      logger.info(`üìñ Starting monthly report generation for ${users.length} users`);

      for (const user of users) {
        try {
          await this.generateMonthlyReport(user.userId);
          generated++;
          
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 500));
          
        } catch (error) {
          failed++;
          errors.push({ userId: user.userId, error: error.message });
          logger.error(`üìñ Failed to generate monthly report for ${user.userId}: ${error.message}`);
        }
      }

      const stats = {
        total: users.length,
        generated,
        failed,
        errors
      };

      logger.info(`üìñ Monthly reports generation completed: ${generated} generated, ${failed} failed`);
      return stats;
      
    } catch (error) {
      logger.error(`üìñ Error in generateMonthlyReportsForAllUsers: ${error.message}`, error);
      return { total: 0, generated: 0, failed: 0, errors: [error.message] };
    }
  }
}

module.exports = { MonthlyReportService };

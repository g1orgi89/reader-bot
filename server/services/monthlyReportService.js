/**
 * @fileoverview Monthly Report Service –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Å—è—á–Ω—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ä–æ—Å–∞–º–∏
 */

const { MonthlyReport, UserProfile, Quote, WeeklyReport } = require('../models');
const { claudeService } = require('./claudeService');
const { bot } = require('../../telegram');

/**
 * @typedef {Object} MonthlyAnalysis
 * @property {string} psychologicalProfile - –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏
 * @property {string} personalGrowth - –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ –∑–∞ –º–µ—Å—è—Ü
 * @property {string} recommendations - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
 * @property {string[]} bookSuggestions - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–Ω–∏–≥–∏
 */

/**
 * @typedef {Object} SpecialOffer
 * @property {number} discount - –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
 * @property {Date} validUntil - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
 * @property {string[]} books - –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ —Å–æ —Å–∫–∏–¥–∫–æ–π
 */

/**
 * @typedef {Object} MonthlyReportData
 * @property {string} userId
 * @property {number} month
 * @property {number} year
 * @property {Object} additionalSurvey
 * @property {MonthlyAnalysis} analysis
 * @property {SpecialOffer} specialOffer
 */

class MonthlyReportService {
  constructor() {
    this.monthlyThemes = [
      { id: 'confidence', text: 'üîç –ü–æ–∏—Å–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏', key: '–ø–æ–∏—Å–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏' },
      { id: 'femininity', text: 'üå∏ –ñ–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ –Ω–µ–∂–Ω–æ—Å—Ç—å', key: '–∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å' },
      { id: 'balance', text: '‚öñÔ∏è –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É ¬´–¥–∞—Ç—å¬ª –∏ ¬´–≤–∑—è—Ç—å¬ª', key: '–±–∞–ª–∞–Ω—Å' },
      { id: 'love', text: 'üíï –õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è', key: '–ª—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è' },
      { id: 'growth', text: '‚ú® –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ —Ä–æ—Å—Ç', key: '–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ —Ä–æ—Å—Ç' },
      { id: 'family', text: 'üë∂ –ú–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ –∏ —Å–µ–º—å—è', key: '–º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ –∏ —Å–µ–º—å—è' }
    ];
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
   * @returns {Promise<MonthlyReportData|null>}
   */
  async generateMonthlyReport(userId) {
    const user = await UserProfile.findOne({ userId });
    if (!user) {
      throw new Error(`User not found: ${userId}`);
    }

    const month = new Date().getMonth() + 1;
    const year = new Date().getFullYear();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –æ—Ç—á–µ—Ç –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
    const existingReport = await MonthlyReport.findOne({ userId, month, year });
    if (existingReport) {
      console.log(`üìà Monthly report already exists for user ${userId} for ${month}/${year}`);
      return existingReport;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥
    const oneMonthAgo = new Date();
    oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);
    
    if (user.registeredAt > oneMonthAgo) {
      console.log(`üìÖ User ${userId} registered less than a month ago, skipping monthly report`);
      return null;
    }

    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å
    await this.sendAdditionalSurvey(userId, user);
    return null; // –û—Ç—á–µ—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–ø—Ä–æ—Å
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} user - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async sendAdditionalSurvey(userId, user) {
    const surveyMessage = `
üìù *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞–∑–±–æ—Ä–∞*

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.name}! –í—ã —Å –±–æ—Ç–æ–º —É–∂–µ –º–µ—Å—è—Ü. –í—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –∏ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑.

–°–Ω–∞—á–∞–ª–∞ –Ω–µ–±–æ–ª—å—à–æ–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏:

*–ö–∞–∫ –≤—ã –æ—â—É—â–∞–ª–∏ —ç—Ç–æ—Ç –º–µ—Å—è—Ü? –í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω—É—é —Ç–µ–º—É:*
    `;

    const keyboard = this.monthlyThemes.map(theme => [
      { text: theme.text, callback_data: `monthly_survey_${theme.id}` }
    ]);

    try {
      await bot.telegram.sendMessage(userId, surveyMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
      await this.setUserState(userId, 'awaiting_monthly_survey');
      console.log(`üìù Monthly survey sent to user ${userId}`);
    } catch (error) {
      console.error(`‚ùå Failed to send monthly survey to user ${userId}:`, error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –º–µ—Å—è—á–Ω—ã–π –æ–ø—Ä–æ—Å
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} selectedThemeId - –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞
   */
  async processSurveyResponse(userId, selectedThemeId) {
    const user = await UserProfile.findOne({ userId });
    if (!user) {
      throw new Error(`User not found: ${userId}`);
    }

    const selectedTheme = this.monthlyThemes.find(t => t.id === selectedThemeId);
    if (!selectedTheme) {
      throw new Error(`Unknown theme: ${selectedThemeId}`);
    }

    const month = new Date().getMonth() + 1;
    const year = new Date().getFullYear();

    try {
      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü
      const monthQuotes = await Quote.find({
        userId,
        monthNumber: month,
        yearNumber: year
      }).sort({ createdAt: 1 });

      const weeklyReports = await WeeklyReport.find({
        userId,
        year,
        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4-6 –Ω–µ–¥–µ–ª—å
        weekNumber: { $gte: this.getWeekNumber() - 5 }
      }).sort({ weekNumber: 1 });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑
      const analysis = await this.generateDeepAnalysis(
        user, 
        monthQuotes, 
        weeklyReports, 
        selectedTheme.key
      );

      // –°–æ–∑–¥–∞–µ–º –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç
      const report = new MonthlyReport({
        userId,
        month,
        year,
        additionalSurvey: {
          mainTheme: selectedTheme.key,
          mood: selectedTheme.key,
          respondedAt: new Date()
        },
        analysis,
        specialOffer: {
          discount: 25,
          validUntil: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 –¥–Ω–µ–π
          books: this.selectBooksForOffer(analysis)
        }
      });

      await report.save();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç
      await this.sendMonthlyReport(userId, report, monthQuotes.length);
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.clearUserState(userId);

      console.log(`üìà Monthly report generated and sent to user ${userId}`);
      return report;

    } catch (error) {
      console.error(`‚ùå Failed to process monthly survey for user ${userId}:`, error);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–ª—É–±–æ–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
   * @param {Object} user - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Array} quotes - –¶–∏—Ç–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü
   * @param {Array} weeklyReports - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
   * @param {string} selectedTheme - –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞ –º–µ—Å—è—Ü–∞
   * @returns {Promise<MonthlyAnalysis>}
   */
  async generateDeepAnalysis(user, quotes, weeklyReports, selectedTheme) {
    const quotesText = quotes.slice(0, 20).map(q => 
      `"${q.text}" ${q.author ? `(${q.author})` : ''}`
    ).join('\n\n');

    const weeklyInsights = weeklyReports.map(r => r.analysis?.insights || '').join('\n\n');

    const prompt = `–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥ –ê–Ω–Ω–∞ –ë—É—Å–µ–ª. –°–æ–∑–¥–∞–π –≥–ª—É–±–æ–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
- –ò–º—è: ${user.name}
- –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç: ${JSON.stringify(user.testResults)}
- –ì–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞ –º–µ—Å—è—Ü–∞ (–ø–æ –æ—â—É—â–µ–Ω–∏—è–º): ${selectedTheme}
- –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${user.registeredAt.toLocaleDateString()}
- –í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç –∑–∞ –º–µ—Å—è—Ü: ${quotes.length}

–¶–∏—Ç–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü (–ø–µ—Ä–≤—ã–µ 20):
${quotesText}

–ê–Ω–∞–ª–∏–∑—ã –ø—Ä–æ—à–ª—ã—Ö –Ω–µ–¥–µ–ª—å:
${weeklyInsights}

–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤ —Å—Ç–∏–ª–µ –ê–Ω–Ω—ã –ë—É—Å–µ–ª:
- –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º
- –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏ —á–µ—Ä–µ–∑ —Ü–∏—Ç–∞—Ç—ã
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–æ—Å—Ç–∞
- –¢–æ–Ω: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —Ç–µ–ø–ª—ã–π, –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ "–í—ã"
- 4-5 –∞–±–∑–∞—Ü–µ–≤

–í–µ—Ä–Ω–∏ JSON:
{
  "psychologicalProfile": "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏",
  "personalGrowth": "–ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –º–µ—Å—è—Ü", 
  "recommendations": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞",
  "bookSuggestions": ["–∫–Ω–∏–≥–∞1", "–∫–Ω–∏–≥–∞2", "–∫–Ω–∏–≥–∞3"]
}`;

    try {
      const response = await claudeService.generateResponse(prompt, {
        platform: 'telegram',
        userId: 'monthly_analysis',
        context: 'monthly_report'
      });
      
      const analysis = JSON.parse(response.message);
      console.log(`üß† Generated deep analysis for user ${user.userId}`);
      return analysis;

    } catch (error) {
      console.error('‚ùå Failed to generate deep analysis:', error);
      // Fallback –∞–Ω–∞–ª–∏–∑
      return {
        psychologicalProfile: `–≠—Ç–æ—Ç –º–µ—Å—è—Ü –ø–æ–∫–∞–∑–∞–ª –≤–∞—à—É –≥–ª—É–±–æ–∫—É—é –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ ${selectedTheme.toLowerCase()}. –í–∞—à–∏ —Ü–∏—Ç–∞—Ç—ã –æ—Ç—Ä–∞–∂–∞—é—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ–∏—Å–∫ –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–µ–±—è.`,
        personalGrowth: "–ó–∞ –º–µ—Å—è—Ü –≤—ã –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é –∏ –º—É–¥—Ä–æ—Å—Ç–∏ –≤–µ–ª–∏–∫–∏—Ö –ª—é–¥–µ–π.",
        recommendations: "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–∞—Ç—å —Å–µ–±—è —á–µ—Ä–µ–∑ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Å—Ç–æ–∏—Ç —É–¥–µ–ª–∏—Ç—å –∫–Ω–∏–≥–∞–º –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–º—É —Ä–æ—Å—Ç—É.",
        bookSuggestions: ["–ò—Å–∫—É—Å—Å—Ç–≤–æ –ª—é–±–∏—Ç—å", "–ë—ã—Ç—å —Å–æ–±–æ–π", "–ü–∏—Å—å–º–∞ –∫ –º–æ–ª–æ–¥–æ–º—É –ø–æ—ç—Ç—É"]
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} report - –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
   * @param {number} quotesCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç –∑–∞ –º–µ—Å—è—Ü
   */
  async sendMonthlyReport(userId, report, quotesCount) {
    const reportMessage = `
üìà *–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä –º–µ—Å—è—Ü–∞*

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Å ¬´–ß–∏—Ç–∞—Ç–µ–ª–µ–º¬ª —É–∂–µ –º–µ—Å—è—Ü!

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚îî –¶–∏—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${quotesCount}
‚îî –î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —Ç–µ–º–∞: ${report.additionalSurvey.mainTheme}
‚îî –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞: —Ä–∞–∑–≤–∏—Ç–∏–µ —á–µ—Ä–µ–∑ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è

üß† *–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:*
${report.analysis.psychologicalProfile}

üìà *–í–∞—à –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç:*
${report.analysis.personalGrowth}

üí° *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
${report.analysis.recommendations}

üìö *–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å* (—Å–∫–∏–¥–∫–∞ ${report.specialOffer.discount}% –¥–æ ${report.specialOffer.validUntil.toLocaleDateString()}):
${report.analysis.bookSuggestions.map((book, i) => `${i + 1}. ${book}`).join('\n')}

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –º–æ–º–µ–Ω—Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! üìñ
    `;

    const ratingKeyboard = [
      [{ text: "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data: `monthly_rating_5_${report._id}` }],
      [{ text: "‚≠ê‚≠ê‚≠ê‚≠ê", callback_data: `monthly_rating_4_${report._id}` }],
      [{ text: "‚≠ê‚≠ê‚≠ê", callback_data: `monthly_rating_3_${report._id}` }],
      [{ text: "‚≠ê‚≠ê", callback_data: `monthly_rating_2_${report._id}` }],
      [{ text: "‚≠ê", callback_data: `monthly_rating_1_${report._id}` }]
    ];

    try {
      await bot.telegram.sendMessage(userId, reportMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: ratingKeyboard
        }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞
      report.sentAt = new Date();
      await report.save();

      console.log(`üìà Monthly report sent to user ${userId}`);

    } catch (error) {
      console.error(`‚ùå Failed to send monthly report to user ${userId}:`, error);
      throw error;
    }
  }

  /**
   * –í—ã–±–∏—Ä–∞–µ—Ç –∫–Ω–∏–≥–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
   * @param {MonthlyAnalysis} analysis - –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {string[]}
   */
  selectBooksForOffer(analysis) {
    const allBooks = [
      "–ò—Å–∫—É—Å—Å—Ç–≤–æ –ª—é–±–∏—Ç—å (–≠—Ä–∏—Ö –§—Ä–æ–º–º)",
      "–ü–∏—Å—å–º–∞ –∫ –º–æ–ª–æ–¥–æ–º—É –ø–æ—ç—Ç—É (–†–∏–ª—å–∫–µ)", 
      "–ë—ã—Ç—å —Å–æ–±–æ–π (–∫—É—Ä—Å –ê–Ω–Ω—ã)",
      "–ñ–µ–Ω—â–∏–Ω–∞, –∫–æ—Ç–æ—Ä–∞—è —á–∏—Ç–∞–µ—Ç, –æ–ø–∞—Å–Ω–∞",
      "–ê–ª—Ö–∏–º–∏–∫ (–ü–∞—É–ª–æ –ö–æ—ç–ª—å–æ)",
      "–ú–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏–Ω—Ü"
    ];

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–∏–≥–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–µ 3
    if (analysis.bookSuggestions && analysis.bookSuggestions.length > 0) {
      return analysis.bookSuggestions.slice(0, 3);
    }

    return allBooks.slice(0, 3);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
   * @returns {number}
   */
  getWeekNumber() {
    const now = new Date();
    const onejan = new Date(now.getFullYear(), 0, 1);
    const millisecsInDay = 86400000;
    return Math.ceil((((now - onejan) / millisecsInDay) + onejan.getDay() + 1) / 7);
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  async setUserState(userId, state) {
    try {
      await UserProfile.findOneAndUpdate(
        { userId },
        { 'botState.current': state, 'botState.updatedAt': new Date() },
        { upsert: true }
      );
    } catch (error) {
      console.error(`‚ùå Failed to set user state for ${userId}:`, error);
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async clearUserState(userId) {
    try {
      await UserProfile.findOneAndUpdate(
        { userId },
        { 
          'botState.current': 'active',
          'botState.updatedAt': new Date() 
        }
      );
    } catch (error) {
      console.error(`‚ùå Failed to clear user state for ${userId}:`, error);
    }
  }
}

module.exports = { MonthlyReportService };

/**
 * Clean Command Handler - simple menu commands for Reader bot
 * @file telegram/handlers/commandHandler.js
 * üé® CLEAN UX: Simple responses, accessed via menu button
 */

const logger = require('../../server/utils/logger');
const { UserProfile, Quote } = require('../../server/models');

class CommandHandler {
  constructor() {
    logger.info('‚úÖ CommandHandler initialized for menu button navigation');
  }

  /**
   * Handle /help command
   */
  async handleHelp(ctx) {
    try {
      const helpText = 
        'üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É "–ß–∏—Ç–∞—Ç–µ–ª—å"\n\n' +
        '–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n' +
        '‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ü–∏—Ç–∞—Ç—ã —Ç–µ–∫—Å—Ç–æ–º\n' +
        '‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∞–≤—Ç–æ—Ä–∞ –≤ —Å–∫–æ–±–∫–∞—Ö: (–¢–æ–ª—Å—Ç–æ–π)\n' +
        '‚Ä¢ –õ–∏–º–∏—Ç: 10 —Ü–∏—Ç–∞—Ç –≤ –¥–µ–Ω—å\n\n' +
        '–ö–æ–º–∞–Ω–¥—ã (–¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é üìã):\n' +
        '/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á—Ç–µ–Ω–∏—è\n' +
        '/search - –ø–æ–∏—Å–∫ –ø–æ –≤–∞—à–∏–º —Ü–∏—Ç–∞—Ç–∞–º\n' +
        '/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n' +
        '/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n' +
        '–û—Ç—á–µ—Ç—ã: –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 11:00\n\n' +
        '–í–æ–ø—Ä–æ—Å—ã? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç, —è –ø–µ—Ä–µ–¥–∞–º –ê–Ω–Ω–µ.';
      
      await ctx.reply(helpText);
      
    } catch (error) {
      logger.error(`Error in handleHelp: ${error.message}`);
      await ctx.reply('üìñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  /**
   * Handle /search command
   */
  async handleSearch(ctx) {
    try {
      const userId = ctx.from.id.toString();
      
      const quotes = await Quote.find({ userId })
        .sort({ createdAt: -1 })
        .limit(10);
      
      if (quotes.length === 0) {
        await ctx.reply(
          'üîç –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç.\n\n' +
          '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –º—É–¥—Ä–æ—Å—Ç–∏!'
        );
        return;
      }

      let searchText = `üîç –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${quotes.length} —Ü–∏—Ç–∞—Ç:\n\n`;
      
      quotes.forEach((quote, index) => {
        const author = quote.author ? ` (${quote.author})` : '';
        const date = quote.createdAt.toLocaleDateString('ru-RU');
        searchText += `${index + 1}. "${quote.text}"${author}\nüìÖ ${date}\n\n`;
      });

      if (quotes.length === 10) {
        searchText += 'üí° –ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–∏—Ç–∞—Ç. –í—Å–µ–≥–æ —É –≤–∞—Å –±–æ–ª—å—à–µ!';
      }

      await ctx.reply(searchText);
      
    } catch (error) {
      logger.error(`Error in handleSearch: ${error.message}`);
      await ctx.reply('üìñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ü–∏—Ç–∞—Ç.');
    }
  }

  /**
   * Handle /stats command
   */
  async handleStats(ctx) {
    try {
      const userId = ctx.from.id.toString();
      
      const profile = await UserProfile.findOne({ userId });
      if (!profile) {
        await ctx.reply('üìñ –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start');
        return;
      }

      const totalQuotes = await Quote.countDocuments({ userId });
      
      // Calculate days with bot
      const daysWithBot = Math.floor(
        (new Date() - new Date(profile.registeredAt)) / (1000 * 60 * 60 * 24)
      );

      let statsText = 
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${profile.name}\n\n` +
        `üìñ –¶–∏—Ç–∞—Ç —Å–æ–±—Ä–∞–Ω–æ: ${totalQuotes}\n` +
        `üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: ${profile.statistics.currentStreak} –¥–Ω–µ–π\n` +
        `‚≠ê –†–µ–∫–æ—Ä–¥ —Å–µ—Ä–∏–∏: ${profile.statistics.longestStreak} –¥–Ω–µ–π\n` +
        `üìÖ –° –±–æ—Ç–æ–º: ${daysWithBot} –¥–Ω–µ–π\n\n`;

      if (profile.statistics.favoriteAuthors.length > 0) {
        statsText += '–õ—é–±–∏–º—ã–µ –∞–≤—Ç–æ—Ä—ã:\n';
        profile.statistics.favoriteAuthors.slice(0, 5).forEach((author, i) => {
          statsText += `${i + 1}. ${author}\n`;
        });
        statsText += '\n';
      }

      if (profile.achievements.length > 0) {
        statsText += `üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${profile.achievements.length}`;
      } else {
        statsText += 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: –ø–æ–∫–∞ –Ω–µ—Ç, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç!';
      }

      await ctx.reply(statsText);
      
    } catch (error) {
      logger.error(`Error in handleStats: ${error.message}`);
      await ctx.reply('üìñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
  }

  /**
   * Handle /settings command
   */
  async handleSettings(ctx) {
    try {
      const userId = ctx.from.id.toString();
      
      const profile = await UserProfile.findOne({ userId });
      if (!profile) {
        await ctx.reply('üìñ –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start');
        return;
      }

      const reminderStatus = profile.settings.reminderEnabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã';
      const reminderTimes = profile.settings.reminderTimes.join(', ');

      const settingsText = 
        '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n' +
        `üìß Email: ${profile.email}\n` +
        `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${reminderStatus}\n` +
        `‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${reminderTimes}\n\n` +
        '–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –Ω–∞–ø–∏—à–∏—Ç–µ:\n' +
        '‚Ä¢ "–æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" - –≤—ã–∫–ª—é—á–∏—Ç—å\n' +
        '‚Ä¢ "–≤–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" - –≤–∫–ª—é—á–∏—Ç—å\n' +
        '‚Ä¢ "–≤—Ä–µ–º—è 10:00,20:00" - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è';

      await ctx.reply(settingsText, {
        reply_markup: {
          inline_keyboard: [
            [
              { 
                text: profile.settings.reminderEnabled ? "üîï –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" : "üîî –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                callback_data: "toggle_reminders"
              }
            ]
          ]
        }
      });
      
    } catch (error) {
      logger.error(`Error in handleSettings: ${error.message}`);
      await ctx.reply('üìñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.');
    }
  }

  /**
   * Handle settings callback
   */
  async handleSettingsCallback(ctx) {
    try {
      const userId = ctx.from.id.toString();
      const data = ctx.callbackQuery.data;

      if (data === 'toggle_reminders') {
        const profile = await UserProfile.findOne({ userId });
        if (!profile) {
          await ctx.answerCbQuery('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return;
        }

        profile.settings.reminderEnabled = !profile.settings.reminderEnabled;
        await profile.save();

        const status = profile.settings.reminderEnabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã';
        await ctx.answerCbQuery(`–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${status}`);
        
        // Update message
        const settingsText = 
          '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã\n\n' +
          `üìß Email: ${profile.email}\n` +
          `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${status}\n` +
          `‚è∞ –í—Ä–µ–º—è: ${profile.settings.reminderTimes.join(', ')}`;

        await ctx.editMessageText(settingsText);
      }
      
    } catch (error) {
      logger.error(`Error in handleSettingsCallback: ${error.message}`);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  /**
   * Handle settings text changes
   */
  async handleSettingsText(ctx, messageText) {
    try {
      const userId = ctx.from.id.toString();
      const text = messageText.toLowerCase().trim();

      const profile = await UserProfile.findOne({ userId });
      if (!profile) return false;

      // Turn off reminders
      if (text.includes('–æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è') || text.includes('–≤—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')) {
        profile.settings.reminderEnabled = false;
        await profile.save();
        await ctx.reply('üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã');
        return true;
      }

      // Turn on reminders
      if (text.includes('–≤–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')) {
        profile.settings.reminderEnabled = true;
        await profile.save();
        await ctx.reply('üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã');
        return true;
      }

      // Change reminder times
      const timeMatch = text.match(/–≤—Ä–µ–º—è\s+(\d{1,2}:\d{2}(?:,\s*\d{1,2}:\d{2})*)/);
      if (timeMatch) {
        const times = timeMatch[1].split(',').map(t => t.trim());
        
        // Validate times
        const validTimes = times.filter(time => /^\d{1,2}:\d{2}$/.test(time));
        
        if (validTimes.length > 0) {
          profile.settings.reminderTimes = validTimes;
          await profile.save();
          await ctx.reply(`‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: ${validTimes.join(', ')}`);
          return true;
        } else {
          await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 09:00,19:00');
          return true;
        }
      }

      return false;
      
    } catch (error) {
      logger.error(`Error in handleSettingsText: ${error.message}`);
      return false;
    }
  }

  /**
   * Handle unknown commands
   */
  async handleUnknownCommand(ctx) {
    try {
      await ctx.reply(
        '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é üìã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º\n' +
        '–∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.'
      );
    } catch (error) {
      logger.error(`Error in handleUnknownCommand: ${error.message}`);
    }
  }

  /**
   * Check if message is a command
   */
  isCommand(messageText) {
    return messageText && messageText.startsWith('/');
  }

  /**
   * Check if message is settings-related
   */
  isSettingsMessage(messageText) {
    if (!messageText) return false;
    
    const text = messageText.toLowerCase();
    return text.includes('–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è') || 
           text.includes('–≤—Ä–µ–º—è') || 
           text.includes('–Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
  }
}

module.exports = { CommandHandler };

/**
 * @fileoverview –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–æ—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @author g1orgi89
 */

const logger = require('../../server/utils/logger');
const { UserProfile, Quote } = require('../../server/models');

/**
 * @typedef {import('../../server/types/reader').UserProfile} UserProfile
 * @typedef {import('../../server/types/reader').Quote} Quote
 */

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
class CommandHandler {
  constructor() {
    /**
     * @type {Object} - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
     */
    this.commands = {
      help: this.handleHelp.bind(this),
      stats: this.handleStats.bind(this),
      search: this.handleSearch.bind(this),
      settings: this.handleSettings.bind(this)
    };

    /**
     * @type {Array} - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    this.availableAchievements = [
      {
        id: 'first_quote',
        name: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
        description: '–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É',
        icon: 'üå±',
        targetValue: 1,
        type: 'quotes_count'
      },
      {
        id: 'wisdom_collector',
        name: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –º—É–¥—Ä–æ—Å—Ç–∏',
        description: '–°–æ–±—Ä–∞–ª–∏ 25 —Ü–∏—Ç–∞—Ç',
        icon: 'üìö',
        targetValue: 25,
        type: 'quotes_count'
      },
      {
        id: 'week_philosopher',
        name: '–§–∏–ª–æ—Å–æ—Ñ –Ω–µ–¥–µ–ª–∏',
        description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏',
        icon: 'üî•',
        targetValue: 7,
        type: 'streak_days'
      },
      {
        id: 'classics_lover',
        name: '–õ—é–±–∏—Ç–µ–ª—å –∫–ª–∞—Å—Å–∏–∫–∏',
        description: '10 —Ü–∏—Ç–∞—Ç –∫–ª–∞—Å—Å–∏–∫–æ–≤',
        icon: 'üìñ',
        targetValue: 10,
        type: 'classics_count'
      },
      {
        id: 'thinker',
        name: '–ú—ã—Å–ª–∏—Ç–µ–ª—å',
        description: '10 —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º—ã—Å–ª–µ–π',
        icon: 'üí≠',
        targetValue: 10,
        type: 'own_thoughts'
      },
      {
        id: 'reading_marathon',
        name: '–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü —á—Ç–µ–Ω–∏—è',
        description: '–°–æ–±—Ä–∞–ª–∏ 50 —Ü–∏—Ç–∞—Ç',
        icon: 'üèÉ‚Äç‚ôÄÔ∏è',
        targetValue: 50,
        type: 'quotes_count'
      },
      {
        id: 'diverse_reader',
        name: '–†–∞–∑–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —á–∏—Ç–∞—Ç–µ–ª—å',
        description: '5 —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
        icon: 'üåà',
        targetValue: 5,
        type: 'categories_count'
      },
      {
        id: 'consistency',
        name: '–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ',
        description: '30 –¥–Ω–µ–π —Å –±–æ—Ç–æ–º',
        icon: '‚≠ê',
        targetValue: 30,
        type: 'days_with_bot'
      }
    ];

    logger.info('üìñ CommandHandler initialized');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
   * @param {Object} ctx - Telegram context
   * @returns {Promise<void>}
   */
  async handleHelp(ctx) {
    try {
      const helpText = `üìñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ¬´–ß–∏—Ç–∞—Ç–µ–ª—å¬ª:*\n\n/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞  \n/search - –ø–æ–∏—Å–∫ –ø–æ –≤–∞—à–∏–º —Ü–∏—Ç–∞—Ç–∞–º\n/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á—Ç–µ–Ω–∏—è\n/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n\n*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ü–∏—Ç–∞—Ç—ã —Ç–µ–∫—Å—Ç–æ–º\n‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∞–≤—Ç–æ—Ä–∞ –≤ —Å–∫–æ–±–∫–∞—Ö: (–¢–æ–ª—Å—Ç–æ–π)\n‚Ä¢ –õ–∏–º–∏—Ç: 10 —Ü–∏—Ç–∞—Ç –≤ –¥–µ–Ω—å\n\n*–û—Ç—á–µ—Ç—ã:* –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 11:00\n*–í–æ–ø—Ä–æ—Å—ã:* –ø–∏—à–∏—Ç–µ –ø—Ä—è–º–æ –≤ —á–∞—Ç, —è –ø–µ—Ä–µ–¥–∞–º –ê–Ω–Ω–µ\n\nüí° –•–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ - —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏!\n\n_¬´–ß–∏—Ç–∞—Ç–µ–ª—å¬ª —Å–æ–∑–¥–∞–Ω –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º –ê–Ω–Ω–æ–π –ë—É—Å–µ–ª –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–∏—Ç–∞—Ç –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ —Ä–æ—Å—Ç–∞._`;
      
      await ctx.reply(helpText, { parse_mode: 'Markdown' });
      
    } catch (error) {
      logger.error(`üìñ Error in /help command: ${error.message}`);
      await ctx.reply('üìñ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ü–∏—Ç–∞—Ç –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∫–Ω–∏–≥! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ü–∏—Ç–∞—Ç—É.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search
   * @param {Object} ctx - Telegram context
   * @returns {Promise<void>}
   */
  async handleSearch(ctx) {
    try {
      const userId = ctx.from.id.toString();
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const quotes = await Quote.find({ userId })
        .sort({ createdAt: -1 })
        .limit(15);
      
      if (quotes.length === 0) {
        await ctx.reply(
          "üìñ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é!\n\n" +
          "üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±—É—é —Ü–∏—Ç–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è."
        );
        return;
      }

      let searchText = "üîç *–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã:*\n\n";
      
      quotes.forEach((quote, index) => {
        const author = quote.author ? ` _(${quote.author})_` : '';
        const date = quote.createdAt.toLocaleDateString('ru-RU');
        const truncatedText = quote.text.length > 80 
          ? quote.text.substring(0, 80) + '...' 
          : quote.text;
        
        searchText += `${index + 1}. "${truncatedText}"${author}\n`;
        searchText += `    üìÖ ${date} | üè∑Ô∏è ${quote.category}\n\n`;
      });

      searchText += "_–î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: /search –ª—é–±–æ–≤—å_";

      await ctx.reply(searchText, { parse_mode: 'Markdown' });
      
    } catch (error) {
      logger.error(`üìñ Error in /search command: ${error.message}`);
      await ctx.reply('üìñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ü–∏—Ç–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search —Å –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
   * @param {Object} ctx - Telegram context
   * @param {string} searchQuery - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
   * @returns {Promise<void>}
   */
  async handleSearchWithQuery(ctx, searchQuery) {
    try {
      const userId = ctx.from.id.toString();
      
      // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É, –∞–≤—Ç–æ—Ä—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const quotes = await Quote.searchUserQuotes(userId, searchQuery, 10);
      
      if (quotes.length === 0) {
        await ctx.reply(
          `üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n` +
          "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å–µ —Ü–∏—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π /search"
        );
        return;
      }

      let searchText = `üîç *–ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}":*\n\n`;
      
      quotes.forEach((quote, index) => {
        const author = quote.author ? ` _(${quote.author})_` : '';
        const date = quote.createdAt.toLocaleDateString('ru-RU');
        
        searchText += `${index + 1}. "${quote.text}"${author}\n`;
        searchText += `    üìÖ ${date} | üè∑Ô∏è ${quote.category}\n\n`;
      });

      await ctx.reply(searchText, { parse_mode: 'Markdown' });
      
    } catch (error) {
      logger.error(`üìñ Error in search with query: ${error.message}`);
      await ctx.reply('üìñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats
   * @param {Object} ctx - Telegram context
   * @returns {Promise<void>}
   */
  async handleStats(ctx) {
    try {
      const userId = ctx.from.id.toString();
      
      const userProfile = await UserProfile.findOne({ userId });
      if (!userProfile || !userProfile.isOnboardingComplete) {
        await ctx.reply("üìñ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –í–≤–µ–¥–∏—Ç–µ /start");
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const totalQuotes = await Quote.countDocuments({ userId });
      const todayQuotes = await Quote.getTodayQuotesCount(userId);
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
      const weekStart = new Date();
      weekStart.setDate(weekStart.getDate() - 7);
      const weekQuotes = await Quote.countDocuments({
        userId,
        createdAt: { $gte: weekStart }
      });

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
      const monthStart = new Date();
      monthStart.setDate(monthStart.getDate() - 30);
      const monthQuotes = await Quote.countDocuments({
        userId,
        createdAt: { $gte: monthStart }
      });

      // –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const topCategories = await Quote.aggregate([
        { $match: { userId } },
        { $group: { _id: '$category', count: { $sum: 1 } } },
        { $sort: { count: -1 } },
        { $limit: 3 }
      ]);

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const daysSinceRegistration = Math.floor(
        (new Date() - userProfile.registeredAt) / (1000 * 60 * 60 * 24)
      );

      let statsText = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${userProfile.name}:*\n\n`;
      statsText += `üìñ –¶–∏—Ç–∞—Ç—ã: *${totalQuotes}* | –°–µ—Ä–∏—è: *${userProfile.statistics.currentStreak}* –¥–Ω–µ–π | –†–µ–∫–æ—Ä–¥: *${userProfile.statistics.longestStreak}* –¥–Ω–µ–π\n`;
      statsText += `üïê –° –±–æ—Ç–æ–º: ${daysSinceRegistration} –¥–Ω–µ–π\n\n`;

      // –õ—é–±–∏–º—ã–µ –∞–≤—Ç–æ—Ä—ã
      if (userProfile.statistics.favoriteAuthors.length > 0) {
        statsText += `üë§ *–õ—é–±–∏–º—ã–µ –∞–≤—Ç–æ—Ä—ã:* ${userProfile.statistics.favoriteAuthors.slice(0, 3).join(', ')}\n\n`;
      }

      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ
      if (userProfile.achievements.length > 0) {
        statsText += `üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (${userProfile.achievements.length}/${this.availableAchievements.length}):*\n`;
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const classicsCount = await Quote.countDocuments({
          userId,
          author: { $in: ['–¢–æ–ª—Å—Ç–æ–π', '–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π', '–ü—É—à–∫–∏–Ω', '–ß–µ—Ö–æ–≤', '–¢—É—Ä–≥–µ–Ω–µ–≤', '–õ–µ—Ä–º–æ–Ω—Ç–æ–≤'] }
        });
        
        const ownThoughtsCount = await Quote.countDocuments({
          userId,
          author: { $exists: false }
        });

        const categoriesCount = await Quote.distinct('category', { userId }).then(cats => cats.length);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        for (const achievement of this.availableAchievements) {
          const userAchievement = userProfile.achievements.find(a => a.achievementId === achievement.id);
          
          if (userAchievement) {
            // –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            const date = userAchievement.unlockedAt.toLocaleDateString('ru-RU');
            statsText += `‚úÖ ${achievement.icon} ${achievement.name} _(${date})_\n`;
          } else {
            // –ù–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            let currentValue = 0;
            switch (achievement.type) {
              case 'quotes_count':
                currentValue = totalQuotes;
                break;
              case 'streak_days':
                currentValue = userProfile.statistics.currentStreak;
                break;
              case 'classics_count':
                currentValue = classicsCount;
                break;
              case 'own_thoughts':
                currentValue = ownThoughtsCount;
                break;
              case 'categories_count':
                currentValue = categoriesCount;
                break;
              case 'days_with_bot':
                currentValue = daysSinceRegistration;
                break;
            }

            const progress = Math.min(currentValue, achievement.targetValue);
            const progressBar = this.generateProgressBar(progress, achievement.targetValue, 7);
            
            statsText += `üîí ${achievement.icon} ${achievement.name} ${progressBar} ${progress}/${achievement.targetValue}\n`;
          }
        }
      } else {
        statsText += `üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:* 0/${this.availableAchievements.length}\n`;
        statsText += `üéØ *–ë–ª–∏–∂–∞–π—à–µ–µ:* üå± –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ç–∞—Ç—É)\n`;
      }

      statsText += '\n';

      // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (totalQuotes === 0) {
        statsText += `üå± –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É!`;
      } else if (totalQuotes < 10) {
        statsText += `üìñ –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –º—É–¥—Ä–æ—Å—Ç—å.`;
      } else if (totalQuotes < 50) {
        statsText += `‚ú® –í–ø–µ—á–∞—Ç–ª—è—é—â–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è! –í—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏.`;
      } else {
        statsText += `üåü –í—ã –∏—Å—Ç–∏–Ω–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –º—É–¥—Ä–æ—Å—Ç–∏!`;
      }

      statsText += `\n\nüí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –º–æ–º–µ–Ω—Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è!`;

      await ctx.reply(statsText, { parse_mode: 'Markdown' });
      
    } catch (error) {
      logger.error(`üìñ Error in /stats command: ${error.message}`);
      await ctx.reply('üìñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   * @param {number} current - –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
   * @param {number} target - –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
   * @param {number} length - –î–ª–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
   * @returns {string} –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
   */
  generateProgressBar(current, target, length = 7) {
    const progress = Math.min(current / target, 1);
    const filled = Math.floor(progress * length);
    const empty = length - filled;
    
    return '‚ñì'.repeat(filled) + '‚ñë'.repeat(empty);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /settings
   * @param {Object} ctx - Telegram context
   * @returns {Promise<void>}
   */
  async handleSettings(ctx) {
    try {
      const userId = ctx.from.id.toString();
      
      const userProfile = await UserProfile.findOne({ userId });
      if (!userProfile || !userProfile.isOnboardingComplete) {
        await ctx.reply("üìñ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –í–≤–µ–¥–∏—Ç–µ /start");
        return;
      }

      const reminderStatus = userProfile.settings.reminderEnabled 
        ? "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" 
        : "‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã";
      
      const reminderTimes = userProfile.settings.reminderTimes.length > 0
        ? userProfile.settings.reminderTimes.join(', ')
        : "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã";

      await ctx.reply("‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:*", {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ 
              text: `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${reminderStatus}`,
              callback_data: "toggle_reminders"
            }],
            [{ 
              text: `‚è∞ –í—Ä–µ–º—è: ${reminderTimes}`,
              callback_data: "change_reminder_time"
            }],
            [{ 
              text: "üìä –≠–∫—Å–ø–æ—Ä—Ç —Ü–∏—Ç–∞—Ç",
              callback_data: "export_quotes"
            }],
            [{ 
              text: "üîô –ó–∞–∫—Ä—ã—Ç—å",
              callback_data: "close_settings"
            }]
          ]
        }
      });
      
    } catch (error) {
      logger.error(`üìñ Error in /settings command: ${error.message}`);
      await ctx.reply('üìñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫
   * @param {Object} ctx - Telegram context
   * @param {string} callbackData - –î–∞–Ω–Ω—ã–µ callback'–∞
   * @returns {Promise<boolean>} true –µ—Å–ª–∏ callback –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
   */
  async handleSettingsCallback(ctx, callbackData) {
    try {
      await ctx.answerCbQuery();
      const userId = ctx.from.id.toString();

      switch (callbackData) {
        case 'toggle_reminders':
          await this._toggleReminders(ctx, userId);
          return true;
          
        case 'change_reminder_time':
          await this._showTimeSettings(ctx, userId);
          return true;
          
        case 'export_quotes':
          await this._exportQuotes(ctx, userId);
          return true;
          
        case 'close_settings':
          await ctx.deleteMessage();
          return true;
          
        default:
          if (callbackData.startsWith('set_time_')) {
            await this._setReminderTime(ctx, userId, callbackData);
            return true;
          }
          return false;
      }
    } catch (error) {
      logger.error(`üìñ Error in settings callback: ${error.message}`);
      await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      return true;
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   * @private
   * @param {Object} ctx - Telegram context
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async _toggleReminders(ctx, userId) {
    const userProfile = await UserProfile.findOne({ userId });
    
    userProfile.settings.reminderEnabled = !userProfile.settings.reminderEnabled;
    await userProfile.save();

    const status = userProfile.settings.reminderEnabled ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–≤—ã–∫–ª—é—á–µ–Ω—ã";
    const statusIcon = userProfile.settings.reminderEnabled ? "‚úÖ" : "‚ùå";
    
    await ctx.editMessageText(
      `‚öôÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${status} ${statusIcon}\n\n` +
      "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∏—Ç—å –∏—Ö.",
      {
        reply_markup: {
          inline_keyboard: [
            [{ 
              text: `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${statusIcon} ${status}`,
              callback_data: "toggle_reminders"
            }],
            [{ 
              text: "‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è",
              callback_data: "change_reminder_time"
            }],
            [{ 
              text: "üîô –ù–∞–∑–∞–¥",
              callback_data: "close_settings"
            }]
          ]
        }
      }
    );
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
   * @private
   * @param {Object} ctx - Telegram context
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async _showTimeSettings(ctx, userId) {
    await ctx.editMessageText(
      "‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:*\n\n" +
      "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–º–æ–≥–∞—é—Ç –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã.",
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: "üåÖ –£—Ç—Ä–æ–º (09:00)", callback_data: "set_time_09:00" },
              { text: "üåÜ –í–µ—á–µ—Ä–æ–º (19:00)", callback_data: "set_time_19:00" }
            ],
            [
              { text: "üåÖüåÜ –£—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º", callback_data: "set_time_both" }
            ],
            [
              { text: "üö´ –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data: "set_time_none" }
            ],
            [
              { text: "üîô –ù–∞–∑–∞–¥", callback_data: "close_settings" }
            ]
          ]
        }
      }
    );
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   * @private
   * @param {Object} ctx - Telegram context
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} callbackData - –î–∞–Ω–Ω—ã–µ callback'–∞
   */
  async _setReminderTime(ctx, userId, callbackData) {
    const userProfile = await UserProfile.findOne({ userId });
    
    const timeOption = callbackData.replace('set_time_', '');
    
    switch (timeOption) {
      case '09:00':
        userProfile.settings.reminderTimes = ['09:00'];
        userProfile.settings.reminderEnabled = true;
        break;
      case '19:00':
        userProfile.settings.reminderTimes = ['19:00'];
        userProfile.settings.reminderEnabled = true;
        break;
      case 'both':
        userProfile.settings.reminderTimes = ['09:00', '19:00'];
        userProfile.settings.reminderEnabled = true;
        break;
      case 'none':
        userProfile.settings.reminderTimes = [];
        userProfile.settings.reminderEnabled = false;
        break;
    }

    await userProfile.save();

    let message = "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!*\n\n";
    
    if (userProfile.settings.reminderEnabled) {
      const times = userProfile.settings.reminderTimes.join(' –∏ ');
      message += `‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –≤ ${times}\n\n`;
      message += "–ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –±—É–¥–µ—Ç —É–º–µ–Ω—å—à–∞—Ç—å—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º:\n";
      message += "‚Ä¢ 1-—è –Ω–µ–¥–µ–ª—è: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n";
      message += "‚Ä¢ 2-3 –Ω–µ–¥–µ–ª–∏: —á–µ—Ä–µ–∑ –¥–µ–Ω—å\n";
      message += "‚Ä¢ 4+ –Ω–µ–¥–µ–ª–∏: 2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é";
    } else {
      message += "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã";
    }

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: "üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data: "close_settings" }]
        ]
      }
    });
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç —Ü–∏—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @private
   * @param {Object} ctx - Telegram context
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async _exportQuotes(ctx, userId) {
    try {
      const quotes = await Quote.find({ userId })
        .sort({ createdAt: 1 });

      if (quotes.length === 0) {
        await ctx.editMessageText(
          "üìñ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–∏—Ç–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É!",
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "close_settings" }]
              ]
            }
          }
        );
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
      let exportText = `üìñ –ú–æ–∏ —Ü–∏—Ç–∞—Ç—ã –∏–∑ –±–æ—Ç–∞ ¬´–ß–∏—Ç–∞—Ç–µ–ª—å¬ª\n`;
      exportText += `–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç ${new Date().toLocaleDateString('ru-RU')}\n`;
      exportText += `–í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç: ${quotes.length}\n\n`;
      exportText += `${'='.repeat(50)}\n\n`;

      quotes.forEach((quote, index) => {
        exportText += `${index + 1}. "${quote.text}"\n`;
        if (quote.author) {
          exportText += `   ‚Äî ${quote.author}\n`;
        }
        exportText += `   üìÖ ${quote.createdAt.toLocaleDateString('ru-RU')}\n`;
        exportText += `   üè∑Ô∏è ${quote.category}\n\n`;
      });

      exportText += `${'='.repeat(50)}\n`;
      exportText += `–°–æ–∑–¥–∞–Ω–æ –±–æ—Ç–æ–º ¬´–ß–∏—Ç–∞—Ç–µ–ª—å¬ª –æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –ê–Ω–Ω—ã –ë—É—Å–µ–ª\n`;
      exportText += `üí° –•–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ - —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏!`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
      const buffer = Buffer.from(exportText, 'utf8');
      const filename = `quotes_${new Date().toISOString().split('T')[0]}.txt`;

      await ctx.replyWithDocument({
        source: buffer,
        filename: filename
      }, {
        caption: `üìñ –í–∞—à–∏ —Ü–∏—Ç–∞—Ç—ã (${quotes.length} —à—Ç.)\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞!`
      });

      await ctx.deleteMessage();

    } catch (error) {
      logger.error(`üìñ Error exporting quotes: ${error.message}`);
      await ctx.editMessageText(
        "üìñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "close_settings" }]
            ]
          }
        }
      );
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ
   * @param {string} command - –ö–æ–º–∞–Ω–¥–∞
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<boolean>} –ï—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø
   */
  async hasAccess(command, userId) {
    // –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    if (command === 'help') return true; // help –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º

    const userProfile = await UserProfile.findOne({ userId });
    return userProfile && userProfile.isOnboardingComplete;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
   * @returns {Array<string>} –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
   */
  getAvailableCommands() {
    return Object.keys(this.commands);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥
   * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  getStats() {
    return {
      totalCommands: Object.keys(this.commands).length,
      availableCommands: this.getAvailableCommands(),
      features: {
        userStatistics: true,
        quoteSearch: true,
        reminderSettings: true,
        quoteExport: true,
        helpSystem: true,
        achievementSystem: true
      }
    };
  }
}

module.exports = { CommandHandler };
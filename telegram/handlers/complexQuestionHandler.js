/**
 * @fileoverview –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±–æ—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @author g1orgi89
 */

const logger = require('../../server/utils/logger');
const { UserProfile } = require('../../server/models');
const ticketingService = require('../../server/services/ticketing');

/**
 * @typedef {import('../../server/types/reader').UserProfile} UserProfile
 */

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è –ê–Ω–Ω—ã
 */
class ComplexQuestionHandler {
  constructor() {
    /**
     * @type {Array<RegExp>} - –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
     */
    this.complexQuestionPatterns = [
      // –ü—Ä—è–º—ã–µ –ø—Ä–æ—Å—å–±—ã –æ –ø–æ–º–æ—â–∏
      /–ø–æ–º–æ–≥–∏—Ç–µ/i,
      /–ø–æ–º–æ—á—å/i,
      /–Ω–µ –ø–æ–Ω–∏–º–∞—é/i,
      /–Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å/i,
      /—á—Ç–æ –¥–µ–ª–∞—Ç—å/i,
      /–∫–∞–∫ –±—ã—Ç—å/i,
      
      // –ü—Ä–æ–±–ª–µ–º—ã –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
      /–ø—Ä–æ–±–ª–µ–º–∞/i,
      /–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è/i,
      /—Å–æ–≤–µ—Ç/i,
      /–ø–æ—Å–æ–≤–µ—Ç—É–π—Ç–µ/i,
      /–º–æ–∂–µ—Ç–µ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å/i,
      /–ø–æ–º–æ–≥–∏—Ç–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è/i,
      
      // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
      /–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç/i,
      /–æ—à–∏–±–∫–∞/i,
      /–±–∞–≥/i,
      /—Å–ª–æ–º–∞–ª—Å—è/i,
      
      // –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      /–¥–µ–ø—Ä–µ—Å—Å–∏—è/i,
      /—Ç—Ä–µ–≤–æ–≥–∞/i,
      /—Å—Ç—Ä–µ—Å—Å/i,
      /–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ/i,
      /–≥—Ä—É—Å—Ç–Ω–æ/i,
      /–ø–ª–æ—Ö–æ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É—é/i,
      /—É—Å—Ç–∞–ª–∞/i,
      /–≤—ã–≥–æ—Ä–∞–Ω–∏–µ/i,
      
      // –õ–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
      /–æ—Ç–Ω–æ—à–µ–Ω–∏—è/i,
      /–º—É–∂/i,
      /–∂–µ–Ω–∞/i,
      /–¥–µ—Ç–∏/i,
      /—Å–µ–º—å—è/i,
      /—Ä–∞–∑–≤–æ–¥/i,
      /—Ä–∞—Å—Å—Ç–∞–≤–∞–Ω–∏–µ/i,
      
      // –í–æ–ø—Ä–æ—Å—ã –æ –∂–∏–∑–Ω–∏
      /—Å–º—ã—Å–ª –∂–∏–∑–Ω–∏/i,
      /–∑–∞—á–µ–º –∂–∏—Ç—å/i,
      /—Ü–µ–ª—å –≤ –∂–∏–∑–Ω–∏/i,
      /–ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ/i
    ];

    /**
     * @type {Array<string>} - –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π —ç—Å–∫–∞–ª–∞—Ü–∏–∏
     */
    this.urgentKeywords = [
      '—Å—É–∏—Ü–∏–¥', '—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ', '–ø–æ–∫–æ–Ω—á–∏—Ç—å —Å —Å–æ–±–æ–π', '–Ω–µ —Ö–æ—á—É –∂–∏—Ç—å',
      '–¥–µ–ø—Ä–µ—Å—Å–∏—è', '–ø–∞–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏', '–Ω–∞—Å–∏–ª–∏–µ', '–∏–∑–±–∏–µ–Ω–∏–µ'
    ];

    logger.info('üìñ ComplexQuestionHandler initialized');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
   * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {boolean} true –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –ê–Ω–Ω—ã
   */
  isComplexQuestion(message) {
    const lowerMessage = message.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã)
    if (message.length > 500) return true;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    const hasComplexPattern = this.complexQuestionPatterns.some(pattern => 
      pattern.test(message)
    );
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    const questionCount = (message.match(/\?/g) || []).length;
    if (questionCount >= 3) return true;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É (–º–Ω–æ–≥–æ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤)
    const exclamationCount = (message.match(/!/g) || []).length;
    if (exclamationCount >= 5) return true;
    
    return hasComplexPattern;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ä–æ—á–Ω—ã–µ —Å–ª—É—á–∞–∏
   * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {boolean} true –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ
   */
  isUrgentCase(message) {
    const lowerMessage = message.toLowerCase();
    return this.urgentKeywords.some(keyword => lowerMessage.includes(keyword));
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–∂–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
   * @param {Object} ctx - Telegram context
   * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {UserProfile} userProfile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<void>}
   */
  async handleComplexQuestion(ctx, message, userProfile) {
    try {
      const isUrgent = this.isUrgentCase(message);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ ticketingService
      const ticket = await ticketingService.createTicket({
        userId: userProfile.userId,
        conversationId: ctx.chat.id.toString(),
        subject: `–í–æ–ø—Ä–æ—Å –æ—Ç ${userProfile.name} (@${userProfile.telegramUsername || '–±–µ–∑_username'})`,
        initialMessage: message,
        context: this._buildContext(userProfile, ctx),
        priority: isUrgent ? 'high' : 'medium',
        category: this._categorizeQuestion(message),
        language: 'ru',
        email: userProfile.email,
        metadata: {
          source: 'telegram_bot',
          userRegistered: userProfile.registeredAt,
          totalQuotes: userProfile.statistics.totalQuotes,
          platform: 'reader_bot',
          isUrgent: isUrgent
        }
      });

      // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const responseMessage = this._buildUserResponse(userProfile, ticket, isUrgent);
      await ctx.reply(responseMessage, { parse_mode: 'Markdown' });

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ê–Ω–Ω–µ
      await this._notifyAnna(ticket, userProfile, message, isUrgent);

      logger.info(`üìñ Complex question ticket created: ${ticket.ticketId} for user ${userProfile.userId}`);
      
    } catch (error) {
      logger.error(`üìñ Error handling complex question: ${error.message}`);
      await ctx.reply(
        "üìñ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. " +
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é –ê–Ω–Ω–µ."
      );
    }
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–∏–∫–µ—Ç–∞
   * @private
   * @param {UserProfile} userProfile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} ctx - Telegram context
   * @returns {string} –ö–æ–Ω—Ç–µ–∫—Å—Ç
   */
  _buildContext(userProfile, ctx) {
    const registrationDays = Math.floor(
      (new Date() - userProfile.registeredAt) / (1000 * 60 * 60 * 24)
    );

    let context = `–ö–û–ù–¢–ï–ö–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n`;
    context += `–ò–º—è: ${userProfile.name}\n`;
    context += `Email: ${userProfile.email}\n`;
    context += `Telegram: @${userProfile.telegramUsername || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
    context += `–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${userProfile.registeredAt.toLocaleDateString('ru-RU')} (${registrationDays} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)\n`;
    context += `–í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç: ${userProfile.statistics.totalQuotes}\n`;
    context += `–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: ${userProfile.statistics.currentStreak} –¥–Ω–µ–π\n`;
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–µ—Å—Ç–∞
    if (userProfile.testResults) {
      context += `\n–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê:\n`;
      context += `–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏: ${userProfile.testResults.question2_lifestyle || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      context += `–í—Ä–µ–º—è –¥–ª—è —Å–µ–±—è: ${userProfile.testResults.question3_time || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      context += `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: ${userProfile.testResults.question4_priorities || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      context += `–ß—É–≤—Å—Ç–≤–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: ${userProfile.testResults.question5_reading_feeling || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      context += `–ë–ª–∏–∑–∫–∞—è —Ñ—Ä–∞–∑–∞: ${userProfile.testResults.question6_phrase || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      context += `–í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: ${userProfile.testResults.question7_reading_time || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
    if (userProfile.preferences && userProfile.preferences.mainThemes) {
      context += `\n–ò–ù–¢–ï–†–ï–°–´:\n`;
      context += `–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã: ${userProfile.preferences.mainThemes.join(', ')}\n`;
    }

    // –ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞
    context += `\n–ò–°–¢–û–ß–ù–ò–ö: ${userProfile.source}\n`;

    return context;
  }

  /**
   * –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞
   * @private
   * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {string} –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞
   */
  _categorizeQuestion(message) {
    const lowerMessage = message.toLowerCase();

    if (this.isUrgentCase(message)) {
      return 'urgent_psychological';
    }

    if (lowerMessage.includes('–æ—Ç–Ω–æ—à–µ–Ω–∏—è') || lowerMessage.includes('–º—É–∂') || 
        lowerMessage.includes('–∂–µ–Ω–∞') || lowerMessage.includes('—Å–µ–º—å—è')) {
      return 'relationships';
    }

    if (lowerMessage.includes('–¥–µ—Ç–∏') || lowerMessage.includes('–º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ') ||
        lowerMessage.includes('–≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ')) {
      return 'parenting';
    }

    if (lowerMessage.includes('—Ä–∞–±–æ—Ç–∞') || lowerMessage.includes('–∫–∞—Ä—å–µ—Ä–∞') ||
        lowerMessage.includes('–ø—Ä–æ—Ñ–µ—Å—Å–∏—è')) {
      return 'career';
    }

    if (lowerMessage.includes('—Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞') || lowerMessage.includes('—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å') ||
        lowerMessage.includes('—Å–∞–º–æ–ø—Ä–∏–Ω—è—Ç–∏–µ')) {
      return 'self_esteem';
    }

    if (lowerMessage.includes('–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç') || lowerMessage.includes('–æ—à–∏–±–∫–∞') ||
        lowerMessage.includes('–±–∞–≥')) {
      return 'technical_issue';
    }

    return 'general_question';
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * @private
   * @param {UserProfile} userProfile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} ticket - –°–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–∏–∫–µ—Ç
   * @param {boolean} isUrgent - –°—Ä–æ—á–Ω—ã–π –ª–∏ —Å–ª—É—á–∞–π
   * @returns {string} –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  _buildUserResponse(userProfile, ticket, isUrgent) {
    let message = `üìû *–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –ê–Ω–Ω—ã.*\n\n`;
    
    if (isUrgent) {
      message += `üö® *–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Å—Ä–æ—á–Ω–æ–µ.*\n`;
      message += `–ê–Ω–Ω–∞ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏ –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ.\n\n`;
    } else {
      message += `–Ø –ø–µ—Ä–µ–¥–∞–ª–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ê–Ω–Ω–µ, –∏ –æ–Ω–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n`;
    }

    message += `*–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:*\n`;
    message += `üì± Telegram: @${userProfile.telegramUsername || '–∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞'}\n`;
    message += `üìß Email: ${userProfile.email}\n\n`;

    message += `*–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è:* \`${ticket.ticketId}\`\n\n`;

    if (isUrgent) {
      message += `üíö –ê–Ω–Ω–∞ –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ —Å—Ä–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞. `;
      message += `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ —Å–µ–±–µ, –ø–æ–∫–∞ –∂–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç–∞.\n\n`;
    }

    message += `–ü–æ–∫–∞ –ê–Ω–Ω–∞ –≥–æ—Ç–æ–≤–∏—Ç –æ—Ç–≤–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã - `;
    message += `–æ–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è –∏ –Ω–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã.\n\n`;
    message += `üìñ *–•–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ - —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏!*`;

    return message;
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ê–Ω–Ω–µ –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
   * @private
   * @param {Object} ticket - –°–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–∏–∫–µ—Ç
   * @param {UserProfile} userProfile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} originalMessage - –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param {boolean} isUrgent - –°—Ä–æ—á–Ω—ã–π –ª–∏ —Å–ª—É—á–∞–π
   * @returns {Promise<void>}
   */
  async _notifyAnna(ticket, userProfile, originalMessage, isUrgent) {
    try {
      const urgencyIcon = isUrgent ? 'üö®' : 'üìù';
      const urgencyText = isUrgent ? '*–°–†–û–ß–ù–û–ï –û–ë–†–ê–©–ï–ù–ò–ï*' : '–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ';
      
      const adminNotification = `${urgencyIcon} *${urgencyText} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n` +
        `*–ë–∏–ª–µ—Ç:* \`${ticket.ticketId}\`\n` +
        `*–û—Ç:* ${userProfile.name} (@${userProfile.telegramUsername || '–±–µ–∑_username'})\n` +
        `*Email:* ${userProfile.email}\n` +
        `*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${this._getCategoryDisplayName(ticket.category)}\n\n` +
        `*–°–æ–æ–±—â–µ–Ω–∏–µ:*\n${originalMessage}\n\n` +
        `*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n` +
        `‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${userProfile.registeredAt.toLocaleDateString('ru-RU')}\n` +
        `‚Ä¢ –í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç: ${userProfile.statistics.totalQuotes}\n` +
        `‚Ä¢ –°–µ—Ä–∏—è –¥–Ω–µ–π: ${userProfile.statistics.currentStreak}\n` +
        `‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: ${userProfile.source}\n\n` +
        `*–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏:* ${userProfile.testResults?.question2_lifestyle || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
        `*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:* ${userProfile.testResults?.question4_priorities || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`;

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ Telegram (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ADMIN_TELEGRAM_ID)
      if (process.env.ADMIN_TELEGRAM_ID) {
        const TelegramBot = require('../../telegram/index');
        const bot = new TelegramBot({ token: process.env.TELEGRAM_BOT_TOKEN });
        
        await bot.bot.telegram.sendMessage(
          process.env.ADMIN_TELEGRAM_ID,
          adminNotification,
          { 
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [
                  { text: "üìß –û—Ç–∫—Ä—ã—Ç—å –≤ –∞–¥–º–∏–Ω–∫–µ", url: `${process.env.ADMIN_URL || 'http://localhost:3000'}/admin/tickets/${ticket.ticketId}` }
                ],
                [
                  { text: "üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞", callback_data: `reply_ticket_${ticket.ticketId}` }
                ]
              ]
            }
          }
        );
      }

      // Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω email —Å–µ—Ä–≤–∏—Å)
      if (process.env.SMTP_HOST && userProfile.email) {
        const emailSubject = isUrgent 
          ? `üö® –°–†–û–ß–ù–û: –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç ${userProfile.name}`
          : `üìù –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç ${userProfile.name}`;
          
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ email —Å–µ—Ä–≤–∏—Å–∞
        // await emailService.sendNotification(process.env.ADMIN_EMAIL, emailSubject, ...);
      }

      logger.info(`üìñ Admin notification sent for ticket ${ticket.ticketId}, urgent: ${isUrgent}`);
      
    } catch (error) {
      logger.error(`üìñ Error sending admin notification: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   * @private
   * @param {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è
   * @returns {string} –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
   */
  _getCategoryDisplayName(category) {
    const categoryNames = {
      'urgent_psychological': 'üö® –°—Ä–æ—á–Ω–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å',
      'relationships': 'üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è',
      'parenting': 'üë∂ –†–æ–¥–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
      'career': 'üíº –ö–∞—Ä—å–µ—Ä–∞',
      'self_esteem': 'üí™ –°–∞–º–æ–æ—Ü–µ–Ω–∫–∞',
      'technical_issue': 'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞',
      'general_question': '‚ùì –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å'
    };

    return categoryNames[category] || '‚ùì –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å';
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ê–Ω–Ω—ã —á–µ—Ä–µ–∑ –±–æ—Ç–∞
   * @param {string} ticketId - ID —Ç–∏–∫–µ—Ç–∞
   * @param {string} response - –û—Ç–≤–µ—Ç –ê–Ω–Ω—ã
   * @returns {Promise<void>}
   */
  async handleAnnaResponse(ticketId, response) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
      const ticket = await ticketingService.getTicket(ticketId);
      if (!ticket) {
        logger.error(`üìñ Ticket not found: ${ticketId}`);
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const TelegramBot = require('../../telegram/index');
      const bot = new TelegramBot({ token: process.env.TELEGRAM_BOT_TOKEN });

      const responseMessage = `üí¨ *–û—Ç–≤–µ—Ç –æ—Ç –ê–Ω–Ω—ã –ë—É—Å–µ–ª:*\n\n${response}\n\n` +
        `_–ü–æ —Ç–∏–∫–µ—Ç—É: ${ticketId}_\n\n` +
        `–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö –∑–¥–µ—Å—å.`;

      await bot.bot.telegram.sendMessage(
        ticket.metadata.conversationId || ticket.userId,
        responseMessage,
        { parse_mode: 'Markdown' }
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
      await ticketingService.updateTicketStatus(ticketId, 'answered');

      logger.info(`üìñ Anna's response sent for ticket ${ticketId}`);
      
    } catch (error) {
      logger.error(`üìñ Error sending Anna's response: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
   * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  getStats() {
    return {
      totalPatterns: this.complexQuestionPatterns.length,
      urgentKeywords: this.urgentKeywords.length,
      supportedCategories: [
        'urgent_psychological',
        'relationships', 
        'parenting',
        'career',
        'self_esteem',
        'technical_issue',
        'general_question'
      ],
      features: {
        automaticDetection: true,
        urgentCaseHandling: true,
        ticketCreation: true,
        adminNotifications: true,
        contextualAnalysis: true
      }
    };
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è)
   * @param {Array<string>} newPatterns - –ù–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
   * @returns {void}
   */
  updatePatterns(newPatterns) {
    try {
      const patterns = newPatterns.map(pattern => new RegExp(pattern, 'i'));
      this.complexQuestionPatterns.push(...patterns);
      logger.info(`üìñ Added ${newPatterns.length} new patterns for complex question detection`);
    } catch (error) {
      logger.error(`üìñ Error updating patterns: ${error.message}`);
    }
  }
}

module.exports = { ComplexQuestionHandler };
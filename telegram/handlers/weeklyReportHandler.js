/**
 * @fileoverview –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –≤ Telegram
 * @author g1orgi89
 */

const logger = require('../../server/utils/logger');
const { WeeklyReportService } = require('../../server/services/weeklyReportService');

/**
 * @typedef {import('../../server/types/reader').WeeklyReport} WeeklyReport
 */

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
 */
class WeeklyReportHandler {
  constructor(bot) {
    this.bot = bot;
    this.weeklyReportService = new WeeklyReportService();
    
    logger.info('üìñ WeeklyReportHandler initialized');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<boolean>} –£—Å–ø–µ—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendWeeklyReport(userId) {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
      const report = await this.weeklyReportService.generateWeeklyReport(userId);
      
      if (!report) {
        logger.warn(`üìñ Failed to generate weekly report for user ${userId}`);
        return false;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ Telegram
      const success = await this.sendReportToTelegram(userId, report);
      
      if (success) {
        logger.info(`üìñ Weekly report sent successfully to user ${userId}`);
      } else {
        logger.error(`üìñ Failed to send weekly report to user ${userId}`);
      }

      return success;

    } catch (error) {
      logger.error(`üìñ Error sending weekly report to user ${userId}: ${error.message}`, error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ Telegram
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {WeeklyReport} report - –û—Ç—á–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   * @returns {Promise<boolean>} –£—Å–ø–µ—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendReportToTelegram(userId, report) {
    try {
      let message;

      if (report.quotes.length === 0) {
        // –û—Ç—á–µ—Ç –¥–ª—è –Ω–µ–¥–µ–ª–∏ –±–µ–∑ —Ü–∏—Ç–∞—Ç
        message = this.formatEmptyWeekMessage(report);
      } else {
        // –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
        message = await this.formatFullReportMessage(report);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const keyboard = this.createReportKeyboard(report);
      
      await this.bot.telegram.sendMessage(userId, message, {
        parse_mode: 'Markdown',
        disable_web_page_preview: true,
        reply_markup: keyboard
      });

      return true;

    } catch (error) {
      logger.error(`üìñ Error sending report message: ${error.message}`, error);
      return false;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–µ–¥–µ–ª–∏ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
   * @param {WeeklyReport} report - –û—Ç—á–µ—Ç
   * @returns {Promise<string>} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  async formatFullReportMessage(report) {
    const { Quote } = require('../../server/models');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç
    const quotes = await Quote.find({ _id: { $in: report.quotes } }).sort({ createdAt: 1 });
    
    const quotesCount = quotes.length;
    const quotesText = quotes.map((quote, index) => {
      const author = quote.author ? ` (${quote.author})` : '';
      return `‚úÖ "${quote.text}"${author}`;
    }).join('\n');

    const recommendationsText = report.recommendations.map((rec, index) => {
      return `${index + 1}. [${rec.title}](${rec.link}) - ${rec.price}\n   ${rec.description}`;
    }).join('\n\n');

    const promoText = report.promoCode 
      ? `üéÅ *–ü—Ä–æ–º–æ–∫–æ–¥ ${report.promoCode.code}* - —Å–∫–∏–¥–∫–∞ ${report.promoCode.discount}% –¥–æ ${report.promoCode.validUntil.toLocaleDateString()}!`
      : '';

    return `üìä *–í–∞—à –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é*

–ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –≤—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ ${quotesCount} ${this.weeklyReportService.declensionQuotes(quotesCount)}:

${quotesText}

üéØ *–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏:*
${report.analysis.insights}

${report.recommendations.length > 0 ? `üíé *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ê–Ω–Ω—ã:*\n${recommendationsText}\n\n` : ''}${promoText}

---
üí¨ –ö–∞–∫ –≤–∞–º —ç—Ç–æ—Ç –æ—Ç—á–µ—Ç?`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—É—Å—Ç–æ–π –Ω–µ–¥–µ–ª–∏
   * @param {WeeklyReport} report - –û—Ç—á–µ—Ç
   * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  formatEmptyWeekMessage(report) {
    return `üìñ *–û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é*

${report.analysis.insights}

üí≠ –ü–æ–º–Ω–∏—Ç–µ: "–•–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ - —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏!"

–ö–∞–∂–¥–∞—è —Ü–∏—Ç–∞—Ç–∞ - —ç—Ç–æ —Å—Ç—É–ø–µ–Ω—å–∫–∞ –∫ –ª—É—á—à–µ–º—É –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–µ–±—è. –ù–∞—á–Ω–∏—Ç–µ —Å –æ–¥–Ω–æ–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!

üìö –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ –≤ –∫–Ω–∏–≥–µ, –∫–æ—Ç–æ—Ä—É—é —á–∏—Ç–∞–µ—Ç–µ, –∏–ª–∏ –≤—Å–ø–æ–º–Ω–∏—Ç–µ –º—É–¥—Ä—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–≥–¥–∞-—Ç–æ –≤–∞—Å —Ç—Ä–æ–Ω—É–ª–∏.`;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞
   * @param {WeeklyReport} report - –û—Ç—á–µ—Ç
   * @returns {Object} Telegram inline keyboard
   */
  createReportKeyboard(report) {
    const keyboard = [];

    // –ö–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤)
    if (report.quotes.length > 0) {
      keyboard.push([
        { text: "üëç –û—Ç–ª–∏—á–Ω–æ", callback_data: `feedback_excellent_${report._id}` },
        { text: "üëå –•–æ—Ä–æ—à–æ", callback_data: `feedback_good_${report._id}` },
        { text: "üëé –ü–ª–æ—Ö–æ", callback_data: `feedback_bad_${report._id}` }
      ]);
    }

    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    keyboard.push([
      { text: "üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "show_user_stats" }
    ]);

    // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –æ—Ç—á–µ—Ç–æ–≤)
    keyboard.push([
      { text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data: "show_settings" }
    ]);

    return {
      inline_keyboard: keyboard
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ –æ—Ç—á–µ—Ç—É
   * @param {Object} ctx - Telegram context
   * @param {string} rating - –†–µ–π—Ç–∏–Ω–≥ (excellent/good/bad)
   * @param {string} reportId - ID –æ—Ç—á–µ—Ç–∞
   * @returns {Promise<void>}
   */
  async handleWeeklyFeedback(ctx, rating, reportId) {
    try {
      const { WeeklyReport } = require('../../server/models');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
      const ratingValue = this.convertRatingToNumber(rating);
      
      await WeeklyReport.findByIdAndUpdate(reportId, {
        'feedback.rating': ratingValue,
        'feedback.respondedAt': new Date()
      });

      let responseMessage;
      switch (rating) {
        case 'excellent':
          responseMessage = "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –†–∞–¥–∞, —á—Ç–æ –æ—Ç—á–µ—Ç –æ–∫–∞–∑–∞–ª—Å—è –ø–æ–ª–µ–∑–Ω—ã–º.";
          break;
        case 'good':
          responseMessage = "üëå –°–ø–∞—Å–∏–±–æ! –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–ª—É—á—à–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç—á–µ—Ç–∞—Ö?";
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
          break;
        case 'bad':
          responseMessage = "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ –æ—Ç—á–µ—Ç –Ω–µ –æ–ø—Ä–∞–≤–¥–∞–ª –æ–∂–∏–¥–∞–Ω–∏–π. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?";
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
          break;
        default:
          responseMessage = "üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!";
      }

      await ctx.editMessageText(responseMessage);

      // –õ–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
      logger.info(`üìñ Weekly report feedback received: user ${ctx.from.id}, rating ${rating}, report ${reportId}`);

      // –ï—Å–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∏–∑–∫–∏–π, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (ratingValue <= 2) {
        await this.notifyAdminAboutLowRating(ctx.from.id, rating, reportId);
      }

    } catch (error) {
      logger.error(`üìñ Error handling weekly feedback: ${error.message}`, error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤ —á–∏—Å–ª–æ
   * @param {string} rating - –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
   * @returns {number} –ß–∏—Å–ª–æ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥
   */
  convertRatingToNumber(rating) {
    switch (rating) {
      case 'excellent': return 5;
      case 'good': return 4;
      case 'bad': return 2;
      default: return 3;
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–∏–∑–∫–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} rating - –†–µ–π—Ç–∏–Ω–≥
   * @param {string} reportId - ID –æ—Ç—á–µ—Ç–∞
   * @returns {Promise<void>}
   */
  async notifyAdminAboutLowRating(userId, rating, reportId) {
    try {
      const { UserProfile } = require('../../server/models');
      const user = await UserProfile.findOne({ userId });
      
      if (!user) return;

      const adminMessage = `
üìù *–ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞*

*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${user.name} (@${user.telegramUsername || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})
*Email:* ${user.email}
*–†–µ–π—Ç–∏–Ω–≥:* ${rating} (${this.convertRatingToNumber(rating)}/5)
*ID –æ—Ç—á–µ—Ç–∞:* ${reportId}

*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*
- –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.registeredAt.toLocaleDateString()}
- –í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç: ${user.statistics.totalQuotes}
- –ò—Å—Ç–æ—á–Ω–∏–∫: ${user.source}

–°—Ç–æ–∏—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–∞.
      `;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ADMIN_TELEGRAM_ID)
      if (process.env.ADMIN_TELEGRAM_ID) {
        await this.bot.telegram.sendMessage(
          process.env.ADMIN_TELEGRAM_ID,
          adminMessage,
          { parse_mode: 'Markdown' }
        );
      }

    } catch (error) {
      logger.error(`üìñ Error notifying admin about low rating: ${error.message}`, error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendReportsToAllUsers() {
    try {
      const { UserProfile } = require('../../server/models');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const activeUsers = await UserProfile.find({
        isOnboardingComplete: true,
        'settings.reminderEnabled': true
      });

      const stats = {
        total: activeUsers.length,
        sent: 0,
        failed: 0,
        errors: []
      };

      logger.info(`üìñ Starting weekly reports sending to ${stats.total} users`);

      for (const user of activeUsers) {
        try {
          const success = await this.sendWeeklyReport(user.userId);
          
          if (success) {
            stats.sent++;
          } else {
            stats.failed++;
          }

          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram API
          await new Promise(resolve => setTimeout(resolve, 100));

        } catch (error) {
          stats.failed++;
          stats.errors.push({
            userId: user.userId,
            error: error.message
          });
          
          logger.error(`üìñ Failed to send weekly report to user ${user.userId}: ${error.message}`);
        }
      }

      logger.info(`üìñ Weekly reports sending completed: ${stats.sent} sent, ${stats.failed} failed`);
      
      return stats;

    } catch (error) {
      logger.error(`üìñ Error in sendReportsToAllUsers: ${error.message}`, error);
      return {
        total: 0,
        sent: 0,
        failed: 0,
        errors: [{ error: error.message }]
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
   * @param {number} days - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async getReportStats(days = 30) {
    try {
      const { WeeklyReport } = require('../../server/models');
      
      const startDate = new Date();
      startDate.setDate(startDate.getDate() - days);

      const reports = await WeeklyReport.find({
        sentAt: { $gte: startDate }
      });

      const stats = {
        totalReports: reports.length,
        reportsWithQuotes: reports.filter(r => r.quotes.length > 0).length,
        emptyReports: reports.filter(r => r.quotes.length === 0).length,
        averageQuotesPerReport: 0,
        feedbackStats: {
          total: 0,
          excellent: 0,
          good: 0,
          bad: 0,
          averageRating: 0
        }
      };

      // –ü–æ–¥—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
      if (stats.reportsWithQuotes > 0) {
        const totalQuotes = reports
          .filter(r => r.quotes.length > 0)
          .reduce((sum, r) => sum + r.quotes.length, 0);
        stats.averageQuotesPerReport = Math.round(totalQuotes / stats.reportsWithQuotes * 10) / 10;
      }

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
      const reportsWithFeedback = reports.filter(r => r.feedback && r.feedback.rating);
      stats.feedbackStats.total = reportsWithFeedback.length;

      if (reportsWithFeedback.length > 0) {
        stats.feedbackStats.excellent = reportsWithFeedback.filter(r => r.feedback.rating === 5).length;
        stats.feedbackStats.good = reportsWithFeedback.filter(r => r.feedback.rating === 4).length;
        stats.feedbackStats.bad = reportsWithFeedback.filter(r => r.feedback.rating <= 2).length;

        const totalRating = reportsWithFeedback.reduce((sum, r) => sum + r.feedback.rating, 0);
        stats.feedbackStats.averageRating = Math.round(totalRating / reportsWithFeedback.length * 10) / 10;
      }

      return stats;

    } catch (error) {
      logger.error(`üìñ Error getting report stats: ${error.message}`, error);
      return null;
    }
  }
}

module.exports = { WeeklyReportHandler };
/**
 * Clean Onboarding Handler - menu button + simple text for Reader bot
 * @file telegram/handlers/modernOnboardingHandler.js
 * üé® CLEAN UX: Menu button, simple text, no visual spam
 * üîß FIXED: Message editing errors, robust error handling
 */

const logger = require('../../server/utils/logger');
const { UserProfile } = require('../../server/models');
const claudeService = require('../../server/services/claude');

class ModernOnboardingHandler {
  constructor() {
    /** @type {Map<string, Object>} */
    this.userStates = new Map();
    
    this.testQuestions = [
      {
        id: 'name',
        number: 1,
        type: 'text',
        question: '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?',
        emoji: 'üëã'
      },
      {
        id: 'lifestyle',
        number: 2,
        type: 'buttons',
        question: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:',
        emoji: 'üåü',
        options: [
          { text: 'üë∂ –Ø –º–∞–º–∞ (–¥–µ—Ç–∏ - –≥–ª–∞–≤–Ω–∞—è –∑–∞–±–æ—Ç–∞)', value: 'mother' },
          { text: '‚öñÔ∏è –ó–∞–º—É–∂–µ–º, –±–∞–ª–∞–Ω—Å–∏—Ä—É—é –¥–æ–º/—Ä–∞–±–æ—Ç—É/—Å–µ–±—è', value: 'married' },
          { text: 'üå∏ –ë–µ–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π, –∏–∑—É—á–∞—é –º–∏—Ä –∏ —Å–µ–±—è', value: 'single' }
        ]
      },
      {
        id: 'timeForSelf',
        number: 3,
        type: 'buttons',
        question: '–ö–∞–∫ –Ω–∞—Ö–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Å–µ–±—è?',
        emoji: '‚è∞',
        options: [
          { text: 'üåÖ –†–∞–Ω–æ —É—Ç—Ä–æ–º, –ø–æ–∫–∞ –≤—Å–µ —Å–ø—è—Ç', value: 'early_morning' },
          { text: 'üåô –ü–æ–∑–¥–Ω–æ –≤–µ—á–µ—Ä–æ–º, –∫–æ–≥–¥–∞ –¥–µ–ª–∞ —Å–¥–µ–ª–∞–Ω—ã', value: 'late_evening' },
          { text: 'üì± –£—Ä—ã–≤–∫–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è', value: 'throughout_day' },
          { text: 'ü§∑‚Äç‚ôÄÔ∏è –í—Ä–µ–º—è –¥–ª—è —Å–µ–±—è? –ß—Ç–æ —ç—Ç–æ?', value: 'no_time' }
        ]
      },
      {
        id: 'priorities',
        number: 4,
        type: 'buttons',
        question: '–ß—Ç–æ —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ?',
        emoji: 'üéØ',
        options: [
          { text: 'üßò‚Äç‚ôÄÔ∏è –ù–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å', value: 'inner_balance' },
          { text: 'üí≠ –ü–æ–Ω—è—Ç—å —Å–≤–æ–∏ –∏—Å—Ç–∏–Ω–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è', value: 'true_desires' },
          { text: 'üíï –ù–∞—É—á–∏—Ç—å—Å—è –ª—é–±–∏—Ç—å —Å–µ–±—è', value: 'self_love' },
          { text: 'üèóÔ∏è –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è', value: 'relationships' }
        ]
      },
      {
        id: 'readingFeelings',
        number: 5,
        type: 'buttons',
        question: '–ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —á–∏—Ç–∞—è –∫–Ω–∏–≥–∏?',
        emoji: 'üìö',
        options: [
          { text: 'üîç –ù–∞—Ö–æ–∂—É –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã', value: 'finding_answers' },
          { text: '‚ö° –ü–æ–ª—É—á–∞—é –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ —ç–Ω–µ—Ä–≥–∏—é', value: 'inspiration' },
          { text: 'üòå –£—Å–ø–æ–∫–∞–∏–≤–∞—é—Å—å –∏ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—Å—å', value: 'relaxation' },
          { text: 'üå± –£—á—É—Å—å –Ω–æ–≤–æ–º—É –æ —Å–µ–±–µ –∏ –º–∏—Ä–µ', value: 'learning' }
        ]
      },
      {
        id: 'closestPhrase',
        number: 6,
        type: 'buttons',
        question: '–ö–∞–∫–∞—è —Ñ—Ä–∞–∑–∞ –±–ª–∏–∂–µ?',
        emoji: 'üí´',
        options: [
          { text: '‚ú® "–°—á–∞—Å—Ç—å–µ ‚Äî —ç—Ç–æ –≤—ã–±–æ—Ä"', value: 'happiness_choice' },
          { text: '‚ù§Ô∏è "–õ—é–±–æ–≤—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Å–µ–±—è"', value: 'love_self' },
          { text: 'üåç "–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ"', value: 'life_journey' },
          { text: 'üß† "–ú—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –æ–ø—ã—Ç–æ–º"', value: 'wisdom_experience' }
        ]
      },
      {
        id: 'readingTime',
        number: 7,
        type: 'buttons',
        question: '–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —á–∏—Ç–∞–µ—Ç–µ –≤ –Ω–µ–¥–µ–ª—é?',
        emoji: 'üìñ',
        options: [
          { text: 'üìö –ú–µ–Ω—å—à–µ —á–∞—Å–∞ (—á–∏—Ç–∞—é —Ä–µ–¥–∫–æ)', value: 'less_hour' },
          { text: '‚è∞ 1-3 —á–∞—Å–∞ (–ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º)', value: 'few_hours' },
          { text: 'üìñ 3-7 —á–∞—Å–æ–≤ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)', value: 'regular' },
          { text: 'ü§ì –ë–æ–ª—å—à–µ 7 —á–∞—Å–æ–≤ (—á–∏—Ç–∞—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)', value: 'daily' }
        ]
      }
    ];

    this.sourceOptions = [
      { text: 'üì± Instagram', value: 'Instagram' },
      { text: 'üí¨ Telegram', value: 'Telegram' },
      { text: 'üìπ YouTube', value: 'YouTube' },
      { text: 'üßµ Threads', value: 'Threads' },
      { text: 'üë• –û—Ç –¥—Ä—É–∑–µ–π', value: '–î—Ä—É–∑—å—è' },
      { text: 'üîç –î—Ä—É–≥–æ–µ', value: '–î—Ä—É–≥–æ–µ' }
    ];

    // –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    setInterval(() => this.cleanupStaleStates(), 30 * 60 * 1000);
    
    logger.info('‚úÖ ModernOnboardingHandler initialized with clean UX');
  }

  /**
   * Setup bot menu button and commands
   * @param {Object} bot - Telegram bot instance
   */
  async setupMenuButton(bot) {
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º menu button
      await bot.telegram.setChatMenuButton({
        menu_button: {
          type: 'commands'
        }
      });

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é
      await bot.telegram.setMyCommands([
        { command: 'stats', description: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' },
        { command: 'search', description: 'üîç –ü–æ–∏—Å–∫ —Ü–∏—Ç–∞—Ç' },
        { command: 'help', description: '‚ùì –°–ø—Ä–∞–≤–∫–∞' },
        { command: 'settings', description: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' }
      ]);

      logger.info('‚úÖ Menu button and commands configured');
    } catch (error) {
      logger.error(`Error setting up menu button: ${error.message}`);
    }
  }

  /**
   * Handle /start command with simple welcome
   */
  async handleStart(ctx) {
    try {
      const userId = ctx.from.id.toString();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingUser = await UserProfile.findOne({ userId });
      if (existingUser && existingUser.isOnboardingComplete) {
        await ctx.reply(
          'üìñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!\n\n' +
          'üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é üìã (—Ä—è–¥–æ–º —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤) –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏'
        );
        return;
      }

      const welcomeMessage = 
        'üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n' +
        '–í—ã –ø–æ–ø–∞–ª–∏ –≤ ¬´–ß–∏—Ç–∞—Ç–µ–ª—å¬ª ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ —Å–ª–æ–≤ –∏ —Ü–∏—Ç–∞—Ç.\n\n' +
        '–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞ –ë—É—Å–µ–ª, —è –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å ¬´–ö–Ω–∏–∂–Ω–æ–≥–æ –∫–ª—É–±–∞¬ª. ' +
        '–ó–¥–µ—Å—å –º—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏–º –≤–∞—à–∏ —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ —Ä–æ—Å—Ç–∞.\n\n' +
        'üìù –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥—ë–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç (2 –º–∏–Ω—É—Ç—ã) ‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø–æ–Ω—è—Ç—å, ' +
        '–∫–∞–∫–∏–µ –∫–Ω–∏–≥–∏ –±—É–¥—É—Ç –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –∏–º–µ–Ω–Ω–æ –≤–∞–º.';

      await ctx.reply(welcomeMessage, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚ú® –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data: "start_test" }]
          ]
        }
      });
      
    } catch (error) {
      logger.error(`Error in handleStart: ${error.message}`);
      await ctx.reply('üìñ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–ß–∏—Ç–∞—Ç–µ–ª—å¬ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  /**
   * Handle callback queries
   */
  async handleCallback(ctx) {
    try {
      const userId = ctx.from.id.toString();
      const data = ctx.callbackQuery.data;

      if (data === 'start_test') {
        await this._startTest(ctx);
        await ctx.answerCbQuery('üéØ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç!');
        return true;
      }

      if (data.startsWith('answer_')) {
        await this._handleAnswer(ctx, data);
        return true;
      }

      if (data.startsWith('source_')) {
        await this._handleSourceSelection(ctx, data);
        return true;
      }

      return false;
      
    } catch (error) {
      logger.error(`Error in handleCallback: ${error.message}`);
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      return false;
    }
  }

  /**
   * Handle text messages
   */
  async handleTextMessage(ctx) {
    try {
      const userId = ctx.from.id.toString();
      const text = ctx.message.text;
      const state = this.userStates.get(userId);

      if (!state) return false;

      if (state.step === 'awaiting_name') {
        await this._handleNameInput(ctx, text);
        return true;
      }

      if (state.step === 'awaiting_email') {
        await this._handleEmailInput(ctx, text);
        return true;
      }

      return false;
      
    } catch (error) {
      logger.error(`Error in handleTextMessage: ${error.message}`);
      return false;
    }
  }

  /**
   * Start test - robust message handling
   */
  async _startTest(ctx) {
    const userId = ctx.from.id.toString();
    
    this.userStates.set(userId, {
      step: 'test_question_1',
      answers: {},
      currentQuestion: 1,
      startTime: Date.now(),
      lastActivity: Date.now(),
      useNewMessages: false // Will use new messages instead of editing
    });

    await this._showQuestion(ctx, 1);
  }

  /**
   * Show question with robust error handling
   */
  async _showQuestion(ctx, questionNumber) {
    try {
      const userId = ctx.from.id.toString();
      const state = this.userStates.get(userId);
      const question = this.testQuestions[questionNumber - 1];
      
      if (!question || !state) return;

      const progress = `üìä ${questionNumber}/${this.testQuestions.length}`;
      
      let message = `${progress}\n\n${question.emoji} –í–æ–ø—Ä–æ—Å ${question.number} –∏–∑ ${this.testQuestions.length}\n\n${question.question}`;

      if (question.type === 'text') {
        message += '\n\nüí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:';
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.reply(message);
        
        // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        state.step = 'awaiting_name';
        state.lastActivity = Date.now();

      } else if (question.type === 'buttons') {
        const keyboard = {
          inline_keyboard: question.options.map(option => [{
            text: option.text,
            callback_data: `answer_${question.id}_${option.value}`
          }])
        };

        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try {
          if (ctx.callbackQuery && ctx.callbackQuery.message) {
            await ctx.editMessageText(message, { reply_markup: keyboard });
          } else {
            await ctx.reply(message, { reply_markup: keyboard });
          }
        } catch (editError) {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          logger.warn(`Could not edit message, sending new: ${editError.message}`);
          await ctx.reply(message, { reply_markup: keyboard });
        }
      }
      
    } catch (error) {
      logger.error(`Error showing question: ${error.message}`);
      // Graceful fallback
      await this._sendFallbackMessage(ctx, questionNumber);
    }
  }

  /**
   * Fallback message when editing fails
   */
  async _sendFallbackMessage(ctx, questionNumber) {
    try {
      const question = this.testQuestions[questionNumber - 1];
      if (!question) return;

      const message = `${question.emoji} ${question.question}`;

      if (question.type === 'text') {
        await ctx.reply(message + '\n\nüí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:');
      } else if (question.type === 'buttons') {
        const keyboard = {
          inline_keyboard: question.options.map(option => [{
            text: option.text,
            callback_data: `answer_${question.id}_${option.value}`
          }])
        };
        await ctx.reply(message, { reply_markup: keyboard });
      }
    } catch (error) {
      logger.error(`Error in fallback message: ${error.message}`);
      await ctx.reply('üìñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start');
    }
  }

  /**
   * Handle answer - robust message handling
   */
  async _handleAnswer(ctx, callbackData) {
    try {
      const userId = ctx.from.id.toString();
      const state = this.userStates.get(userId);
      
      if (!state) {
        await ctx.answerCbQuery('‚è∞ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start');
        return;
      }

      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç: answer_questionId_value
      const parts = callbackData.replace('answer_', '').split('_');
      const questionId = parts[0];
      const value = parts.slice(1).join('_');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
      state.answers[questionId] = value;
      state.lastActivity = Date.now();

      await ctx.answerCbQuery('‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω');

      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
      const nextQuestion = state.currentQuestion + 1;
      
      if (nextQuestion <= this.testQuestions.length) {
        state.currentQuestion = nextQuestion;
        state.step = `test_question_${nextQuestion}`;
        await this._showQuestion(ctx, nextQuestion);
      } else {
        // –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –∫ email
        await this._collectEmail(ctx);
      }
      
    } catch (error) {
      logger.error(`Error handling answer: ${error.message}`);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞');
    }
  }

  /**
   * Handle name input with deletion
   */
  async _handleNameInput(ctx, name) {
    try {
      const userId = ctx.from.id.toString();
      const state = this.userStates.get(userId);
      
      if (!state || state.step !== 'awaiting_name') return;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!name || name.trim().length < 2) {
        await ctx.reply('üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).');
        return;
      }

      if (name.trim().length > 50) {
        await ctx.reply('üìù –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.');
        return;
      }

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
      try {
        await ctx.deleteMessage(ctx.message.message_id);
      } catch (e) {
        // Ignore if can't delete
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
      state.answers.name = name.trim();
      state.currentQuestion = 2;
      state.step = 'test_question_2';
      state.lastActivity = Date.now();

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
      await this._showQuestion(ctx, 2);
      
    } catch (error) {
      logger.error(`Error handling name: ${error.message}`);
      await ctx.reply('üìñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  /**
   * Collect email - simple design
   */
  async _collectEmail(ctx) {
    try {
      const userId = ctx.from.id.toString();
      const state = this.userStates.get(userId);
      
      if (!state) return;

      const message = 
        'üìß –û—Ç–ª–∏—á–Ω–æ! –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.\n\n' +
        '–¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à email –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤:\n\n' +
        'üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:\n' +
        '‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —Ü–∏—Ç–∞—Ç\n' +
        '‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥\n' +
        '‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã\n\n' +
        'üíå –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:';

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply(message);

      state.step = 'awaiting_email';
      state.lastActivity = Date.now();
      
    } catch (error) {
      logger.error(`Error collecting email: ${error.message}`);
      await ctx.reply('üìñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start');
    }
  }

  /**
   * Handle email input
   */
  async _handleEmailInput(ctx, email) {
    try {
      const userId = ctx.from.id.toString();
      const state = this.userStates.get(userId);
      
      if (!state || state.step !== 'awaiting_email') return;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email.trim())) {
        await ctx.reply('üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: maria@gmail.com');
        return;
      }

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await ctx.deleteMessage(ctx.message.message_id);
      } catch (e) {
        // Ignore if can't delete
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º email
      state.answers.email = email.trim();
      state.step = 'selecting_source';
      state.lastActivity = Date.now();

      await this._collectSource(ctx);
      
    } catch (error) {
      logger.error(`Error handling email: ${error.message}`);
      await ctx.reply('üìñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  /**
   * Collect source - simple list
   */
  async _collectSource(ctx) {
    try {
      const userId = ctx.from.id.toString();
      const state = this.userStates.get(userId);
      
      if (!state) return;

      const message = 
        'üîç –û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –±–æ—Ç–µ?\n\n' +
        '–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ê–Ω–Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å, –≥–¥–µ –∏—Å–∫–∞—Ç—å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤.';

      const keyboard = {
        inline_keyboard: this.sourceOptions.map(option => [{
          text: option.text,
          callback_data: `source_${option.value}`
        }])
      };

      await ctx.reply(message, { reply_markup: keyboard });
      
    } catch (error) {
      logger.error(`Error collecting source: ${error.message}`);
      await ctx.reply('üìñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start');
    }
  }

  /**
   * Handle source selection
   */
  async _handleSourceSelection(ctx, callbackData) {
    try {
      const userId = ctx.from.id.toString();
      const state = this.userStates.get(userId);
      
      if (!state) {
        await ctx.answerCbQuery('‚è∞ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start');
        return;
      }

      const source = callbackData.replace('source_', '');
      state.answers.source = source;
      state.lastActivity = Date.now();

      await ctx.answerCbQuery('‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
      await this._completeOnboarding(ctx);
      
    } catch (error) {
      logger.error(`Error handling source: ${error.message}`);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
    }
  }

  /**
   * Complete onboarding - clean final message
   */
  async _completeOnboarding(ctx) {
    try {
      const userId = ctx.from.id.toString();
      const state = this.userStates.get(userId);
      
      if (!state) return;

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userProfile = {
        userId,
        telegramUsername: ctx.from.username || '',
        name: state.answers.name,
        email: state.answers.email,
        testResults: {
          name: state.answers.name,
          lifestyle: state.answers.lifestyle,
          timeForSelf: state.answers.timeForSelf,
          priorities: state.answers.priorities,
          readingFeelings: state.answers.readingFeelings,
          closestPhrase: state.answers.closestPhrase,
          readingTime: state.answers.readingTime
        },
        source: state.answers.source,
        preferences: {
          mainThemes: ['–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', '–ú—É–¥—Ä–æ—Å—Ç—å'],
          personalityType: '–ò—â—É—â–∏–π —Ä–∞–∑–≤–∏—Ç–∏—è',
          recommendationStyle: '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫–Ω–∏–≥–∏'
        },
        statistics: {
          totalQuotes: 0,
          currentStreak: 0,
          longestStreak: 0,
          favoriteAuthors: [],
          monthlyQuotes: []
        },
        achievements: [],
        settings: {
          reminderEnabled: true,
          reminderTimes: ['09:00', '19:00'],
          language: 'ru'
        },
        registeredAt: new Date(),
        isOnboardingComplete: true
      };

      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
      await UserProfile.findOneAndUpdate(
        { userId },
        userProfile,
        { upsert: true, new: true }
      );

      // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
      const completionMessage = 
        `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userProfile.name}!\n\n` +
        '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.\n\n' +
        'üìñ –ì–ª–∞–≤–Ω–∞—è —Ñ–∏—à–∫–∞ –±–æ—Ç–∞:\n' +
        '–ö–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç–µ —Ü–∏—Ç–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–∂–∏–≥–∞–µ—Ç —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Å—é–¥–∞.\n\n' +
        'üí° –ü—Ä–∏–º–µ—Ä:\n' +
        '"–í –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ ‚Äî —Ü–µ–ª–∞—è –∂–∏–∑–Ω—å" (–ú–∞—Ä–∏–Ω–∞ –¶–≤–µ—Ç–∞–µ–≤–∞)\n\n' +
        'üìö –ß—Ç–æ –ø–æ–ª—É—á–∏—Ç–µ:\n' +
        '‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ —Ü–∏—Ç–∞—Ç\n' +
        '‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º\n' +
        '‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥ –æ—Ç –ê–Ω–Ω—ã\n' +
        '‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n' +
        'üéØ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –ü—Ä–∏—à–ª–∏—Ç–µ –ª—é–±—É—é —Ü–∏—Ç–∞—Ç—É.\n\n' +
        'üìñ –•–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ ‚Äî —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏!\n\n' +
        'üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é üìã (—Ä—è–¥–æ–º —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤) –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏';

      await ctx.reply(completionMessage);

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.userStates.delete(userId);
      
      logger.info(`‚úÖ User ${userId} completed onboarding successfully`);
      
    } catch (error) {
      logger.error(`Error completing onboarding: ${error.message}`);
      await ctx.reply('üìñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
    }
  }

  /**
   * Check if user is in onboarding
   */
  isInOnboarding(userId) {
    return this.userStates.has(userId);
  }

  /**
   * Clean up stale states
   */
  cleanupStaleStates() {
    const staleThreshold = Date.now() - (30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç
    let cleaned = 0;

    for (const [userId, state] of this.userStates) {
      if (state.lastActivity < staleThreshold) {
        this.userStates.delete(userId);
        cleaned++;
      }
    }

    if (cleaned > 0) {
      logger.info(`üßπ Cleaned up ${cleaned} stale onboarding states`);
    }
  }

  /**
   * Get stats
   */
  getStats() {
    const stats = {
      activeUsers: this.userStates.size,
      stepDistribution: {}
    };

    for (const state of this.userStates.values()) {
      stats.stepDistribution[state.step] = (stats.stepDistribution[state.step] || 0) + 1;
    }

    return stats;
  }
}

module.exports = { ModernOnboardingHandler };

/**
 * @fileoverview Feedback Handler –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Ç—á–µ—Ç—ã
 */

const { WeeklyReport, MonthlyReport, UserProfile } = require('../../server/models');

/**
 * @typedef {Object} FeedbackData
 * @property {number} rating - –û—Ü–µ–Ω–∫–∞ –æ—Ç 1 –¥–æ 5
 * @property {string} comment - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @property {Date} respondedAt - –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
 */

class FeedbackHandler {
  constructor() {
    this.ratingTexts = {
      'excellent': 5,
      'good': 4,
      'bad': 2,
      '5': 5,
      '4': 4,
      '3': 3,
      '2': 2,
      '1': 1
    };

    this.bot = null; // Will be set during initialization
  }

  /**
   * Initialize handler with dependencies
   * @param {Object} dependencies - Required dependencies
   * @param {Object} dependencies.bot - Telegram bot instance
   * @param {Object} dependencies.models - Database models
   */
  initialize(dependencies) {
    this.bot = dependencies.bot;
    console.log('üìù FeedbackHandler initialized');
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @param {string} rating - –†–µ–π—Ç–∏–Ω–≥ (excellent/good/bad)
   * @param {string} reportId - ID –æ—Ç—á–µ—Ç–∞
   */
  async handleWeeklyFeedback(ctx, rating, reportId) {
    try {
      const numericRating = this.convertRatingToNumber(rating);
      
      await WeeklyReport.findByIdAndUpdate(reportId, {
        'feedback.rating': numericRating,
        'feedback.respondedAt': new Date()
      });

      let responseMessage;
      let needsDetailedFeedback = false;

      switch (rating) {
        case 'excellent':
          responseMessage = "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –†–∞–¥–∞, —á—Ç–æ –æ—Ç—á–µ—Ç –æ–∫–∞–∑–∞–ª—Å—è –ø–æ–ª–µ–∑–Ω—ã–º.";
          break;
        case 'good':
          responseMessage = "üëå –°–ø–∞—Å–∏–±–æ! –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–ª—É—á—à–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç—á–µ—Ç–∞—Ö?";
          needsDetailedFeedback = true;
          break;
        case 'bad':
          responseMessage = "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ –æ—Ç—á–µ—Ç –Ω–µ –æ–ø—Ä–∞–≤–¥–∞–ª –æ–∂–∏–¥–∞–Ω–∏–π. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?";
          needsDetailedFeedback = true;
          break;
        default:
          responseMessage = "üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!";
      }

      await ctx.editMessageText(responseMessage);

      if (needsDetailedFeedback) {
        await this.requestDetailedFeedback(ctx, reportId, 'weekly');
      }

      console.log(`üìù Weekly feedback processed: ${rating} for report ${reportId}`);

    } catch (error) {
      console.error(`‚ùå Failed to handle weekly feedback:`, error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @param {string} rating - –†–µ–π—Ç–∏–Ω–≥ –æ—Ç 1 –¥–æ 5
   * @param {string} reportId - ID –æ—Ç—á–µ—Ç–∞
   */
  async handleMonthlyRating(ctx, rating, reportId) {
    try {
      const numericRating = parseInt(rating);
      
      await MonthlyReport.findByIdAndUpdate(reportId, {
        'feedback.rating': numericRating,
        'feedback.respondedAt': new Date()
      });

      let responseMessage;
      let needsDetailedFeedback = false;

      if (numericRating >= 4) {
        responseMessage = "‚≠ê –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ.";
      } else {
        responseMessage = "üìù –°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–ª—É—á—à–∏—Ç—å?";
        needsDetailedFeedback = true;
      }

      await ctx.editMessageText(responseMessage);

      if (needsDetailedFeedback) {
        await this.requestDetailedFeedback(ctx, reportId, 'monthly');
      }

      console.log(`üìà Monthly rating processed: ${rating} stars for report ${reportId}`);

    } catch (error) {
      console.error(`‚ùå Failed to handle monthly rating:`, error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  /**
   * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @param {string} reportId - ID –æ—Ç—á–µ—Ç–∞
   * @param {string} type - –¢–∏–ø –æ—Ç—á–µ—Ç–∞ (weekly/monthly)
   */
  async requestDetailedFeedback(ctx, reportId, type = 'weekly') {
    const message = type === 'monthly' 
      ? "üìù –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:"
      : "üìù –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö:";

    try {
      await ctx.reply(message, {
        reply_markup: { force_reply: true }
      });

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞
      await this.setUserState(ctx.from.id, `awaiting_feedback_${type}_${reportId}`);

    } catch (error) {
      console.error(`‚ùå Failed to request detailed feedback:`, error);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   * @param {string} feedback - –¢–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   * @param {string} reportId - ID –æ—Ç—á–µ—Ç–∞
   * @param {string} type - –¢–∏–ø –æ—Ç—á–µ—Ç–∞
   */
  async processDetailedFeedback(ctx, feedback, reportId, type) {
    try {
      if (type === 'monthly') {
        await MonthlyReport.findByIdAndUpdate(reportId, {
          'feedback.comment': feedback
        });
      } else {
        await WeeklyReport.findByIdAndUpdate(reportId, {
          'feedback.comment': feedback
        });
      }

      await ctx.reply("üíå –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–∑—ã–≤! –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –æ—Ç—á–µ—Ç—ã –ª—É—á—à–µ.");

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.clearUserState(ctx.from.id);

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
      if (feedback.length > 10) {
        await this.notifyAdminAboutFeedback(ctx.from.id, feedback, type);
      }

      console.log(`üí¨ Detailed feedback processed for ${type} report ${reportId}`);

    } catch (error) {
      console.error(`‚ùå Failed to process detailed feedback:`, error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.");
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –≤ —á–∏—Å–ª–æ
   * @param {string} rating - –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
   * @returns {number}
   */
  convertRatingToNumber(rating) {
    return this.ratingTexts[rating] || 3;
  }

  /**
   * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞ –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} feedback - –¢–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   * @param {string} type - –¢–∏–ø –æ—Ç—á–µ—Ç–∞
   */
  async notifyAdminAboutFeedback(userId, feedback, type) {
    try {
      const user = await UserProfile.findOne({ userId });
      if (!user) return;
      
      const adminMessage = `
üìù *–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*

*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${user.name} (@${user.telegramUsername})
*Email:* ${user.email}
*–¢–∏–ø –æ—Ç—á–µ—Ç–∞:* ${type === 'monthly' ? '–º–µ—Å—è—á–Ω—ã–π' : '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π'}

*–û—Ç–∑—ã–≤:*
${feedback}

*–î–∞—Ç–∞:* ${new Date().toLocaleDateString()}
      `;

      if (process.env.ADMIN_TELEGRAM_ID && this.bot) {
        await this.bot.telegram.sendMessage(
          process.env.ADMIN_TELEGRAM_ID,
          adminMessage,
          { parse_mode: 'Markdown' }
        );
        console.log(`üìß Admin notified about feedback from user ${userId}`);
      }

    } catch (error) {
      console.error(`‚ùå Failed to notify admin about feedback:`, error);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –æ—Ç –∫–Ω–æ–ø–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞
   */
  async handleFeedbackCallback(ctx) {
    const data = ctx.callbackQuery.data;
    
    try {
      if (data.startsWith('feedback_')) {
        // feedback_excellent_reportId –∏–ª–∏ feedback_good_reportId
        const parts = data.split('_');
        const rating = parts[1];
        const reportId = parts[2];
        
        await this.handleWeeklyFeedback(ctx, rating, reportId);
        
      } else if (data.startsWith('monthly_rating_')) {
        // monthly_rating_5_reportId
        const parts = data.split('_');
        const rating = parts[2];
        const reportId = parts[3];
        
        await this.handleMonthlyRating(ctx, rating, reportId);
      }
      
    } catch (error) {
      console.error(`‚ùå Failed to handle feedback callback:`, error);
      await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞");
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è feedback
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<string|null>} –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ null
   */
  async getUserState(userId) {
    try {
      const user = await UserProfile.findOne({ userId });
      return user?.botState?.current || null;
    } catch (error) {
      console.error(`‚ùå Failed to get user state:`, error);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object|null>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–ª–∏ null
   */
  async checkAwaitingFeedback(userId) {
    try {
      const user = await UserProfile.findOne({ userId });
      if (!user || !user.botState?.current) return null;

      const state = user.botState.current;
      if (state.startsWith('awaiting_feedback_')) {
        const parts = state.split('_');
        return {
          type: parts[2], // weekly –∏–ª–∏ monthly
          reportId: parts[3]
        };
      }

      return null;
    } catch (error) {
      console.error(`‚ùå Failed to check awaiting feedback state:`, error);
      return null;
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  async setUserState(userId, state) {
    try {
      await UserProfile.findOneAndUpdate(
        { userId },
        { 
          'botState.current': state,
          'botState.updatedAt': new Date()
        },
        { upsert: true }
      );
    } catch (error) {
      console.error(`‚ùå Failed to set user state:`, error);
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async clearUserState(userId) {
    try {
      await UserProfile.findOneAndUpdate(
        { userId },
        { 
          'botState.current': 'active',
          'botState.updatedAt': new Date()
        }
      );
    } catch (error) {
      console.error(`‚ùå Failed to clear user state:`, error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
   * @param {Date} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
   * @param {Date} endDate - –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
   * @returns {Promise<Object>}
   */
  async getFeedbackStats(startDate, endDate) {
    try {
      const defaultStartDate = startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
      const defaultEndDate = endDate || new Date();

      const weeklyStats = await WeeklyReport.aggregate([
        {
          $match: {
            sentAt: { $gte: defaultStartDate, $lte: defaultEndDate },
            'feedback.rating': { $exists: true }
          }
        },
        {
          $group: {
            _id: '$feedback.rating',
            count: { $sum: 1 }
          }
        },
        { $sort: { _id: 1 } }
      ]);

      const monthlyStats = await MonthlyReport.aggregate([
        {
          $match: {
            sentAt: { $gte: defaultStartDate, $lte: defaultEndDate },
            'feedback.rating': { $exists: true }
          }
        },
        {
          $group: {
            _id: '$feedback.rating',
            count: { $sum: 1 }
          }
        },
        { $sort: { _id: 1 } }
      ]);

      const negativeComments = await WeeklyReport.find({
        sentAt: { $gte: defaultStartDate, $lte: defaultEndDate },
        'feedback.rating': { $lte: 3 },
        'feedback.comment': { $exists: true }
      }).populate('userId', 'name email');

      return {
        weekly: weeklyStats,
        monthly: monthlyStats,
        negativeComments: negativeComments.length,
        totalResponses: weeklyStats.length + monthlyStats.length
      };

    } catch (error) {
      console.error(`‚ùå Failed to get feedback stats:`, error);
      return { weekly: [], monthly: [], negativeComments: 0, totalResponses: 0 };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
   * @returns {boolean}
   */
  isReady() {
    return !!this.bot;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
   * @returns {Object}
   */
  getDiagnostics() {
    return {
      initialized: !!this.bot,
      ratingOptions: Object.keys(this.ratingTexts),
      status: this.isReady() ? 'ready' : 'not_initialized'
    };
  }
}

module.exports = { FeedbackHandler };

/**
 * @fileoverview –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @author g1orgi89
 */

const logger = require('../utils/logger');

/**
 * @typedef {import('../types/reader').WeeklyReport} WeeklyReport
 * @typedef {import('../types/reader').MonthlyReport} MonthlyReport
 * @typedef {import('../types/reader').UserProfile} UserProfile
 */

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
class FeedbackHandler {
  constructor() {
    this.bot = null;
    this.models = null;
    
    logger.info('üìñ FeedbackHandler initialized');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
   * @param {Object} dependencies - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
   * @param {Object} dependencies.bot - Telegram bot
   * @param {Object} dependencies.models - –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  initialize(dependencies) {
    this.bot = dependencies.bot;
    this.models = dependencies.models;
    
    logger.info('üìñ FeedbackHandler dependencies initialized');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
   * @param {Object} ctx - Telegram context
   * @param {string} rating - –†–µ–π—Ç–∏–Ω–≥ (excellent, good, bad)
   * @param {string} reportId - ID –æ—Ç—á–µ—Ç–∞
   * @returns {Promise<void>}
   */
  async handleWeeklyFeedback(ctx, rating, reportId) {
    try {
      const { WeeklyReport } = this.models;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
      const report = await WeeklyReport.findByIdAndUpdate(reportId, {
        'feedback.rating': this.convertRatingToNumber(rating),
        'feedback.respondedAt': new Date()
      }, { new: true });

      if (!report) {
        logger.warn(`üìñ Weekly report ${reportId} not found for feedback`);
        await ctx.answerCbQuery('–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      let responseMessage;
      let needsDetailedFeedback = false;

      switch (rating) {
        case 'excellent':
          responseMessage = "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –†–∞–¥–∞, —á—Ç–æ –æ—Ç—á–µ—Ç –æ–∫–∞–∑–∞–ª—Å—è –ø–æ–ª–µ–∑–Ω—ã–º.";
          break;
        case 'good':
          responseMessage = "üëå –°–ø–∞—Å–∏–±–æ! –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–ª—É—á—à–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç—á–µ—Ç–∞—Ö?";
          needsDetailedFeedback = true;
          break;
        case 'bad':
          responseMessage = "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ –æ—Ç—á–µ—Ç –Ω–µ –æ–ø—Ä–∞–≤–¥–∞–ª –æ–∂–∏–¥–∞–Ω–∏–π. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?";
          needsDetailedFeedback = true;
          break;
        default:
          responseMessage = "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!";
      }

      // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.editMessageText(responseMessage);
      await ctx.answerCbQuery('‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!');

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (needsDetailedFeedback) {
        await this.requestDetailedFeedback(ctx, reportId, 'weekly');
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
      logger.info(`üìñ Weekly feedback received: ${rating} for report ${reportId} from user ${ctx.from.id}`);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
      if (rating === 'bad') {
        await this.notifyAdminAboutNegativeFeedback(ctx.from.id, reportId, 'weekly', rating);
      }

    } catch (error) {
      logger.error(`üìñ Error handling weekly feedback: ${error.message}`, error);
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   * @param {Object} ctx - Telegram context
   * @param {number} rating - –†–µ–π—Ç–∏–Ω–≥ 1-5 –∑–≤–µ–∑–¥
   * @param {string} reportId - ID –æ—Ç—á–µ—Ç–∞
   * @returns {Promise<void>}
   */
  async handleMonthlyRating(ctx, rating, reportId) {
    try {
      const { MonthlyReport } = this.models;
      
      const report = await MonthlyReport.findByIdAndUpdate(reportId, {
        'feedback.rating': parseInt(rating),
        'feedback.respondedAt': new Date()
      }, { new: true });

      if (!report) {
        logger.warn(`üìñ Monthly report ${reportId} not found for rating`);
        await ctx.answerCbQuery('–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      let responseMessage;
      
      if (parseInt(rating) >= 4) {
        responseMessage = "‚≠ê –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ.";
        await ctx.editMessageText(responseMessage);
      } else {
        responseMessage = "üìù –°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–ª—É—á—à–∏—Ç—å?";
        await ctx.editMessageText(responseMessage);
        await this.requestDetailedFeedback(ctx, reportId, 'monthly');
      }

      await ctx.answerCbQuery(`‚úÖ –û—Ü–µ–Ω–∫–∞ ${rating} ‚≠ê —É—á—Ç–µ–Ω–∞!`);

      logger.info(`üìñ Monthly rating received: ${rating} stars for report ${reportId} from user ${ctx.from.id}`);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–∏–∑–∫–æ–π –æ—Ü–µ–Ω–∫–µ
      if (parseInt(rating) <= 2) {
        await this.notifyAdminAboutNegativeFeedback(ctx.from.id, reportId, 'monthly', `${rating} stars`);
      }

    } catch (error) {
      logger.error(`üìñ Error handling monthly rating: ${error.message}`, error);
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  /**
   * –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   * @param {Object} ctx - Telegram context
   * @param {string} reportId - ID –æ—Ç—á–µ—Ç–∞
   * @param {string} type - –¢–∏–ø –æ—Ç—á–µ—Ç–∞ (weekly/monthly)
   * @returns {Promise<void>}
   */
  async requestDetailedFeedback(ctx, reportId, type = 'weekly') {
    try {
      const message = type === 'monthly' 
        ? "üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:"
        : "üìù –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö?";

      await ctx.reply(message, {
        reply_markup: { force_reply: true }
      });

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞
      await this.setUserState(ctx.from.id, `awaiting_feedback_${type}_${reportId}`);

      logger.info(`üìñ Detailed feedback requested for ${type} report ${reportId} from user ${ctx.from.id}`);

    } catch (error) {
      logger.error(`üìñ Error requesting detailed feedback: ${error.message}`, error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   * @param {Object} ctx - Telegram context
   * @param {string} feedback - –¢–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   * @param {string} reportId - ID –æ—Ç—á–µ—Ç–∞
   * @param {string} type - –¢–∏–ø –æ—Ç—á–µ—Ç–∞
   * @returns {Promise<void>}
   */
  async processDetailedFeedback(ctx, feedback, reportId, type) {
    try {
      const { WeeklyReport, MonthlyReport } = this.models;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
      if (type === 'monthly') {
        await MonthlyReport.findByIdAndUpdate(reportId, {
          'feedback.whatImprove': feedback
        });
      } else {
        await WeeklyReport.findByIdAndUpdate(reportId, {
          'feedback.comment': feedback
        });
      }

      await ctx.reply("üíå –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–∑—ã–≤! –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –æ—Ç—á–µ—Ç—ã –ª—É—á—à–µ.");

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.clearUserState(ctx.from.id);

      logger.info(`üìñ Detailed feedback saved for ${type} report ${reportId} from user ${ctx.from.id}`);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
      if (feedback.length > 10) {
        await this.notifyAdminAboutDetailedFeedback(ctx.from.id, feedback, type, reportId);
      }

    } catch (error) {
      logger.error(`üìñ Error processing detailed feedback: ${error.message}`, error);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.");
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞ –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç
   * @param {Object} ctx - Telegram context
   * @param {Object} feedbackData - –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   * @param {string} feedbackData.whatLikes - –ß—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è
   * @param {string} feedbackData.whatImprove - –ß—Ç–æ —É–ª—É—á—à–∏—Ç—å
   * @param {string} feedbackData.newFeatures - –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
   * @param {string} reportId - ID –æ—Ç—á–µ—Ç–∞
   * @returns {Promise<void>}
   */
  async handleExtendedMonthlyFeedback(ctx, feedbackData, reportId) {
    try {
      const { MonthlyReport } = this.models;

      await MonthlyReport.findByIdAndUpdate(reportId, {
        'feedback.whatLikes': feedbackData.whatLikes,
        'feedback.whatImprove': feedbackData.whatImprove,
        'feedback.newFeatures': feedbackData.newFeatures,
        'feedback.respondedAt': new Date()
      });

      await ctx.reply("üôè –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞.");

      logger.info(`üìñ Extended monthly feedback saved for report ${reportId} from user ${ctx.from.id}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –ø–æ–ª–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
      await this.notifyAdminAboutExtendedFeedback(ctx.from.id, feedbackData, reportId);

    } catch (error) {
      logger.error(`üìñ Error handling extended monthly feedback: ${error.message}`, error);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.");
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} reportId - ID –æ—Ç—á–µ—Ç–∞
   * @param {string} type - –¢–∏–ø –æ—Ç—á–µ—Ç–∞
   * @param {string} rating - –û—Ü–µ–Ω–∫–∞
   * @returns {Promise<void>}
   */
  async notifyAdminAboutNegativeFeedback(userId, reportId, type, rating) {
    try {
      if (!process.env.ADMIN_TELEGRAM_ID) {
        return;
      }

      const { UserProfile } = this.models;
      const user = await UserProfile.findOne({ userId });

      if (!user) {
        return;
      }

      const adminMessage = `üîî *–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å*

*–¢–∏–ø –æ—Ç—á–µ—Ç–∞:* ${type === 'monthly' ? '–º–µ—Å—è—á–Ω—ã–π' : '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π'}
*–û—Ü–µ–Ω–∫–∞:* ${rating}
*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${user.name} (@${user.telegramUsername || '–Ω–µ —É–∫–∞–∑–∞–Ω'})
*Email:* ${user.email}
*ID –æ—Ç—á–µ—Ç–∞:* ${reportId}

*–î–∞—Ç–∞:* ${new Date().toLocaleDateString()}

–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç—á–µ—Ç–æ–≤.`;

      await this.bot.telegram.sendMessage(
        process.env.ADMIN_TELEGRAM_ID,
        adminMessage,
        { parse_mode: 'Markdown' }
      );

      logger.info(`üìñ Admin notified about negative feedback from user ${userId}`);

    } catch (error) {
      logger.error(`üìñ Error notifying admin about negative feedback: ${error.message}`, error);
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} feedback - –¢–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   * @param {string} type - –¢–∏–ø –æ—Ç—á–µ—Ç–∞
   * @param {string} reportId - ID –æ—Ç—á–µ—Ç–∞
   * @returns {Promise<void>}
   */
  async notifyAdminAboutDetailedFeedback(userId, feedback, type, reportId) {
    try {
      if (!process.env.ADMIN_TELEGRAM_ID) {
        return;
      }

      const { UserProfile } = this.models;
      const user = await UserProfile.findOne({ userId });

      if (!user) {
        return;
      }

      const adminMessage = `üìù *–î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å*

*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${user.name} (@${user.telegramUsername || '–Ω–µ —É–∫–∞–∑–∞–Ω'})
*Email:* ${user.email}
*–¢–∏–ø –æ—Ç—á–µ—Ç–∞:* ${type === 'monthly' ? '–º–µ—Å—è—á–Ω—ã–π' : '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π'}
*ID –æ—Ç—á–µ—Ç–∞:* ${reportId}

*–û—Ç–∑—ã–≤:*
${feedback}

*–î–∞—Ç–∞:* ${new Date().toLocaleDateString()}`;

      await this.bot.telegram.sendMessage(
        process.env.ADMIN_TELEGRAM_ID,
        adminMessage,
        { parse_mode: 'Markdown' }
      );

    } catch (error) {
      logger.error(`üìñ Error notifying admin about detailed feedback: ${error.message}`, error);
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} feedbackData - –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   * @param {string} reportId - ID –æ—Ç—á–µ—Ç–∞
   * @returns {Promise<void>}
   */
  async notifyAdminAboutExtendedFeedback(userId, feedbackData, reportId) {
    try {
      if (!process.env.ADMIN_TELEGRAM_ID) {
        return;
      }

      const { UserProfile } = this.models;
      const user = await UserProfile.findOne({ userId });

      if (!user) {
        return;
      }

      const adminMessage = `üìã *–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ –º–µ—Å—è—á–Ω–æ–º—É –æ—Ç—á–µ—Ç—É*

*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${user.name} (@${user.telegramUsername || '–Ω–µ —É–∫–∞–∑–∞–Ω'})
*Email:* ${user.email}
*ID –æ—Ç—á–µ—Ç–∞:* ${reportId}

*–ß—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è:*
${feedbackData.whatLikes || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

*–ß—Ç–æ —É–ª—É—á—à–∏—Ç—å:*
${feedbackData.whatImprove || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

*–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
${feedbackData.newFeatures || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

*–î–∞—Ç–∞:* ${new Date().toLocaleDateString()}`;

      await this.bot.telegram.sendMessage(
        process.env.ADMIN_TELEGRAM_ID,
        adminMessage,
        { parse_mode: 'Markdown' }
      );

    } catch (error) {
      logger.error(`üìñ Error notifying admin about extended feedback: ${error.message}`, error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   * @param {Date} [startDate] - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async getFeedbackStats(startDate = null) {
    try {
      const { WeeklyReport, MonthlyReport } = this.models;

      const match = {};
      if (startDate) {
        match['feedback.respondedAt'] = { $gte: startDate };
      } else {
        match['feedback.respondedAt'] = { $exists: true, $ne: null };
      }

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
      const weeklyStats = await WeeklyReport.aggregate([
        { $match: match },
        {
          $group: {
            _id: null,
            totalFeedbacks: { $sum: 1 },
            averageRating: { $avg: '$feedback.rating' },
            ratingDistribution: {
              $push: '$feedback.rating'
            }
          }
        }
      ]);

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
      const monthlyStats = await MonthlyReport.aggregate([
        { $match: match },
        {
          $group: {
            _id: null,
            totalFeedbacks: { $sum: 1 },
            averageRating: { $avg: '$feedback.rating' },
            ratingDistribution: {
              $push: '$feedback.rating'
            }
          }
        }
      ]);

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
      const processRatingDistribution = (ratings) => {
        const distribution = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };
        ratings.forEach(rating => {
          if (rating >= 1 && rating <= 5) {
            distribution[rating]++;
          }
        });
        return distribution;
      };

      return {
        weekly: {
          totalFeedbacks: weeklyStats[0]?.totalFeedbacks || 0,
          averageRating: Math.round((weeklyStats[0]?.averageRating || 0) * 10) / 10,
          ratingDistribution: weeklyStats[0] ? processRatingDistribution(weeklyStats[0].ratingDistribution) : {}
        },
        monthly: {
          totalFeedbacks: monthlyStats[0]?.totalFeedbacks || 0,
          averageRating: Math.round((monthlyStats[0]?.averageRating || 0) * 10) / 10,
          ratingDistribution: monthlyStats[0] ? processRatingDistribution(monthlyStats[0].ratingDistribution) : {}
        }
      };

    } catch (error) {
      logger.error(`üìñ Error getting feedback stats: ${error.message}`, error);
      return {
        weekly: { totalFeedbacks: 0, averageRating: 0, ratingDistribution: {} },
        monthly: { totalFeedbacks: 0, averageRating: 0, ratingDistribution: {} }
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
   * @param {number} [limit=10] - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
   * @returns {Promise<Array>} –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
   */
  async getRecentComments(limit = 10) {
    try {
      const { WeeklyReport, MonthlyReport } = this.models;

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
      const weeklyComments = await WeeklyReport.find({
        'feedback.comment': { $exists: true, $ne: null, $ne: '' }
      })
      .sort({ 'feedback.respondedAt': -1 })
      .limit(limit)
      .select('userId feedback.comment feedback.respondedAt feedback.rating')
      .lean();

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
      const monthlyComments = await MonthlyReport.find({
        $or: [
          { 'feedback.whatImprove': { $exists: true, $ne: null, $ne: '' } },
          { 'feedback.whatLikes': { $exists: true, $ne: null, $ne: '' } },
          { 'feedback.newFeatures': { $exists: true, $ne: null, $ne: '' } }
        ]
      })
      .sort({ 'feedback.respondedAt': -1 })
      .limit(limit)
      .select('userId feedback')
      .lean();

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
      const allComments = [
        ...weeklyComments.map(c => ({
          type: 'weekly',
          userId: c.userId,
          comment: c.feedback.comment,
          rating: c.feedback.rating,
          respondedAt: c.feedback.respondedAt
        })),
        ...monthlyComments.map(c => ({
          type: 'monthly',
          userId: c.userId,
          whatLikes: c.feedback.whatLikes,
          whatImprove: c.feedback.whatImprove,
          newFeatures: c.feedback.newFeatures,
          rating: c.feedback.rating,
          respondedAt: c.feedback.respondedAt
        }))
      ];

      return allComments
        .sort((a, b) => new Date(b.respondedAt) - new Date(a.respondedAt))
        .slice(0, limit);

    } catch (error) {
      logger.error(`üìñ Error getting recent comments: ${error.message}`, error);
      return [];
    }
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤ —á–∏—Å–ª–æ
   * @param {string} rating - –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
   * @returns {number} –ß–∏—Å–ª–æ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥
   */
  convertRatingToNumber(rating) {
    switch (rating) {
      case 'excellent': return 5;
      case 'good': return 4;
      case 'bad': return 2;
      default: return 3;
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ
   * @returns {Promise<void>}
   */
  async setUserState(userId, state) {
    try {
      const { UserProfile } = this.models;
      await UserProfile.findOneAndUpdate(
        { userId },
        { currentState: state },
        { upsert: true }
      );
    } catch (error) {
      logger.error(`üìñ Error setting user state: ${error.message}`, error);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<void>}
   */
  async clearUserState(userId) {
    try {
      const { UserProfile } = this.models;
      await UserProfile.findOneAndUpdate(
        { userId },
        { $unset: { currentState: 1 } }
      );
    } catch (error) {
      logger.error(`üìñ Error clearing user state: ${error.message}`, error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<string|null>} –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  async getUserState(userId) {
    try {
      const { UserProfile } = this.models;
      const user = await UserProfile.findOne({ userId }).select('currentState');
      return user?.currentState || null;
    } catch (error) {
      logger.error(`üìñ Error getting user state: ${error.message}`, error);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
   * @returns {boolean} –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–±–æ—Ç–µ
   */
  isReady() {
    return !!(this.bot && this.models);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   * @returns {Object} –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
   */
  getDiagnostics() {
    return {
      initialized: this.isReady(),
      hasBot: !!this.bot,
      hasModels: !!this.models,
      supportedFeedbackTypes: ['weekly', 'monthly'],
      adminNotifications: !!process.env.ADMIN_TELEGRAM_ID
    };
  }
}

module.exports = { FeedbackHandler };

/**
 * @fileoverview –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–∏—Ç–∞—Ç –¥–ª—è –±–æ—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @author g1orgi89
 */

const logger = require('../../server/utils/logger');
const { UserProfile, Quote } = require('../../server/models');
const claudeService = require('../../server/services/claude');

/**
 * @typedef {import('../../server/types/reader').Quote} Quote
 * @typedef {import('../../server/types/reader').UserProfile} UserProfile
 * @typedef {import('../../server/types/reader').Achievement} Achievement
 */

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–∏—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
class QuoteHandler {
  constructor() {
    /**
     * @type {Array<Achievement>} - –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    this.achievements = [
      {
        id: 'first_quote',
        name: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
        description: '–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É',
        icon: 'üå±',
        targetValue: 1,
        type: 'quotes_count'
      },
      {
        id: 'wisdom_collector',
        name: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –º—É–¥—Ä–æ—Å—Ç–∏',
        description: '–°–æ–±—Ä–∞–ª–∏ 25 —Ü–∏—Ç–∞—Ç',
        icon: 'üìö',
        targetValue: 25,
        type: 'quotes_count'
      },
      {
        id: 'week_philosopher',
        name: '–§–∏–ª–æ—Å–æ—Ñ –Ω–µ–¥–µ–ª–∏',
        description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏',
        icon: 'üî•',
        targetValue: 7,
        type: 'streak_days'
      },
      {
        id: 'classics_lover',
        name: '–õ—é–±–∏—Ç–µ–ª—å –∫–ª–∞—Å—Å–∏–∫–∏',
        description: '10 —Ü–∏—Ç–∞—Ç –∫–ª–∞—Å—Å–∏–∫–æ–≤',
        icon: 'üìñ',
        targetValue: 10,
        type: 'classics_count'
      },
      {
        id: 'deep_thinker',
        name: '–ì–ª—É–±–æ–∫–∏–π –º—ã—Å–ª–∏—Ç–µ–ª—å',
        description: '50 —Ü–∏—Ç–∞—Ç —Å–æ–±—Ä–∞–Ω–æ',
        icon: 'üí≠',
        targetValue: 50,
        type: 'quotes_count'
      },
      {
        id: 'philosophy_master',
        name: '–ú–∞—Å—Ç–µ—Ä —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏',
        description: '20 —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö —Ü–∏—Ç–∞—Ç',
        icon: 'üß†',
        targetValue: 20,
        type: 'category_count',
        category: '–§–∏–ª–æ—Å–æ—Ñ–∏—è'
      }
    ];

    /**
     * @type {Array<string>} - –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∞–≤—Ç–æ—Ä—ã
     */
    this.classicAuthors = [
      '–¢–æ–ª—Å—Ç–æ–π', '–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π', '–ü—É—à–∫–∏–Ω', '–ß–µ—Ö–æ–≤', '–¢—É—Ä–≥–µ–Ω–µ–≤',
      '–ì–æ–≥–æ–ª—å', '–õ–µ—Ä–º–æ–Ω—Ç–æ–≤', '–ë—É–ª–≥–∞–∫–æ–≤', '–ë—É–Ω–∏–Ω', '–ì–æ—Ä—å–∫–∏–π',
      '–®–µ–∫—Å–ø–∏—Ä', '–ì—ë—Ç–µ', '–î–∞–Ω—Ç–µ', '–°–µ—Ä–≤–∞–Ω—Ç–µ—Å', '–î–∏–∫–∫–µ–Ω—Å'
    ];

    logger.info('üìñ QuoteHandler initialized');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç–æ–π (–∞ –Ω–µ –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º)
   * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {boolean} true –µ—Å–ª–∏ —ç—Ç–æ —Ü–∏—Ç–∞—Ç–∞
   */
  isValidQuote(text) {
    // –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–µ–Ω—å—à–µ 10 —Å–∏–º–≤–æ–ª–æ–≤) –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ü–∏—Ç–∞—Ç–∞–º–∏
    if (text.length < 10) {
      return false;
    }

    // –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text.startsWith('/')) {
      return false;
    }

    // –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ñ—Ä–∞–∑—ã –±–µ–∑ —Å–º—ã—Å–ª–∞
    const trivialPhrases = [
      '–ø—Ä–∏–≤–µ—Ç', 'hello', '—Å–ø–∞—Å–∏–±–æ', 'thanks', '—Ö–æ—Ä–æ—à–æ', '–ø–ª–æ—Ö–æ',
      '–¥–∞', '–Ω–µ—Ç', '–º–æ–∂–µ—Ç –±—ã—Ç—å', '–Ω–µ –∑–Ω–∞—é', '–ø–æ–Ω—è—Ç–Ω–æ', '—è—Å–Ω–æ'
    ];
    
    if (trivialPhrases.includes(text.toLowerCase().trim())) {
      return false;
    }

    return true;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–∏—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} ctx - Telegram context
   * @param {string} messageText - –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
   * @param {UserProfile} userProfile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<void>}
   */
  async handleQuote(ctx, messageText, userProfile) {
    const userId = ctx.from.id.toString();
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–π —Ü–∏—Ç–∞—Ç–æ–π
      if (!this.isValidQuote(messageText)) {
        logger.info(`üìñ Message too short or invalid, not treating as quote: "${messageText}"`);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ (10 —Ü–∏—Ç–∞—Ç –≤ –¥–µ–Ω—å)
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      const todayQuotesCount = await Quote.countDocuments({
        userId,
        createdAt: { $gte: today }
      });

      if (todayQuotesCount >= 10) {
        await ctx.reply(
          "üìñ –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 10 —Ü–∏—Ç–∞—Ç —Å–µ–≥–æ–¥–Ω—è. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è–º–∏!\n\n" +
          "üí° –•–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ - —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏!\n\n" +
          "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Å–±–æ—Ä–∞ —Ü–∏—Ç–∞—Ç - —ç—Ç–æ –ø—Ä–∏–Ω–µ—Å–µ—Ç –±–æ–ª—å—à–µ –ø–æ–ª—å–∑—ã."
        );
        return;
      }

      // –ü–∞—Ä—Å–∏–Ω–≥ —Ü–∏—Ç–∞—Ç—ã (–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞)
      const { text, author, source } = this.parseQuote(messageText);
      
      // AI-–∞–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ Claude
      const analysis = await this.analyzeQuote(text, author, userProfile);
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
      const quote = new Quote({
        userId,
        text,
        author,
        source,
        category: analysis.category,
        themes: analysis.themes,
        sentiment: analysis.sentiment,
        weekNumber: this.getWeekNumber(),
        monthNumber: new Date().getMonth() + 1,
        yearNumber: new Date().getFullYear()
      });

      await quote.save();
      logger.info(`üìñ Quote saved for user ${userId}: "${text.substring(0, 30)}..."`);

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.updateUserStatistics(userId, author);
      logger.info(`üìñ Updated statistics for user ${userId}`);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      const newAchievements = await this.checkAchievements(userId);

      // –û—Ç–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ –ê–Ω–Ω—ã
      const response = await this.generateAnnaResponse(text, author, analysis, todayQuotesCount + 1);
      
      await ctx.reply(response);

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
      if (newAchievements.length > 0) {
        await this.notifyAchievements(ctx, newAchievements);
      }

      logger.info(`üìñ Quote processed successfully for user ${userId}`);
      
    } catch (error) {
      logger.error(`üìñ Error processing quote: ${error.message}`, error);
      await ctx.reply('üìñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
   * @param {string} messageText - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {Object} –î–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
   */
  parseQuote(messageText) {
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    const patterns = [
      /^\"([^\"]+)\"\s*\(([^)]+)\)$/,     // "–¶–∏—Ç–∞—Ç–∞" (–ê–≤—Ç–æ—Ä)
      /^([^(]+)\s*\(([^)]+)\)$/,       // –¶–∏—Ç–∞—Ç–∞ (–ê–≤—Ç–æ—Ä)
      /^([^‚Äî]+)\s*‚Äî\s*(.+)$/,          // –¶–∏—Ç–∞—Ç–∞ ‚Äî –ê–≤—Ç–æ—Ä
      /^¬´([^¬ª]+)¬ª\s*\(([^)]+)\)$/,     // ¬´–¶–∏—Ç–∞—Ç–∞¬ª (–ê–≤—Ç–æ—Ä)
      /^([^‚Äî]+)\s*‚Äî\s*([^,]+),\s*\"([^\"]+)\"$/, // –¶–∏—Ç–∞—Ç–∞ ‚Äî –ê–≤—Ç–æ—Ä, "–ò—Å—Ç–æ—á–Ω–∏–∫"
      /^(.+)$/                         // –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    ];

    for (const pattern of patterns) {
      const match = messageText.trim().match(pattern);
      if (match) {
        if (match[2]) {
          return {
            text: match[1].trim().replace(/^[\"¬´]|[\"¬ª]$/g, ''), // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏
            author: match[2].trim(),
            source: match[3] ? match[3].trim() : null
          };
        } else {
          return {
            text: match[1].trim().replace(/^[\"¬´]|[\"¬ª]$/g, ''),
            author: null,
            source: null
          };
        }
      }
    }

    return { 
      text: messageText.trim().replace(/^[\"¬´]|[\"¬ª]$/g, ''), 
      author: null, 
      source: null 
    };
  }

  /**
   * AI-–∞–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ Claude
   * @param {string} text - –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
   * @param {string|null} author - –ê–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã
   * @param {UserProfile} userProfile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} –ê–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç—ã
   */
  async analyzeQuote(text, author, userProfile) {
    const prompt = `–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥ –ê–Ω–Ω–∞ –ë—É—Å–µ–ª. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É —Ü–∏—Ç–∞—Ç—É –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ:

–¶–∏—Ç–∞—Ç–∞: "${text}"
–ê–≤—Ç–æ—Ä: ${author || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userProfile.name}
–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: ${userProfile.preferences?.mainThemes?.join(', ') || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ü–∏—Ç–∞—Ç—É –∏ –≤–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏:
{
  "category": "–æ–¥–Ω–∞ –∏–∑: –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ, –õ—é–±–æ–≤—å, –§–∏–ª–æ—Å–æ—Ñ–∏—è, –ú–æ—Ç–∏–≤–∞—Ü–∏—è, –ú—É–¥—Ä–æ—Å—Ç—å, –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ, –û—Ç–Ω–æ—à–µ–Ω–∏—è, –ú–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ, –ö–∞—Ä—å–µ—Ä–∞, –î—Ä—É–≥–æ–µ",
  "themes": ["—Ç–µ–º–∞1", "—Ç–µ–º–∞2", "—Ç–µ–º–∞3"],
  "sentiment": "positive/neutral/negative",
  "insights": "–∫—Ä–∞—Ç–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω—Å–∞–π—Ç –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
  "personalRelevance": "–ø–æ—á–µ–º—É —ç—Ç–∞ —Ü–∏—Ç–∞—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–∂–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
}

–ë—É–¥—å —Ç–æ—á–Ω–æ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —É—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–≤—Ç–æ—Ä–∞.`;

    try {
      const response = await claudeService.generateResponse(prompt, {
        platform: 'telegram',
        userId: userProfile.userId,
        context: 'quote_analysis'
      });
      
      const analysis = JSON.parse(response.message);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      const validCategories = ['–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', '–õ—é–±–æ–≤—å', '–§–∏–ª–æ—Å–æ—Ñ–∏—è', '–ú–æ—Ç–∏–≤–∞—Ü–∏—è', '–ú—É–¥—Ä–æ—Å—Ç—å', '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–û—Ç–Ω–æ—à–µ–Ω–∏—è', '–ú–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ', '–ö–∞—Ä—å–µ—Ä–∞', '–î—Ä—É–≥–æ–µ'];
      if (!validCategories.includes(analysis.category)) {
        analysis.category = '–î—Ä—É–≥–æ–µ';
      }

      const validSentiments = ['positive', 'neutral', 'negative'];
      if (!validSentiments.includes(analysis.sentiment)) {
        analysis.sentiment = 'neutral';
      }

      return analysis;
      
    } catch (error) {
      logger.error(`üìñ Error in AI quote analysis: ${error.message}`);
      
      // Fallback –∞–Ω–∞–ª–∏–∑
      return {
        category: this.fallbackCategorization(text, author),
        themes: this.extractBasicThemes(text),
        sentiment: this.detectBasicSentiment(text),
        insights: '–ì–ª—É–±–æ–∫–∞—è –º—ã—Å–ª—å –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è',
        personalRelevance: '–ú–æ–∂–µ—Ç —Å–ø–æ—Å–æ–±—Å—Ç–≤–æ–≤–∞—Ç—å –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–º—É —Ä–æ—Å—Ç—É'
      };
    }
  }

  /**
   * Fallback –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –±–µ–∑ AI
   * @private
   * @param {string} text - –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
   * @param {string|null} author - –ê–≤—Ç–æ—Ä
   * @returns {string} –ö–∞—Ç–µ–≥–æ—Ä–∏—è
   */
  fallbackCategorization(text, author) {
    const lowerText = text.toLowerCase();
    
    if (lowerText.includes('–ª—é–±–æ–≤—å') || lowerText.includes('—Å–µ—Ä–¥—Ü–µ') || lowerText.includes('—á—É–≤—Å—Ç–≤')) {
      return '–õ—é–±–æ–≤—å';
    }
    if (lowerText.includes('–º—É–¥—Ä–æ—Å—Ç—å') || lowerText.includes('–∑–Ω–∞–Ω–∏–µ') || lowerText.includes('–æ–ø—ã—Ç')) {
      return '–ú—É–¥—Ä–æ—Å—Ç—å';
    }
    if (lowerText.includes('–∂–∏–∑–Ω—å') || lowerText.includes('—Å—É–¥—å–±–∞') || lowerText.includes('—Å–º—ã—Å–ª')) {
      return '–§–∏–ª–æ—Å–æ—Ñ–∏—è';
    }
    if (lowerText.includes('—Ü–µ–ª—å') || lowerText.includes('—É—Å–ø–µ—Ö') || lowerText.includes('–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ')) {
      return '–ú–æ—Ç–∏–≤–∞—Ü–∏—è';
    }
    if (lowerText.includes('–∏—Å–∫—É—Å—Å—Ç–≤–æ') || lowerText.includes('—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ') || lowerText.includes('–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ')) {
      return '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ';
    }
    if (lowerText.includes('—Å–µ–º—å—è') || lowerText.includes('–¥–µ—Ç–∏') || lowerText.includes('–º–∞—Ç—å')) {
      return '–ú–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ';
    }
    if (lowerText.includes('—Ä–∞–±–æ—Ç–∞') || lowerText.includes('–∫–∞—Ä—å–µ—Ä–∞') || lowerText.includes('–¥–µ–ª–æ')) {
      return '–ö–∞—Ä—å–µ—Ä–∞';
    }
    
    return '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ç–µ–º
   * @private
   * @param {string} text - –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
   * @returns {Array<string>} –¢–µ–º—ã
   */
  extractBasicThemes(text) {
    const themes = [];
    const lowerText = text.toLowerCase();
    
    const themeKeywords = {
      '—Å—á–∞—Å—Ç—å–µ': ['—Å—á–∞—Å—Ç—å–µ', '—Ä–∞–¥–æ—Å—Ç—å', '–±–ª–∞–∂–µ–Ω—Å—Ç–≤–æ'],
      '–º—É–¥—Ä–æ—Å—Ç—å': ['–º—É–¥—Ä–æ—Å—Ç—å', '–∑–Ω–∞–Ω–∏–µ', '–ø–æ–Ω–∏–º–∞–Ω–∏–µ'],
      '–ª—é–±–æ–≤—å': ['–ª—é–±–æ–≤—å', '—Å–µ—Ä–¥—Ü–µ', '—á—É–≤—Å—Ç–≤–∞'],
      '–∂–∏–∑–Ω—å': ['–∂–∏–∑–Ω—å', '—Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ', '–±—ã—Ç–∏–µ'],
      '–≤—Ä–µ–º—è': ['–≤—Ä–µ–º—è', '–º–æ–º–µ–Ω—Ç', '–≤–µ—á–Ω–æ—Å—Ç—å'],
      '–∫—Ä–∞—Å–æ—Ç–∞': ['–∫—Ä–∞—Å–æ—Ç–∞', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ', '—ç—Å—Ç–µ—Ç–∏–∫–∞']
    };

    for (const [theme, keywords] of Object.entries(themeKeywords)) {
      if (keywords.some(keyword => lowerText.includes(keyword))) {
        themes.push(theme);
      }
    }

    return themes.length > 0 ? themes : ['–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –æ–ø—ã—Ç'];
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
   * @private
   * @param {string} text - –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
   * @returns {string} –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
   */
  detectBasicSentiment(text) {
    const lowerText = text.toLowerCase();
    
    const positiveWords = ['—Å—á–∞—Å—Ç—å–µ', '—Ä–∞–¥–æ—Å—Ç—å', '–ª—é–±–æ–≤—å', '–ø—Ä–µ–∫—Ä–∞—Å–Ω', '–≤–µ–ª–∏–∫', '—á—É–¥–µ—Å–Ω', '—Å–≤–µ—Ç–ª'];
    const negativeWords = ['–±–æ–ª—å', '—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ', '–ø–µ—á–∞–ª—å', '–≥–æ—Ä–µ', '—Ç—å–º–∞', '—É–∂–∞—Å', '—Å—Ç—Ä–∞—Ö'];
    
    const positiveCount = positiveWords.filter(word => lowerText.includes(word)).length;
    const negativeCount = negativeWords.filter(word => lowerText.includes(word)).length;
    
    if (positiveCount > negativeCount) return 'positive';
    if (negativeCount > positiveCount) return 'negative';
    return 'neutral';
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ê–Ω–Ω—ã
   * @param {string} text - –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
   * @param {string|null} author - –ê–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã
   * @param {Object} analysis - AI-–∞–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç—ã
   * @param {number} todayCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç —Å–µ–≥–æ–¥–Ω—è
   * @returns {Promise<string>} –û—Ç–≤–µ—Ç –ê–Ω–Ω—ã
   */
  async generateAnnaResponse(text, author, analysis, todayCount) {
    const authorPart = author ? `${author} —É–º–µ–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –≥–ª—É–±–∏–Ω—É –≤ –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª–æ–≤–∞—Ö.` : '–ú—É–¥—Ä—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è.';
    
    const templates = [
      `‚ú® –ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞! ${authorPart}`,
      `üìñ –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä! ${analysis.insights}`,
      `üí≠ –û—á–µ–Ω—å –≥–ª—É–±–æ–∫–æ! –≠—Ç–∞ –º—ã—Å–ª—å –æ ${analysis.themes[0]} –æ—Å–æ–±–µ–Ω–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω–∞.`,
      `üåü ${authorPart} –ò–º–µ–Ω–Ω–æ —Ç–∞–∫–∏–µ –º—ã—Å–ª–∏ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç –º—É–¥—Ä–æ—Å—Ç—å.`
    ];

    const baseResponse = templates[Math.floor(Math.random() * templates.length)];
    
    let fullResponse = `${baseResponse}\n\n–°–æ—Ö—Ä–∞–Ω–∏–ª –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ üìñ\n–¶–∏—Ç–∞—Ç —Å–µ–≥–æ–¥–Ω—è: ${todayCount}/10`;

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–Ω—Å–∞–π—Ç–∞
    if (analysis.personalRelevance) {
      fullResponse += `\n\nüí° ${analysis.personalRelevance}`;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥–∏ (30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
    if (Math.random() < 0.3) {
      const recommendation = await this.getBookRecommendation(analysis.category, author);
      if (recommendation) {
        fullResponse += `\n\nüìö ${recommendation}`;
      }
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
    if (todayCount === 1) {
      fullResponse += `\n\nüå± –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ –¥–Ω—è! –ü–µ—Ä–≤–∞—è —Ü–∏—Ç–∞—Ç–∞ –∑–∞–¥–∞–µ—Ç —Ç–æ–Ω —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º.`;
    } else if (todayCount >= 5) {
      fullResponse += `\n\nüî• –í—ã —Å–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ –≤–¥—É–º—á–∏–≤—ã! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –º–æ–º–µ–Ω—Ç—ã –º—É–¥—Ä–æ—Å—Ç–∏.`;
    }

    return fullResponse;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
   * @param {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ü–∏—Ç–∞—Ç—ã
   * @param {string|null} author - –ê–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã
   * @returns {Promise<string|null>} –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
   */
  async getBookRecommendation(category, author) {
    const recommendations = {
      '–õ—é–±–æ–≤—å': [
        '–ö—Å—Ç–∞—Ç–∏, –µ—Å–ª–∏ –≤–∞—Å –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–º–∞ –ª—é–±–≤–∏, —É –ê–Ω–Ω—ã –µ—Å—Ç—å —Ä–∞–∑–±–æ—Ä "–ò—Å–∫—É—Å—Å—Ç–≤–æ –ª—é–±–∏—Ç—å" –≠—Ä–∏—Ö–∞ –§—Ä–æ–º–º–∞.',
        '–ü–æ —Ç–µ–º–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Ä–∞–∑–±–æ—Ä "–ò—Å–∫—É—Å—Å—Ç–≤–æ –ª—é–±–∏—Ç—å" - —Ç–∞–º –æ —Ç–æ–º, –∫–∞–∫ —Å—Ç—Ä–æ–∏—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.'
      ],
      '–§–∏–ª–æ—Å–æ—Ñ–∏—è': [
        '–î–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ —É –ê–Ω–Ω—ã –µ—Å—Ç—å —Ä–∞–∑–±–æ—Ä "–ü–∏—Å—å–º–∞ –∫ –º–æ–ª–æ–¥–æ–º—É –ø–æ—ç—Ç—É" –†–∏–ª—å–∫–µ.',
        '–ï—Å–ª–∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –±–ª–∏–∑–∫–∏, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–±–æ—Ä —ç–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–µ–º —É –ê–Ω–Ω—ã.'
      ],
      '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ': [
        '–ü–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∫—É—Ä—Å "–ë—ã—Ç—å —Å–æ–±–æ–π" –æ—Ç –ê–Ω–Ω—ã - –æ —Å–∞–º–æ–ø—Ä–∏–Ω—è—Ç–∏–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏.',
        '–î–ª—è –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ —É –ê–Ω–Ω—ã –µ—Å—Ç—å –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã.'
      ],
      '–ú–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ': [
        '–î–ª—è –º–∞–º —É –ê–Ω–Ω—ã –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã –æ –±–∞–ª–∞–Ω—Å–µ –º–µ–∂–¥—É —Å–æ–±–æ–π –∏ —Å–µ–º—å–µ–π.',
        '–ü–æ —Ç–µ–º–µ –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∫—É—Ä—Å "–ú—É–¥—Ä–∞—è –º–∞–º–∞" - –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ–±—è –≤ –∑–∞–±–æ—Ç–µ –æ –¥–µ—Ç—è—Ö.'
      ],
      '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ': [
        '–î–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –Ω–∞—Ç—É—Ä –ø–æ–¥–æ–π–¥–µ—Ç —Ä–∞–∑–±–æ—Ä "–ü–∏—Å—å–º–∞ –∫ –º–æ–ª–æ–¥–æ–º—É –ø–æ—ç—Ç—É" - –æ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–µ –∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–∏.',
        '–ü–æ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é —É –ê–Ω–Ω—ã –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.'
      ]
    };

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤
    if (author && this.classicAuthors.some(classic => author.includes(classic))) {
      return '–£ –ê–Ω–Ω—ã –µ—Å—Ç—å –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –≥–ª—É–±–∂–µ –ø–æ–Ω—è—Ç—å –≤–µ–ª–∏–∫–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤.';
    }

    const categoryRecommendations = recommendations[category];
    if (categoryRecommendations) {
      return categoryRecommendations[Math.floor(Math.random() * categoryRecommendations.length)];
    }

    return null;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string|null} author - –ê–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã
   * @returns {Promise<void>}
   */
  async updateUserStatistics(userId, author) {
    try {
      const profile = await UserProfile.findOne({ userId });
      if (!profile) return;

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      profile.statistics.totalQuotes += 1;

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª—é–±–∏–º—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤
      if (author && !profile.statistics.favoriteAuthors.includes(author)) {
        profile.statistics.favoriteAuthors.push(author);
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∞–≤—Ç–æ—Ä–æ–≤
        if (profile.statistics.favoriteAuthors.length > 10) {
          profile.statistics.favoriteAuthors = profile.statistics.favoriteAuthors.slice(-10);
        }
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–∏ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      const yesterday = new Date(today);
      yesterday.setDate(yesterday.getDate() - 1);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Ü–∏—Ç–∞—Ç–∞ –≤—á–µ—Ä–∞
      const yesterdayQuote = await Quote.findOne({
        userId,
        createdAt: { $gte: yesterday, $lt: today }
      });
      
      if (yesterdayQuote) {
        // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–µ—Ä–∏–∏
        profile.statistics.currentStreak += 1;
        if (profile.statistics.currentStreak > profile.statistics.longestStreak) {
          profile.statistics.longestStreak = profile.statistics.currentStreak;
        }
      } else {
        // –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏ –∏–ª–∏ –ø–µ—Ä–≤–∞—è —Ü–∏—Ç–∞—Ç–∞
        profile.statistics.currentStreak = 1;
        if (profile.statistics.longestStreak === 0) {
          profile.statistics.longestStreak = 1;
        }
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const currentMonth = today.getMonth() + 1;
      const currentYear = today.getFullYear();
      
      const monthlyIndex = profile.statistics.monthlyQuotes.findIndex(
        m => m.month === currentMonth && m.year === currentYear
      );
      
      if (monthlyIndex >= 0) {
        profile.statistics.monthlyQuotes[monthlyIndex].count += 1;
      } else {
        profile.statistics.monthlyQuotes.push({
          month: currentMonth,
          year: currentYear,
          count: 1
        });
      }

      await profile.save();
      
    } catch (error) {
      logger.error(`üìñ Error updating user statistics: ${error.message}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Array<Achievement>>} –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   */
  async checkAchievements(userId) {
    try {
      const profile = await UserProfile.findOne({ userId });
      if (!profile) return [];

      const newAchievements = [];

      for (const achievement of this.achievements) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        if (profile.achievements.some(a => a.achievementId === achievement.id)) {
          continue;
        }

        let unlocked = false;

        switch (achievement.type) {
          case 'quotes_count':
            unlocked = profile.statistics.totalQuotes >= achievement.targetValue;
            break;
            
          case 'streak_days':
            unlocked = profile.statistics.currentStreak >= achievement.targetValue;
            break;
            
          case 'classics_count':
            const classicsCount = await Quote.countDocuments({
              userId,
              author: { $in: this.classicAuthors }
            });
            unlocked = classicsCount >= achievement.targetValue;
            break;
            
          case 'category_count':
            if (achievement.category) {
              const categoryCount = await Quote.countDocuments({
                userId,
                category: achievement.category
              });
              unlocked = categoryCount >= achievement.targetValue;
            }
            break;
        }

        if (unlocked) {
          profile.achievements.push({
            achievementId: achievement.id,
            unlockedAt: new Date()
          });
          newAchievements.push(achievement);
        }
      }

      if (newAchievements.length > 0) {
        await profile.save();
      }

      return newAchievements;
      
    } catch (error) {
      logger.error(`üìñ Error checking achievements: ${error.message}`);
      return [];
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
   * @param {Object} ctx - Telegram context
   * @param {Array<Achievement>} achievements - –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   * @returns {Promise<void>}
   */
  async notifyAchievements(ctx, achievements) {
    for (const achievement of achievements) {
      const message = `üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!*\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:\n${achievement.icon} *${achievement.name}*\n${achievement.description}\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –º–æ–º–µ–Ω—Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! üìñ`;

      try {
        await ctx.reply(message, { parse_mode: 'Markdown' });
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        if (achievements.length > 1) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
      } catch (error) {
        logger.error(`üìñ Error sending achievement notification: ${error.message}`);
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ ISO 8601
   * @returns {number} –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
   */
  getWeekNumber() {
    const now = new Date();
    const d = new Date(Date.UTC(now.getFullYear(), now.getMonth(), now.getDate()));
    const dayNum = d.getUTCDay() || 7;
    d.setUTCDate(d.getUTCDate() + 4 - dayNum);
    const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
    return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ü–∏—Ç–∞—Ç
   * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  getStats() {
    return {
      totalAchievements: this.achievements.length,
      classicAuthorsCount: this.classicAuthors.length,
      supportedCategories: [
        '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', '–õ—é–±–æ–≤—å', '–§–∏–ª–æ—Å–æ—Ñ–∏—è', '–ú–æ—Ç–∏–≤–∞—Ü–∏—è', 
        '–ú—É–¥—Ä–æ—Å—Ç—å', '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–û—Ç–Ω–æ—à–µ–Ω–∏—è', '–ú–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ', 
        '–ö–∞—Ä—å–µ—Ä–∞', '–î—Ä—É–≥–æ–µ'
      ],
      features: {
        aiAnalysis: true,
        achievementSystem: true,
        bookRecommendations: true,
        statisticsTracking: true,
        quoteParsing: true
      }
    };
  }
}

module.exports = { QuoteHandler };
/**
 * Onboarding handler for Reader bot
 * Handles the 7-question test, email collection, and traffic source
 * @file telegram/handlers/onboardingHandler.js
 */

const { UserProfile } = require('../../server/models');

/**
 * @typedef {import('../../server/types/reader').TestResults} TestResults
 * @typedef {import('../../server/types/reader').UserProfileData} UserProfileData
 */

/**
 * Onboarding states for state management
 * @readonly
 * @enum {string}
 */
const ONBOARDING_STATES = {
  START: 'onboarding_start',
  TEST_Q1_NAME: 'test_q1_name',
  TEST_Q2_LIFESTYLE: 'test_q2_lifestyle', 
  TEST_Q3_TIME: 'test_q3_time',
  TEST_Q4_PRIORITIES: 'test_q4_priorities',
  TEST_Q5_READING: 'test_q5_reading',
  TEST_Q6_PHRASE: 'test_q6_phrase',
  TEST_Q7_TIME_AMOUNT: 'test_q7_time_amount',
  COLLECT_EMAIL: 'collect_email',
  COLLECT_SOURCE: 'collect_source',
  COMPLETE: 'complete'
};

/**
 * Test questions configuration for Reader bot onboarding
 * @type {Object.<string, Object>}
 */
const TEST_QUESTIONS = {
  q1: {
    text: "üìù –í–æ–ø—Ä–æ—Å 1 –∏–∑ 7\n\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
    type: 'text',
    placeholder: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
  },
  q2: {
    text: "üìù –í–æ–ø—Ä–æ—Å 2 –∏–∑ 7\n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:",
    type: 'buttons',
    options: [
      "–Ø –º–∞–º–∞ (–¥–µ—Ç–∏ - –≥–ª–∞–≤–Ω–∞—è –∑–∞–±–æ—Ç–∞)",
      "–ó–∞–º—É–∂–µ–º, –±–∞–ª–∞–Ω—Å–∏—Ä—É—é –¥–æ–º/—Ä–∞–±–æ—Ç—É/—Å–µ–±—è", 
      "–ë–µ–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π, –∏–∑—É—á–∞—é –º–∏—Ä –∏ —Å–µ–±—è"
    ]
  },
  q3: {
    text: "üìù –í–æ–ø—Ä–æ—Å 3 –∏–∑ 7\n\n–ö–∞–∫ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Å–µ–±—è?",
    type: 'buttons',
    options: [
      "–†–∞–Ω–æ —É—Ç—Ä–æ–º, –ø–æ–∫–∞ –≤—Å–µ —Å–ø—è—Ç",
      "–ü–æ–∑–¥–Ω–æ –≤–µ—á–µ—Ä–æ–º, –∫–æ–≥–¥–∞ –¥–µ–ª–∞ –∑–∞–∫–æ–Ω—á–µ–Ω—ã",
      "–£—Ä—ã–≤–∫–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è",
      "–í—Ä–µ–º—è –¥–ª—è —Å–µ–±—è? –ö–∞–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–µ–±—è?"
    ]
  },
  q4: {
    text: "üìù –í–æ–ø—Ä–æ—Å 4 –∏–∑ 7\n\n–ß—Ç–æ —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏?",
    type: 'buttons',
    options: [
      "–°–µ–º—å—è –∏ –±–ª–∏–∑–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
      "–ö–∞—Ä—å–µ—Ä–∞ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç",
      "–°–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≥–∞—Ä–º–æ–Ω–∏—è",
      "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"
    ]
  },
  q5: {
    text: "üìù –í–æ–ø—Ä–æ—Å 5 –∏–∑ 7\n\n–ß—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —á–∏—Ç–∞—è —Ö–æ—Ä–æ—à–∏–µ –∫–Ω–∏–≥–∏?",
    type: 'buttons',
    options: [
      "–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ –∂–µ–ª–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å",
      "–ü–æ–∫–æ–π –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –≥–∞—Ä–º–æ–Ω–∏—é",
      "–ü–æ–Ω–∏–º–∞–Ω–∏–µ —Å–µ–±—è –∏ –º–∏—Ä–∞ –≤–æ–∫—Ä—É–≥",
      "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –∏ —Å–æ–ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–µ"
    ]
  },
  q6: {
    text: "üìù –í–æ–ø—Ä–æ—Å 6 –∏–∑ 7\n\n–ö–∞–∫–∞—è —Ñ—Ä–∞–∑–∞ –≤–∞–º –±–ª–∏–∂–µ?",
    type: 'buttons',
    options: [
      "\"–•–æ—Ä–æ—à–∞—è –∂–∏–∑–Ω—å —Å—Ç—Ä–æ–∏—Ç—Å—è, –∞ –Ω–µ –¥–∞–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\"",
      "\"–í –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ ‚Äî —Ü–µ–ª–∞—è –∂–∏–∑–Ω—å\"",
      "\"–°—á–∞—Å—Ç—å–µ –≤–Ω—É—Ç—Ä–∏ –Ω–∞—Å, –∞ –Ω–µ –≤–æ –≤–Ω–µ—à–Ω–∏—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö\"",
      "\"–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ª—é–±–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\""
    ]
  },
  q7: {
    text: "üìù –í–æ–ø—Ä–æ—Å 7 –∏–∑ 7\n\n–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–µ–¥–µ–ª—é –≤—ã —á–∏—Ç–∞–µ—Ç–µ?",
    type: 'buttons',
    options: [
      "–ú–µ–Ω—å—à–µ —á–∞—Å–∞ (—á–∏—Ç–∞—é —Ä–µ–¥–∫–æ)",
      "1-3 —á–∞—Å–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)",
      "4-7 —á–∞—Å–æ–≤ (–ø–æ—á—Ç–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)",
      "–ë–æ–ª—å—à–µ 7 —á–∞—Å–æ–≤ (—á—Ç–µ–Ω–∏–µ - –º–æ—è —Å—Ç—Ä–∞—Å—Ç—å)"
    ]
  }
};

/**
 * Traffic source options for analytics
 * @type {Array<{text: string, value: string}>}
 */
const TRAFFIC_SOURCES = [
  { text: "üì± Instagram", value: "Instagram" },
  { text: "üí¨ Telegram", value: "Telegram" },
  { text: "üì∫ YouTube", value: "YouTube" },
  { text: "üßµ Threads", value: "Threads" },
  { text: "üë• –û—Ç –¥—Ä—É–∑–µ–π", value: "–î—Ä—É–∑—å—è" },
  { text: "‚ùì –î—Ä—É–≥–æ–µ", value: "–î—Ä—É–≥–æ–µ" }
];

/**
 * OnboardingHandler class for managing user registration flow
 */
class OnboardingHandler {
  constructor() {
    this.userStates = new Map(); // In-memory state storage
  }

  /**
   * Handle /start command - begin onboarding process
   * @param {Object} ctx - Telegram context
   * @returns {Promise<void>}
   */
  async handleStart(ctx) {
    const userId = ctx.from.id.toString();
    
    // Check if user already completed onboarding
    const existingProfile = await UserProfile.findOne({ userId });
    if (existingProfile && existingProfile.isOnboardingComplete) {
      await ctx.reply(
        `üìñ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${existingProfile.name}!\n\n–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ ¬´–ß–∏—Ç–∞—Ç–µ–ª–µ¬ª. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ç–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–∞!`
      );
      return;
    }

    const welcomeMessage = `üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–í—ã –ø–æ–ø–∞–ª–∏ –≤ ¬´–ß–∏—Ç–∞—Ç–µ–ª—å¬ª - –≤–∞—à –ª–∏—á–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ —Å–ª–æ–≤ –∏ —Ü–∏—Ç–∞—Ç.

–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞ –ë—É—Å–µ–ª, —è –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å ¬´–ö–Ω–∏–∂–Ω–æ–≥–æ –∫–ª—É–±–∞¬ª. 
–ó–¥–µ—Å—å –º—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏–º –≤–∞—à–∏ —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ —Ä–æ—Å—Ç–∞.

üìù –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥—ë–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç (2 –º–∏–Ω—É—Ç—ã) - –æ–Ω –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –∫–Ω–∏–≥–∏ –±—É–¥—É—Ç –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –∏–º–µ–Ω–Ω–æ –≤–∞–º.`;
    
    await ctx.reply(welcomeMessage, {
      reply_markup: {
        inline_keyboard: [[
          { text: "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data: "start_test" }
        ]]
      }
    });

    this.setState(userId, ONBOARDING_STATES.START);
  }

  /**
   * Handle callback queries during onboarding
   * @param {Object} ctx - Telegram context
   * @returns {Promise<void>}
   */
  async handleCallback(ctx) {
    const userId = ctx.from.id.toString();
    const callbackData = ctx.callbackQuery.data;

    try {
      if (callbackData === 'start_test') {
        await this.startTest(ctx);
      } else if (callbackData.startsWith('test_q')) {
        await this.handleTestAnswer(ctx, callbackData);
      } else if (callbackData.startsWith('source_')) {
        await this.handleSourceSelection(ctx, callbackData);
      }

      // Acknowledge callback to remove loading state
      await ctx.answerCbQuery();
    } catch (error) {
      console.error('‚ùå Error handling onboarding callback:', error);
      await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  }

  /**
   * Handle text messages during onboarding
   * @param {Object} ctx - Telegram context
   * @returns {Promise<boolean>} - Returns true if message was handled by onboarding
   */
  async handleTextMessage(ctx) {
    const userId = ctx.from.id.toString();
    const state = this.getState(userId);
    const messageText = ctx.message.text.trim();

    if (!state || state === ONBOARDING_STATES.COMPLETE) {
      return false; // Not in onboarding process
    }

    try {
      switch (state) {
        case ONBOARDING_STATES.TEST_Q1_NAME:
          await this.handleNameInput(ctx, messageText);
          return true;

        case ONBOARDING_STATES.COLLECT_EMAIL:
          await this.handleEmailInput(ctx, messageText);
          return true;

        default:
          return false;
      }
    } catch (error) {
      console.error('‚ùå Error handling onboarding text message:', error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      return true;
    }
  }

  /**
   * Start the test process
   * @param {Object} ctx - Telegram context
   * @returns {Promise<void>}
   */
  async startTest(ctx) {
    const userId = ctx.from.id.toString();
    
    // Initialize test data
    this.setTestData(userId, {
      answers: {},
      currentQuestion: 1
    });

    await this.askQuestion(ctx, 'q1');
    this.setState(userId, ONBOARDING_STATES.TEST_Q1_NAME);
  }

  /**
   * Ask a specific test question
   * @param {Object} ctx - Telegram context
   * @param {string} questionKey - Question key (q1, q2, etc.)
   * @returns {Promise<void>}
   */
  async askQuestion(ctx, questionKey) {
    const question = TEST_QUESTIONS[questionKey];
    
    if (question.type === 'text') {
      await ctx.editMessageText(question.text, {
        reply_markup: { force_reply: true }
      });
    } else if (question.type === 'buttons') {
      const keyboard = question.options.map((option, index) => [{
        text: option,
        callback_data: `test_${questionKey}_${index}`
      }]);

      await ctx.editMessageText(question.text, {
        reply_markup: { inline_keyboard: keyboard }
      });
    }
  }

  /**
   * Handle test answer from buttons
   * @param {Object} ctx - Telegram context
   * @param {string} callbackData - Callback data
   * @returns {Promise<void>}
   */
  async handleTestAnswer(ctx, callbackData) {
    const userId = ctx.from.id.toString();
    const [, questionKey, answerIndex] = callbackData.split('_');
    const questionNum = parseInt(questionKey.replace('q', ''));
    
    const testData = this.getTestData(userId);
    const question = TEST_QUESTIONS[questionKey];
    const answer = question.options[parseInt(answerIndex)];

    // Save answer
    testData.answers[`question${questionNum}`] = answer;
    this.setTestData(userId, testData);

    // Progress to next question or finish test
    if (questionNum < 7) {
      const nextQuestionKey = `q${questionNum + 1}`;
      await this.askQuestion(ctx, nextQuestionKey);
      
      // Update state for text questions
      if (nextQuestionKey === 'q1') {
        this.setState(userId, ONBOARDING_STATES.TEST_Q1_NAME);
      } else {
        this.setState(userId, `test_${nextQuestionKey}`);
      }
    } else {
      await this.finishTest(ctx);
    }
  }

  /**
   * Handle name input for question 1
   * @param {Object} ctx - Telegram context
   * @param {string} name - User's name
   * @returns {Promise<void>}
   */
  async handleNameInput(ctx, name) {
    const userId = ctx.from.id.toString();
    
    if (name.length < 2 || name.length > 50) {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):");
      return;
    }

    // Save name in test data
    const testData = this.getTestData(userId);
    testData.answers.question1_name = name;
    this.setTestData(userId, testData);

    // Continue to question 2
    await this.askQuestion(ctx, 'q2');
    this.setState(userId, ONBOARDING_STATES.TEST_Q2_LIFESTYLE);
  }

  /**
   * Finish the test and collect email
   * @param {Object} ctx - Telegram context
   * @returns {Promise<void>}
   */
  async finishTest(ctx) {
    const userId = ctx.from.id.toString();
    const testData = this.getTestData(userId);

    const completionMessage = `‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã.

–¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.

üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:`;

    await ctx.editMessageText(completionMessage);
    this.setState(userId, ONBOARDING_STATES.COLLECT_EMAIL);
  }

  /**
   * Handle email input
   * @param {Object} ctx - Telegram context
   * @param {string} email - User's email
   * @returns {Promise<void>}
   */
  async handleEmailInput(ctx, email) {
    const userId = ctx.from.id.toString();
    
    if (!this.validateEmail(email)) {
      await ctx.reply(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email:

–ü—Ä–∏–º–µ—Ä: your.email@gmail.com`);
      return;
    }

    // Save email in test data
    const testData = this.getTestData(userId);
    testData.email = email;
    this.setTestData(userId, testData);

    await this.collectSource(ctx);
  }

  /**
   * Show traffic source selection
   * @param {Object} ctx - Telegram context
   * @returns {Promise<void>}
   */
  async collectSource(ctx) {
    const userId = ctx.from.id.toString();

    const sourceMessage = `üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å!

–û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –±–æ—Ç–µ ¬´–ß–∏—Ç–∞—Ç–µ–ª—å¬ª?
–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –Ω–∞—à–∏—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π.`;

    const keyboard = TRAFFIC_SOURCES.map(source => [{
      text: source.text,
      callback_data: `source_${source.value.toLowerCase()}`
    }]);

    await ctx.reply(sourceMessage, {
      reply_markup: { inline_keyboard: keyboard }
    });

    this.setState(userId, ONBOARDING_STATES.COLLECT_SOURCE);
  }

  /**
   * Handle traffic source selection
   * @param {Object} ctx - Telegram context
   * @param {string} callbackData - Source callback data
   * @returns {Promise<void>}
   */
  async handleSourceSelection(ctx, callbackData) {
    const userId = ctx.from.id.toString();
    const sourceValue = callbackData.replace('source_', '');
    
    // Find the actual source value
    const source = TRAFFIC_SOURCES.find(s => 
      s.value.toLowerCase() === sourceValue
    );

    if (!source) {
      await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      return;
    }

    const testData = this.getTestData(userId);
    testData.source = source.value;

    await this.completeOnboarding(ctx, testData);
  }

  /**
   * Complete the onboarding process
   * @param {Object} ctx - Telegram context
   * @param {Object} testData - Collected test data
   * @returns {Promise<void>}
   */
  async completeOnboarding(ctx, testData) {
    const userId = ctx.from.id.toString();
    
    try {
      // Prepare user profile data
      const userProfileData = {
        userId: userId,
        telegramUsername: ctx.from.username || '',
        name: testData.answers.question1_name,
        email: testData.email,
        testResults: {
          name: testData.answers.question1_name,
          lifestyle: testData.answers.question2 || '',
          timeForSelf: testData.answers.question3 || '',
          priorities: testData.answers.question4 || '',
          readingFeelings: testData.answers.question5 || '',
          closestPhrase: testData.answers.question6 || '',
          readingTime: testData.answers.question7 || ''
        },
        source: testData.source,
        preferences: {
          mainThemes: [], // Will be analyzed later
          personalityType: '', // Will be analyzed later
          recommendationStyle: '' // Will be analyzed later
        },
        registeredAt: new Date(),
        isOnboardingComplete: true
      };

      // Save to database
      await UserProfile.findOneAndUpdate(
        { userId },
        userProfileData,
        { upsert: true, new: true }
      );

      const completionMessage = `üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–ß–∏—Ç–∞—Ç–µ–ª—å¬ª, ${testData.answers.question1_name}!

–¢–µ–ø–µ—Ä—å –≥–ª–∞–≤–Ω–∞—è —Ñ–∏—à–∫–∞ ¬´–ß–∏—Ç–∞—Ç–µ–ª—è¬ª:
üìñ –ö–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç–µ —Ü–∏—Ç–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–∂–∏–≥–∞–µ—Ç —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ - –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Å—é–¥–∞.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –ü—Ä–∏—à–ª–∏—Ç–µ –ª—é–±—É—é —Ü–∏—Ç–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è.

üí° –•–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ - —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏!`;

      await ctx.editMessageText(completionMessage);

      // Clean up temporary data
      this.clearUserData(userId);
      this.setState(userId, ONBOARDING_STATES.COMPLETE);

      console.log(`‚úÖ User ${userId} (${testData.answers.question1_name}) completed onboarding from ${testData.source}`);

    } catch (error) {
      console.error('‚ùå Error completing onboarding:', error);
      await ctx.editMessageText(
        `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`
      );
    }
  }

  /**
   * Validate email format
   * @param {string} email - Email to validate
   * @returns {boolean}
   */
  validateEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email) && email.length <= 100;
  }

  /**
   * Get user's current onboarding state
   * @param {string} userId - User ID
   * @returns {string|null}
   */
  getState(userId) {
    return this.userStates.get(`${userId}_state`);
  }

  /**
   * Set user's onboarding state
   * @param {string} userId - User ID
   * @param {string} state - New state
   */
  setState(userId, state) {
    this.userStates.set(`${userId}_state`, state);
  }

  /**
   * Get user's test data
   * @param {string} userId - User ID
   * @returns {Object}
   */
  getTestData(userId) {
    return this.userStates.get(`${userId}_test`) || { answers: {} };
  }

  /**
   * Set user's test data
   * @param {string} userId - User ID
   * @param {Object} data - Test data
   */
  setTestData(userId, data) {
    this.userStates.set(`${userId}_test`, data);
  }

  /**
   * Clear all user data from memory
   * @param {string} userId - User ID
   */
  clearUserData(userId) {
    this.userStates.delete(`${userId}_state`);
    this.userStates.delete(`${userId}_test`);
  }

  /**
   * Check if user is in onboarding process
   * @param {string} userId - User ID
   * @returns {boolean}
   */
  isInOnboarding(userId) {
    const state = this.getState(userId);
    return state && state !== ONBOARDING_STATES.COMPLETE;
  }
}

module.exports = {
  OnboardingHandler,
  ONBOARDING_STATES,
  TEST_QUESTIONS,
  TRAFFIC_SOURCES
};
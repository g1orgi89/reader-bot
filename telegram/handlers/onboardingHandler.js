/**
 * @fileoverview –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –¥–ª—è –±–æ—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @author g1orgi89
 */

const logger = require('../../server/utils/logger');
const { UserProfile } = require('../../server/models');
const { ONBOARDING_STATES } = require('../../server/types/reader');

/**
 * @typedef {import('../../server/types/reader').TestResults} TestResults
 * @typedef {import('../../server/types/reader').UserProfile} UserProfile
 */

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
class OnboardingHandler {
  constructor() {
    /**
     * @type {Map<string, Object>} - –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
     */
    this.userStates = new Map();
    
    /**
     * @type {Object} - –í–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
     */
    this.testQuestions = {
      1: {
        text: "–í–æ–ø—Ä–æ—Å 1 –∏–∑ 7\n\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
        type: 'text'
      },
      2: {
        text: "–í–æ–ø—Ä–æ—Å 2 –∏–∑ 7\n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:",
        type: 'buttons',
        options: [
          "–Ø –º–∞–º–∞ (–¥–µ—Ç–∏ - –≥–ª–∞–≤–Ω–∞—è –∑–∞–±–æ—Ç–∞)",
          "–ó–∞–º—É–∂–µ–º, –±–∞–ª–∞–Ω—Å–∏—Ä—É—é –¥–æ–º/—Ä–∞–±–æ—Ç—É/—Å–µ–±—è", 
          "–ë–µ–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π, –∏–∑—É—á–∞—é –º–∏—Ä –∏ —Å–µ–±—è"
        ]
      },
      3: {
        text: "–í–æ–ø—Ä–æ—Å 3 –∏–∑ 7\n\n–ö–∞–∫ –Ω–∞—Ö–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Å–µ–±—è?",
        type: 'buttons',
        options: [
          "–†–∞–Ω–æ —É—Ç—Ä–æ–º, –ø–æ–∫–∞ –≤—Å–µ —Å–ø—è—Ç",
          "–ü–æ–∑–¥–Ω–æ –≤–µ—á–µ—Ä–æ–º, –∫–æ–≥–¥–∞ –¥–µ–ª–∞ —Å–¥–µ–ª–∞–Ω—ã",
          "–£—Ä—ã–≤–∫–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è",
          "–í—Ä–µ–º—è –¥–ª—è —Å–µ–±—è? –ß—Ç–æ —ç—Ç–æ?"
        ]
      },
      4: {
        text: "–í–æ–ø—Ä–æ—Å 4 –∏–∑ 7\n\n–ß—Ç–æ —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ?",
        type: 'buttons',
        options: [
          "–ù–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å",
          "–ü–æ–Ω—è—Ç—å —Å–≤–æ–∏ –∏—Å—Ç–∏–Ω–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è", 
          "–ù–∞—É—á–∏—Ç—å—Å—è –ª—é–±–∏—Ç—å —Å–µ–±—è",
          "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"
        ]
      },
      5: {
        text: "–í–æ–ø—Ä–æ—Å 5 –∏–∑ 7\n\n–ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —á–∏—Ç–∞—è –∫–Ω–∏–≥–∏?",
        type: 'buttons',
        options: [
          "–ù–∞—Ö–æ–∂—É –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã",
          "–ü–æ–ª—É—á–∞—é –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ —ç–Ω–µ—Ä–≥–∏—é",
          "–£—Å–ø–æ–∫–∞–∏–≤–∞—é—Å—å –∏ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—Å—å",
          "–£—á—É—Å—å –Ω–æ–≤–æ–º—É –æ —Å–µ–±–µ –∏ –º–∏—Ä–µ"
        ]
      },
      6: {
        text: "–í–æ–ø—Ä–æ—Å 6 –∏–∑ 7\n\n–ö–∞–∫–∞—è —Ñ—Ä–∞–∑–∞ –±–ª–∏–∂–µ?",
        type: 'buttons',
        options: [
          "\"–°—á–∞—Å—Ç—å–µ ‚Äî —ç—Ç–æ –≤—ã–±–æ—Ä\"",
          "\"–õ—é–±–æ–≤—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Å–µ–±—è\"",
          "\"–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ\"",
          "\"–ú—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –æ–ø—ã—Ç–æ–º\""
        ]
      },
      7: {
        text: "–í–æ–ø—Ä–æ—Å 7 –∏–∑ 7\n\n–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —á–∏—Ç–∞–µ—Ç–µ –≤ –Ω–µ–¥–µ–ª—é?",
        type: 'buttons',
        options: [
          "–ú–µ–Ω—å—à–µ —á–∞—Å–∞ (—á–∏—Ç–∞—é —Ä–µ–¥–∫–æ)",
          "1-3 —á–∞—Å–∞ (–ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º)",
          "3-7 —á–∞—Å–æ–≤ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)",
          "–ë–æ–ª—å—à–µ 7 —á–∞—Å–æ–≤ (—á–∏—Ç–∞—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)"
        ]
      }
    };

    logger.info('üìñ OnboardingHandler initialized');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
   * @param {Object} ctx - Telegram context
   * @returns {Promise<void>}
   */
  async handleStart(ctx) {
    const userId = ctx.from.id.toString();
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
      const existingUser = await UserProfile.findOne({ userId });
      
      if (existingUser && existingUser.isOnboardingComplete) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await this._sendWelcomeBackMessage(ctx, existingUser);
        return;
      }

      // –ù–∞—á–∏–Ω–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
      await this._startOnboarding(ctx);
      
    } catch (error) {
      logger.error(`üìñ Error in handleStart: ${error.message}`);
      await ctx.reply('üìñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.');
    }
  }

  /**
   * –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
   * @private
   * @param {Object} ctx - Telegram context
   */
  async _startOnboarding(ctx) {
    const userId = ctx.from.id.toString();
    
    const welcomeMessage = `üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–í—ã –ø–æ–ø–∞–ª–∏ –≤ ¬´–ß–∏—Ç–∞—Ç–µ–ª—å¬ª - –≤–∞—à –ª–∏—á–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ —Å–ª–æ–≤ –∏ —Ü–∏—Ç–∞—Ç.

–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞ –ë—É—Å–µ–ª, —è –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å ¬´–ö–Ω–∏–∂–Ω–æ–≥–æ –∫–ª—É–±–∞¬ª. 
–ó–¥–µ—Å—å –º—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏–º –≤–∞—à–∏ —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ —Ä–æ—Å—Ç–∞.

üìù –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥—ë–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç (2 –º–∏–Ω—É—Ç—ã) - –æ–Ω –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –∫–Ω–∏–≥–∏ –±—É–¥—É—Ç –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –∏–º–µ–Ω–Ω–æ –≤–∞–º.`;
    
    await ctx.reply(welcomeMessage, {
      reply_markup: {
        inline_keyboard: [[
          { text: "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data: "start_test" }
        ]]
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.userStates.set(userId, {
      state: ONBOARDING_STATES.START,
      testAnswers: {},
      startTime: new Date()
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
   * @param {Object} ctx - Telegram context
   * @returns {Promise<boolean>} - true –µ—Å–ª–∏ callback –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
   */
  async handleCallback(ctx) {
    const userId = ctx.from.id.toString();
    const callbackData = ctx.callbackQuery.data;
    
    try {
      await ctx.answerCbQuery();

      if (callbackData === 'start_test') {
        await this._startTest(ctx);
        return true;
      }

      if (callbackData.startsWith('test_q')) {
        await this._handleTestAnswer(ctx, callbackData);
        return true;
      }

      if (callbackData.startsWith('source_')) {
        await this._handleSourceSelection(ctx, callbackData);
        return true;
      }

      return false;
      
    } catch (error) {
      logger.error(`üìñ Error in handleCallback: ${error.message}`);
      await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      return true;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
   * @param {Object} ctx - Telegram context
   * @returns {Promise<boolean>} - true –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
   */
  async handleTextMessage(ctx) {
    const userId = ctx.from.id.toString();
    const messageText = ctx.message.text;
    
    if (!this.userStates.has(userId)) {
      return false; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    }

    const userState = this.userStates.get(userId);
    
    try {
      switch (userState.state) {
        case ONBOARDING_STATES.TEST_Q1_NAME:
          await this._handleNameInput(ctx, messageText);
          return true;
          
        case ONBOARDING_STATES.COLLECT_EMAIL:
          await this._handleEmailInput(ctx, messageText);
          return true;
          
        default:
          return false;
      }
    } catch (error) {
      logger.error(`üìñ Error in handleTextMessage: ${error.message}`);
      await ctx.reply('üìñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      return true;
    }
  }

  /**
   * –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
   * @private
   * @param {Object} ctx - Telegram context
   */
  async _startTest(ctx) {
    const userId = ctx.from.id.toString();
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await this._showTestQuestion(ctx, 1);
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const userState = this.userStates.get(userId);
    userState.state = ONBOARDING_STATES.TEST_Q1_NAME;
    userState.currentQuestion = 1;
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞
   * @private
   * @param {Object} ctx - Telegram context
   * @param {number} questionNumber - –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
   */
  async _showTestQuestion(ctx, questionNumber) {
    const question = this.testQuestions[questionNumber];
    
    if (question.type === 'text') {
      await ctx.reply(question.text, {
        reply_markup: { force_reply: true }
      });
    } else if (question.type === 'buttons') {
      const keyboard = question.options.map((option, index) => [
        { text: option, callback_data: `test_q${questionNumber}_${index}` }
      ]);
      
      await ctx.reply(question.text, {
        reply_markup: { inline_keyboard: keyboard }
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞
   * @private
   * @param {Object} ctx - Telegram context
   * @param {string} callbackData - –î–∞–Ω–Ω—ã–µ callback
   */
  async _handleTestAnswer(ctx, callbackData) {
    const userId = ctx.from.id.toString();
    const userState = this.userStates.get(userId);
    
    // –ü–∞—Ä—Å–∏–º callback –¥–∞–Ω–Ω—ã–µ: test_q2_1 -> question 2, option 1
    const match = callbackData.match(/test_q(\d+)_(\d+)/);
    if (!match) return;
    
    const questionNumber = parseInt(match[1]);
    const optionIndex = parseInt(match[2]);
    
    const question = this.testQuestions[questionNumber];
    const selectedAnswer = question.options[optionIndex];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    userState.testAnswers[`question${questionNumber}`] = selectedAnswer;
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
    if (questionNumber < 7) {
      const nextQuestion = questionNumber + 1;
      await this._showTestQuestion(ctx, nextQuestion);
      userState.currentQuestion = nextQuestion;
      userState.state = this._getStateForQuestion(nextQuestion);
    } else {
      // –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É email
      await this._collectEmail(ctx);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
   * @private
   * @param {Object} ctx - Telegram context
   * @param {string} name - –í–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è
   */
  async _handleNameInput(ctx, name) {
    const userId = ctx.from.id.toString();
    const userState = this.userStates.get(userId);
    
    if (name.length < 2 || name.length > 50) {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):");
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    userState.testAnswers.question1 = name.trim();
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–º—É –≤–æ–ø—Ä–æ—Å—É
    await this._showTestQuestion(ctx, 2);
    userState.currentQuestion = 2;
    userState.state = ONBOARDING_STATES.TEST_Q2_LIFESTYLE;
  }

  /**
   * –°–±–æ—Ä email
   * @private
   * @param {Object} ctx - Telegram context
   */
  async _collectEmail(ctx) {
    const userId = ctx.from.id.toString();
    const userState = this.userStates.get(userId);
    
    userState.state = ONBOARDING_STATES.COLLECT_EMAIL;
    
    await ctx.reply(
      "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤:",
      { reply_markup: { force_reply: true } }
    );
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email
   * @private
   * @param {Object} ctx - Telegram context
   * @param {string} email - –í–≤–µ–¥–µ–Ω–Ω—ã–π email
   */
  async _handleEmailInput(ctx, email) {
    const userId = ctx.from.id.toString();
    
    if (!this._validateEmail(email)) {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å:");
      return;
    }
    
    const userState = this.userStates.get(userId);
    userState.email = email.trim().toLowerCase();
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    await this._collectSource(ctx);
  }

  /**
   * –°–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
   * @private
   * @param {Object} ctx - Telegram context
   */
  async _collectSource(ctx) {
    const userId = ctx.from.id.toString();
    const userState = this.userStates.get(userId);
    
    userState.state = ONBOARDING_STATES.COLLECT_SOURCE;
    
    await ctx.reply("–û—Ç–∫—É–¥–∞ –í—ã —É–∑–Ω–∞–ª–∏ –æ –±–æ—Ç–µ?", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "Instagram", callback_data: "source_instagram" }],
          [{ text: "Telegram", callback_data: "source_telegram" }],
          [{ text: "YouTube", callback_data: "source_youtube" }],
          [{ text: "Threads", callback_data: "source_threads" }],
          [{ text: "–û—Ç –¥—Ä—É–∑–µ–π", callback_data: "source_friends" }],
          [{ text: "–î—Ä—É–≥–æ–µ", callback_data: "source_other" }]
        ]
      }
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
   * @private
   * @param {Object} ctx - Telegram context
   * @param {string} callbackData - –î–∞–Ω–Ω—ã–µ callback
   */
  async _handleSourceSelection(ctx, callbackData) {
    const userId = ctx.from.id.toString();
    const userState = this.userStates.get(userId);
    
    const sourceMap = {
      'source_instagram': 'Instagram',
      'source_telegram': 'Telegram',
      'source_youtube': 'YouTube',
      'source_threads': 'Threads',
      'source_friends': '–î—Ä—É–∑—å—è',
      'source_other': '–î—Ä—É–≥–æ–µ'
    };
    
    const source = sourceMap[callbackData];
    if (!source) return;
    
    userState.source = source;
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
    await this._completeOnboarding(ctx);
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
   * @private
   * @param {Object} ctx - Telegram context
   */
  async _completeOnboarding(ctx) {
    const userId = ctx.from.id.toString();
    const userState = this.userStates.get(userId);
    
    try {
      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userData = {
        userId,
        telegramUsername: ctx.from.username || null,
        name: userState.testAnswers.question1,
        email: userState.email,
        testResults: {
          question1_name: userState.testAnswers.question1,
          question2_lifestyle: userState.testAnswers.question2 || '',
          question3_time: userState.testAnswers.question3 || '',
          question4_priorities: userState.testAnswers.question4 || '',
          question5_reading_feeling: userState.testAnswers.question5 || '',
          question6_phrase: userState.testAnswers.question6 || '',
          question7_reading_time: userState.testAnswers.question7 || '',
          completedAt: new Date()
        },
        source: userState.source,
        telegramData: {
          firstName: ctx.from.first_name,
          lastName: ctx.from.last_name,
          languageCode: ctx.from.language_code,
          chatId: ctx.chat.id.toString()
        }
      };
      
      const userProfile = await UserProfile.findOneAndUpdate(
        { userId },
        userData,
        { upsert: true, new: true }
      );
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
      await userProfile.completeOnboarding();
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.userStates.delete(userId);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
      const completionMessage = `üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

–¢–µ–ø–µ—Ä—å –≥–ª–∞–≤–Ω–∞—è —Ñ–∏—à–∫–∞ ¬´–ß–∏—Ç–∞—Ç–µ–ª—è¬ª:
–ö–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç–µ —Ü–∏—Ç–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–∂–∏–≥–∞–µ—Ç —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ - –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Å—é–¥–∞.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –ü—Ä–∏—à–ª–∏—Ç–µ –ª—é–±—É—é —Ü–∏—Ç–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è.

üìñ –•–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ - —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏!`;

      await ctx.reply(completionMessage);
      
      logger.info(`üìñ User ${userId} completed onboarding`);
      
    } catch (error) {
      logger.error(`üìñ Error completing onboarding: ${error.message}`);
      await ctx.reply('üìñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–µ—Ä–Ω—É–≤—à–µ–º—É—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * @private
   * @param {Object} ctx - Telegram context
   * @param {Object} userProfile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async _sendWelcomeBackMessage(ctx, userProfile) {
    const totalQuotes = userProfile.statistics.totalQuotes || 0;
    const daysSince = Math.floor((new Date() - userProfile.registeredAt) / (1000 * 60 * 60 * 24));
    
    const welcomeMessage = `üìñ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${userProfile.name}!

–£ –≤–∞—Å —É–∂–µ ${totalQuotes} —Ü–∏—Ç–∞—Ç –≤ –ª–∏—á–Ω–æ–º –¥–Ω–µ–≤–Ω–∏–∫–µ.
–° –±–æ—Ç–æ–º: ${daysSince} –¥–Ω–µ–π

üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/search - –ø–æ–∏—Å–∫ –ø–æ —Ü–∏—Ç–∞—Ç–∞–º
/help - —Å–ø—Ä–∞–≤–∫–∞

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –º–æ–º–µ–Ω—Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! üìö`;

    await ctx.reply(welcomeMessage);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {boolean}
   */
  isInOnboarding(userId) {
    return this.userStates.has(userId);
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è email
   * @private
   * @param {string} email - Email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns {boolean}
   */
  _validateEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞
   * @private
   * @param {number} questionNumber - –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
   * @returns {string}
   */
  _getStateForQuestion(questionNumber) {
    const stateMap = {
      2: ONBOARDING_STATES.TEST_Q2_LIFESTYLE,
      3: ONBOARDING_STATES.TEST_Q3_TIME,
      4: ONBOARDING_STATES.TEST_Q4_PRIORITIES,
      5: ONBOARDING_STATES.TEST_Q5_READING,
      6: ONBOARDING_STATES.TEST_Q6_PHRASE,
      7: ONBOARDING_STATES.TEST_Q7_TIME_AMOUNT
    };
    
    return stateMap[questionNumber] || ONBOARDING_STATES.START;
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
   */
  cleanupStaleStates() {
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    
    for (const [userId, state] of this.userStates.entries()) {
      if (state.startTime < oneHourAgo) {
        this.userStates.delete(userId);
        logger.info(`üìñ Cleaned up stale onboarding state for user ${userId}`);
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
   * @returns {Object}
   */
  getStats() {
    return {
      activeOnboardings: this.userStates.size,
      states: Array.from(this.userStates.values()).reduce((acc, state) => {
        acc[state.state] = (acc[state.state] || 0) + 1;
        return acc;
      }, {})
    };
  }
}

module.exports = { OnboardingHandler };
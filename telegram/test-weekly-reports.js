/**
 * @fileoverview –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
 * @author g1orgi89
 */

require('dotenv').config();
const mongoose = require('mongoose');
const logger = require('../server/utils/logger');
const { WeeklyReportService } = require('../server/services/weeklyReportService');
const { UserProfile, Quote, WeeklyReport } = require('../server/models');

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
 * @returns {Promise<UserProfile>} –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 */
async function createTestUser(userId) {
  const testUser = new UserProfile({
    userId,
    telegramUsername: 'test_user',
    name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    email: 'test@example.com',
    testResults: {
      name: '–ú–∞—Ä–∏—è',
      lifestyle: '–ó–∞–º—É–∂–µ–º, –±–∞–ª–∞–Ω—Å–∏—Ä—É—é –¥–æ–º/—Ä–∞–±–æ—Ç—É/—Å–µ–±—è',
      timeForSelf: '–ß–∏—Ç–∞—é –ø–µ—Ä–µ–¥ —Å–Ω–æ–º',
      priorities: '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —Å–µ–º—å—è',
      readingFeelings: '–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ',
      closestPhrase: '–ñ–∏–∑–Ω—å - —ç—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ',
      readingTime: '1-2 —á–∞—Å–∞ –≤ –Ω–µ–¥–µ–ª—é'
    },
    source: 'Instagram',
    preferences: {
      mainThemes: ['–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', '–õ—é–±–æ–≤—å', '–§–∏–ª–æ—Å–æ—Ñ–∏—è'],
      personalityType: 'introspective_seeker',
      recommendationStyle: 'deep_analysis'
    },
    isOnboardingComplete: true,
    registeredAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // –ù–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥
  });

  await testUser.save();
  logger.info(`üìñ Test user created: ${userId}`);
  return testUser;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ü–∏—Ç–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Array<Quote>>} –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
 */
async function createTestQuotes(userId) {
  const testQuotes = [
    {
      text: '–í –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ ‚Äî —Ü–µ–ª–∞—è –∂–∏–∑–Ω—å',
      author: '–ú–∞—Ä–∏–Ω–∞ –¶–≤–µ—Ç–∞–µ–≤–∞',
      category: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ',
      themes: ['–ø–æ—ç–∑–∏—è', '–≤—ã—Ä–∞–∂–µ–Ω–∏–µ', '–≥–ª—É–±–∏–Ω–∞'],
      sentiment: 'positive'
    },
    {
      text: '–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ª—é–±–∏—Ç—å',
      author: '–≠—Ä–∏—Ö –§—Ä–æ–º–º',
      category: '–õ—é–±–æ–≤—å',
      themes: ['–æ—Ç–Ω–æ—à–µ–Ω–∏—è', '–≤—ã–±–æ—Ä', '–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å'],
      sentiment: 'positive'
    },
    {
      text: '–°—á–∞—Å—Ç—å–µ –≤–Ω—É—Ç—Ä–∏ –Ω–∞—Å',
      author: '–ë—É–¥–¥–∞',
      category: '–§–∏–ª–æ—Å–æ—Ñ–∏—è',
      themes: ['–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä', '—Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ', '–º—É–¥—Ä–æ—Å—Ç—å'],
      sentiment: 'positive'
    },
    {
      text: '–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –∞ –Ω–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
      author: null,
      category: '–ú—É–¥—Ä–æ—Å—Ç—å',
      themes: ['–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å', '–ø—Ä–æ—Ü–µ—Å—Å', '—Ü–µ–Ω–Ω–æ—Å—Ç–∏'],
      sentiment: 'neutral'
    },
    {
      text: '–í—Ä–µ–º—è –ª–µ—á–∏—Ç —Ä–∞–Ω—ã, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ—Ç —à—Ä–∞–º—ã –º—É–¥—Ä–æ—Å—Ç–∏',
      author: null,
      category: '–§–∏–ª–æ—Å–æ—Ñ–∏—è', 
      themes: ['–≤—Ä–µ–º—è', '–æ–ø—ã—Ç', '–∏—Å—Ü–µ–ª–µ–Ω–∏–µ'],
      sentiment: 'neutral'
    }
  ];

  const currentWeek = getCurrentWeekNumber();
  const currentYear = new Date().getFullYear();
  
  const savedQuotes = [];

  for (const [index, quoteData] of testQuotes.entries()) {
    const quote = new Quote({
      userId,
      text: quoteData.text,
      author: quoteData.author,
      category: quoteData.category,
      themes: quoteData.themes,
      sentiment: quoteData.sentiment,
      weekNumber: currentWeek,
      monthNumber: new Date().getMonth() + 1,
      yearNumber: currentYear,
      createdAt: new Date(Date.now() - (4 - index) * 24 * 60 * 60 * 1000) // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    });

    await quote.save();
    savedQuotes.push(quote);
  }

  logger.info(`üìñ Created ${savedQuotes.length} test quotes for user ${userId}`);
  return savedQuotes;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
 * @returns {number} –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
 */
function getCurrentWeekNumber() {
  const now = new Date();
  const d = new Date(Date.UTC(now.getFullYear(), now.getMonth(), now.getDate()));
  const dayNum = d.getUTCDay() || 7;
  d.setUTCDate(d.getUTCDate() + 4 - dayNum);
  const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
  return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<void>}
 */
async function testWeeklyReportGeneration(userId) {
  logger.info(`üìñ Testing weekly report generation for user ${userId}`);
  
  const weeklyReportService = new WeeklyReportService();
  
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    const report = await weeklyReportService.generateWeeklyReport(userId);
    
    if (!report) {
      logger.error('üìñ Failed to generate weekly report');
      return;
    }

    logger.info('üìñ Weekly report generated successfully:');
    console.log(JSON.stringify({
      reportId: report._id,
      weekNumber: report.weekNumber,
      year: report.year,
      quotesCount: report.quotes.length,
      analysis: {
        summary: report.analysis.summary,
        dominantThemes: report.analysis.dominantThemes,
        emotionalTone: report.analysis.emotionalTone
      },
      recommendationsCount: report.recommendations.length,
      promoCode: report.promoCode?.code
    }, null, 2));

    return report;

  } catch (error) {
    logger.error(`üìñ Error testing weekly report generation: ${error.message}`, error);
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<void>}
 */
async function cleanupTestData(userId) {
  try {
    await Quote.deleteMany({ userId });
    await WeeklyReport.deleteMany({ userId });
    await UserProfile.deleteOne({ userId });
    
    logger.info(`üìñ Test data cleaned up for user ${userId}`);
  } catch (error) {
    logger.error(`üìñ Error cleaning up test data: ${error.message}`);
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {Promise<void>}
 */
async function runWeeklyReportTest() {
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/reader-support';
    await mongoose.connect(mongoUri);
    logger.info('üìñ Connected to MongoDB');

    const testUserId = 'test_weekly_report_user';

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await cleanupTestData(testUserId);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await createTestUser(testUserId);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ü–∏—Ç–∞—Ç—ã
    const testQuotes = await createTestQuotes(testUserId);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    testUser.statistics.totalQuotes = testQuotes.length;
    testUser.statistics.currentStreak = 3;
    testUser.statistics.longestStreak = 5;
    testUser.statistics.favoriteAuthors = ['–ú–∞—Ä–∏–Ω–∞ –¶–≤–µ—Ç–∞–µ–≤–∞', '–≠—Ä–∏—Ö –§—Ä–æ–º–º', '–ë—É–¥–¥–∞'];
    await testUser.save();

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞
    const report = await testWeeklyReportGeneration(testUserId);

    if (report) {
      logger.info('üìñ Weekly report test completed successfully!');
      logger.info('üìñ Report preview:');
      console.log(`
üìä –í–∞—à –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é

–ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –≤—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ ${testQuotes.length} —Ü–∏—Ç–∞—Ç:
${testQuotes.map((q, i) => `‚úÖ "${q.text}" ${q.author ? `(${q.author})` : ''}`).join('\n')}

üéØ –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏:
${report.analysis.insights}

üíé –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ê–Ω–Ω—ã:
${report.recommendations.map((r, i) => `${i + 1}. ${r.title} - ${r.price}\n   ${r.description}`).join('\n')}

${report.promoCode ? `üéÅ –ü—Ä–æ–º–æ–∫–æ–¥ ${report.promoCode.code} - —Å–∫–∏–¥–∫–∞ ${report.promoCode.discount}%!` : ''}
      `);
    }

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await cleanupTestData(testUserId);

  } catch (error) {
    logger.error(`üìñ Weekly report test failed: ${error.message}`, error);
  } finally {
    await mongoose.disconnect();
    logger.info('üìñ Disconnected from MongoDB');
  }
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 */
function parseArgs() {
  const args = process.argv.slice(2);
  
  if (args.includes('--help')) {
    console.log(`
üìñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node telegram/test-weekly-reports.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --help                 –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  --create-test-user     –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
  --cleanup-only         –¢–æ–ª—å–∫–æ –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

–ü—Ä–∏–º–µ—Ä—ã:
  npm run test:reports                    # –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
  npm run test:reports:create-user        # –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  npm run test:reports:help               # –°–ø—Ä–∞–≤–∫–∞
    `);
    process.exit(0);
  }

  return {
    createTestUserOnly: args.includes('--create-test-user'),
    cleanupOnly: args.includes('--cleanup-only')
  };
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  const options = parseArgs();
  
  if (options.createTestUserOnly) {
    logger.info('üìñ Creating test user only...');
    mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/reader-support')
      .then(() => createTestUser('test_weekly_report_user'))
      .then(() => createTestQuotes('test_weekly_report_user'))
      .then(() => logger.info('üìñ Test user and quotes created successfully'))
      .catch(error => logger.error('üìñ Error creating test user:', error))
      .finally(() => mongoose.disconnect());
  } else if (options.cleanupOnly) {
    logger.info('üìñ Cleaning up test data only...');
    mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/reader-support')
      .then(() => cleanupTestData('test_weekly_report_user'))
      .then(() => logger.info('üìñ Test data cleaned up successfully'))
      .catch(error => logger.error('üìñ Error cleaning up test data:', error))
      .finally(() => mongoose.disconnect());
  } else {
    runWeeklyReportTest();
  }
}

module.exports = {
  runWeeklyReportTest,
  createTestUser,
  createTestQuotes,
  testWeeklyReportGeneration,
  cleanupTestData
};
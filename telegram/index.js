/**
 * –û—Å–Ω–æ–≤–Ω–æ–π Telegram –±–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Shrooms —Å –≥—Ä–∏–±–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π
 * @file telegram/index.js
 * üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —è–∑—ã–∫–æ–≤–∞—è –ª–æ–≥–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
 */

const { Telegraf, Markup } = require('telegraf');
const logger = require('../server/utils/logger');

// –ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
const claudeService = require('../server/services/claude');
const ticketingService = require('../server/services/ticketing');
const conversationService = require('../server/services/conversation');
const messageService = require('../server/services/message');

/**
 * @typedef {Object} TelegramBotConfig
 * @property {string} token - –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
 * @property {string} [environment] - –û–∫—Ä—É–∂–µ–Ω–∏–µ (development/production)
 * @property {number} [maxMessageLength] - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
 */

/**
 * @typedef {Object} TelegramMessage
 * @property {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @property {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 * @property {string} chatId - ID —á–∞—Ç–∞
 * @property {string} firstName - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @property {string} [lastName] - –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @property {string} [username] - Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

/**
 * @class ShroomsTelegramBot
 * @description Telegram –±–æ—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ Shrooms —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
 */
class ShroomsTelegramBot {
  /**
   * @constructor
   * @param {TelegramBotConfig} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
   */
  constructor(config) {
    this.config = {
      token: config.token,
      environment: config.environment || 'production',
      maxMessageLength: config.maxMessageLength || 4096,
      typingDelay: 1500,
      platform: 'telegram'
    };

    this.bot = new Telegraf(this.config.token);
    this.isInitialized = false;
    
    logger.info('üçÑ ShroomsTelegramBot constructor initialized (simplified version)');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async initialize() {
    try {
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
      this._setupMiddleware();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
      this._setupCommands();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
      this._setupMessageHandlers();
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      this._setupErrorHandling();
      
      this.isInitialized = true;
      logger.info('üçÑ Telegram bot initialized successfully (simplified)');
    } catch (error) {
      logger.error(`üçÑ Failed to initialize Telegram bot: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   * @private
   */
  _setupMiddleware() {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.use(async (ctx, next) => {
      const start = Date.now();
      const userId = ctx.from?.id;
      const messageText = ctx.message?.text?.substring(0, 50) || 'non-text';
      
      logger.info(`üçÑ Telegram message from user ${userId}: "${messageText}..."`);
      
      await next();
      
      const duration = Date.now() - start;
      logger.info(`üçÑ Response sent to user ${userId} in ${duration}ms`);
    });

    // Typing indicator
    this.bot.use(async (ctx, next) => {
      if (ctx.message?.text && !ctx.message.text.startsWith('/')) {
        await ctx.sendChatAction('typing');
        setTimeout(async () => {
          await next();
        }, this.config.typingDelay);
      } else {
        await next();
      }
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
   * @private
   */
  _setupCommands() {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.start(async (ctx) => {
      try {
        const userId = ctx.from.id.toString();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await this._saveUserInfo(ctx);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ Claude
        const response = await claudeService.generateResponse('/start', {
          userId,
          platform: 'telegram',
          useRag: false
        });

        await this._sendResponse(ctx, response.message);
        
        logger.info(`üçÑ /start command handled for user ${userId}`);
      } catch (error) {
        logger.error(`üçÑ Error handling /start command: ${error.message}`);
        await ctx.reply('üçÑ Welcome to Shrooms! How can I help you today?');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.help(async (ctx) => {
      try {
        const userId = ctx.from.id.toString();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–º–æ—â—å —á–µ—Ä–µ–∑ Claude
        const response = await claudeService.generateResponse('/help', {
          userId,
          platform: 'telegram',
          useRag: false
        });

        await this._sendResponse(ctx, response.message);
        
        logger.info(`üçÑ /help command handled for user ${userId}`);
      } catch (error) {
        logger.error(`üçÑ Error handling /help command: ${error.message}`);
        await ctx.reply('üçÑ I can help you with questions about Shrooms! Just ask me anything.');
      }
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   * @private
   */
  _setupMessageHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('text', async (ctx) => {
      try {
        const messageText = ctx.message.text;
        const userId = ctx.from.id.toString();
        const chatId = ctx.chat.id.toString();

        logger.info(`üçÑ Processing message from user ${userId}: "${messageText.substring(0, 30)}..."`);

        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º conversation —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
        let conversationId;
        try {
          const conversation = await conversationService.getOrCreateConversation(userId, {
            platform: 'telegram',
            chatId: chatId,
            userInfo: {
              firstName: ctx.from.first_name,
              lastName: ctx.from.last_name,
              username: ctx.from.username
            }
          });
          conversationId = conversation._id;
        } catch (error) {
          logger.error(`üçÑ Error managing conversation: ${error.message}`);
          conversationId = null;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        const history = conversationId ? 
          await messageService.getRecentMessages(conversationId, 5) : [];

        // üçÑ –£–ü–†–û–©–ï–ù–û: –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Claude –±–µ–∑ —è–∑—ã–∫–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
        logger.info(`üçÑ Generating response for platform: telegram`);
        const response = await claudeService.generateResponse(messageText, {
          userId,
          platform: 'telegram',
          history: history.map(msg => ({
            role: msg.role,
            content: msg.text
          })),
          useRag: true,
          ragLimit: 3
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ messageService
        if (conversationId) {
          try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await messageService.create({
              text: messageText,
              role: 'user',
              userId,
              conversationId,
              metadata: {
                source: 'telegram',
                additional: {
                  telegramChatId: chatId,
                  firstName: ctx.from.first_name,
                  lastName: ctx.from.last_name,
                  username: ctx.from.username
                }
              }
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            await messageService.create({
              text: response.message,
              role: 'assistant',
              userId,
              conversationId,
              metadata: {
                source: 'telegram',
                tokensUsed: response.tokensUsed,
                additional: {
                  provider: response.provider,
                  model: response.model
                }
              }
            });

          } catch (error) {
            logger.error(`üçÑ Error saving messages: ${error.message}`);
          }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await this._sendResponse(ctx, response.message);

        // –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if (response.needsTicket) {
          try {
            const ticketData = {
              userId,
              conversationId,
              message: messageText,
              platform: 'telegram',
              userInfo: {
                telegramId: userId,
                chatId: chatId,
                firstName: ctx.from.first_name,
                lastName: ctx.from.last_name,
                username: ctx.from.username
              },
              context: response.context || []
            };

            const ticket = await ticketingService.createTicket(ticketData);
            
            const ticketMessage = `üé´ *Support Ticket Created*\n\nI've created ticket \`${ticket.ticketId}\` for our mushroom experts team! \n\nOur growers will review your question and get back to you soon.\n\n*Thank you for helping our mycelium grow stronger!* üçÑ`;
            await ctx.replyWithMarkdown(ticketMessage);
            
            logger.info(`üçÑ Ticket ${ticket.ticketId} created for user ${userId}`);
          } catch (error) {
            logger.error(`üçÑ Error creating ticket: ${error.message}`);
          }
        }

      } catch (error) {
        logger.error(`üçÑ Error processing message: ${error.message}`);
        await this._sendErrorMessage(ctx, error);
      }
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   * @private
   */
  _setupErrorHandling() {
    this.bot.catch((err, ctx) => {
      logger.error(`üçÑ Telegram bot error for user ${ctx.from?.id}: ${err.message}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      ctx.reply('üçÑ Oops! Something went wrong. Please try again in a moment.')
        .catch(sendError => {
          logger.error(`üçÑ Failed to send error message: ${sendError.message}`);
        });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    process.on('unhandledRejection', (reason, promise) => {
      logger.error('üçÑ Unhandled Rejection at:', promise, 'reason:', reason);
    });
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   * @private
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
   */
  async _saveUserInfo(ctx) {
    try {
      const userInfo = {
        telegramId: ctx.from.id.toString(),
        firstName: ctx.from.first_name,
        lastName: ctx.from.last_name,
        username: ctx.from.username,
        languageCode: ctx.from.language_code,
        chatId: ctx.chat.id.toString(),
        platform: 'telegram'
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ conversation service
      await conversationService.getOrCreateConversation(userInfo.telegramId, {
        platform: 'telegram',
        userInfo
      });

    } catch (error) {
      logger.error(`üçÑ Error saving user info: ${error.message}`);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   * @private
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async _sendResponse(ctx, message) {
    try {
      // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const chunks = this._splitMessage(message);
      
      for (let i = 0; i < chunks.length; i++) {
        const chunk = chunks[i];
        
        try {
          // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
          await ctx.replyWithMarkdown(chunk);
        } catch (markdownError) {
          // –ï—Å–ª–∏ Markdown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
          logger.warn(`üçÑ Markdown formatting failed, sending as plain text: ${markdownError.message}`);
          await ctx.reply(chunk);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if (i < chunks.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 500));
        }
      }
    } catch (error) {
      logger.error(`üçÑ Error sending response: ${error.message}`);
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      await ctx.reply('üçÑ I encountered an issue sending the response. Please try again.');
    }
  }

  /**
   * –†–∞–∑–±–∏–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
   * @private
   * @param {string} message - –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @returns {string[]} –ú–∞—Å—Å–∏–≤ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  _splitMessage(message) {
    if (message.length <= this.config.maxMessageLength) {
      return [message];
    }

    const chunks = [];
    let currentChunk = '';
    const lines = message.split('\n');

    for (const line of lines) {
      if ((currentChunk + line + '\n').length > this.config.maxMessageLength) {
        if (currentChunk.trim()) {
          chunks.push(currentChunk.trim());
          currentChunk = '';
        }
        
        // –ï—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
        if (line.length > this.config.maxMessageLength) {
          const words = line.split(' ');
          let wordChunk = '';
          
          for (const word of words) {
            if ((wordChunk + word + ' ').length > this.config.maxMessageLength) {
              if (wordChunk.trim()) {
                chunks.push(wordChunk.trim());
                wordChunk = '';
              }
            }
            wordChunk += word + ' ';
          }
          
          if (wordChunk.trim()) {
            currentChunk = wordChunk.trim() + '\n';
          }
        } else {
          currentChunk = line + '\n';
        }
      } else {
        currentChunk += line + '\n';
      }
    }

    if (currentChunk.trim()) {
      chunks.push(currentChunk.trim());
    }

    return chunks;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
   * @private
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
   * @param {Error} error - –û—à–∏–±–∫–∞
   */
  async _sendErrorMessage(ctx, error) {
    const errorMessage = 'üçÑ I\'m experiencing some technical difficulties. Please try again in a moment, or contact our support team if the issue persists.';

    try {
      await ctx.reply(errorMessage);
    } catch (sendError) {
      logger.error(`üçÑ Failed to send error message: ${sendError.message}`);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async start() {
    if (!this.isInitialized) {
      await this.initialize();
    }

    try {
      await this.bot.launch();
      logger.info('üçÑ Telegram bot started successfully');
      
      // Graceful stop
      process.once('SIGINT', () => this.stop('SIGINT'));
      process.once('SIGTERM', () => this.stop('SIGTERM'));
      
    } catch (error) {
      logger.error(`üçÑ Failed to start Telegram bot: ${error.message}`);
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
   * @param {string} [signal] - –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
   * @returns {Promise<void>}
   */
  async stop(signal = 'manual') {
    try {
      logger.info(`üçÑ Stopping Telegram bot (${signal})...`);
      await this.bot.stop(signal);
      logger.info('üçÑ Telegram bot stopped successfully');
    } catch (error) {
      logger.error(`üçÑ Error stopping bot: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async getStats() {
    try {
      const me = await this.bot.telegram.getMe();
      
      return {
        botInfo: {
          id: me.id,
          username: me.username,
          firstName: me.first_name
        },
        config: {
          environment: this.config.environment,
          maxMessageLength: this.config.maxMessageLength,
          platform: this.config.platform
        },
        status: {
          initialized: this.isInitialized,
          uptime: process.uptime()
        },
        languageSupport: 'universal', // üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —è–∑—ã–∫–æ–≤
        systemMessages: 'none' // üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
      };
    } catch (error) {
      logger.error(`üçÑ Error getting bot stats: ${error.message}`);
      return {
        status: 'error',
        error: error.message
      };
    }
  }
}

module.exports = ShroomsTelegramBot;
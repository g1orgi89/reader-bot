/**
 * Main Telegram bot for Reader project - Personal quotes diary with AI analysis
 * @file telegram/index.js
 * üìñ READER BOT: Transformed from Shrooms for Anna Busel's book club
 * üìñ ADDED: Onboarding with 7-question test + email collection + traffic source
 * üìñ ADDED: State management for Reader-specific flows
 * üìñ ADAPTED: From mushroom expert to book psychology expert Anna Busel
 */

const { Telegraf, Markup } = require('telegraf');
const logger = require('../server/utils/logger');

// Import Reader bot services
const claudeService = require('../server/services/claude');
const ticketingService = require('../server/services/ticketing');
const conversationService = require('../server/services/conversation');
const messageService = require('../server/services/message');

// Import Reader bot models
const { UserProfile, Quote } = require('../server/models');

// Import Reader bot handlers and helpers
const { OnboardingHandler } = require('./handlers/onboardingHandler');
const BotHelpers = require('./helpers/botHelpers');

/**
 * @typedef {Object} ReaderTelegramBotConfig
 * @property {string} token - Telegram bot token
 * @property {string} [environment] - Environment (development/production)
 * @property {number} [maxMessageLength] - Maximum message length
 */

/**
 * @class ReaderTelegramBot
 * @description Telegram bot for Reader project - personal quotes diary with AI analysis by Anna Busel
 */
class ReaderTelegramBot {
  /**
   * @constructor
   * @param {ReaderTelegramBotConfig} config - Bot configuration
   */
  constructor(config) {
    this.config = {
      token: config.token,
      environment: config.environment || 'production',
      maxMessageLength: config.maxMessageLength || 4096,
      typingDelay: 1500,
      platform: 'telegram',
      maxQuotesPerDay: 10 // Reader-specific limit
    };

    this.bot = new Telegraf(this.config.token);
    this.isInitialized = false;
    
    // Initialize Reader bot handlers
    this.onboardingHandler = new OnboardingHandler();
    
    logger.info('üìñ ReaderTelegramBot constructor initialized');
  }

  /**
   * Initialize the Reader bot
   * @returns {Promise<void>}
   */
  async initialize() {
    try {
      // Setup middleware
      this._setupMiddleware();
      
      // Setup command handlers
      this._setupCommands();
      
      // Setup message handlers
      this._setupMessageHandlers();
      
      // Setup callback handlers
      this._setupCallbackHandlers();
      
      // Setup error handling
      this._setupErrorHandling();
      
      this.isInitialized = true;
      logger.info('üìñ Reader Telegram bot initialized successfully');
    } catch (error) {
      logger.error(`üìñ Failed to initialize Reader Telegram bot: ${error.message}`);
      throw error;
    }
  }

  /**
   * Setup middleware for logging and typing indicators
   * @private
   */
  _setupMiddleware() {
    // Logging middleware
    this.bot.use(async (ctx, next) => {
      const start = Date.now();
      const userId = ctx.from?.id;
      const messageText = ctx.message?.text?.substring(0, 50) || 'non-text';
      
      logger.info(`üìñ Message from user ${userId}: "${messageText}..."`);
      
      await next();
      
      const duration = Date.now() - start;
      logger.info(`üìñ Response sent to user ${userId} in ${duration}ms`);
    });

    // Typing indicator for text messages
    this.bot.use(async (ctx, next) => {
      if (ctx.message?.text && !ctx.message.text.startsWith('/')) {
        await ctx.sendChatAction('typing');
        setTimeout(async () => {
          await next();
        }, this.config.typingDelay);
      } else {
        await next();
      }
    });
  }

  /**
   * Setup command handlers
   * @private
   */
  _setupCommands() {
    // /start command - Begin onboarding or show welcome for existing users
    this.bot.start(async (ctx) => {
      try {
        const userId = ctx.from.id.toString();
        logger.info(`üìñ Processing /start command for user ${userId}`);
        
        await this.onboardingHandler.handleStart(ctx);
        
      } catch (error) {
        logger.error(`üìñ Error in /start command: ${error.message}`);
        await ctx.reply(`üìñ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–ß–∏—Ç–∞—Ç–µ–ª—å¬ª - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ —Ü–∏—Ç–∞—Ç –æ—Ç –ê–Ω–Ω—ã –ë—É—Å–µ–ª.`);
      }
    });

    // /help command
    this.bot.help(async (ctx) => {
      try {
        const helpText = `üìñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É ¬´–ß–∏—Ç–∞—Ç–µ–ª—å¬ª*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á—Ç–µ–Ω–∏—è
/search - –ø–æ–∏—Å–∫ –ø–æ –≤–∞—à–∏–º —Ü–∏—Ç–∞—Ç–∞–º

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ü–∏—Ç–∞—Ç—ã —Ç–µ–∫—Å—Ç–æ–º
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∞–≤—Ç–æ—Ä–∞ –≤ —Å–∫–æ–±–∫–∞—Ö: (–¢–æ–ª—Å—Ç–æ–π)
‚Ä¢ –õ–∏–º–∏—Ç: ${this.config.maxQuotesPerDay} —Ü–∏—Ç–∞—Ç –≤ –¥–µ–Ω—å

*–û—Ç—á–µ—Ç—ã:* –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 11:00
*–í–æ–ø—Ä–æ—Å—ã:* –ø–∏—à–∏—Ç–µ –ø—Ä—è–º–æ –≤ —á–∞—Ç, —è –ø–µ—Ä–µ–¥–∞–º –ê–Ω–Ω–µ

üí° –•–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ - —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏!`;

        await ctx.replyWithMarkdown(helpText);
        
      } catch (error) {
        logger.error(`üìñ Error in /help command: ${error.message}`);
        await ctx.reply('üìñ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ü–∏—Ç–∞—Ç –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∫–Ω–∏–≥! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ü–∏—Ç–∞—Ç—É.');
      }
    });

    // /stats command - Show user statistics
    this.bot.command('stats', async (ctx) => {
      try {
        await this._handleStatsCommand(ctx);
      } catch (error) {
        logger.error(`üìñ Error in /stats command: ${error.message}`);
        await ctx.reply('üìñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    // /search command - Search user's quotes
    this.bot.command('search', async (ctx) => {
      try {
        await this._handleSearchCommand(ctx);
      } catch (error) {
        logger.error(`üìñ Error in /search command: ${error.message}`);
        await ctx.reply('üìñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ü–∏—Ç–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });
  }

  /**
   * Setup callback query handlers
   * @private
   */
  _setupCallbackHandlers() {
    this.bot.on('callback_query', async (ctx) => {
      try {
        const userId = ctx.from.id.toString();
        const callbackData = ctx.callbackQuery.data;
        
        logger.info(`üìñ Callback query from user ${userId}: ${callbackData}`);

        // Check if it's an onboarding callback
        if (this.onboardingHandler.isInOnboarding(userId) || 
            callbackData === 'start_test' || 
            callbackData.startsWith('test_') || 
            callbackData.startsWith('source_')) {
          
          await this.onboardingHandler.handleCallback(ctx);
          return;
        }

        // Handle other callbacks here (like feedback, recommendations, etc.)
        await BotHelpers.handleOtherCallbacks(ctx, callbackData);

      } catch (error) {
        logger.error(`üìñ Error handling callback query: ${error.message}`);
        await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      }
    });
  }

  /**
   * Setup text message handlers
   * @private
   */
  _setupMessageHandlers() {
    this.bot.on('text', async (ctx) => {
      try {
        const messageText = ctx.message.text;
        const userId = ctx.from.id.toString();

        logger.info(`üìñ Processing text message from user ${userId}: "${messageText.substring(0, 30)}..."`);

        // Check if user is in onboarding process
        if (await this.onboardingHandler.handleTextMessage(ctx)) {
          return; // Message was handled by onboarding
        }

        // Check if user has completed onboarding
        const userProfile = await UserProfile.findOne({ userId });
        if (!userProfile || !userProfile.isOnboardingComplete) {
          await ctx.reply(`üìñ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –í–≤–µ–¥–∏—Ç–µ /start`);
          return;
        }

        // Check if message looks like a quote
        if (await this._isQuoteMessage(messageText)) {
          await this._handleQuoteMessage(ctx, messageText, userProfile);
          return;
        }

        // Check if it's a complex question that needs Anna's attention
        if (await BotHelpers.isComplexQuestion(messageText)) {
          await BotHelpers.handleComplexQuestion(ctx, messageText, userProfile);
          return;
        }

        // Handle as general conversation with Anna Busel's AI
        await BotHelpers.handleGeneralMessage(ctx, messageText, userProfile);

      } catch (error) {
        logger.error(`üìñ Error processing text message: ${error.message}`);
        await this._sendErrorMessage(ctx, error);
      }
    });
  }

  /**
   * Handle stats command
   * @private
   * @param {Object} ctx - Telegram context
   */
  async _handleStatsCommand(ctx) {
    const userId = ctx.from.id.toString();
    
    const userProfile = await UserProfile.findOne({ userId });
    if (!userProfile) {
      await ctx.reply("üìñ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –í–≤–µ–¥–∏—Ç–µ /start");
      return;
    }

    const totalQuotes = await Quote.countDocuments({ userId });
    const todayQuotes = await Quote.countDocuments({
      userId,
      createdAt: { $gte: new Date().setHours(0, 0, 0, 0) }
    });

    const statsText = `üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ ¬´–ß–∏—Ç–∞—Ç–µ–ª–µ¬ª:*

üìñ –¶–∏—Ç–∞—Ç —Å–æ–±—Ä–∞–Ω–æ: ${totalQuotes}
üìÖ –°–µ–≥–æ–¥–Ω—è: ${todayQuotes}/${this.config.maxQuotesPerDay}
üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: ${userProfile.statistics.currentStreak} –¥–Ω–µ–π
‚≠ê –†–µ–∫–æ—Ä–¥ —Å–µ—Ä–∏–∏: ${userProfile.statistics.longestStreak} –¥–Ω–µ–π
üìö –° –±–æ—Ç–æ–º: ${this._getDaysWithBot(userProfile.registeredAt)} –¥–Ω–µ–π

*–õ—é–±–∏–º—ã–µ –∞–≤—Ç–æ—Ä—ã:*
${userProfile.statistics.favoriteAuthors.slice(0, 3).map((author, i) => `${i + 1}. ${author}`).join('\n') || '–ü–æ–∫–∞ –Ω–µ—Ç'}

*–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:* ${userProfile.achievements.length}

üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –º–æ–º–µ–Ω—Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è!`;

    await ctx.replyWithMarkdown(statsText);
  }

  /**
   * Handle search command
   * @private
   * @param {Object} ctx - Telegram context
   */
  async _handleSearchCommand(ctx) {
    const userId = ctx.from.id.toString();
    
    const quotes = await Quote.find({ userId })
      .sort({ createdAt: -1 })
      .limit(10);
    
    if (quotes.length === 0) {
      await ctx.reply("üìñ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é!");
      return;
    }

    let searchText = "üîç *–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã:*\n\n";
    quotes.forEach((quote, index) => {
      const author = quote.author ? ` (${quote.author})` : '';
      const truncated = quote.text.length > 80 ? quote.text.substring(0, 80) + '...' : quote.text;
      searchText += `${index + 1}. "${truncated}"${author}\n\n`;
    });

    await ctx.replyWithMarkdown(searchText);
  }

  /**
   * Check if message is a quote
   * @private
   * @param {string} message - Message text
   * @returns {Promise<boolean>}
   */
  async _isQuoteMessage(message) {
    // Simple heuristics for quote detection
    const quotePattterns = [
      /^".*"/, // Starts and ends with quotes
      /\([^)]+\)$/, // Ends with author in parentheses
      /^¬´.*¬ª/, // Russian quotes
      /‚Äî\s*[–ê-–ØA-Z]/, // Dash followed by author name
    ];

    // Check if message matches quote patterns
    if (quotePattterns.some(pattern => pattern.test(message))) {
      return true;
    }

    // Check message length and content (quotes are usually thoughtful, not questions)
    if (message.length > 20 && message.length < 500 && !message.includes('?')) {
      return true;
    }

    return false;
  }

  /**
   * Handle quote message
   * @private
   * @param {Object} ctx - Telegram context
   * @param {string} messageText - Quote text
   * @param {Object} userProfile - User profile
   */
  async _handleQuoteMessage(ctx, messageText, userProfile) {
    const userId = ctx.from.id.toString();

    // Check daily quote limit
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const todayQuotesCount = await Quote.countDocuments({
      userId,
      createdAt: { $gte: today }
    });

    if (todayQuotesCount >= this.config.maxQuotesPerDay) {
      await ctx.reply(`üìñ –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ ${this.config.maxQuotesPerDay} —Ü–∏—Ç–∞—Ç —Å–µ–≥–æ–¥–Ω—è. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è–º–∏!\n\nüí° –•–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ - —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏!`);
      return;
    }

    // Parse quote (extract author, source)
    const { text, author, source } = this._parseQuote(messageText);
    
    // Save quote to database
    const quote = new Quote({
      userId,
      text,
      author,
      source,
      weekNumber: this._getWeekNumber(),
      monthNumber: new Date().getMonth() + 1,
      yearNumber: new Date().getFullYear()
    });

    await quote.save();

    // Update user statistics
    await BotHelpers.updateUserStatistics(userId, author);

    // Check for achievements
    const achievements = await BotHelpers.checkAchievements(userId);
    if (achievements.length > 0) {
      await BotHelpers.notifyAchievements(ctx, achievements);
    }

    // Generate Anna's response
    const response = await this._generateAnnaResponse(text, author, todayQuotesCount + 1);
    
    await ctx.reply(response);

    logger.info(`üìñ Quote saved for user ${userId}: "${text.substring(0, 30)}..."`);
  }

  /**
   * Parse quote text to extract author and source
   * @private
   * @param {string} messageText - Raw message text
   * @returns {Object} Parsed quote data
   */
  _parseQuote(messageText) {
    const patterns = [
      /^"([^"]+)"\s*\(([^)]+)\)$/, // "Quote" (Author)
      /^([^(]+)\s*\(([^)]+)\)$/, // Quote (Author)  
      /^([^‚Äî]+)\s*‚Äî\s*(.+)$/, // Quote ‚Äî Author
      /^¬´([^¬ª]+)¬ª\s*\(([^)]+)\)$/, // ¬´Quote¬ª (Author)
      /^(.+)$/ // Just text
    ];

    for (const pattern of patterns) {
      const match = messageText.trim().match(pattern);
      if (match) {
        if (match[2]) {
          return {
            text: match[1].trim(),
            author: match[2].trim(),
            source: null
          };
        } else {
          return {
            text: match[1].trim(),
            author: null,
            source: null
          };
        }
      }
    }

    return { text: messageText.trim(), author: null, source: null };
  }

  /**
   * Generate Anna Busel's response to a quote
   * @private
   * @param {string} text - Quote text
   * @param {string|null} author - Quote author
   * @param {number} todayCount - Number of quotes today
   * @returns {string}
   */
  async _generateAnnaResponse(text, author, todayCount) {
    const templates = [
      `‚ú® –ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞! ${author ? `${author} —É–º–µ–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –≥–ª—É–±–∏–Ω—É –≤ –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª–æ–≤–∞—Ö.` : '–ú—É–¥—Ä—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è.'}`,
      `üìñ –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä! –≠—Ç–∞ –º—ã—Å–ª—å –¥–æ—Å—Ç–æ–π–Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è.`,
      `üí≠ –û—á–µ–Ω—å –≥–ª—É–±–æ–∫–æ! ${author ? `${author} - –æ–¥–∏–Ω –∏–∑ –º–æ–∏—Ö –ª—é–±–∏–º—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤.` : '–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –º—ã—Å–ª—å!'}`,
      `üåü –°–æ—Ö—Ä–∞–Ω–∏–ª–∞ –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫. ${author ? `${author} –≤—Å–µ–≥–¥–∞ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç.` : '–û—Ç–ª–∏—á–Ω–∞—è –º—ã—Å–ª—å!'}`
    ];

    const baseResponse = templates[Math.floor(Math.random() * templates.length)];
    
    let fullResponse = `${baseResponse}\n\n–°–æ—Ö—Ä–∞–Ω–∏–ª –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ üìñ\n–¶–∏—Ç–∞—Ç —Å–µ–≥–æ–¥–Ω—è: ${todayCount}/${this.config.maxQuotesPerDay}`;

    // Add encouragement or book recommendation sometimes
    if (Math.random() < 0.3) {
      if (todayCount >= 3) {
        fullResponse += `\n\nüí° –í—ã —Å–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ –≤–¥—É–º—á–∏–≤—ã! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –º–æ–º–µ–Ω—Ç—ã –º—É–¥—Ä–æ—Å—Ç–∏.`;
      } else if (author && ['–¢–æ–ª—Å—Ç–æ–π', '–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π', '–ü—É—à–∫–∏–Ω', '–ß–µ—Ö–æ–≤'].includes(author)) {
        fullResponse += `\n\nüìö –ö—Å—Ç–∞—Ç–∏, —É –ê–Ω–Ω—ã –µ—Å—Ç—å —Ä–∞–∑–±–æ—Ä—ã –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å.`;
      }
    }

    return fullResponse;
  }

  /**
   * Helper methods
   */
  _getWeekNumber() {
    const now = new Date();
    const start = new Date(now.getFullYear(), 0, 1);
    const diff = now - start;
    const oneWeek = 1000 * 60 * 60 * 24 * 7;
    return Math.floor(diff / oneWeek) + 1;
  }

  _getDaysWithBot(registrationDate) {
    const now = new Date();
    const diff = now - registrationDate;
    return Math.floor(diff / (1000 * 60 * 60 * 24));
  }

  _setupErrorHandling() {
    this.bot.catch((err, ctx) => {
      logger.error(`üìñ Telegram bot error: ${err.message}`);
      ctx.reply('üìñ –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        .catch(sendError => {
          logger.error(`üìñ Failed to send error message: ${sendError.message}`);
        });
    });
  }

  async _sendErrorMessage(ctx, error) {
    try {
      await ctx.reply('üìñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.');
    } catch (sendError) {
      logger.error(`üìñ Failed to send error message: ${sendError.message}`);
    }
  }

  /**
   * Start the bot
   * @returns {Promise<void>}
   */
  async start() {
    if (!this.isInitialized) {
      await this.initialize();
    }

    try {
      await this.bot.launch();
      logger.info('üìñ Reader Telegram bot started successfully');
      
      // Graceful stop
      process.once('SIGINT', () => this.stop('SIGINT'));
      process.once('SIGTERM', () => this.stop('SIGTERM'));
      
    } catch (error) {
      logger.error(`üìñ Failed to start Reader Telegram bot: ${error.message}`);
      throw error;
    }
  }

  /**
   * Stop the bot
   * @param {string} [signal] - Stop signal
   * @returns {Promise<void>}
   */
  async stop(signal = 'manual') {
    try {
      logger.info(`üìñ Stopping Reader Telegram bot (${signal})...`);
      await this.bot.stop(signal);
      logger.info('üìñ Reader Telegram bot stopped successfully');
    } catch (error) {
      logger.error(`üìñ Error stopping bot: ${error.message}`);
    }
  }

  /**
   * Get bot statistics
   * @returns {Promise<Object>}
   */
  async getStats() {
    try {
      const me = await this.bot.telegram.getMe();
      
      // Reader bot specific stats
      const totalUsers = await UserProfile.countDocuments({ isOnboardingComplete: true });
      const totalQuotes = await Quote.countDocuments();
      const onboardingUsers = this.onboardingHandler.userStates.size;
      
      return {
        botInfo: {
          id: me.id,
          username: me.username,
          firstName: me.first_name
        },
        config: {
          environment: this.config.environment,
          maxMessageLength: this.config.maxMessageLength,
          platform: this.config.platform,
          maxQuotesPerDay: this.config.maxQuotesPerDay
        },
        status: {
          initialized: this.isInitialized,
          uptime: process.uptime()
        },
        readerStats: {
          totalUsers,
          totalQuotes,
          onboardingUsers,
          averageQuotesPerUser: totalUsers > 0 ? Math.round(totalQuotes / totalUsers * 10) / 10 : 0
        },
        features: {
          onboardingFlow: true,
          quoteCollection: true,
          achievementSystem: true,
          complexQuestionHandling: true,
          annaPersona: true
        }
      };
    } catch (error) {
      logger.error(`üìñ Error getting bot stats: ${error.message}`);
      return {
        status: 'error',
        error: error.message
      };
    }
  }
}

module.exports = ReaderTelegramBot;
/**
 * –û—Å–Ω–æ–≤–Ω–æ–π Telegram –±–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Shrooms —Å –≥—Ä–∏–±–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π
 * @file telegram/index.js
 * üçÑ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –∏ –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
 */

const { Telegraf, Markup } = require('telegraf');
const logger = require('../server/utils/logger');

// –ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
const claudeService = require('../server/services/claude');
const knowledgeService = require('../server/services/knowledge');
const ticketingService = require('../server/services/ticketing');
const conversationService = require('../server/services/conversation');
const simpleLanguageService = require('../server/services/simpleLanguage');

/**
 * @typedef {Object} TelegramBotConfig
 * @property {string} token - –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
 * @property {string} [environment] - –û–∫—Ä—É–∂–µ–Ω–∏–µ (development/production)
 * @property {number} [maxMessageLength] - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
 */

/**
 * @typedef {Object} TelegramMessage
 * @property {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @property {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 * @property {string} chatId - ID —á–∞—Ç–∞
 * @property {string} firstName - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @property {string} [lastName] - –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @property {string} [username] - Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

/**
 * @class ShroomsTelegramBot
 * @description Telegram –±–æ—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ Shrooms —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
 */
class ShroomsTelegramBot {
  /**
   * @constructor
   * @param {TelegramBotConfig} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
   */
  constructor(config) {
    this.config = {
      token: config.token,
      environment: config.environment || 'production',
      maxMessageLength: config.maxMessageLength || 4096,
      typingDelay: 1500,
      platform: 'telegram'
    };

    this.bot = new Telegraf(this.config.token);
    this.isInitialized = false;
    
    // –ö–µ—à –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.systemMessages = new Map();
    
    logger.info('üçÑ ShroomsTelegramBot constructor initialized');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
   * @returns {Promise<void>}
   */
  async initialize() {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
      await this._loadSystemMessages();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
      this._setupMiddleware();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
      this._setupCommands();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
      this._setupMessageHandlers();
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      this._setupErrorHandling();
      
      this.isInitialized = true;
      logger.info('üçÑ Telegram bot initialized successfully');
    } catch (error) {
      logger.error(`üçÑ Failed to initialize Telegram bot: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
   * @private
   * @returns {Promise<void>}
   */
  async _loadSystemMessages() {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
      const languages = ['en', 'es', 'ru'];
      
      for (const lang of languages) {
        try {
          // üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
          const welcomeDoc = await knowledgeService.searchDocuments('telegram welcome', {
            tags: ['telegram', 'welcome', lang],
            limit: 1,
            language: lang
          });

          const helpDoc = await knowledgeService.searchDocuments('telegram help', {
            tags: ['telegram', 'help', lang],
            limit: 1,
            language: lang
          });

          this.systemMessages.set(`welcome_${lang}`, welcomeDoc.length > 0 
            ? welcomeDoc[0].content 
            : this._getDefaultWelcomeMessage(lang)
          );

          this.systemMessages.set(`help_${lang}`, helpDoc.length > 0 
            ? helpDoc[0].content 
            : this._getDefaultHelpMessage(lang)
          );

        } catch (error) {
          logger.warn(`üçÑ Could not load system messages for ${lang}, using defaults: ${error.message}`);
          this.systemMessages.set(`welcome_${lang}`, this._getDefaultWelcomeMessage(lang));
          this.systemMessages.set(`help_${lang}`, this._getDefaultHelpMessage(lang));
        }
      }

      logger.info(`üçÑ Loaded system messages for ${languages.length} languages`);
    } catch (error) {
      logger.error(`üçÑ Error loading system messages: ${error.message}`);
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      this._loadDefaultSystemMessages();
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   * @private
   */
  _loadDefaultSystemMessages() {
    const languages = ['en', 'es', 'ru'];
    languages.forEach(lang => {
      this.systemMessages.set(`welcome_${lang}`, this._getDefaultWelcomeMessage(lang));
      this.systemMessages.set(`help_${lang}`, this._getDefaultHelpMessage(lang));
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @private
   * @param {string} language - –Ø–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {string} –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  _getDefaultWelcomeMessage(language) {
    const messages = {
      en: `üçÑ *Welcome to the Shrooms ecosystem!*

I'm your friendly AI mushroom guide, here to help you navigate our Web3 platform! 

*What I can help you with:*
‚Ä¢ Wallet connection issues
‚Ä¢ Token information (SHROOMS)
‚Ä¢ Farming and staking questions  
‚Ä¢ Technical support
‚Ä¢ General project information

Type your question or use /help to see available commands.

*Let's grow together in the digital mycelium!* üå±`,

      ru: `üçÑ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º—É Shrooms!*

–Ø –≤–∞—à –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ò–ò-–≥—Ä–∏–± –ø—Ä–æ–≤–æ–¥–Ω–∏–∫, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –≤–∞–º –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –Ω–∞—à–µ–π Web3 –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ!

*–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å:*
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫–æ—à–µ–ª—å–∫–∞
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ SHROOMS
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –ø–æ —Ñ–∞—Ä–º–∏–Ω–≥—É –∏ —Å—Ç–µ–π–∫–∏–Ω–≥—É
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ

–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.

*–î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–∏ –≤–º–µ—Å—Ç–µ –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–º –º–∏—Ü–µ–ª–∏–∏!* üå±`,

      es: `üçÑ *¬°Bienvenido al ecosistema Shrooms!*

¬°Soy tu gu√≠a amigable de hongos AI, aqu√≠ para ayudarte a navegar nuestra plataforma Web3!

*En qu√© puedo ayudarte:*
‚Ä¢ Problemas de conexi√≥n de billetera
‚Ä¢ Informaci√≥n de tokens (SHROOMS)
‚Ä¢ Preguntas sobre farming y staking
‚Ä¢ Soporte t√©cnico
‚Ä¢ Informaci√≥n general del proyecto

Escribe tu pregunta o usa /help para ver los comandos disponibles.

*¬°Crezcamos juntos en el micelio digital!* üå±`
    };

    return messages[language] || messages.en;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏
   * @private
   * @param {string} language - –Ø–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {string} –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏
   */
  _getDefaultHelpMessage(language) {
    const messages = {
      en: `üçÑ *Shrooms Support Bot - Help*

*Available Commands:*
/start - Welcome message and introduction
/help - Show this help message

*How to get help:*
Just type your question in natural language! I understand:
‚Ä¢ English, Spanish, and Russian
‚Ä¢ Questions about wallets, tokens, farming
‚Ä¢ Technical issues and troubleshooting

*Examples:*
"How do I connect my wallet?"
"What is SHROOMS token?"
"My transaction is stuck"

For complex issues, I'll create a support ticket for our team.

*Happy growing!* üå±`,

      ru: `üçÑ *–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Shrooms - –ü–æ–º–æ—â—å*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

*–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å:*
–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ! –Ø –ø–æ–Ω–∏–º–∞—é:
‚Ä¢ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π, –∏—Å–ø–∞–Ω—Å–∫–∏–π –∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫–∏
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –æ –∫–æ—à–µ–ª—å–∫–∞—Ö, —Ç–æ–∫–µ–Ω–∞—Ö, —Ñ–∞—Ä–º–∏–Ω–≥–µ
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏–µ

*–ü—Ä–∏–º–µ—Ä—ã:*
"–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫?"
"–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–æ–∫–µ–Ω SHROOMS?"
"–ú–æ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–∏—Å–ª–∞"

–ü—Ä–∏ —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö —è —Å–æ–∑–¥–∞–º —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã.

*–£–¥–∞—á–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞!* üå±`,

      es: `üçÑ *Bot de Soporte Shrooms - Ayuda*

*Comandos disponibles:*
/start - Mensaje de bienvenida
/help - Mostrar esta ayuda

*C√≥mo obtener ayuda:*
¬°Solo escribe tu pregunta en lenguaje natural! Entiendo:
‚Ä¢ Ingl√©s, espa√±ol y ruso
‚Ä¢ Preguntas sobre billeteras, tokens, farming
‚Ä¢ Problemas t√©cnicos y soluciones

*Ejemplos:*
"¬øC√≥mo conecto mi billetera?"
"¬øQu√© es el token SHROOMS?"
"Mi transacci√≥n est√° atascada"

Para problemas complejos, crear√© un ticket de soporte para nuestro equipo.

*¬°Feliz crecimiento!* üå±`
    };

    return messages[language] || messages.en;
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   * @private
   */
  _setupMiddleware() {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.use(async (ctx, next) => {
      const start = Date.now();
      const userId = ctx.from?.id;
      const messageText = ctx.message?.text?.substring(0, 50) || 'non-text';
      
      logger.info(`üçÑ Telegram message from user ${userId}: "${messageText}..."`);
      
      await next();
      
      const duration = Date.now() - start;
      logger.info(`üçÑ Response sent to user ${userId} in ${duration}ms`);
    });

    // Typing indicator
    this.bot.use(async (ctx, next) => {
      if (ctx.message?.text && !ctx.message.text.startsWith('/')) {
        await ctx.sendChatAction('typing');
        setTimeout(async () => {
          await next();
        }, this.config.typingDelay);
      } else {
        await next();
      }
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
   * @private
   */
  _setupCommands() {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.start(async (ctx) => {
      try {
        const language = await this._detectLanguage(ctx);
        const welcomeMessage = this.systemMessages.get(`welcome_${language}`) || 
                              this.systemMessages.get('welcome_en');

        await ctx.replyWithMarkdown(welcomeMessage);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await this._saveUserInfo(ctx);
        
        logger.info(`üçÑ /start command handled for user ${ctx.from.id} (${language})`);
      } catch (error) {
        logger.error(`üçÑ Error handling /start command: ${error.message}`);
        await ctx.reply('üçÑ Welcome to Shrooms! How can I help you today?');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.help(async (ctx) => {
      try {
        const language = await this._detectLanguage(ctx);
        const helpMessage = this.systemMessages.get(`help_${language}`) || 
                           this.systemMessages.get('help_en');

        await ctx.replyWithMarkdown(helpMessage);
        
        logger.info(`üçÑ /help command handled for user ${ctx.from.id} (${language})`);
      } catch (error) {
        logger.error(`üçÑ Error handling /help command: ${error.message}`);
        await ctx.reply('üçÑ I can help you with questions about Shrooms! Just ask me anything.');
      }
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   * @private
   */
  _setupMessageHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('text', async (ctx) => {
      try {
        const messageText = ctx.message.text;
        const userId = ctx.from.id.toString();
        const chatId = ctx.chat.id.toString();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        const language = await this._detectLanguage(ctx, messageText);
        
        logger.info(`üçÑ Processing message from user ${userId} (${language}): "${messageText.substring(0, 30)}..."`);

        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º conversation —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
        let conversationId;
        try {
          const conversation = await conversationService.getOrCreateConversation(userId, {
            platform: 'telegram',
            chatId: chatId,
            userInfo: {
              firstName: ctx.from.first_name,
              lastName: ctx.from.last_name,
              username: ctx.from.username
            }
          });
          conversationId = conversation._id;
        } catch (error) {
          logger.error(`üçÑ Error managing conversation: ${error.message}`);
          conversationId = null;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        const history = conversationId ? 
          await conversationService.getRecentMessages(conversationId, 5) : [];

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Claude —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        const response = await claudeService.generateResponse(messageText, {
          language,
          userId,
          platform: 'telegram',
          history: history.map(msg => ({
            role: msg.role,
            content: msg.content
          })),
          useRag: true,
          ragLimit: 3
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if (conversationId) {
          try {
            await conversationService.addMessage(conversationId, {
              role: 'user',
              content: messageText,
              platform: 'telegram'
            });

            await conversationService.addMessage(conversationId, {
              role: 'assistant',
              content: response.message,
              platform: 'telegram',
              metadata: {
                tokensUsed: response.tokensUsed,
                provider: response.provider,
                model: response.model
              }
            });
          } catch (error) {
            logger.error(`üçÑ Error saving messages: ${error.message}`);
          }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await this._sendResponse(ctx, response.message);

        // –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if (response.needsTicket) {
          try {
            const ticketData = {
              userId,
              conversationId,
              message: messageText,
              platform: 'telegram',
              userInfo: {
                telegramId: userId,
                chatId: chatId,
                firstName: ctx.from.first_name,
                lastName: ctx.from.last_name,
                username: ctx.from.username
              },
              context: response.context || [],
              language
            };

            const ticket = await ticketingService.createTicket(ticketData);
            
            const ticketMessage = await this._getTicketCreatedMessage(language, ticket.ticketId);
            await ctx.replyWithMarkdown(ticketMessage);
            
            logger.info(`üçÑ Ticket ${ticket.ticketId} created for user ${userId}`);
          } catch (error) {
            logger.error(`üçÑ Error creating ticket: ${error.message}`);
          }
        }

      } catch (error) {
        logger.error(`üçÑ Error processing message: ${error.message}`);
        await this._sendErrorMessage(ctx, error);
      }
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   * @private
   */
  _setupErrorHandling() {
    this.bot.catch((err, ctx) => {
      logger.error(`üçÑ Telegram bot error for user ${ctx.from?.id}: ${err.message}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      ctx.reply('üçÑ Oops! Something went wrong. Please try again in a moment.')
        .catch(sendError => {
          logger.error(`üçÑ Failed to send error message: ${sendError.message}`);
        });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    process.on('unhandledRejection', (reason, promise) => {
      logger.error('üçÑ Unhandled Rejection at:', promise, 'reason:', reason);
    });
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @private
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
   * @param {string} [text] - –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   * @returns {Promise<string>} –ö–æ–¥ —è–∑—ã–∫–∞
   */
  async _detectLanguage(ctx, text = null) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
      if (text) {
        const detectedLang = simpleLanguageService.detectLanguage(text, {
          browserLanguage: ctx.from?.language_code
        });
        if (detectedLang && ['en', 'es', 'ru'].includes(detectedLang)) {
          return detectedLang;
        }
      }

      // –ó–∞—Ç–µ–º –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const telegramLang = ctx.from?.language_code;
      if (telegramLang) {
        if (telegramLang.startsWith('ru')) return 'ru';
        if (telegramLang.startsWith('es')) return 'es';
        if (telegramLang.startsWith('en')) return 'en';
      }

      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
      return 'en';
    } catch (error) {
      logger.warn(`üçÑ Language detection failed: ${error.message}`);
      return 'en';
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   * @private
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
   */
  async _saveUserInfo(ctx) {
    try {
      const userInfo = {
        telegramId: ctx.from.id.toString(),
        firstName: ctx.from.first_name,
        lastName: ctx.from.last_name,
        username: ctx.from.username,
        languageCode: ctx.from.language_code,
        chatId: ctx.chat.id.toString(),
        platform: 'telegram'
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ conversation service
      await conversationService.getOrCreateConversation(userInfo.telegramId, {
        platform: 'telegram',
        userInfo
      });

    } catch (error) {
      logger.error(`üçÑ Error saving user info: ${error.message}`);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   * @private
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async _sendResponse(ctx, message) {
    try {
      // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const chunks = this._splitMessage(message);
      
      for (let i = 0; i < chunks.length; i++) {
        const chunk = chunks[i];
        
        try {
          // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
          await ctx.replyWithMarkdown(chunk);
        } catch (markdownError) {
          // –ï—Å–ª–∏ Markdown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
          logger.warn(`üçÑ Markdown formatting failed, sending as plain text: ${markdownError.message}`);
          await ctx.reply(chunk);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if (i < chunks.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 500));
        }
      }
    } catch (error) {
      logger.error(`üçÑ Error sending response: ${error.message}`);
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      await ctx.reply('üçÑ I encountered an issue sending the response. Please try again.');
    }
  }

  /**
   * –†–∞–∑–±–∏–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
   * @private
   * @param {string} message - –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @returns {string[]} –ú–∞—Å—Å–∏–≤ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  _splitMessage(message) {
    if (message.length <= this.config.maxMessageLength) {
      return [message];
    }

    const chunks = [];
    let currentChunk = '';
    const lines = message.split('\n');

    for (const line of lines) {
      if ((currentChunk + line + '\n').length > this.config.maxMessageLength) {
        if (currentChunk.trim()) {
          chunks.push(currentChunk.trim());
          currentChunk = '';
        }
        
        // –ï—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
        if (line.length > this.config.maxMessageLength) {
          const words = line.split(' ');
          let wordChunk = '';
          
          for (const word of words) {
            if ((wordChunk + word + ' ').length > this.config.maxMessageLength) {
              if (wordChunk.trim()) {
                chunks.push(wordChunk.trim());
                wordChunk = '';
              }
            }
            wordChunk += word + ' ';
          }
          
          if (wordChunk.trim()) {
            currentChunk = wordChunk.trim() + '\n';
          }
        } else {
          currentChunk = line + '\n';
        }
      } else {
        currentChunk += line + '\n';
      }
    }

    if (currentChunk.trim()) {
      chunks.push(currentChunk.trim());
    }

    return chunks;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞
   * @private
   * @param {string} language - –Ø–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {string} ticketId - ID —Ç–∏–∫–µ—Ç–∞
   * @returns {Promise<string>} –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∏–∫–µ—Ç–µ
   */
  async _getTicketCreatedMessage(language, ticketId) {
    const messages = {
      en: `üé´ *Support Ticket Created*

I've created ticket \`${ticketId}\` for our mushroom experts team! 

Our growers will review your question and get back to you soon. You can reference this ticket ID if you need to follow up.

*Thank you for helping our mycelium grow stronger!* üçÑ`,

      ru: `üé´ *–¢–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ–∑–¥–∞–Ω*

–Ø —Å–æ–∑–¥–∞–ª —Ç–∏–∫–µ—Ç \`${ticketId}\` –¥–ª—è –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –≥—Ä–∏–±–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤!

–ù–∞—à–∏ —Å–∞–¥–æ–≤–Ω–∏–∫–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è. –í—ã –º–æ–∂–µ—Ç–µ —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç ID —Ç–∏–∫–µ—Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

*–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –Ω–∞—à–µ–≥–æ –º–∏—Ü–µ–ª–∏—è!* üçÑ`,

      es: `üé´ *Ticket de Soporte Creado*

¬°He creado el ticket \`${ticketId}\` para nuestro equipo de expertos en hongos!

Nuestros cultivadores revisar√°n tu pregunta y te responder√°n pronto. Puedes referenciar este ID de ticket si necesitas hacer seguimiento.

*¬°Gracias por ayudar a que nuestro micelio crezca m√°s fuerte!* üçÑ`
    };

    return messages[language] || messages.en;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
   * @private
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
   * @param {Error} error - –û—à–∏–±–∫–∞
   */
  async _sendErrorMessage(ctx, error) {
    const language = await this._detectLanguage(ctx);
    
    const errorMessages = {
      en: 'üçÑ I\'m experiencing some technical difficulties. Please try again in a moment, or contact our support team if the issue persists.',
      ru: 'üçÑ –£ –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –∏—Å—á–µ–∑–∞–µ—Ç.',
      es: 'üçÑ Estoy experimentando algunas dificultades t√©cnicas. Por favor, int√©ntalo de nuevo en un momento, o contacta a nuestro equipo de soporte si persiste el problema.'
    };

    try {
      await ctx.reply(errorMessages[language] || errorMessages.en);
    } catch (sendError) {
      logger.error(`üçÑ Failed to send error message: ${sendError.message}`);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async start() {
    if (!this.isInitialized) {
      await this.initialize();
    }

    try {
      await this.bot.launch();
      logger.info('üçÑ Telegram bot started successfully');
      
      // Graceful stop
      process.once('SIGINT', () => this.stop('SIGINT'));
      process.once('SIGTERM', () => this.stop('SIGTERM'));
      
    } catch (error) {
      logger.error(`üçÑ Failed to start Telegram bot: ${error.message}`);
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
   * @param {string} [signal] - –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
   * @returns {Promise<void>}
   */
  async stop(signal = 'manual') {
    try {
      logger.info(`üçÑ Stopping Telegram bot (${signal})...`);
      await this.bot.stop(signal);
      logger.info('üçÑ Telegram bot stopped successfully');
    } catch (error) {
      logger.error(`üçÑ Error stopping bot: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async getStats() {
    try {
      const me = await this.bot.telegram.getMe();
      
      return {
        botInfo: {
          id: me.id,
          username: me.username,
          firstName: me.first_name
        },
        systemMessages: {
          loaded: this.systemMessages.size,
          languages: Array.from(this.systemMessages.keys()).map(key => key.split('_')[1]).filter((v, i, a) => a.indexOf(v) === i)
        },
        config: {
          environment: this.config.environment,
          maxMessageLength: this.config.maxMessageLength,
          platform: this.config.platform
        },
        status: {
          initialized: this.isInitialized,
          uptime: process.uptime()
        }
      };
    } catch (error) {
      logger.error(`üçÑ Error getting bot stats: ${error.message}`);
      return {
        status: 'error',
        error: error.message
      };
    }
  }

  /**
   * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
   * @returns {Promise<void>}
   */
  async reloadSystemMessages() {
    try {
      this.systemMessages.clear();
      await this._loadSystemMessages();
      logger.info('üçÑ System messages reloaded successfully');
    } catch (error) {
      logger.error(`üçÑ Error reloading system messages: ${error.message}`);
      throw error;
    }
  }
}

module.exports = ShroomsTelegramBot;
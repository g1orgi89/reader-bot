/**
 * –û—Å–Ω–æ–≤–Ω–æ–π Telegram –±–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Shrooms —Å –≥—Ä–∏–±–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π
 * @file telegram/index.js
 * üçÑ –î–û–ë–ê–í–õ–ï–ù–û: –°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ email –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤
 * üçÑ –î–û–ë–ê–í–õ–ï–ù–û: State management –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —è–∑—ã–∫–æ–≤–∞—è –ª–æ–≥–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
 * üçÑ DEBUG: –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º
 * üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è shouldCreateTicket –∏ —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ email
 */

const { Telegraf, Markup } = require('telegraf');
const logger = require('../server/utils/logger');

// –ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
const claudeService = require('../server/services/claude');
const ticketingService = require('../server/services/ticketing');
const conversationService = require('../server/services/conversation');
const messageService = require('../server/services/message');
const ticketEmailService = require('../server/services/ticketEmail');

/**
 * @typedef {Object} TelegramBotConfig
 * @property {string} token - –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
 * @property {string} [environment] - –û–∫—Ä—É–∂–µ–Ω–∏–µ (development/production)
 * @property {number} [maxMessageLength] - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
 */

/**
 * @typedef {Object} TelegramMessage
 * @property {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @property {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 * @property {string} chatId - ID —á–∞—Ç–∞
 * @property {string} firstName - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @property {string} [lastName] - –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @property {string} [username] - Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

/**
 * @typedef {Object} UserState
 * @property {string} state - –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @property {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * @property {Date} createdAt - –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */

/**
 * @class ShroomsTelegramBot
 * @description Telegram –±–æ—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ Shrooms —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∏ email workflow
 */
class ShroomsTelegramBot {
  /**
   * @constructor
   * @param {TelegramBotConfig} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
   */
  constructor(config) {
    this.config = {
      token: config.token,
      environment: config.environment || 'production',
      maxMessageLength: config.maxMessageLength || 4096,
      typingDelay: 1500,
      platform: 'telegram',
      emailTimeout: 10 * 60 * 1000 // 10 –º–∏–Ω—É—Ç –¥–ª—è –≤–≤–æ–¥–∞ email
    };

    this.bot = new Telegraf(this.config.token);
    this.isInitialized = false;
    
    // üçÑ –ù–û–í–û–ï: Maps –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    /**
     * –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     * @type {Map<string, UserState>}
     */
    this.userStates = new Map();
    
    /**
     * Pending —Ç–∏–∫–µ—Ç—ã, –æ–∂–∏–¥–∞—é—â–∏–µ email
     * @type {Map<string, Object>}
     */
    this.pendingTickets = new Map();
    
    logger.info('üçÑ ShroomsTelegramBot constructor initialized with email workflow');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(() => {
      this._cleanupExpiredStates();
    }, 5 * 60 * 1000);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async initialize() {
    try {
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
      this._setupMiddleware();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
      this._setupCommands();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
      this._setupMessageHandlers();
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      this._setupErrorHandling();
      
      this.isInitialized = true;
      logger.info('üçÑ Telegram bot initialized successfully with email workflow');
    } catch (error) {
      logger.error(`üçÑ Failed to initialize Telegram bot: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   * @private
   */
  _setupMiddleware() {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.use(async (ctx, next) => {
      const start = Date.now();
      const userId = ctx.from?.id;
      const messageText = ctx.message?.text?.substring(0, 50) || 'non-text';
      
      logger.info(`üçÑ Telegram message from user ${userId}: "${messageText}..."`);
      
      await next();
      
      const duration = Date.now() - start;
      logger.info(`üçÑ Response sent to user ${userId} in ${duration}ms`);
    });

    // Typing indicator
    this.bot.use(async (ctx, next) => {
      if (ctx.message?.text && !ctx.message.text.startsWith('/')) {
        await ctx.sendChatAction('typing');
        setTimeout(async () => {
          await next();
        }, this.config.typingDelay);
      } else {
        await next();
      }
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
   * @private
   */
  _setupCommands() {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.start(async (ctx) => {
      try {
        const userId = ctx.from.id.toString();
        
        logger.info(`üçÑ DEBUG: Processing /start command for user ${userId}`);
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        this._clearUserState(userId);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await this._saveUserInfo(ctx);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ Claude
        logger.info(`üçÑ DEBUG: Calling Claude for /start command`);
        const response = await claudeService.generateResponse('/start', {
          userId,
          platform: 'telegram',
          useRag: false
        });

        logger.info(`üçÑ DEBUG: Claude response received: "${response.message.substring(0, 50)}..."`);
        await this._sendResponse(ctx, response.message);
        
        logger.info(`üçÑ /start command handled for user ${userId}`);
      } catch (error) {
        logger.error(`üçÑ ERROR in /start command: ${error.message}`);
        logger.error(`üçÑ ERROR stack: ${error.stack}`);
        await ctx.reply('üçÑ Welcome to Shrooms! How can I help you today?');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.help(async (ctx) => {
      try {
        const userId = ctx.from.id.toString();
        
        logger.info(`üçÑ DEBUG: Processing /help command for user ${userId}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–º–æ—â—å —á–µ—Ä–µ–∑ Claude
        const response = await claudeService.generateResponse('/help', {
          userId,
          platform: 'telegram',
          useRag: false
        });

        logger.info(`üçÑ DEBUG: Claude /help response: "${response.message.substring(0, 50)}..."`);
        await this._sendResponse(ctx, response.message);
        
        logger.info(`üçÑ /help command handled for user ${userId}`);
      } catch (error) {
        logger.error(`üçÑ ERROR in /help command: ${error.message}`);
        logger.error(`üçÑ ERROR stack: ${error.stack}`);
        await ctx.reply('üçÑ I can help you with questions about Shrooms! Just ask me anything.');
      }
    });

    // üçÑ –ù–û–í–û–ï: –ö–æ–º–∞–Ω–¥–∞ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–∂–∏–¥–∞–Ω–∏—è email
    this.bot.command('cancel', async (ctx) => {
      try {
        const userId = ctx.from.id.toString();
        
        logger.info(`üçÑ DEBUG: Processing /cancel command for user ${userId}`);
        
        const userState = this.userStates.get(userId);
        if (userState && userState.state === 'awaiting_email') {
          this._clearUserState(userId);
          const pendingTicket = this.pendingTickets.get(userId);
          this.pendingTickets.delete(userId);
          
          if (pendingTicket) {
            logger.info(`üçÑ Cancelled email collection for ticket ${pendingTicket.ticketId}`);
          }
          
          const language = this._detectLanguage(ctx);
          const cancelMessage = this._getCancelMessage(language);
          await ctx.reply(cancelMessage);
        } else {
          await ctx.reply('üçÑ No active email request to cancel.');
        }
        
      } catch (error) {
        logger.error(`üçÑ ERROR in /cancel command: ${error.message}`);
        await ctx.reply('üçÑ Something went wrong with the cancel command.');
      }
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   * @private
   */
  _setupMessageHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('text', async (ctx) => {
      try {
        const messageText = ctx.message.text;
        const userId = ctx.from.id.toString();
        const chatId = ctx.chat.id.toString();

        logger.info(`üçÑ Processing message from user ${userId}: "${messageText.substring(0, 30)}..."`);

        // üçÑ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è email
        const userState = this.userStates.get(userId);
        if (userState && userState.state === 'awaiting_email') {
          await this._handleEmailCollection(ctx, messageText, userId);
          return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º conversation —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
        let conversationId;
        try {
          logger.info(`üçÑ DEBUG: Getting conversation for user ${userId}`);
          const conversation = await conversationService.getOrCreateConversation(userId, {
            platform: 'telegram',
            chatId: chatId,
            userInfo: {
              firstName: ctx.from.first_name,
              lastName: ctx.from.last_name,
              username: ctx.from.username
            }
          });
          conversationId = conversation._id;
          logger.info(`üçÑ DEBUG: Conversation ID: ${conversationId}`);
        } catch (error) {
          logger.error(`üçÑ Error managing conversation: ${error.message}`);
          conversationId = null;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        let history = [];
        try {
          if (conversationId) {
            logger.info(`üçÑ DEBUG: Getting message history for conversation ${conversationId}`);
            history = await messageService.getRecentMessages(conversationId, 5);
            logger.info(`üçÑ DEBUG: Found ${history.length} historical messages`);
          }
        } catch (error) {
          logger.error(`üçÑ Error getting message history: ${error.message}`);
          history = [];
        }

        // üçÑ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const language = this._detectLanguage(ctx);
        const shouldCreateTicket = ticketEmailService.shouldCreateTicket(messageText, language);
        
        logger.info(`üçÑ DEBUG: shouldCreateTicket result: ${shouldCreateTicket} for message: "${messageText.substring(0, 30)}..."`);
        
        if (shouldCreateTicket) {
          await this._initiateTicketCreation(ctx, messageText, userId, conversationId);
          return;
        }

        // üçÑ –£–ü–†–û–©–ï–ù–û: –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Claude –±–µ–∑ —è–∑—ã–∫–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
        logger.info(`üçÑ Generating response for platform: telegram`);
        logger.info(`üçÑ DEBUG: About to call Claude API with message: "${messageText}"`);
        
        let response;
        try {
          response = await claudeService.generateResponse(messageText, {
            userId,
            platform: 'telegram',
            history: history.map(msg => ({
              role: msg.role,
              content: msg.text
            })),
            useRag: true,
            ragLimit: 3
          });
          
          logger.info(`üçÑ DEBUG: Claude API response received successfully`);
          logger.info(`üçÑ DEBUG: Response message: "${response.message.substring(0, 100)}..."`);
          logger.info(`üçÑ DEBUG: Needs ticket: ${response.needsTicket}`);
          logger.info(`üçÑ DEBUG: Tokens used: ${response.tokensUsed}`);
          
        } catch (claudeError) {
          logger.error(`üçÑ CRITICAL: Claude API call failed: ${claudeError.message}`);
          logger.error(`üçÑ CRITICAL: Claude error stack: ${claudeError.stack}`);
          throw claudeError;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ messageService
        if (conversationId) {
          try {
            logger.info(`üçÑ DEBUG: Saving messages to database`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await messageService.create({
              text: messageText,
              role: 'user',
              userId,
              conversationId,
              metadata: {
                source: 'telegram',
                additional: {
                  telegramChatId: chatId,
                  firstName: ctx.from.first_name,
                  lastName: ctx.from.last_name,
                  username: ctx.from.username
                }
              }
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            await messageService.create({
              text: response.message,
              role: 'assistant',
              userId,
              conversationId,
              metadata: {
                source: 'telegram',
                tokensUsed: response.tokensUsed,
                additional: {
                  provider: response.provider,
                  model: response.model
                }
              }
            });

            logger.info(`üçÑ DEBUG: Messages saved to database successfully`);

          } catch (error) {
            logger.error(`üçÑ Error saving messages: ${error.message}`);
          }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        logger.info(`üçÑ DEBUG: About to send response to user`);
        await this._sendResponse(ctx, response.message);
        logger.info(`üçÑ DEBUG: Response sent to user successfully`);

      } catch (error) {
        logger.error(`üçÑ CRITICAL ERROR processing message: ${error.message}`);
        logger.error(`üçÑ CRITICAL ERROR stack: ${error.stack}`);
        await this._sendErrorMessage(ctx, error);
      }
    });
  }

  /**
   * üçÑ –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º email
   * @private
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} conversationId - ID —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   */
  async _initiateTicketCreation(ctx, message, userId, conversationId) {
    try {
      logger.info(`üçÑ DEBUG: Initiating ticket creation for user ${userId}`);
      
      const language = this._detectLanguage(ctx);
      
      // –°–æ–∑–¥–∞–µ–º pending —Ç–∏–∫–µ—Ç
      const ticketResult = await ticketEmailService.createPendingTicket({
        userId,
        conversationId,
        subject: `Telegram Support: ${message.substring(0, 50)}...`,
        initialMessage: message,
        context: JSON.stringify({
          platform: 'telegram',
          userInfo: {
            telegramId: userId,
            firstName: ctx.from.first_name,
            lastName: ctx.from.last_name,
            username: ctx.from.username
          }
        }),
        language: language,
        category: 'technical',
        priority: 'medium'
      });

      if (!ticketResult.success) {
        throw new Error('Failed to create pending ticket');
      }

      logger.info(`üçÑ DEBUG: Ticket creation result:`, ticketResult.ticket);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.userStates.set(userId, {
        state: 'awaiting_email',
        data: {
          ticketId: ticketResult.ticket.ticketId,
          conversationId
        },
        createdAt: new Date()
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º pending —Ç–∏–∫–µ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      this.pendingTickets.set(userId, ticketResult.ticket);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å email
      const emailRequest = ticketResult.message;
      await ctx.replyWithMarkdown(emailRequest);
      
      logger.info(`üçÑ Ticket ${ticketResult.ticket.ticketId} created, awaiting email from user ${userId}`);
      
    } catch (error) {
      logger.error(`üçÑ Error creating ticket: ${error.message}`);
      logger.error(`üçÑ Error stack: ${error.stack}`);
      await ctx.reply('üçÑ Sorry, there was an issue creating your support ticket. Please try again.');
    }
  }

  /**
   * üçÑ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ—Ä–∞ email
   * @private
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
   * @param {string} messageText - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async _handleEmailCollection(ctx, messageText, userId) {
    try {
      logger.info(`üçÑ DEBUG: Handling email collection from user ${userId}: "${messageText}"`);
      
      const email = ticketEmailService.extractEmail(messageText);
      
      if (!email) {
        // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email - –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
        const errorMessage = this._getInvalidEmailMessage(this._detectLanguage(ctx));
        await ctx.reply(errorMessage);
        return;
      }

      logger.info(`üçÑ DEBUG: Valid email received: ${email}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç —Å email
      const language = this._detectLanguage(ctx);
      const emailResult = await ticketEmailService.updateTicketWithEmail(
        userId, 
        email, 
        language
      );

      if (!emailResult.success) {
        throw new Error(emailResult.message || 'Failed to update ticket with email');
      }

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this._clearUserState(userId);
      const ticketData = this.pendingTickets.get(userId);
      this.pendingTickets.delete(userId);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      await ctx.replyWithMarkdown(emailResult.message);
      
      logger.info(`üçÑ SUCCESS: Email ${email} collected for ticket ${emailResult.ticketId || ticketData?.ticketId}`);
      
    } catch (error) {
      logger.error(`üçÑ Error handling email collection: ${error.message}`);
      logger.error(`üçÑ Error stack: ${error.stack}`);
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      this._clearUserState(userId);
      this.pendingTickets.delete(userId);
      await ctx.reply('üçÑ Sorry, there was an issue processing your email. Please try again.');
    }
  }

  /**
   * üçÑ –ù–û–í–û–ï: –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @private
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  _clearUserState(userId) {
    this.userStates.delete(userId);
    this.pendingTickets.delete(userId);
    logger.info(`üçÑ Cleared state for user ${userId}`);
  }

  /**
   * üçÑ –ù–û–í–û–ï: –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
   * @private
   */
  _cleanupExpiredStates() {
    const now = Date.now();
    let cleanedCount = 0;
    
    for (const [userId, state] of this.userStates.entries()) {
      if (state.state === 'awaiting_email') {
        const ticketData = this.pendingTickets.get(userId);
        if (ticketData && (now - state.createdAt.getTime()) > this.config.emailTimeout) {
          this._clearUserState(userId);
          cleanedCount++;
          logger.info(`üçÑ Cleaned up expired email state for user ${userId}`);
        }
      }
    }
    
    if (cleanedCount > 0) {
      logger.info(`üçÑ Cleaned up ${cleanedCount} expired states`);
    }
  }

  /**
   * üçÑ –ù–û–í–û–ï: –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ email –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
   * @private
   * @param {string} language - –Ø–∑—ã–∫
   * @returns {string} –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ email
   */
  _getEmailRequestMessage(language) {
    const messages = {
      'ru': 'üé´ *–¢–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ–∑–¥–∞–Ω!*\n\n–î–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞—à–∏–º–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:\n\n_–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã_',
      'es': 'üé´ *¬°Ticket de soporte creado!*\n\nPara contactar con nuestros expertos, por favor proporciona tu direcci√≥n de email:\n\n_O env√≠a /cancel para cancelar_',
      'en': 'üé´ *Support ticket created!*\n\nTo connect with our experts, please provide your email address:\n\n_Or send /cancel to cancel_'
    };
    return messages[language] || messages['en'];
  }

  /**
   * üçÑ –ù–û–í–û–ï: –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ email
   * @private
   * @param {string} language - –Ø–∑—ã–∫
   * @returns {string} –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  _getInvalidEmailMessage(language) {
    const messages = {
      'ru': '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: user@gmail.com):\n\n_–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã_',
      'es': '‚ùå Por favor, ingresa una direcci√≥n de email v√°lida (ejemplo: user@gmail.com):\n\n_O env√≠a /cancel para cancelar_',
      'en': '‚ùå Please enter a valid email address (example: user@gmail.com):\n\n_Or send /cancel to cancel_'
    };
    return messages[language] || messages['en'];
  }

  /**
   * üçÑ –ù–û–í–û–ï: –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ
   * @private
   * @param {string} language - –Ø–∑—ã–∫
   * @returns {string} –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
   */
  _getCancelMessage(language) {
    const messages = {
      'ru': 'üçÑ –°–±–æ—Ä email –æ—Ç–º–µ–Ω–µ–Ω. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—ã—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ!',
      'es': 'üçÑ Recolecci√≥n de email cancelada. ¬°Puedes continuar la conversaci√≥n normal!',
      'en': 'üçÑ Email collection cancelled. You can continue with normal conversation!'
    };
    return messages[language] || messages['en'];
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @private
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
   * @returns {string} –ö–æ–¥ —è–∑—ã–∫–∞
   */
  _detectLanguage(ctx) {
    const telegramLang = ctx.from?.language_code?.split('-')[0];
    const supportedLanguages = ['en', 'ru', 'es'];
    const detectedLang = supportedLanguages.includes(telegramLang) ? telegramLang : 'en';
    
    logger.info(`üçÑ DEBUG: Detected language: ${detectedLang} (from Telegram: ${telegramLang})`);
    
    return detectedLang;
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   * @private
   */
  _setupErrorHandling() {
    this.bot.catch((err, ctx) => {
      logger.error(`üçÑ Telegram bot error for user ${ctx.from?.id}: ${err.message}`);
      logger.error(`üçÑ Telegram bot error stack: ${err.stack}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      ctx.reply('üçÑ Oops! Something went wrong. Please try again in a moment.')
        .catch(sendError => {
          logger.error(`üçÑ Failed to send error message: ${sendError.message}`);
        });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    process.on('unhandledRejection', (reason, promise) => {
      logger.error('üçÑ Unhandled Rejection at:', promise, 'reason:', reason);
    });
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   * @private
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
   */
  async _saveUserInfo(ctx) {
    try {
      const userInfo = {
        telegramId: ctx.from.id.toString(),
        firstName: ctx.from.first_name,
        lastName: ctx.from.last_name,
        username: ctx.from.username,
        languageCode: ctx.from.language_code,
        chatId: ctx.chat.id.toString(),
        platform: 'telegram'
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ conversation service
      await conversationService.getOrCreateConversation(userInfo.telegramId, {
        platform: 'telegram',
        userInfo
      });

    } catch (error) {
      logger.error(`üçÑ Error saving user info: ${error.message}`);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   * @private
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async _sendResponse(ctx, message) {
    try {
      logger.info(`üçÑ DEBUG: _sendResponse called with message length: ${message.length}`);
      
      // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const chunks = this._splitMessage(message);
      logger.info(`üçÑ DEBUG: Message split into ${chunks.length} chunks`);
      
      for (let i = 0; i < chunks.length; i++) {
        const chunk = chunks[i];
        
        try {
          logger.info(`üçÑ DEBUG: Sending chunk ${i + 1}/${chunks.length}`);
          // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
          await ctx.replyWithMarkdown(chunk);
          logger.info(`üçÑ DEBUG: Chunk ${i + 1} sent successfully with Markdown`);
        } catch (markdownError) {
          // –ï—Å–ª–∏ Markdown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
          logger.warn(`üçÑ Markdown formatting failed, sending as plain text: ${markdownError.message}`);
          await ctx.reply(chunk);
          logger.info(`üçÑ DEBUG: Chunk ${i + 1} sent successfully as plain text`);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if (i < chunks.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 500));
        }
      }
      
      logger.info(`üçÑ DEBUG: All chunks sent successfully`);
    } catch (error) {
      logger.error(`üçÑ Error sending response: ${error.message}`);
      logger.error(`üçÑ Error stack: ${error.stack}`);
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      await ctx.reply('üçÑ I encountered an issue sending the response. Please try again.');
    }
  }

  /**
   * –†–∞–∑–±–∏–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
   * @private
   * @param {string} message - –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @returns {string[]} –ú–∞—Å—Å–∏–≤ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  _splitMessage(message) {
    if (message.length <= this.config.maxMessageLength) {
      return [message];
    }

    const chunks = [];
    let currentChunk = '';
    const lines = message.split('\n');

    for (const line of lines) {
      if ((currentChunk + line + '\n').length > this.config.maxMessageLength) {
        if (currentChunk.trim()) {
          chunks.push(currentChunk.trim());
          currentChunk = '';
        }
        
        // –ï—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
        if (line.length > this.config.maxMessageLength) {
          const words = line.split(' ');
          let wordChunk = '';
          
          for (const word of words) {
            if ((wordChunk + word + ' ').length > this.config.maxMessageLength) {
              if (wordChunk.trim()) {
                chunks.push(wordChunk.trim());
                wordChunk = '';
              }
            }
            wordChunk += word + ' ';
          }
          
          if (wordChunk.trim()) {
            currentChunk = wordChunk.trim() + '\n';
          }
        } else {
          currentChunk = line + '\n';
        }
      } else {
        currentChunk += line + '\n';
      }
    }

    if (currentChunk.trim()) {
      chunks.push(currentChunk.trim());
    }

    return chunks;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
   * @private
   * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
   * @param {Error} error - –û—à–∏–±–∫–∞
   */
  async _sendErrorMessage(ctx, error) {
    const errorMessage = 'üçÑ I\'m experiencing some technical difficulties. Please try again in a moment, or contact our support team if the issue persists.';

    try {
      await ctx.reply(errorMessage);
    } catch (sendError) {
      logger.error(`üçÑ Failed to send error message: ${sendError.message}`);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
   * @returns {Promise<void>}
   */
  async start() {
    if (!this.isInitialized) {
      await this.initialize();
    }

    try {
      await this.bot.launch();
      logger.info('üçÑ Telegram bot started successfully with email workflow');
      
      // Graceful stop
      process.once('SIGINT', () => this.stop('SIGINT'));
      process.once('SIGTERM', () => this.stop('SIGTERM'));
      
    } catch (error) {
      logger.error(`üçÑ Failed to start Telegram bot: ${error.message}`);
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
   * @param {string} [signal] - –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
   * @returns {Promise<void>}
   */
  async stop(signal = 'manual') {
    try {
      logger.info(`üçÑ Stopping Telegram bot (${signal})...`);
      await this.bot.stop(signal);
      logger.info('üçÑ Telegram bot stopped successfully');
    } catch (error) {
      logger.error(`üçÑ Error stopping bot: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async getStats() {
    try {
      const me = await this.bot.telegram.getMe();
      
      // üçÑ –ù–û–í–û–ï: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      let awaitingEmailCount = 0;
      for (const state of this.userStates.values()) {
        if (state.state === 'awaiting_email') {
          awaitingEmailCount++;
        }
      }
      
      return {
        botInfo: {
          id: me.id,
          username: me.username,
          firstName: me.first_name
        },
        config: {
          environment: this.config.environment,
          maxMessageLength: this.config.maxMessageLength,
          platform: this.config.platform,
          emailTimeout: this.config.emailTimeout
        },
        status: {
          initialized: this.isInitialized,
          uptime: process.uptime()
        },
        userStates: {
          total: this.userStates.size,
          awaitingEmail: awaitingEmailCount
        },
        pendingTickets: {
          total: this.pendingTickets.size
        },
        features: {
          emailWorkflow: true,
          stateManagement: true,
          ticketCreation: true
        },
        languageSupport: 'universal',
        systemMessages: 'none'
      };
    } catch (error) {
      logger.error(`üçÑ Error getting bot stats: ${error.message}`);
      return {
        status: 'error',
        error: error.message
      };
    }
  }
}

module.exports = ShroomsTelegramBot;
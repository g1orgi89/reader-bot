/**
 * @fileoverview –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Telegram –±–æ—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @author g1orgi89
 */

const logger = require('../../server/utils/logger');
const { UserProfile, Quote } = require('../../server/models');
const claudeService = require('../../server/services/claude');

/**
 * @typedef {import('../../server/types/reader').UserProfile} UserProfile
 * @typedef {import('../../server/types/reader').Quote} Quote
 * @typedef {import('../../server/types/reader').Achievement} Achievement
 */

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 */
class BotHelpers {
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
   * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {boolean} true –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –ê–Ω–Ω—ã
   */
  static isComplexQuestion(message) {
    const { ComplexQuestionHandler } = require('../handlers/complexQuestionHandler');
    const handler = new ComplexQuestionHandler();
    return handler.isComplexQuestion(message);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–∂–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
   * @param {Object} ctx - Telegram context
   * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {UserProfile} userProfile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<void>}
   */
  static async handleComplexQuestion(ctx, message, userProfile) {
    const { ComplexQuestionHandler } = require('../handlers/complexQuestionHandler');
    const handler = new ComplexQuestionHandler();
    await handler.handleComplexQuestion(ctx, message, userProfile);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ AI –ê–Ω–Ω—ã –ë—É—Å–µ–ª
   * @param {Object} ctx - Telegram context
   * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {UserProfile} userProfile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<void>}
   */
  static async handleGeneralMessage(ctx, message, userProfile) {
    try {
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI –æ—Ç–≤–µ—Ç–∞
      const context = BotHelpers._buildAIContext(userProfile, message);
      
      const prompt = `–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥ –ê–Ω–Ω–∞ –ë—É—Å–µ–ª, –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å "–ö–Ω–∏–∂–Ω–æ–≥–æ –∫–ª—É–±–∞ –æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞". –û—Ç–≤–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–≤–æ–µ–º —Å—Ç–∏–ª–µ:

–ö–û–ù–¢–ï–ö–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
${context}

–°–û–û–ë–©–ï–ù–ò–ï: "${message}"

–°–¢–ò–õ–¨ –û–¢–í–ï–¢–ê:
- –û–±—Ä–∞—â–∞–π—Å—è –Ω–∞ "–í—ã"
- –¢–æ–Ω —Å–¥–µ—Ä–∂–∞–Ω–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π
- –ú–∏–Ω–∏–º—É–º —ç–º–æ–¥–∑–∏
- –°–≤—è–∑—ã–≤–∞–π –æ—Ç–≤–µ—Ç —Å –∫–Ω–∏–≥–∞–º–∏/—á—Ç–µ–Ω–∏–µ–º –∫–æ–≥–¥–∞ —É–º–µ—Å—Ç–Ω–æ
- –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–∏—Ä–º–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã: "–•–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ - —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏!"
- –ú–æ–∂–µ—à—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–∞–∑–±–æ—Ä—ã –∫–Ω–∏–≥ –µ—Å–ª–∏ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ —Ç–µ–º–µ

–î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π, –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç (–º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).`;

      const response = await claudeService.generateResponse(prompt, {
        platform: 'telegram',
        userId: userProfile.userId,
        context: 'general_conversation'
      });

      await ctx.reply(response.message);
      
    } catch (error) {
      logger.error(`üìñ Error in general message handling: ${error.message}`);
      
      // Fallback –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ –ê–Ω–Ω—ã
      const fallbackResponses = [
        "üìñ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ù–∞–¥ —ç—Ç–∏–º —Å—Ç–æ–∏—Ç –ø–æ—Ä–∞–∑–º—ã—à–ª—è—Ç—å.\n\nüí° –•–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ - —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏!",
        "üìñ –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ö–∞–∂–¥–∞—è –º—ã—Å–ª—å –≤–∞–∂–Ω–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–µ–±—è.",
        "üìñ –≠—Ç–æ –≥–ª—É–±–æ–∫–∏–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –≤ —Ö–æ—Ä–æ—à–µ–π –∫–Ω–∏–≥–µ!",
        "üìñ –ü–æ–Ω–∏–º–∞—é –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ —ç—Ç–æ–π —Ç–µ–º–µ. –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ —á–∞—Å—Ç–æ –¥–∞–µ—Ç –ª—É—á—à–∏–µ –æ—Ç–≤–µ—Ç—ã, —á–µ–º –º—ã –æ–∂–∏–¥–∞–µ–º."
      ];
      
      const randomResponse = fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)];
      await ctx.reply(randomResponse);
    }
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI
   * @private
   * @param {UserProfile} userProfile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {string} –ö–æ–Ω—Ç–µ–∫—Å—Ç
   */
  static _buildAIContext(userProfile, message) {
    let context = `–ò–º—è: ${userProfile.name}\n`;
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ —Ç–µ—Å—Ç–∞
    if (userProfile.testResults) {
      context += `–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏: ${userProfile.testResults.question2_lifestyle || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      context += `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: ${userProfile.testResults.question4_priorities || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    context += `–¶–∏—Ç–∞—Ç —Å–æ–±—Ä–∞–Ω–æ: ${userProfile.statistics.totalQuotes}\n`;
    context += `–î–Ω–µ–π —Å –±–æ—Ç–æ–º: ${Math.floor((new Date() - userProfile.registeredAt) / (1000 * 60 * 60 * 24))}\n`;
    
    // –ò–Ω—Ç–µ—Ä–µ—Å—ã (–µ—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã)
    if (userProfile.preferences?.mainThemes) {
      context += `–ò–Ω—Ç–µ—Ä–µ—Å—ã: ${userProfile.preferences.mainThemes.join(', ')}\n`;
    }

    return context;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö callback'–æ–≤
   * @param {Object} ctx - Telegram context
   * @param {string} callbackData - –î–∞–Ω–Ω—ã–µ callback'–∞
   * @returns {Promise<void>}
   */
  static async handleOtherCallbacks(ctx, callbackData) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º callback'–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      const { CommandHandler } = require('../handlers/commandHandler');
      const commandHandler = new CommandHandler();
      
      if (await commandHandler.handleSettingsCallback(ctx, callbackData)) {
        return;
      }

      // Callback'–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–¥–ª—è –±—É–¥—É—â–∏—Ö –æ—Ç—á–µ—Ç–æ–≤)
      if (callbackData.startsWith('feedback_')) {
        await BotHelpers._handleFeedbackCallback(ctx, callbackData);
        return;
      }

      // Callback'–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      if (callbackData.startsWith('achievement_')) {
        await BotHelpers._handleAchievementCallback(ctx, callbackData);
        return;
      }

      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
      await ctx.answerCbQuery("–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.");
      
    } catch (error) {
      logger.error(`üìñ Error handling callback: ${error.message}`);
      await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ feedback callback'–æ–≤
   * @private
   * @param {Object} ctx - Telegram context
   * @param {string} callbackData - –î–∞–Ω–Ω—ã–µ callback'–∞
   */
  static async _handleFeedbackCallback(ctx, callbackData) {
    await ctx.answerCbQuery("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!");
    
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö/–º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
    await ctx.editMessageText(
      "üíå –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞.",
      { reply_markup: { inline_keyboard: [] } }
    );
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ achievement callback'–æ–≤
   * @private
   * @param {Object} ctx - Telegram context
   * @param {string} callbackData - –î–∞–Ω–Ω—ã–µ callback'–∞
   */
  static async _handleAchievementCallback(ctx, callbackData) {
    await ctx.answerCbQuery("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º!");
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
    await ctx.editMessageText(
      "üèÜ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è! –ö–∞–∂–¥–∞—è —Ü–∏—Ç–∞—Ç–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ –Ω–æ–≤—ã–º –æ—Ç–∫—Ä—ã—Ç–∏—è–º.",
      { reply_markup: { inline_keyboard: [] } }
    );
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ QuoteHandler)
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string|null} author - –ê–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã
   * @returns {Promise<void>}
   */
  static async updateUserStatistics(userId, author) {
    const { ModernQuoteHandler } = require('../handlers/modernQuoteHandler');
    const handler = new ModernQuoteHandler();
    await handler.updateUserStatistics(userId, author);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ QuoteHandler)
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Array<Achievement>>} –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   */
  static async checkAchievements(userId) {
    const { ModernQuoteHandler } = require('../handlers/modernQuoteHandler');
    const handler = new ModernQuoteHandler();
    return await handler.checkAchievements(userId);
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ QuoteHandler)
   * @param {Object} ctx - Telegram context
   * @param {Array<Achievement>} achievements - –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   * @returns {Promise<void>}
   */
  static async notifyAchievements(ctx, achievements) {
    const { ModernQuoteHandler } = require('../handlers/modernQuoteHandler');
    const handler = new ModernQuoteHandler();
    await handler.notifyAchievements(ctx, achievements);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç–æ–π
   * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {boolean} true –µ—Å–ª–∏ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ü–∏—Ç–∞—Ç—É
   */
  static isQuoteMessage(message) {
    // –ü—Ä–æ—Å—Ç—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã
    const quotePattterns = [
      /^".*"/,          // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∫–∞–≤—ã—á–∫–∞–º–∏
      /\([^)]+\)$/,     // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –≤ —Å–∫–æ–±–∫–∞—Ö
      /^¬´.*¬ª/,          // –†—É—Å—Å–∫–∏–µ –∫–∞–≤—ã—á–∫–∏
      /‚Äî\s*[–ê-–ØA-Z]/,  // –¢–∏—Ä–µ —Å –∏–º–µ–Ω–µ–º –∞–≤—Ç–æ—Ä–∞
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ü–∏—Ç–∞—Ç
    if (quotePattterns.some(pattern => pattern.test(message))) {
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (—Ü–∏—Ç–∞—Ç—ã –æ–±—ã—á–Ω–æ –≤–¥—É–º—á–∏–≤—ã–µ, –Ω–µ –≤–æ–ø—Ä–æ—Å—ã)
    if (message.length > 20 && message.length < 500 && !message.includes('?')) {
      return true;
    }

    return false;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–∏—Ç–∞—Ç—ã (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞)
   * @param {Object} ctx - Telegram context
   * @param {string} messageText - –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
   * @param {UserProfile} userProfile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<void>}
   */
  static async handleQuote(ctx, messageText, userProfile) {
    const { ModernQuoteHandler } = require('../handlers/modernQuoteHandler');
    const handler = new ModernQuoteHandler();
    await handler.handleQuote(ctx, messageText, userProfile);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ —Ü–∏—Ç–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º
   * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç
   * @returns {string} –°–∫–ª–æ–Ω–µ–Ω–∏–µ
   */
  static declensionQuotes(count) {
    if (count % 10 === 1 && count % 100 !== 11) return '—Ü–∏—Ç–∞—Ç—É';
    if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '—Ü–∏—Ç–∞—Ç—ã';
    return '—Ü–∏—Ç–∞—Ç';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ("2 –¥–Ω—è –Ω–∞–∑–∞–¥")
   * @param {Date} date - –î–∞—Ç–∞
   * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
   */
  static getRelativeTime(date) {
    const now = new Date();
    const diffMs = now - date;
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffMinutes = Math.floor(diffMs / (1000 * 60));

    if (diffMinutes < 5) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMinutes < 60) return `${diffMinutes} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
    if (diffHours < 24) return `${diffHours} —á. –Ω–∞–∑–∞–¥`;
    if (diffDays === 1) return '–≤—á–µ—Ä–∞';
    if (diffDays < 7) return `${diffDays} –¥–Ω—è –Ω–∞–∑–∞–¥`;
    if (diffDays < 30) return `${Math.floor(diffDays / 7)} –Ω–µ–¥. –Ω–∞–∑–∞–¥`;
    if (diffDays < 365) return `${Math.floor(diffDays / 30)} –º–µ—Å. –Ω–∞–∑–∞–¥`;
    return `${Math.floor(diffDays / 365)} –≥–æ–¥–∞ –Ω–∞–∑–∞–¥`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   * @param {UserProfile} userProfile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {string} –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  static getMotivationalMessage(userProfile) {
    const totalQuotes = userProfile.statistics.totalQuotes;
    const currentStreak = userProfile.statistics.currentStreak;
    const daysSinceReg = Math.floor((new Date() - userProfile.registeredAt) / (1000 * 60 * 60 * 24));

    if (totalQuotes === 0) {
      return "üå± –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É! –ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –º—É–¥—Ä–æ—Å—Ç–∏.";
    }

    if (currentStreak >= 7) {
      return `üî• –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! ${currentStreak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏. –í—ã –Ω–∞ –ø—É—Ç–∏ –∫ –º—É–¥—Ä–æ—Å—Ç–∏!`;
    }

    if (totalQuotes >= 50) {
      return "üåü –í—ã —Å–æ–±—Ä–∞–ª–∏ –≤–ø–µ—á–∞—Ç–ª—è—é—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –º—É–¥—Ä–æ—Å—Ç–∏! –ö–∞–∂–¥–∞—è —Ü–∏—Ç–∞—Ç–∞ - —ç—Ç–æ —à–∞–≥ –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–µ–±—è.";
    }

    if (totalQuotes >= 25) {
      return "‚ú® –ß–µ—Ç–≤–µ—Ä—Ç—å —Å–æ—Ç–Ω–∏ —Ü–∏—Ç–∞—Ç! –í–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä –æ–±–æ–≥–∞—â–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º.";
    }

    if (daysSinceReg >= 30) {
      return "üìö –ú–µ—Å—è—Ü —Å –±–æ—Ç–æ–º! –í—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –∏ –ø–æ—Ä–∞–∑–º—ã—à–ª—è—Ç—å –æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–º –ø—É—Ç–∏.";
    }

    if (daysSinceReg >= 7) {
      return "üìñ –ù–µ–¥–µ–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π! –ü—Ä–∏–≤—ã—á–∫–∞ –∫ –º—É–¥—Ä–æ—Å—Ç–∏ —É–∂–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è.";
    }

    return "üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –º–æ–º–µ–Ω—Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! –ö–∞–∂–¥–∞—è —Ü–∏—Ç–∞—Ç–∞ –≤–∞–∂–Ω–∞.";
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   * @param {UserProfile} userProfile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Array<string>} –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤—Ä–µ–º–µ–Ω–∞
   */
  static getRecommendedReminderTimes(userProfile) {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const lifestyle = userProfile.testResults?.question2_lifestyle;
    const timeForSelf = userProfile.testResults?.question3_time;

    if (lifestyle?.includes('–º–∞–º–∞')) {
      // –î–ª—è –º–∞–º - —Ä–∞–Ω–æ —É—Ç—Ä–æ–º –∏–ª–∏ –ø–æ–∑–¥–Ω–æ –≤–µ—á–µ—Ä–æ–º
      return ['06:30', '22:00'];
    }

    if (timeForSelf?.includes('—É—Ç—Ä–æ–º')) {
      return ['08:00', '20:00'];
    }

    if (timeForSelf?.includes('–≤–µ—á–µ—Ä–æ–º')) {
      return ['09:00', '21:00'];
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —É—Ç—Ä–æ –∏ –≤–µ—á–µ—Ä
    return ['09:00', '19:00'];
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} days - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   * @returns {Promise<Object>} –°–≤–æ–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  static async getActivitySummary(userId, days = 7) {
    try {
      const startDate = new Date();
      startDate.setDate(startDate.getDate() - days);

      const quotes = await Quote.find({
        userId,
        createdAt: { $gte: startDate }
      }).sort({ createdAt: 1 });

      const summary = {
        totalQuotes: quotes.length,
        dailyAverage: Math.round((quotes.length / days) * 10) / 10,
        topCategories: {},
        topAuthors: {},
        sentimentDistribution: { positive: 0, neutral: 0, negative: 0 },
        weekDays: Array(7).fill(0), // 0 = Sunday
        timePattern: Array(24).fill(0)
      };

      quotes.forEach(quote => {
        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        summary.topCategories[quote.category] = (summary.topCategories[quote.category] || 0) + 1;
        
        // –ê–≤—Ç–æ—Ä—ã
        if (quote.author) {
          summary.topAuthors[quote.author] = (summary.topAuthors[quote.author] || 0) + 1;
        }
        
        // –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        summary.sentimentDistribution[quote.sentiment] += 1;
        
        // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        const dayOfWeek = quote.createdAt.getDay();
        summary.weekDays[dayOfWeek] += 1;
        
        // –ß–∞—Å—ã
        const hour = quote.createdAt.getHours();
        summary.timePattern[hour] += 1;
      });

      return summary;
      
    } catch (error) {
      logger.error(`üìñ Error getting activity summary: ${error.message}`);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö
   */
  static async checkUserLimits(userId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Ü–∏—Ç–∞—Ç
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      const todayQuotes = await Quote.countDocuments({
        userId,
        createdAt: { $gte: today }
      });

      const dailyLimit = 10;
      const remaining = Math.max(0, dailyLimit - todayQuotes);

      return {
        daily: {
          used: todayQuotes,
          limit: dailyLimit,
          remaining: remaining,
          canAddMore: remaining > 0
        },
        resetTime: new Date(today.getTime() + 24 * 60 * 60 * 1000)
      };
      
    } catch (error) {
      logger.error(`üìñ Error checking user limits: ${error.message}`);
      return {
        daily: { used: 0, limit: 10, remaining: 10, canAddMore: true },
        resetTime: new Date()
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö helper'–æ–≤
   * @returns {Object} –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  static getStats() {
    return {
      features: {
        complexQuestionDetection: true,
        generalAIConversation: true,
        quoteProcessing: true,
        achievementSystem: true,
        statisticsTracking: true,
        motivationalMessages: true,
        activityAnalysis: true,
        userLimitChecking: true
      },
      integrations: {
        claudeAI: true,
        ticketingService: true,
        userProfiles: true,
        quoteAnalysis: true
      }
    };
  }
}

module.exports = BotHelpers;
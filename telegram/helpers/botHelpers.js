/**
 * @fileoverview –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @author g1orgi89
 */

const logger = require('../../server/utils/logger');
const { UserProfile, Quote } = require('../../server/models');

/**
 * –ö–ª–∞—Å—Å —Å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è Telegram –±–æ—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 */
class BotHelpers {
  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string|null} author - –ê–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã
   * @returns {Promise<void>}
   */
  static async updateUserStatistics(userId, author = null) {
    try {
      const userProfile = await UserProfile.findOne({ userId });
      if (!userProfile) return;

      await userProfile.updateQuoteStats(author);
      logger.info(`üìñ Updated statistics for user ${userId}`);
      
    } catch (error) {
      logger.error(`üìñ Error updating user statistics: ${error.message}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Array>} –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   */
  static async checkAchievements(userId) {
    try {
      const userProfile = await UserProfile.findOne({ userId });
      if (!userProfile) return [];

      const newAchievements = [];
      const totalQuotes = userProfile.statistics.totalQuotes;
      const currentStreak = userProfile.statistics.currentStreak;

      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const achievements = [
        {
          id: 'first_quote',
          name: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
          description: '–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É',
          icon: 'üå±',
          targetValue: 1,
          type: 'quotes_count'
        },
        {
          id: 'wisdom_collector',
          name: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –º—É–¥—Ä–æ—Å—Ç–∏', 
          description: '–°–æ–±—Ä–∞–ª–∏ 25 —Ü–∏—Ç–∞—Ç',
          icon: 'üìö',
          targetValue: 25,
          type: 'quotes_count'
        },
        {
          id: 'week_philosopher',
          name: '–§–∏–ª–æ—Å–æ—Ñ –Ω–µ–¥–µ–ª–∏',
          description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏',
          icon: 'üî•',
          targetValue: 7,
          type: 'streak_days'
        },
        {
          id: 'month_sage',
          name: '–ú—É–¥—Ä–µ—Ü –º–µ—Å—è—Ü–∞',
          description: '30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏',
          icon: 'üåü',
          targetValue: 30,
          type: 'streak_days'
        },
        {
          id: 'classics_lover',
          name: '–õ—é–±–∏—Ç–µ–ª—å –∫–ª–∞—Å—Å–∏–∫–∏',
          description: '10 —Ü–∏—Ç–∞—Ç –∫–ª–∞—Å—Å–∏–∫–æ–≤',
          icon: 'üìñ',
          targetValue: 10,
          type: 'classics_count'
        },
        {
          id: 'century_collector',
          name: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –≤–µ–∫–∞',
          description: '100 —Ü–∏—Ç–∞—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏',
          icon: 'üíé',
          targetValue: 100,
          type: 'quotes_count'
        }
      ];

      for (const achievement of achievements) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        if (userProfile.achievements.some(a => a.achievementId === achievement.id)) {
          continue;
        }

        let unlocked = false;

        switch (achievement.type) {
          case 'quotes_count':
            unlocked = totalQuotes >= achievement.targetValue;
            break;
          case 'streak_days':
            unlocked = currentStreak >= achievement.targetValue;
            break;
          case 'classics_count':
            const classicsCount = await Quote.countDocuments({
              userId,
              author: { $in: ['–¢–æ–ª—Å—Ç–æ–π', '–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π', '–ü—É—à–∫–∏–Ω', '–ß–µ—Ö–æ–≤', '–¢—É—Ä–≥–µ–Ω–µ–≤', '–õ–µ—Ä–º–æ–Ω—Ç–æ–≤', '–ì–æ–≥–æ–ª—å'] }
            });
            unlocked = classicsCount >= achievement.targetValue;
            break;
        }

        if (unlocked) {
          await userProfile.addAchievement(achievement.id);
          newAchievements.push(achievement);
        }
      }

      return newAchievements;
      
    } catch (error) {
      logger.error(`üìñ Error checking achievements: ${error.message}`);
      return [];
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–∏—Ç—å –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
   * @param {Object} ctx - Telegram context
   * @param {Array} achievements - –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   * @returns {Promise<void>}
   */
  static async notifyAchievements(ctx, achievements) {
    try {
      for (const achievement of achievements) {
        const message = `üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!*

–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:
${achievement.icon} *${achievement.name}*
${achievement.description}

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –º–æ–º–µ–Ω—Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è!`;

        await ctx.replyWithMarkdown(message);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        if (achievements.length > 1) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }
    } catch (error) {
      logger.error(`üìñ Error notifying achievements: ${error.message}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
   * @param {string} messageText - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {Promise<boolean>}
   */
  static async isComplexQuestion(messageText) {
    const complexQuestionPatterns = [
      /–ø–æ–º–æ–≥–∏—Ç–µ/i,
      /–Ω–µ –ø–æ–Ω–∏–º–∞—é/i,
      /–ø—Ä–æ–±–ª–µ–º–∞/i,
      /–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è/i,
      /–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç/i,
      /–æ—à–∏–±–∫–∞/i,
      /–¥–µ–ø—Ä–µ—Å—Å–∏—è/i,
      /–Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å/i,
      /–º–æ–∂–µ—Ç–µ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å/i,
      /–ø–æ–º–æ–≥–∏—Ç–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è/i,
      /—É –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å/i,
      /–∫–∞–∫ –º–Ω–µ –±—ã—Ç—å/i,
      /—á—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏/i
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if (messageText.length > 500) return true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    return complexQuestionPatterns.some(pattern => pattern.test(messageText));
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å
   * @param {Object} ctx - Telegram context
   * @param {string} messageText - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {Object} userProfile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<void>}
   */
  static async handleComplexQuestion(ctx, messageText, userProfile) {
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç –¥–ª—è –ê–Ω–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∏–∫–µ—Ç–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–∞)
      const response = `–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –ê–Ω–Ω—ã. 
–Ø –ø–µ—Ä–µ–¥–∞–ª–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:
üì± Telegram: @${userProfile.telegramUsername || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üìß Email: ${userProfile.email}

üí° –ê –ø–æ–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã - –æ–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è!`;

      await ctx.reply(response);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      logger.info(`üìñ Complex question from user ${userProfile.userId}: "${messageText.substring(0, 100)}..."`);
      
    } catch (error) {
      logger.error(`üìñ Error handling complex question: ${error.message}`);
      await ctx.reply('üìñ –Ø –ø–µ—Ä–µ–¥–∞–º –≤–∞—à –≤–æ–ø—Ä–æ—Å –ê–Ω–Ω–µ. –û–Ω–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param {Object} ctx - Telegram context
   * @param {string} messageText - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {Object} userProfile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<void>}
   */
  static async handleGeneralMessage(ctx, messageText, userProfile) {
    try {
      const responses = [
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å! –ê —á—Ç–æ, –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –µ—ë –∫–∞–∫ —Ü–∏—Ç–∞—Ç—É? –î–∞–∂–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∑–∞—Å–ª—É–∂–∏–≤–∞—é—Ç –º–µ—Å—Ç–∞ –≤ –≤–∞—à–µ–º –¥–Ω–µ–≤–Ω–∏–∫–µ –º—É–¥—Ä–æ—Å—Ç–∏.",
        "üìñ –ü–æ—Ö–æ–∂–µ –Ω–∞ –≥–ª—É–±–æ–∫—É—é –º—ã—Å–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –µ—ë –∫–∞–∫ —Ü–∏—Ç–∞—Ç—É - –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Å—Ç–∞–Ω–µ—Ç –≤–∞–∂–Ω—ã–º –º–æ–º–µ–Ω—Ç–æ–º –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è.",
        "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤–∞—à —Ö–æ–¥ –º—ã—Å–ª–µ–π. –í ¬´–ß–∏—Ç–∞—Ç–µ–ª–µ¬ª –ª—É—á—à–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ, —á—Ç–æ –≤–∞—Å –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–æ!",
        "üí≠ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ê –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –ê–Ω–Ω–∞ –≤ —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö? –ò—â–µ—Ç –º—É–¥—Ä—É—é —Ü–∏—Ç–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥ –Ω–æ–≤—ã–º —É–≥–ª–æ–º."
      ];
      
      const randomResponse = responses[Math.floor(Math.random() * responses.length)];
      
      await ctx.reply(randomResponse);
      
    } catch (error) {
      logger.error(`üìñ Error handling general message: ${error.message}`);
      await ctx.reply('üìñ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Ü–∏—Ç–∞—Ç—É - —è –ª—É—á—à–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞—é —Å –º—É–¥—Ä—ã–º–∏ —Å–ª–æ–≤–∞–º–∏!');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥—Ä—É–≥–∏–µ callback –∑–∞–ø—Ä–æ—Å—ã
   * @param {Object} ctx - Telegram context
   * @param {string} callbackData - –î–∞–Ω–Ω—ã–µ callback
   * @returns {Promise<void>}
   */
  static async handleOtherCallbacks(ctx, callbackData) {
    try {
      if (callbackData.startsWith('feedback_')) {
        await this._handleFeedbackCallback(ctx, callbackData);
        return;
      }

      if (callbackData.startsWith('book_')) {
        await this._handleBookCallback(ctx, callbackData);
        return;
      }

      // –ï—Å–ª–∏ callback –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
      await ctx.answerCbQuery("–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞");
      
    } catch (error) {
      logger.error(`üìñ Error handling callback: ${error.message}`);
      await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å callback –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   * @private
   * @param {Object} ctx - Telegram context
   * @param {string} callbackData - –î–∞–Ω–Ω—ã–µ callback
   */
  static async _handleFeedbackCallback(ctx, callbackData) {
    // –ü—Ä–∏–º–µ—Ä: feedback_excellent_reportId
    const parts = callbackData.split('_');
    if (parts.length !== 3) return;
    
    const rating = parts[1]; // excellent, good, bad
    const reportId = parts[2];
    
    let responseMessage;
    switch (rating) {
      case 'excellent':
        responseMessage = "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –†–∞–¥–∞, —á—Ç–æ –æ—Ç—á–µ—Ç –æ–∫–∞–∑–∞–ª—Å—è –ø–æ–ª–µ–∑–Ω—ã–º.";
        break;
      case 'good':
        responseMessage = "üëå –°–ø–∞—Å–∏–±–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏—è–º–∏.";
        break;
      case 'bad':
        responseMessage = "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ –æ—Ç—á–µ—Ç –Ω–µ –æ–ø—Ä–∞–≤–¥–∞–ª –æ–∂–∏–¥–∞–Ω–∏–π. –ú—ã —É—á—Ç–µ–º –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.";
        break;
      default:
        responseMessage = "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!";
    }

    await ctx.editMessageText(responseMessage);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    logger.info(`üìñ Feedback received: ${rating} for report ${reportId}`);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å callback –∫–Ω–∏–∂–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   * @private
   * @param {Object} ctx - Telegram context
   * @param {string} callbackData - –î–∞–Ω–Ω—ã–µ callback
   */
  static async _handleBookCallback(ctx, callbackData) {
    // –ü—Ä–∏–º–µ—Ä: book_details_bookId
    const parts = callbackData.split('_');
    if (parts.length !== 3) return;
    
    const action = parts[1]; // details, buy
    const bookId = parts[2];
    
    if (action === 'details') {
      await ctx.answerCbQuery("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∫–Ω–∏–≥–∏ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã!");
    } else if (action === 'buy') {
      await ctx.answerCbQuery("–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∫—É–ø–∫–∏...");
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ ISO
   * @param {Date} [date] - –î–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è)
   * @returns {number}
   */
  static getWeekNumber(date = new Date()) {
    const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
    const dayNum = d.getUTCDay() || 7;
    d.setUTCDate(d.getUTCDate() + 4 - dayNum);
    const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
    return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Ü–∏—Ç–∞—Ç
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} limit - –õ–∏–º–∏—Ç —Ü–∏—Ç–∞—Ç
   * @returns {Promise<boolean>}
   */
  static async isDailyLimitReached(userId, limit = 10) {
    try {
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);

      const todayQuotesCount = await Quote.countDocuments({
        userId,
        createdAt: {
          $gte: today,
          $lt: tomorrow
        }
      });

      return todayQuotesCount >= limit;
      
    } catch (error) {
      logger.error(`üìñ Error checking daily limit: ${error.message}`);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –º–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é —Ñ—Ä–∞–∑—É –æ—Ç –ê–Ω–Ω—ã
   * @returns {string}
   */
  static getRandomMotivationalQuote() {
    const quotes = [
      "üí° –•–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ - —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏!",
      "üìö –•–æ—Ä–æ—à–∞—è –∂–∏–∑–Ω—å —Å—Ç—Ä–æ–∏—Ç—Å—è, –∞ –Ω–µ –¥–∞–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
      "üåü –ü–æ—á–∏—Ç–∞–π—Ç–µ –≤ –∫–ª—É–±–µ —Ö–æ—Ç—è –±—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –∏ –≤–∞—à–∞ –∂–∏–∑–Ω—å –∏–∑–º–µ–Ω–∏—Ç—Å—è –¥–æ –Ω–µ—É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç–∏",
      "üìñ –ö–∞–∂–¥–∞—è —Ü–∏—Ç–∞—Ç–∞ - —ç—Ç–æ –∫–ª—é—á –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–µ–±—è",
      "‚ú® –ú—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫ —Ç–µ–º, –∫—Ç–æ –µ–µ –∏—â–µ—Ç",
      "üîç –í –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–µ –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –¥–ª—è –≤–∞—à–µ–π –¥—É—à–∏",
      "üíé –°–æ–±–∏—Ä–∞–π—Ç–µ –º–æ–º–µ–Ω—Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"
    ];

    return quotes[Math.floor(Math.random() * quotes.length)];
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è "–Ω–∞–∑–∞–¥"
   * @param {Date} date - –î–∞—Ç–∞
   * @returns {string}
   */
  static formatTimeAgo(date) {
    const now = new Date();
    const diffInMinutes = Math.floor((now - date) / (1000 * 60));
    
    if (diffInMinutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffInMinutes < 60) return `${diffInMinutes} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
    
    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24) return `${diffInHours} —á. –Ω–∞–∑–∞–¥`;
    
    const diffInDays = Math.floor(diffInHours / 24);
    if (diffInDays < 7) return `${diffInDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
    
    const diffInWeeks = Math.floor(diffInDays / 7);
    if (diffInWeeks < 4) return `${diffInWeeks} –Ω–µ–¥. –Ω–∞–∑–∞–¥`;
    
    const diffInMonths = Math.floor(diffInDays / 30);
    return `${diffInMonths} –º–µ—Å. –Ω–∞–∑–∞–¥`;
  }

  /**
   * –°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤
   * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
   * @param {Array<string>} forms - –§–æ—Ä–º—ã —Å–ª–æ–≤–∞ [1, 2-4, 5+]
   * @returns {string}
   */
  static declension(count, forms) {
    if (count % 10 === 1 && count % 100 !== 11) return forms[0];
    if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return forms[1];
    return forms[2];
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤–∏—á–∫–æ–º
   * @param {Object} userProfile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {boolean}
   */
  static isNewUser(userProfile) {
    const daysSinceRegistration = Math.floor((new Date() - userProfile.registeredAt) / (1000 * 60 * 60 * 24));
    return daysSinceRegistration <= 7;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
   * @returns {string}
   */
  static getTimeBasedGreeting() {
    const hour = new Date().getHours();
    
    if (hour >= 6 && hour < 12) return '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ';
    if (hour >= 12 && hour < 17) return '–î–æ–±—Ä—ã–π –¥–µ–Ω—å';
    if (hour >= 17 && hour < 22) return '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä';
    return '–î–æ–±—Ä–æ–π –Ω–æ—á–∏';
  }
}

module.exports = BotHelpers;
/**
 * Smart Message Classifier for Reader bot
 * @file telegram/helpers/messageClassifier.js
 * üß† SMART UX: Intelligent message classification for better user experience
 * üìñ READER THEME: Specialized for quotes vs questions detection
 */

const logger = require('../../server/utils/logger');

/**
 * @typedef {Object} ClassificationResult
 * @property {string} type - Classification type ('quote', 'question', 'complex_question', 'command', 'ambiguous')
 * @property {number} confidence - Confidence score 0-1
 * @property {Array} indicators - List of indicators that influenced the classification
 * @property {Object} metadata - Additional classification metadata
 */

/**
 * @class MessageClassifier
 * @description Smart message classifier for Reader bot to distinguish quotes from questions
 */
class MessageClassifier {
  constructor() {
    // Quote indicators (patterns that suggest a quote)
    this.quoteIndicators = {
      // Strong quote patterns
      hasQuotes: {
        weight: 0.8,
        patterns: [/["¬´¬ª""]/, /'/],
        description: 'Contains quotation marks'
      },
      hasAuthorPattern: {
        weight: 0.9,
        patterns: [
          /\([^)]+\)$/,           // (Author) at end
          /‚Äî\s*[A-Z–ê-–Ø][^.!?]*$/, // ‚Äî Author at end
          /-\s*[A-Z–ê-–Ø][^.!?]*$/  // - Author at end
        ],
        description: 'Has author attribution pattern'
      },
      philosophicalWords: {
        weight: 0.6,
        words: [
          '–∂–∏–∑–Ω—å', '–ª—é–±–æ–≤—å', '—Å—á–∞—Å—Ç—å–µ', '–º—É–¥—Ä–æ—Å—Ç—å', '–∏—Å—Ç–∏–Ω–∞', '–∫—Ä–∞—Å–æ—Ç–∞',
          '—Å–º—ã—Å–ª', '–¥—É—à–∞', '—Å–µ—Ä–¥—Ü–µ', '–≤—Ä–µ–º—è', '–≤–µ—á–Ω–æ—Å—Ç—å', '—Å–≤–æ–±–æ–¥–∞',
          '—Å—É–¥—å–±–∞', '–Ω–∞–¥–µ–∂–¥–∞', '–≤–µ—Ä–∞', '–¥–æ–±—Ä–æ', '–∑–ª–æ', '—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å'
        ],
        description: 'Contains philosophical vocabulary'
      },
      literaryStyle: {
        weight: 0.4,
        patterns: [
          /[.]{3}/, // Ellipsis
          /[,:;]/, // Literary punctuation
          /\b(–∏–±–æ|–¥–∞–±—ã|–∫–æ–ª—å|—Ç–æ–∫–º–æ|—Å–µ–π|–æ–Ω—ã–π)\b/i // Archaic words
        ],
        description: 'Literary or poetic style'
      },
      definitiveStatements: {
        weight: 0.5,
        patterns: [
          /^[A-Z–ê-–Ø].*[.!]$/,      // Starts with capital, ends with period/exclamation
          /\b(—ç—Ç–æ|–µ—Å—Ç—å|–∑–Ω–∞—á–∏—Ç|–æ–∑–Ω–∞—á–∞–µ—Ç)\b/i,
          /\b(–≤—Å–µ–≥–¥–∞|–Ω–∏–∫–æ–≥–¥–∞|–≤—Å–µ|–∫–∞–∂–¥—ã–π)\b/i
        ],
        description: 'Makes definitive statements'
      }
    };

    // Question indicators
    this.questionIndicators = {
      hasQuestionMark: {
        weight: 0.9,
        patterns: [/\?/],
        description: 'Contains question mark'
      },
      questionWords: {
        weight: 0.8,
        words: [
          '—á—Ç–æ', '–∫–∞–∫', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–∫—Ç–æ',
          '–∫–∞–∫–æ–π', '–∫–∞–∫–∞—è', '–∫–∞–∫–∏–µ', '—Å–∫–æ–ª—å–∫–æ', '–º–æ–∂–Ω–æ', '–Ω—É–∂–Ω–æ',
          '—Å—Ç–æ–∏—Ç', '–ø–æ–º–æ–≥–∏—Ç–µ', '–æ–±—ä—è—Å–Ω–∏—Ç–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ'
        ],
        description: 'Contains question words'
      },
      helpRequests: {
        weight: 0.7,
        patterns: [
          /\b(–ø–æ–º–æ–≥–∏|–ø–æ–º–æ–≥–∏—Ç–µ|–ø–æ–¥—Å–∫–∞–∂–∏|–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ|–æ–±—ä—è—Å–Ω–∏|–æ–±—ä—è—Å–Ω–∏—Ç–µ)\b/i,
          /\b(–º–æ–∂–µ—à—å|–º–æ–∂–µ—Ç–µ|—É–º–µ–µ—à—å|—É–º–µ–µ—Ç–µ)\b/i,
          /\b(–∫–∞–∫\s+(–º–Ω–µ|–Ω–∞–º|–ª—É—á—à–µ|–ø—Ä–∞–≤–∏–ª—å–Ω–æ))\b/i
        ],
        description: 'Requests help or explanation'
      },
      uncertaintyWords: {
        weight: 0.6,
        words: [
          '–º–æ–∂–µ—Ç', '–≤–æ–∑–º–æ–∂–Ω–æ', '–Ω–∞–≤–µ—Ä–Ω–æ–µ', '–∫–∞–∂–µ—Ç—Å—è', '–¥—É–º–∞—é',
          '—Å—á–∏—Ç–∞—é', '–ø–æ–ª–∞–≥–∞—é', '–Ω–µ –∑–Ω–∞—é', '–Ω–µ –ø–æ–Ω–∏–º–∞—é', '—Å–æ–º–Ω–µ–≤–∞—é—Å—å'
        ],
        description: 'Expresses uncertainty'
      }
    };

    // Complex question indicators (requiring Anna's personal attention)
    this.complexQuestionIndicators = {
      personalProblems: {
        weight: 0.8,
        words: [
          '–¥–µ–ø—Ä–µ—Å—Å–∏—è', '—Ç—Ä–µ–≤–æ–≥–∞', '–ø–∞–Ω–∏–∫–∞', '—Å—Ç—Ä–∞—Ö', '–±–æ–ª—å', '–≥—Ä—É—Å—Ç—å',
          '–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ', '–ø—Ä–æ–±–ª–µ–º–∞', '–∫—Ä–∏–∑–∏—Å', '—Ä–∞–∑–≤–æ–¥', '—Ä–∞—Å—Å—Ç–∞–≤–∞–Ω–∏–µ',
          '–ø–æ—Ç–µ—Ä—è', '—Å–º–µ—Ä—Ç—å', '–±–æ–ª–µ–∑–Ω—å', '–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å'
        ],
        description: 'Mentions personal problems'
      },
      needsConsultation: {
        weight: 0.7,
        patterns: [
          /\b(–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è|—Å–æ–≤–µ—Ç|—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è|—á—Ç–æ\s+–¥–µ–ª–∞—Ç—å)\b/i,
          /\b(–ø–æ–º–æ–≥–∏—Ç–µ\s+—Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è|–Ω–µ\s+–∑–Ω–∞—é\s+—á—Ç–æ\s+–¥–µ–ª–∞—Ç—å)\b/i,
          /\b(–∫–∞–∫\s+–±—ã—Ç—å|—á—Ç–æ\s+–¥–µ–ª–∞—Ç—å|–∫–∞–∫\s+–ø–æ—Å—Ç—É–ø–∏—Ç—å)\b/i
        ],
        description: 'Explicitly requests consultation'
      },
      longComplexText: {
        weight: 0.3,
        test: (text) => text.length > 500 && text.split('.').length > 3,
        description: 'Long complex message'
      }
    };

    // Command patterns
    this.commandPatterns = [
      /^\/\w+/, // Slash commands
      /^(–º–µ–Ω—é|menu|–ø–æ–º–æ—â—å|help|—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|stats|–¥–Ω–µ–≤–Ω–∏–∫|diary)$/i
    ];

    // Statistics
    this.stats = {
      totalClassifications: 0,
      typeDistribution: {
        quote: 0,
        question: 0,
        complex_question: 0,
        command: 0,
        ambiguous: 0
      },
      averageConfidence: 0,
      confidenceSum: 0
    };

    logger.info('üß† MessageClassifier initialized with smart quote/question detection');
  }

  /**
   * Classify a message
   * @param {string} messageText - The message to classify
   * @param {Object} context - Additional context
   * @param {string} context.userId - User ID
   * @param {Object} context.userProfile - User profile
   * @returns {Promise<ClassificationResult>}
   */
  async classifyMessage(messageText, context = {}) {
    try {
      const text = messageText.trim();
      
      // Update stats
      this.stats.totalClassifications++;

      // Quick command check
      if (this._isCommand(text)) {
        return this._createResult('command', 1.0, ['command_pattern'], { isSlashCommand: text.startsWith('/') });
      }

      // Calculate scores for each type
      const quoteScore = this._calculateQuoteScore(text);
      const questionScore = this._calculateQuestionScore(text);
      const complexQuestionScore = this._calculateComplexQuestionScore(text);

      logger.debug(`üß† Classification scores - Quote: ${quoteScore.score.toFixed(2)}, Question: ${questionScore.score.toFixed(2)}, Complex: ${complexQuestionScore.score.toFixed(2)}`);

      // Determine classification
      const result = this._determineClassification(text, quoteScore, questionScore, complexQuestionScore, context);
      
      // Update statistics
      this._updateStats(result);

      return result;

    } catch (error) {
      logger.error(`üß† Error classifying message: ${error.message}`);
      
      // Fallback to ambiguous with low confidence
      return this._createResult('ambiguous', 0.1, ['classification_error'], { error: error.message });
    }
  }

  /**
   * Calculate quote score
   * @private
   * @param {string} text - Message text
   * @returns {Object} - Score and indicators
   */
  _calculateQuoteScore(text) {
    let score = 0;
    const indicators = [];

    for (const [key, indicator] of Object.entries(this.quoteIndicators)) {
      let matches = false;

      if (indicator.patterns) {
        matches = indicator.patterns.some(pattern => pattern.test(text));
      } else if (indicator.words) {
        const textLower = text.toLowerCase();
        matches = indicator.words.some(word => textLower.includes(word));
      } else if (indicator.test) {
        matches = indicator.test(text);
      }

      if (matches) {
        score += indicator.weight;
        indicators.push(key);
      }
    }

    // Normalize score (rough approximation)
    score = Math.min(score / 2.5, 1.0);

    return { score, indicators };
  }

  /**
   * Calculate question score
   * @private
   * @param {string} text - Message text
   * @returns {Object} - Score and indicators
   */
  _calculateQuestionScore(text) {
    let score = 0;
    const indicators = [];

    for (const [key, indicator] of Object.entries(this.questionIndicators)) {
      let matches = false;

      if (indicator.patterns) {
        matches = indicator.patterns.some(pattern => pattern.test(text));
      } else if (indicator.words) {
        const textLower = text.toLowerCase();
        matches = indicator.words.some(word => textLower.includes(word));
      } else if (indicator.test) {
        matches = indicator.test(text);
      }

      if (matches) {
        score += indicator.weight;
        indicators.push(key);
      }
    }

    // Normalize score
    score = Math.min(score / 2.5, 1.0);

    return { score, indicators };
  }

  /**
   * Calculate complex question score
   * @private
   * @param {string} text - Message text
   * @returns {Object} - Score and indicators
   */
  _calculateComplexQuestionScore(text) {
    let score = 0;
    const indicators = [];

    for (const [key, indicator] of Object.entries(this.complexQuestionIndicators)) {
      let matches = false;

      if (indicator.patterns) {
        matches = indicator.patterns.some(pattern => pattern.test(text));
      } else if (indicator.words) {
        const textLower = text.toLowerCase();
        matches = indicator.words.some(word => textLower.includes(word));
      } else if (indicator.test) {
        matches = indicator.test(text);
      }

      if (matches) {
        score += indicator.weight;
        indicators.push(key);
      }
    }

    // Normalize score
    score = Math.min(score / 2.0, 1.0);

    return { score, indicators };
  }

  /**
   * Determine final classification
   * @private
   * @param {string} text - Message text
   * @param {Object} quoteScore - Quote score and indicators
   * @param {Object} questionScore - Question score and indicators
   * @param {Object} complexQuestionScore - Complex question score and indicators
   * @param {Object} context - Classification context
   * @returns {ClassificationResult}
   */
  _determineClassification(text, quoteScore, questionScore, complexQuestionScore, context) {
    const { score: qScore, indicators: qIndicators } = quoteScore;
    const { score: questionS, indicators: questionI } = questionScore;
    const { score: complexS, indicators: complexI } = complexQuestionScore;

    // Strong complex question
    if (complexS > 0.5) {
      return this._createResult('complex_question', complexS, complexI, {
        requiresPersonalAttention: true,
        alternativeScores: { quote: qScore, question: questionS }
      });
    }

    // Strong quote indicators
    if (qScore > 0.7) {
      return this._createResult('quote', qScore, qIndicators, {
        alternativeScores: { question: questionS, complex: complexS }
      });
    }

    // Strong question indicators
    if (questionS > 0.7) {
      return this._createResult('question', questionS, questionI, {
        alternativeScores: { quote: qScore, complex: complexS }
      });
    }

    // Clear winner with decent confidence
    const maxScore = Math.max(qScore, questionS);
    if (maxScore > 0.5) {
      const winningType = qScore > questionS ? 'quote' : 'question';
      const winningIndicators = qScore > questionS ? qIndicators : questionI;
      
      return this._createResult(winningType, maxScore, winningIndicators, {
        alternativeScores: { 
          quote: qScore, 
          question: questionS, 
          complex: complexS 
        }
      });
    }

    // Ambiguous case - scores are too close or too low
    const ambiguityReasons = [];
    
    if (Math.abs(qScore - questionS) < 0.2) {
      ambiguityReasons.push('scores_too_close');
    }
    
    if (maxScore < 0.3) {
      ambiguityReasons.push('all_scores_low');
    }

    if (text.length < 20) {
      ambiguityReasons.push('message_too_short');
    }

    return this._createResult('ambiguous', maxScore * 0.8, [...qIndicators, ...questionI], {
      reasons: ambiguityReasons,
      scores: { quote: qScore, question: questionS, complex: complexS },
      needsUserClarification: true
    });
  }

  /**
   * Check if message is a command
   * @private
   * @param {string} text - Message text
   * @returns {boolean}
   */
  _isCommand(text) {
    return this.commandPatterns.some(pattern => pattern.test(text));
  }

  /**
   * Create classification result
   * @private
   * @param {string} type - Classification type
   * @param {number} confidence - Confidence score
   * @param {Array} indicators - Matching indicators
   * @param {Object} metadata - Additional metadata
   * @returns {ClassificationResult}
   */
  _createResult(type, confidence, indicators, metadata = {}) {
    return {
      type,
      confidence: Math.round(confidence * 100) / 100, // Round to 2 decimal places
      indicators,
      metadata: {
        timestamp: new Date().toISOString(),
        ...metadata
      }
    };
  }

  /**
   * Update classification statistics
   * @private
   * @param {ClassificationResult} result - Classification result
   */
  _updateStats(result) {
    this.stats.typeDistribution[result.type]++;
    this.stats.confidenceSum += result.confidence;
    this.stats.averageConfidence = this.stats.confidenceSum / this.stats.totalClassifications;
  }

  /**
   * Create ambiguity resolution keyboard for unclear messages
   * @param {string} messageText - Original message text
   * @returns {Object} - Telegram keyboard markup with clarification text
   */
  createAmbiguityResolutionKeyboard(messageText) {
    const truncatedText = messageText.length > 100 
      ? messageText.substring(0, 100) + '...' 
      : messageText;

    return {
      text: `ü§î –ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"${truncatedText}"\n\n–ü–æ–º–æ–≥–∏—Ç–µ –º–Ω–µ –ø–æ–Ω—è—Ç—å ‚Äî —ç—Ç–æ —Ü–∏—Ç–∞—Ç–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å?`,
      keyboard: {
        inline_keyboard: [
          [
            { text: "üìñ –≠—Ç–æ —Ü–∏—Ç–∞—Ç–∞", callback_data: "classify_quote_confirm" },
            { text: "‚ùì –≠—Ç–æ –≤–æ–ø—Ä–æ—Å", callback_data: "classify_question_confirm" }
          ],
          [
            { text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "classify_cancel" }
          ]
        ]
      }
    };
  }

  /**
   * Get classification statistics
   * @returns {Object} - Classification statistics
   */
  getStats() {
    return {
      totalClassifications: this.stats.totalClassifications,
      typeDistribution: { ...this.stats.typeDistribution },
      averageConfidence: Math.round(this.stats.averageConfidence * 100) / 100,
      distributionPercentages: this._calculatePercentages(),
      indicators: {
        quoteIndicators: Object.keys(this.quoteIndicators).length,
        questionIndicators: Object.keys(this.questionIndicators).length,
        complexQuestionIndicators: Object.keys(this.complexQuestionIndicators).length
      }
    };
  }

  /**
   * Calculate percentage distribution
   * @private
   * @returns {Object} - Percentage distribution
   */
  _calculatePercentages() {
    const total = this.stats.totalClassifications;
    if (total === 0) return {};

    const percentages = {};
    for (const [type, count] of Object.entries(this.stats.typeDistribution)) {
      percentages[type] = Math.round((count / total) * 100);
    }
    return percentages;
  }

  /**
   * Reset statistics (useful for testing)
   */
  resetStats() {
    this.stats = {
      totalClassifications: 0,
      typeDistribution: {
        quote: 0,
        question: 0,
        complex_question: 0,
        command: 0,
        ambiguous: 0
      },
      averageConfidence: 0,
      confidenceSum: 0
    };
    
    logger.info('üß† MessageClassifier statistics reset');
  }

  /**
   * Add custom indicator for specific use cases
   * @param {string} category - Category ('quote', 'question', 'complex_question')
   * @param {string} name - Indicator name
   * @param {Object} indicator - Indicator configuration
   */
  addCustomIndicator(category, name, indicator) {
    try {
      const targetCategory = {
        quote: this.quoteIndicators,
        question: this.questionIndicators,
        complex_question: this.complexQuestionIndicators
      }[category];

      if (!targetCategory) {
        throw new Error(`Unknown category: ${category}`);
      }

      if (!indicator.weight || !indicator.description) {
        throw new Error('Indicator must have weight and description');
      }

      targetCategory[name] = indicator;
      logger.info(`üß† Added custom indicator "${name}" to category "${category}"`);
      
    } catch (error) {
      logger.error(`üß† Error adding custom indicator: ${error.message}`);
      throw error;
    }
  }

  /**
   * Test classifier with example messages
   * @returns {Array} - Test results
   */
  runTests() {
    const testMessages = [
      // Clear quotes
      { text: '"–ñ–∏–∑–Ω—å –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞" (–¢–æ–ª—Å—Ç–æ–π)', expected: 'quote' },
      { text: '–í –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ ‚Äî —Ü–µ–ª–∞—è –∂–∏–∑–Ω—å', expected: 'quote' },
      { text: '–°—á–∞—Å—Ç—å–µ ‚Äî —ç—Ç–æ –≤—ã–±–æ—Ä –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.', expected: 'quote' },
      
      // Clear questions
      { text: '–ö–∞–∫ –¥–µ–ª–∞?', expected: 'question' },
      { text: '–ß—Ç–æ —Ç–∞–∫–æ–µ —Å—á–∞—Å—Ç—å–µ?', expected: 'question' },
      { text: '–ú–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –∫–Ω–∏–≥–∏?', expected: 'question' },
      
      // Complex questions
      { text: '–£ –º–µ–Ω—è –¥–µ–ø—Ä–µ—Å—Å–∏—è, –Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å. –ü–æ–º–æ–≥–∏—Ç–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è.', expected: 'complex_question' },
      { text: '–ö–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –ø–æ—Ç–µ—Ä–µ–π –±–ª–∏–∑–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞?', expected: 'complex_question' },
      
      // Commands
      { text: '/start', expected: 'command' },
      { text: '–º–µ–Ω—é', expected: 'command' },
      
      // Ambiguous
      { text: '–•–æ—Ä–æ—à–æ', expected: 'ambiguous' },
      { text: '–ñ–∏–∑–Ω—å —Å–ª–æ–∂–Ω–∞—è —à—Ç—É–∫–∞', expected: 'ambiguous' }
    ];

    const results = [];
    
    for (const test of testMessages) {
      const result = this.classifyMessage(test.text, {});
      results.push({
        text: test.text,
        expected: test.expected,
        actual: result.type,
        confidence: result.confidence,
        correct: result.type === test.expected
      });
    }

    const accuracy = results.filter(r => r.correct).length / results.length;
    
    logger.info(`üß† Classifier test completed. Accuracy: ${Math.round(accuracy * 100)}%`);
    
    return {
      results,
      accuracy: Math.round(accuracy * 100),
      totalTests: results.length,
      correctPredictions: results.filter(r => r.correct).length
    };
  }
}

module.exports = { MessageClassifier };
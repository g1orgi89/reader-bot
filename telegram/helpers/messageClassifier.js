/**
 * Message Classifier for Reader Bot - Smart detection of quotes vs questions
 * @file telegram/helpers/messageClassifier.js
 * üìñ READER BOT: Intelligent message classification to separate quotes from questions
 * 
 * Features:
 * - AI-powered content analysis through Claude
 * - Pattern-based detection (quote formats)
 * - Context-aware classification
 * - Fallback logic for unclear messages
 */

const logger = require('../../server/utils/logger');
const claudeService = require('../../server/services/claude');

/**
 * @typedef {Object} ClassificationResult
 * @property {string} type - 'quote', 'question', 'command', 'ambiguous'
 * @property {number} confidence - Confidence score (0-1)
 * @property {string} reason - Reason for classification
 * @property {Object} metadata - Additional metadata
 */

/**
 * @class MessageClassifier
 * @description Smart classifier to distinguish quotes from questions and commands
 */
class MessageClassifier {
  constructor() {
    // Quote format patterns
    this.quotePatterns = [
      /^"([^"]+)"\s*\(([^)]+)\)$/,         // "Text" (Author)
      /^"([^"]+)"\s*-\s*(.+)$/,            // "Text" - Author
      /^([^-()]+)\s*\(([^)]+)\)$/,         // Text (Author)
      /^([^-()]+)\s*-\s*(.+)$/,            // Text - Author
      /^¬´([^¬ª]+)¬ª\s*\(([^)]+)\)$/,         // ¬´Text¬ª (Author)
      /^¬´([^¬ª]+)¬ª\s*-\s*(.+)$/,            // ¬´Text¬ª - Author
    ];

    // Question indicators
    this.questionIndicators = [
      /^(–∫–∞–∫|—á—Ç–æ|–≥–¥–µ|–∫–æ–≥–¥–∞|–ø–æ—á–µ–º—É|–∑–∞—á–µ–º|–∫—Ç–æ|–∫–∞–∫–æ–π|–∫–∞–∫–∞—è|–∫–∞–∫–∏–µ|—á–µ–º|—á–µ–≥–æ|–∫–æ–º—É)\s/i,
      /\?$/,
      /–º–æ–∂–µ—Ç–µ?\s+(–ø–æ–º–æ—á—å|–æ–±—ä—è—Å–Ω–∏—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å)/i,
      /–ø–æ–º–æ–≥–∏—Ç–µ/i,
      /–Ω–µ –ø–æ–Ω–∏–º–∞—é/i,
      /–æ–±—ä—è—Å–Ω–∏(—Ç–µ)?/i,
      /—Ä–∞—Å—Å–∫–∞–∂(–∏|–∏—Ç–µ)/i,
      /–ø–æ—Å–æ–≤–µ—Ç—É(–π|–π—Ç–µ)/i
    ];

    // Command indicators 
    this.commandIndicators = [
      /^\/\w+/,
      /^(–ø–æ–∫–∞–∂–∏|–æ—Ç–∫—Ä–æ–π|–Ω–∞–π–¥–∏|—É–¥–∞–ª–∏|—ç–∫—Å–ø–æ—Ä—Ç)/i,
      /^(–Ω–∞—Å—Ç—Ä–æ–π–∫–∏|—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|–¥–Ω–µ–≤–Ω–∏–∫|–ø–æ–º–æ—â—å|–º–µ–Ω—é)/i
    ];

    // Complex question patterns (for Anna's attention)
    this.complexQuestionPatterns = [
      /–Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å/i,
      /–ø—Ä–æ–±–ª–µ–º–∞/i,
      /–¥–µ–ø—Ä–µ—Å—Å–∏—è/i,
      /–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è/i,
      /–ø–æ–º–æ–≥–∏—Ç–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è/i,
      /–ª–∏—á–Ω(–∞—è|—ã–µ) –ø—Ä–æ–±–ª–µ–º/i,
      /–æ—Ç–Ω–æ—à–µ–Ω–∏—è/i,
      /—Å–µ–º—å—è/i,
      /–ø—Å–∏—Ö–æ–ª–æ–≥/i
    ];

    logger.info('üìñ MessageClassifier initialized with smart quote detection');
  }

  /**
   * Classify message content
   * @param {string} messageText - Message to classify
   * @param {Object} [context] - Additional context
   * @param {string} [context.userId] - User ID for context
   * @param {Object} [context.userProfile] - User profile
   * @returns {Promise<ClassificationResult>}
   */
  async classifyMessage(messageText, context = {}) {
    try {
      // 1. Quick format-based detection
      const formatResult = this.detectByFormat(messageText);
      if (formatResult.confidence > 0.8) {
        return formatResult;
      }

      // 2. Pattern-based detection
      const patternResult = this.detectByPatterns(messageText);
      if (patternResult.confidence > 0.7) {
        return patternResult;
      }

      // 3. AI-powered analysis for ambiguous cases
      const aiResult = await this.classifyWithAI(messageText, context);
      if (aiResult.confidence > 0.6) {
        return aiResult;
      }

      // 4. Fallback to ambiguous
      return {
        type: 'ambiguous',
        confidence: 0.5,
        reason: 'Unable to determine with high confidence',
        metadata: {
          formatDetection: formatResult,
          patternDetection: patternResult,
          aiDetection: aiResult
        }
      };

    } catch (error) {
      logger.error(`üìñ Error classifying message: ${error.message}`);
      
      // Safe fallback - treat as question if contains question words
      return this.detectByPatterns(messageText);
    }
  }

  /**
   * Detect message type by format patterns
   * @param {string} messageText - Message text
   * @returns {ClassificationResult}
   */
  detectByFormat(messageText) {
    const text = messageText.trim();

    // Check for quote patterns
    for (const pattern of this.quotePatterns) {
      if (pattern.test(text)) {
        const match = text.match(pattern);
        return {
          type: 'quote',
          confidence: 0.9,
          reason: 'Matches standard quote format',
          metadata: {
            pattern: pattern.toString(),
            extractedText: match[1],
            extractedAuthor: match[2] || null
          }
        };
      }
    }

    // Check for command patterns
    for (const pattern of this.commandIndicators) {
      if (pattern.test(text)) {
        return {
          type: 'command',
          confidence: 0.95,
          reason: 'Matches command pattern',
          metadata: {
            pattern: pattern.toString()
          }
        };
      }
    }

    // Check for obvious questions
    for (const pattern of this.questionIndicators) {
      if (pattern.test(text)) {
        return {
          type: 'question',
          confidence: 0.8,
          reason: 'Contains question indicators',
          metadata: {
            pattern: pattern.toString()
          }
        };
      }
    }

    return {
      type: 'ambiguous',
      confidence: 0.3,
      reason: 'No clear format pattern detected',
      metadata: {}
    };
  }

  /**
   * Detect message type by content patterns
   * @param {string} messageText - Message text
   * @returns {ClassificationResult}
   */
  detectByPatterns(messageText) {
    const text = messageText.trim().toLowerCase();

    // Check for complex questions (high priority)
    for (const pattern of this.complexQuestionPatterns) {
      if (pattern.test(text)) {
        return {
          type: 'complex_question',
          confidence: 0.9,
          reason: 'Contains complex question patterns requiring personal attention',
          metadata: {
            requiresAnnaAttention: true,
            pattern: pattern.toString()
          }
        };
      }
    }

    // Check message length and characteristics
    if (text.length > 500) {
      return {
        type: 'complex_question',
        confidence: 0.7,
        reason: 'Long message likely contains detailed question',
        metadata: {
          length: text.length,
          requiresAnnaAttention: true
        }
      };
    }

    // Check for wisdom/philosophical content (potential quotes)
    const wisdomKeywords = [
      '–º—É–¥—Ä–æ—Å—Ç—å', '–∂–∏–∑–Ω—å', '–ª—é–±–æ–≤—å', '—Å—á–∞—Å—Ç—å–µ', '–∏—Å—Ç–∏–Ω–∞', '–∫—Ä–∞—Å–æ—Ç–∞', 
      '—Å–º—ã—Å–ª', '—Å—É–¥—å–±–∞', '–≤—Ä–µ–º—è', '–¥—É—à–∞', '—Å–µ—Ä–¥—Ü–µ', '–º–µ—á—Ç–∞'
    ];

    const hasWisdomKeywords = wisdomKeywords.some(keyword => 
      text.includes(keyword)
    );

    if (hasWisdomKeywords && text.length < 200 && !text.includes('?')) {
      return {
        type: 'quote',
        confidence: 0.6,
        reason: 'Contains wisdom keywords without question marks',
        metadata: {
          wisdomKeywords: true,
          length: text.length
        }
      };
    }

    // Default to question if contains question words
    if (text.includes('?') || 
        /^(–∫–∞–∫|—á—Ç–æ|–≥–¥–µ|–∫–æ–≥–¥–∞|–ø–æ—á–µ–º—É)/i.test(text)) {
      return {
        type: 'question',
        confidence: 0.6,
        reason: 'Contains question indicators',
        metadata: {}
      };
    }

    return {
      type: 'ambiguous',
      confidence: 0.4,
      reason: 'No clear pattern detected',
      metadata: {}
    };
  }

  /**
   * Classify message using AI analysis
   * @param {string} messageText - Message text
   * @param {Object} context - Additional context
   * @returns {Promise<ClassificationResult>}
   */
  async classifyWithAI(messageText, context = {}) {
    try {
      const prompt = `–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å" (–ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ —Ü–∏—Ç–∞—Ç –æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –ê–Ω–Ω—ã –ë—É—Å–µ–ª).

–°–æ–æ–±—â–µ–Ω–∏–µ: "${messageText}"

–ö–æ–Ω—Ç–µ–∫—Å—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç:
1. –ü—Ä–∏—Å—ã–ª–∞—Ç—å –¶–ò–¢–ê–¢–´ –∏–∑ –∫–Ω–∏–≥ –∏–ª–∏ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –¥–Ω–µ–≤–Ω–∏–∫
2. –ó–∞–¥–∞–≤–∞—Ç—å –í–û–ü–†–û–°–´ –±–æ—Ç—É –∏–ª–∏ –ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â–∏
3. –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ö–û–ú–ê–ù–î–´ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º

–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:

QUOTE - –µ—Å–ª–∏ —ç—Ç–æ:
- –ú—É–¥—Ä–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ, –∞—Ñ–æ—Ä–∏–∑–º, —Ü–∏—Ç–∞—Ç–∞ –∏–∑ –∫–Ω–∏–≥–∏
- –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è –º—ã—Å–ª—å –∏–ª–∏ —Ñ—Ä–∞–∑–∞
- –§–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ
- –ö–æ—Ä–æ—Ç–∫–æ–µ –∏–∑—Ä–µ—á–µ–Ω–∏–µ —Å –≥–ª—É–±–æ–∫–∏–º —Å–º—ã—Å–ª–æ–º

QUESTION - –µ—Å–ª–∏ —ç—Ç–æ:
- –í–æ–ø—Ä–æ—Å –±–æ—Ç—É –∏–ª–∏ –ø—Ä–æ—Å—å–±–∞ –æ –ø–æ–º–æ—â–∏
- –û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞ —Å–æ–≤–µ—Ç–æ–º –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
- –û–±—â–µ–Ω–∏–µ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
- –ü—Ä–æ—Å—å–±–∞ –æ–±—ä—è—Å–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ

COMPLEX_QUESTION - –µ—Å–ª–∏ —ç—Ç–æ:
- –õ–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (–¥–µ–ø—Ä–µ—Å—Å–∏—è, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —Å–µ–º—å—è)
- –ü—Ä–æ—Å—å–±–∞ –æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
- –°–ª–æ–∂–Ω—ã–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
- –í–æ–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –ê–Ω–Ω—ã

COMMAND - –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –±–æ—Ç—É (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ç.–¥.)

AMBIGUOUS - –µ—Å–ª–∏ –Ω–µ—è—Å–Ω–æ

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: QUOTE, QUESTION, COMPLEX_QUESTION, COMMAND –∏–ª–∏ AMBIGUOUS`;

      const response = await claudeService.generateResponse(prompt, {
        platform: 'telegram',
        userId: context.userId || 'classifier'
      });

      const aiType = response.message.trim().toLowerCase();
      
      // Map AI response to our types
      const typeMapping = {
        'quote': 'quote',
        'question': 'question', 
        'complex_question': 'complex_question',
        'command': 'command',
        'ambiguous': 'ambiguous'
      };

      const detectedType = typeMapping[aiType] || 'ambiguous';
      
      return {
        type: detectedType,
        confidence: detectedType === 'ambiguous' ? 0.5 : 0.8,
        reason: `AI classification: ${aiType}`,
        metadata: {
          aiResponse: response.message,
          requiresAnnaAttention: detectedType === 'complex_question'
        }
      };

    } catch (error) {
      logger.error(`üìñ AI classification failed: ${error.message}`);
      
      // Fallback to pattern detection
      return {
        type: 'ambiguous',
        confidence: 0.3,
        reason: 'AI classification failed, using fallback',
        metadata: {
          error: error.message
        }
      };
    }
  }

  /**
   * Check if message is likely a quote based on content
   * @param {string} messageText - Message text
   * @returns {boolean}
   */
  isLikelyQuote(messageText) {
    const result = this.detectByFormat(messageText);
    return result.type === 'quote' && result.confidence > 0.7;
  }

  /**
   * Check if message is likely a question
   * @param {string} messageText - Message text  
   * @returns {boolean}
   */
  isLikelyQuestion(messageText) {
    const result = this.detectByPatterns(messageText);
    return ['question', 'complex_question'].includes(result.type) && result.confidence > 0.6;
  }

  /**
   * Extract quote parts from message
   * @param {string} messageText - Message text
   * @returns {Object|null} - {text, author} or null
   */
  extractQuoteParts(messageText) {
    const text = messageText.trim();

    for (const pattern of this.quotePatterns) {
      const match = text.match(pattern);
      if (match) {
        return {
          text: match[1]?.trim(),
          author: match[2]?.trim() || null
        };
      }
    }

    // If no pattern matches but likely a quote, return as is
    if (this.isLikelyQuote(messageText)) {
      return {
        text: text,
        author: null
      };
    }

    return null;
  }

  /**
   * Create user confirmation for ambiguous messages
   * @param {string} messageText - Original message
   * @returns {Object} - Telegram inline keyboard
   */
  createAmbiguityResolutionKeyboard(messageText) {
    // Truncate message for display
    const displayText = messageText.length > 50 
      ? messageText.substring(0, 50) + '...'
      : messageText;

    return {
      text: `–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏:\n\n"${displayText}"\n\n–≠—Ç–æ:`,
      keyboard: {
        inline_keyboard: [
          [
            { 
              text: "üìñ –¶–∏—Ç–∞—Ç–∞ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞", 
              callback_data: `classify_quote_${Buffer.from(messageText).toString('base64').substring(0, 30)}` 
            },
            { 
              text: "üí¨ –í–æ–ø—Ä–æ—Å –±–æ—Ç—É", 
              callback_data: `classify_question_${Buffer.from(messageText).toString('base64').substring(0, 30)}` 
            }
          ],
          [
            { 
              text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
              callback_data: "classify_cancel" 
            }
          ]
        ]
      }
    };
  }

  /**
   * Get classifier statistics
   * @returns {Object}
   */
  getStats() {
    return {
      patterns: {
        quotePatterns: this.quotePatterns.length,
        questionIndicators: this.questionIndicators.length,
        commandIndicators: this.commandIndicators.length,
        complexQuestionPatterns: this.complexQuestionPatterns.length
      },
      features: {
        formatDetection: true,
        patternDetection: true,
        aiClassification: true,
        ambiguityResolution: true
      }
    };
  }
}

module.exports = { MessageClassifier };

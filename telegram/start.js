/**
 * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ Reader
 * @file telegram/start.js
 * üìñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * üìñ UPDATED: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CronService –∏ WeeklyReportHandler
 */

require('dotenv').config();
const mongoose = require('mongoose');
const logger = require('../server/utils/logger');
const ReaderTelegramBot = require('./index');
const { WeeklyReportHandler } = require('./handlers/weeklyReportHandler');
const { CronService } = require('../server/services/cronService'); // üîß FIX: –∏–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
const telegramReportService = require('../server/services/telegramReportService'); // üìñ –ù–û–í–û–ï

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
let botInstance = null;

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
 * @returns {Promise<void>}
 */
async function startTelegramBot() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    const telegramToken = process.env.TELEGRAM_BOT_TOKEN;
    if (!telegramToken) {
      throw new Error('TELEGRAM_BOT_TOKEN environment variable is required');
    }

    logger.info('üìñ Starting Reader Telegram Bot...');

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/reader-support';
    
    logger.info('üìñ Connecting to MongoDB...');
    await mongoose.connect(mongoUri);
    logger.info('üìñ MongoDB connected successfully');

    // –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    const bot = new ReaderTelegramBot({
      token: telegramToken,
      environment: process.env.NODE_ENV || 'production',
      maxMessageLength: parseInt(process.env.TELEGRAM_MAX_MESSAGE_LENGTH) || 4096
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.start();

    // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
    const weeklyReportHandler = new WeeklyReportHandler(bot.bot);

    // –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º WeeklyReportHandler –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
    bot.setWeeklyReportHandler(weeklyReportHandler);

    // üîß FIX: –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä CronService –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    const cronService = new CronService();
    cronService.initialize(bot.bot, telegramReportService, null); // telegramReportService —É–∂–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥ sendReportsToAllUsers()

    // –ó–∞–ø—É—Å–∫–∞–µ–º cron –∑–∞–¥–∞—á–∏
    cronService.start();

    logger.info('üìñ Reader Telegram Bot is running with scheduled tasks!');
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
    const botStats = await bot.getStats();
    logger.info('üìñ Bot initialized with features:', Object.keys(botStats.features).filter(key => botStats.features[key]));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    botInstance = {
      bot: bot.bot, // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º Telegraf instance
      readerBot: bot, // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à Reader wrapper
      weeklyReportHandler,
      cronService
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    process.on('SIGINT', async () => {
      logger.info('üìñ Received SIGINT, shutting down gracefully...');
      cronService.stop();
      await bot.stop('SIGINT');
      await mongoose.disconnect();
      process.exit(0);
    });

    process.on('SIGTERM', async () => {
      logger.info('üìñ Received SIGTERM, shutting down gracefully...');
      cronService.stop();
      await bot.stop('SIGTERM');
      await mongoose.disconnect();
      process.exit(0);
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
    return botInstance;

  } catch (error) {
    logger.error(`üìñ Failed to start Telegram bot: ${error.message}`);
    console.error('Error details:', error);
    process.exit(1);
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö)
 * @returns {Object|null} –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
 */
function getBotInstance() {
  return botInstance;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –±–æ—Ç
 * @returns {boolean} true –µ—Å–ª–∏ –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
 */
function isBotInitialized() {
  return botInstance !== null;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  logger.error('üìñ Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  logger.error('üìñ Uncaught Exception:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if (require.main === module) {
  startTelegramBot();
}

module.exports = {
  startTelegramBot,
  getBotInstance,
  isBotInitialized,
  // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º bot –∫–∞–∫ —Å–≤–æ–π—Å—Ç–≤–æ
  get bot() {
    return botInstance ? botInstance.bot : null;
  }
};
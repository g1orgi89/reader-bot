/**
 * Service Worker –¥–ª—è Reader Bot Mini App
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç offline —Ñ—É–Ω–∫—Ü–∏–∏, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ PWA –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
 * 
 * @fileoverview Service Worker –¥–ª—è Progressive Web App —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 * @version 1.0.0
 */

// –í–µ—Ä—Å–∏—è –∫—ç—à–∞ - –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const CACHE_VERSION = 'reader-bot-v1.0.0';
const CACHE_NAME = `reader-bot-cache-${CACHE_VERSION}`;

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
const STATIC_CACHE_FILES = [
    '/',
    '/index.html',
    '/css/main.css',
    '/css/mobile.css',
    '/js/app.js',
    '/js/telegram.js',
    '/js/api.js',
    '/config/app-config.js',
    '/config/api-endpoints.js',
    '/assets/icons/icon-192x192.png',
    '/assets/icons/icon-512x512.png',
    '/manifest.json'
];

// API endpoints –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const API_CACHE_PATTERNS = [
    '/api/reader/quotes',
    '/api/reader/reports', 
    '/api/reader/achievements',
    '/api/reader/profile'
];

// Offline —Å—Ç—Ä–∞–Ω–∏—Ü–∞
const OFFLINE_PAGE = '/offline.html';

// –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö) - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±—É–¥—É—â–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
// eslint-disable-next-line no-unused-vars
const CACHE_EXPIRY = {
    STATIC: 24 * 60 * 60 * 1000,     // 24 —á–∞—Å–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    API: 10 * 60 * 1000,             // 10 –º–∏–Ω—É—Ç –¥–ª—è API –¥–∞–Ω–Ω—ã—Ö
    IMAGES: 7 * 24 * 60 * 60 * 1000  // 7 –¥–Ω–µ–π –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
};

/**
 * –°–æ–±—ã—Ç–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Service Worker
 */
self.addEventListener('install', (event) => {
    console.log('üì¶ Service Worker: –£—Å—Ç–∞–Ω–æ–≤–∫–∞...');
    
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then((cache) => {
                console.log('üì¶ Service Worker: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤');
                return cache.addAll(STATIC_CACHE_FILES);
            })
            .then(() => {
                console.log('‚úÖ Service Worker: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π Service Worker
                return self.skipWaiting();
            })
            .catch((error) => {
                console.error('‚ùå Service Worker: –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:', error);
            })
    );
});

/**
 * –°–æ–±—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Service Worker
 */
self.addEventListener('activate', (event) => {
    console.log('üîÑ Service Worker: –ê–∫—Ç–∏–≤–∞—Ü–∏—è...');
    
    event.waitUntil(
        caches.keys()
            .then((cacheNames) => {
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫—ç—à–∏
                return Promise.all(
                    cacheNames.map((cacheName) => {
                        if (cacheName !== CACHE_NAME && cacheName.startsWith('reader-bot-cache-')) {
                            console.log('üóëÔ∏è Service Worker: –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞:', cacheName);
                            return caches.delete(cacheName);
                        }
                    })
                );
            })
            .then(() => {
                console.log('‚úÖ Service Worker: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                // –ü—Ä–∏–Ω—è—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
                return self.clients.claim();
            })
            .catch((error) => {
                console.error('‚ùå Service Worker: –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', error);
            })
    );
});

/**
 * –°–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ fetch –∑–∞–ø—Ä–æ—Å–æ–≤ —Å comprehensive JWT debugging
 */
self.addEventListener('fetch', (event) => {
    const request = event.request;
    const url = new URL(request.url);
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ-GET –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å—ã)
    if (request.method !== 'GET' && !url.pathname.startsWith('/api/reader/')) {
        return;
    }
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ –≤–Ω–µ—à–Ω–∏–º —Ä–µ—Å—É—Ä—Å–∞–º (–∫—Ä–æ–º–µ API)
    if (url.origin !== location.origin) {
        return;
    }
    
    // üîß SERVICE WORKER DEBUG –¥–ª—è API requests
    if (url.pathname.startsWith('/api/reader/')) {
        console.log('üîß [SERVICE WORKER DEBUG]', {
            timestamp: new Date().toISOString(),
            method: request.method,
            url: request.url,
            pathname: url.pathname,
            
            // Headers analysis
            requestHeaders: Object.fromEntries(request.headers.entries()),
            hasAuthorizationHeader: request.headers.has('authorization'),
            authHeaderValue: request.headers.get('authorization') ? 
                           `${request.headers.get('authorization').substring(0, 50)}...` : null,
            
            // Service Worker context
            serviceWorkerVersion: CACHE_VERSION,
            cacheStrategyUsed: 'network-first',
            
            // Request analysis
            hasBody: request.method === 'POST' || request.method === 'PUT',
            contentType: request.headers.get('content-type'),
            
            // Auth specific checks
            isAuthEndpoint: url.pathname.includes('/auth/'),
            isProtectedEndpoint: url.pathname.includes('/quotes') || 
                               url.pathname.includes('/reports') || 
                               url.pathname.includes('/profile') ||
                               url.pathname.includes('/community')
        });
    }
    
    event.respondWith(handleFetchRequest(request, url));
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ fetch –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ JWT debugging
 * @param {Request} request - –ó–∞–ø—Ä–æ—Å
 * @param {URL} url - URL –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Promise<Response>} –û—Ç–≤–µ—Ç
 */
async function handleFetchRequest(request, url) {
    const pathname = url.pathname;
    
    try {
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è API requests —Å JWT
        if (isApiRequest(pathname)) {
            return await handleApiRequestWithAuth(request, url);
        }
        
        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤: Cache First
        if (isStaticResource(pathname)) {
            return await cacheFirst(request);
        }
        
        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: Cache First
        if (isImageRequest(pathname)) {
            return await cacheFirst(request);
        }
        
        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü: Network First
        if (isHTMLRequest(request)) {
            return await networkFirstWithOfflinePage(request);
        }
        
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: Network First
        return await networkFirst(request);
        
    } catch (error) {
        console.error('‚ùå Service Worker: –û—à–∏–±–∫–∞ fetch:', error);
        
        // Fallback –¥–ª—è HTML –∑–∞–ø—Ä–æ—Å–æ–≤ - –ø–æ–∫–∞–∑–∞—Ç—å offline —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if (isHTMLRequest(request)) {
            return await getOfflinePage();
        }
        
        throw error;
    }
}

/**
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 * @param {Request} request - –ó–∞–ø—Ä–æ—Å
 * @param {URL} url - URL –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Promise<Response>} –û—Ç–≤–µ—Ç
 */
async function handleApiRequestWithAuth(request, url) {
    try {
        // üîß SW AUTH TOKEN DEBUG
        const authToken = await getAuthToken();
        
        console.log('üîß [SW AUTH TOKEN DEBUG]', {
            timestamp: new Date().toISOString(),
            endpoint: url.pathname,
            method: request.method,
            authTokenFromStorage: !!authToken,
            tokenLength: authToken?.length,
            tokenPreview: authToken ? `${authToken.substring(0, 30)}...` : null,
            requestNeedsAuth: isProtectedEndpoint(url.pathname),
            
            // Request headers analysis
            originalHasAuth: request.headers.has('authorization'),
            originalAuthHeader: request.headers.has('authorization') ? 
                              `${request.headers.get('authorization').substring(0, 50)}...` : null,
            
            // Decision making
            willAddAuthHeader: authToken && !request.headers.has('authorization'),
            authRequired: isProtectedEndpoint(url.pathname)
        });

        // Clone request and add auth header if needed
        if (authToken && !request.headers.has('authorization') && isProtectedEndpoint(url.pathname)) {
            const modifiedRequest = new Request(request, {
                headers: {
                    ...Object.fromEntries(request.headers.entries()),
                    'Authorization': `Bearer ${authToken}`
                }
            });

            console.log('üîß [SW AUTH HEADER ADDED]', {
                timestamp: new Date().toISOString(),
                endpoint: url.pathname,
                originalHadAuth: request.headers.has('authorization'),
                modifiedHasAuth: modifiedRequest.headers.has('authorization'),
                addedAuthHeader: true,
                tokenPreview: `${authToken.substring(0, 30)}...`
            });

            // Use network first strategy with modified request
            return await networkFirstWithAuthHandling(modifiedRequest, url);
        }
        
        // For requests that already have auth or don't need it
        return await networkFirstWithAuthHandling(request, url);
        
    } catch (error) {
        console.error('üîß [SW ERROR DEBUG]', {
            timestamp: new Date().toISOString(),
            errorMessage: error.message,
            errorType: error.constructor.name,
            url: request.url,
            method: request.method,
            endpoint: url.pathname
        });
        throw error;
    }
}

/**
 * Network First —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π auth –æ—à–∏–±–æ–∫
 * @param {Request} request - –ó–∞–ø—Ä–æ—Å (–≤–æ–∑–º–æ–∂–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
 * @param {URL} url - URL –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Promise<Response>} –û—Ç–≤–µ—Ç
 */
async function networkFirstWithAuthHandling(request, url) {
    const cache = await caches.open(CACHE_NAME);
    
    try {
        console.log('üåê SW Network First with Auth:', url.pathname);
        const networkResponse = await fetch(request);
        
        // üîß SW RESPONSE DEBUG
        console.log('üîß [SW RESPONSE DEBUG]', {
            timestamp: new Date().toISOString(),
            endpoint: url.pathname,
            status: networkResponse.status,
            statusText: networkResponse.statusText,
            ok: networkResponse.ok,
            
            // Auth specific analysis
            isAuthError: networkResponse.status === 401,
            isServerError: networkResponse.status >= 500,
            isForbidden: networkResponse.status === 403,
            
            // Response headers
            responseHeaders: Object.fromEntries(networkResponse.headers.entries()),
            hasAuthChallenge: networkResponse.headers.has('www-authenticate')
        });
        
        // –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–Ω–æ –Ω–µ auth endpoints)
        if (networkResponse.ok && !url.pathname.includes('/auth/')) {
            cache.put(request, networkResponse.clone());
        }
        
        // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ auth –æ—à–∏–±–æ–∫
        if (networkResponse.status === 401) {
            console.error('üîß [SW AUTH ERROR]', {
                timestamp: new Date().toISOString(),
                endpoint: url.pathname,
                message: 'Authentication failed',
                possibleCauses: [
                    'JWT token expired',
                    'JWT token invalid',
                    'Token not sent in headers',
                    'Backend auth middleware error'
                ],
                recommendations: [
                    'Check token in storage',
                    'Check if token is being sent',
                    'Check backend logs',
                    'Try re-authentication'
                ]
            });
        }
        
        return networkResponse;
        
    } catch (error) {
        console.log('üíæ SW Network failed, trying cache:', url.pathname);
        const cachedResponse = await cache.match(request);
        
        if (cachedResponse) {
            console.log('üîß [SW CACHE FALLBACK]', {
                timestamp: new Date().toISOString(),
                endpoint: url.pathname,
                fallbackReason: 'Network error',
                errorMessage: error.message
            });
            return cachedResponse;
        }
        
        throw error;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ endpoint –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * @param {string} pathname - –ü—É—Ç—å URL
 * @returns {boolean} –¢—Ä–µ–±—É–µ—Ç –ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
function isProtectedEndpoint(pathname) {
    const protectedPaths = [
        '/quotes',
        '/reports', 
        '/profile',
        '/community',
        '/stats',
        '/achievements'
    ];
    
    return protectedPaths.some(path => pathname.includes(path));
}

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è Cache First
 * –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—ç—à, –∑–∞—Ç–µ–º —Å–µ—Ç—å
 */
async function cacheFirst(request) {
    const cache = await caches.open(CACHE_NAME);
    const cachedResponse = await cache.match(request);
    
    if (cachedResponse) {
        console.log('üíæ Cache First: –í–æ–∑–≤—Ä–∞—Ç –∏–∑ –∫—ç—à–∞:', request.url);
        return cachedResponse;
    }
    
    console.log('üåê Cache First: –ó–∞–ø—Ä–æ—Å –≤ —Å–µ—Ç—å:', request.url);
    const networkResponse = await fetch(request);
    
    // –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    if (networkResponse.ok) {
        cache.put(request, networkResponse.clone());
    }
    
    return networkResponse;
}

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è Network First
 * –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–µ—Ç–∏, –∑–∞—Ç–µ–º –∏–∑ –∫—ç—à–∞
 */
async function networkFirst(request) {
    const cache = await caches.open(CACHE_NAME);
    
    try {
        console.log('üåê Network First: –ó–∞–ø—Ä–æ—Å –≤ —Å–µ—Ç—å:', request.url);
        const networkResponse = await fetch(request);
        
        // –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if (networkResponse.ok) {
            cache.put(request, networkResponse.clone());
        }
        
        return networkResponse;
        
    } catch (error) {
        console.log('üíæ Network First: Fallback –Ω–∞ –∫—ç—à:', request.url);
        const cachedResponse = await cache.match(request);
        
        if (cachedResponse) {
            return cachedResponse;
        }
        
        throw error;
    }
}

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è Network First —Å offline —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
 */
async function networkFirstWithOfflinePage(request) {
    try {
        return await networkFirst(request);
    } catch (error) {
        return await getOfflinePage();
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å offline —Å—Ç—Ä–∞–Ω–∏—Ü—É
 */
async function getOfflinePage() {
    const cache = await caches.open(CACHE_NAME);
    const offlinePage = await cache.match(OFFLINE_PAGE);
    
    if (offlinePage) {
        return offlinePage;
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é offline —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π
    return new Response(`
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Offline - Reader Bot</title>
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    text-align: center;
                    padding: 50px 20px;
                    background: #f7fafc;
                    color: #2d3748;
                }
                .offline-container {
                    max-width: 400px;
                    margin: 0 auto;
                }
                .offline-icon {
                    font-size: 64px;
                    margin-bottom: 20px;
                }
                h1 { color: #667eea; }
                button {
                    background: #667eea;
                    color: white;
                    border: none;
                    padding: 12px 24px;
                    border-radius: 8px;
                    font-size: 16px;
                    cursor: pointer;
                    margin-top: 20px;
                }
                button:hover { background: #5a67d8; }
            </style>
        </head>
        <body>
            <div class="offline-container">
                <div class="offline-icon">üì±</div>
                <h1>–í—ã –Ω–µ –≤ —Å–µ—Ç–∏</h1>
                <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</p>
                <p>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–µ–∂–∏–º–µ offline.</p>
                <button onclick="window.location.reload()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
            </div>
        </body>
        </html>
    `, {
        headers: { 'Content-Type': 'text/html' }
    });
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤
 */
function isStaticResource(pathname) {
    return pathname.endsWith('.css') || 
           pathname.endsWith('.js') || 
           pathname.endsWith('.woff') || 
           pathname.endsWith('.woff2') ||
           pathname.includes('/assets/');
}

function isApiRequest(pathname) {
    return pathname.startsWith('/api/') || 
           API_CACHE_PATTERNS.some(pattern => pathname.includes(pattern));
}

function isImageRequest(pathname) {
    return pathname.endsWith('.png') || 
           pathname.endsWith('.jpg') || 
           pathname.endsWith('.jpeg') || 
           pathname.endsWith('.gif') || 
           pathname.endsWith('.webp') || 
           pathname.endsWith('.svg');
}

function isHTMLRequest(request) {
    return request.headers.get('Accept')?.includes('text/html');
}

/**
 * –°–æ–±—ã—Ç–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ
 */
self.addEventListener('sync', (event) => {
    console.log('üîÑ Service Worker: Background Sync:', event.tag);
    
    if (event.tag === 'sync-quotes') {
        event.waitUntil(syncQuotes());
    }
    
    if (event.tag === 'sync-reports') {
        event.waitUntil(syncReports());
    }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω –∏–∑ storage –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å comprehensive debugging
 */
async function getAuthToken() {
    try {
        let token = null;
        const storageAttempts = [];
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º sessionStorage
        try {
            if (typeof sessionStorage !== 'undefined') {
                token = sessionStorage.getItem('reader_auth_token');
                storageAttempts.push({
                    storage: 'sessionStorage',
                    key: 'reader_auth_token',
                    found: !!token,
                    tokenLength: token?.length
                });
                if (token) {
                    console.log('üîß [SW STORAGE DEBUG] Token found in sessionStorage');
                    return token;
                }
            }
        } catch (sessionError) {
            storageAttempts.push({
                storage: 'sessionStorage',
                error: sessionError.message
            });
        }
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage  
        try {
            if (typeof localStorage !== 'undefined') {
                token = localStorage.getItem('reader_auth_token');
                storageAttempts.push({
                    storage: 'localStorage',
                    key: 'reader_auth_token',
                    found: !!token,
                    tokenLength: token?.length
                });
                if (token) {
                    console.log('üîß [SW STORAGE DEBUG] Token found in localStorage');
                    return token;
                }
            }
        } catch (localError) {
            storageAttempts.push({
                storage: 'localStorage',
                error: localError.message
            });
        }
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏
        const alternativeKeys = ['authToken', 'jwt_token', 'auth_token', 'token'];
        for (const key of alternativeKeys) {
            try {
                // sessionStorage
                if (typeof sessionStorage !== 'undefined') {
                    const altToken = sessionStorage.getItem(key);
                    if (altToken) {
                        storageAttempts.push({
                            storage: 'sessionStorage',
                            key: key,
                            found: true,
                            tokenLength: altToken.length,
                            alternative: true
                        });
                        console.log(`üîß [SW STORAGE DEBUG] Token found in sessionStorage with alternative key: ${key}`);
                        return altToken;
                    }
                }
                
                // localStorage
                if (typeof localStorage !== 'undefined') {
                    const altToken = localStorage.getItem(key);
                    if (altToken) {
                        storageAttempts.push({
                            storage: 'localStorage',
                            key: key,
                            found: true,
                            tokenLength: altToken.length,
                            alternative: true
                        });
                        console.log(`üîß [SW STORAGE DEBUG] Token found in localStorage with alternative key: ${key}`);
                        return altToken;
                    }
                }
            } catch (error) {
                storageAttempts.push({
                    storage: 'both',
                    key: key,
                    error: error.message,
                    alternative: true
                });
            }
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–∞
        console.log('üîß [SW STORAGE DEBUG] Token search complete', {
            timestamp: new Date().toISOString(),
            totalAttempts: storageAttempts.length,
            storageAttempts: storageAttempts,
            tokenFound: false,
            recommendedActions: [
                'Check if user is authenticated',
                'Check if token was properly saved after auth',
                'Check API service setAuthToken method',
                'Check frontend auth flow'
            ]
        });
        
        return null;
    } catch (error) {
        console.error('üîß [SW STORAGE ERROR]', {
            timestamp: new Date().toISOString(),
            errorMessage: error.message,
            errorType: error.constructor.name,
            stackTrace: error.stack?.substring(0, 200)
        });
        return null;
    }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–∏—Ç–∞—Ç –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å comprehensive debugging
 */
async function syncQuotes() {
    try {
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–∏—Ç–∞—Ç...');
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∏–∑ IndexedDB
        const pendingQuotes = await getPendingQuotes();
        
        console.log('üîß [SW SYNC DEBUG]', {
            timestamp: new Date().toISOString(),
            pendingQuotesCount: pendingQuotes.length,
            syncStarted: true
        });

        for (const quote of pendingQuotes) {
            try {
                // üîß SW SYNC QUOTE DEBUG
                const authToken = await getAuthToken();
                
                console.log('üîß [SW SYNC QUOTE DEBUG]', {
                    timestamp: new Date().toISOString(),
                    quoteId: quote.id,
                    hasAuthToken: !!authToken,
                    tokenLength: authToken?.length,
                    tokenPreview: authToken ? `${authToken.substring(0, 30)}...` : null,
                    quoteText: quote.text?.substring(0, 50) + '...'
                });
                
                // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                const headers = { 'Content-Type': 'application/json' };
                if (authToken) {
                    headers['Authorization'] = `Bearer ${authToken}`;
                }
                
                console.log('üîß [SW SYNC REQUEST DEBUG]', {
                    timestamp: new Date().toISOString(),
                    endpoint: '/api/reader/quotes',
                    method: 'POST',
                    headers: Object.keys(headers),
                    hasAuthHeader: !!headers['Authorization'],
                    quoteId: quote.id
                });
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è Reader API
                const response = await fetch('/api/reader/quotes', {
                    method: 'POST',
                    headers: headers,
                    body: JSON.stringify(quote)
                });
                
                console.log('üîß [SW SYNC RESPONSE DEBUG]', {
                    timestamp: new Date().toISOString(),
                    quoteId: quote.id,
                    status: response.status,
                    statusText: response.statusText,
                    ok: response.ok,
                    isAuthError: response.status === 401
                });
                
                if (response.ok) {
                    await removePendingQuote(quote.id);
                    console.log('‚úÖ –¶–∏—Ç–∞—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:', quote.id);
                } else {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ü–∏—Ç–∞—Ç—ã:', {
                        quoteId: quote.id,
                        status: response.status,
                        statusText: response.statusText
                    });
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ü–∏—Ç–∞—Ç—ã:', {
                    quoteId: quote.id,
                    error: error.message,
                    errorType: error.constructor.name
                });
            }
        }
        
        console.log('üîß [SW SYNC COMPLETE]', {
            timestamp: new Date().toISOString(),
            totalQuotes: pendingQuotes.length,
            syncCompleted: true
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ü–∏—Ç–∞—Ç:', {
            error: error.message,
            errorType: error.constructor.name,
            timestamp: new Date().toISOString()
        });
    }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
 */
async function syncReports() {
    try {
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤...');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –æ—Ç—á–µ—Ç–æ–≤
        const cache = await caches.open(CACHE_NAME);
        
        const reportUrls = [
            '/api/reports/weekly/current',
            '/api/reports/monthly/current'
        ];
        
        for (const url of reportUrls) {
            try {
                const response = await fetch(url);
                if (response.ok) {
                    cache.put(url, response.clone());
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:', url, error);
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤:', error);
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
self.addEventListener('push', (event) => {
    console.log('üì® Service Worker: Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ');
    
    const options = {
        body: '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!',
        icon: '/assets/icons/icon-192x192.png',
        badge: '/assets/icons/badge-72x72.png',
        tag: 'reader-bot-notification',
        requireInteraction: false,
        actions: [
            {
                action: 'open',
                title: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'
            },
            {
                action: 'close',
                title: '–ó–∞–∫—Ä—ã—Ç—å'
            }
        ]
    };
    
    if (event.data) {
        try {
            const data = event.data.json();
            options.body = data.body || options.body;
            options.title = data.title || 'Reader Bot';
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ push –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
    
    event.waitUntil(
        self.registration.showNotification('Reader Bot', options)
    );
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
 */
self.addEventListener('notificationclick', (event) => {
    console.log('üîî Service Worker: –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é');
    
    event.notification.close();
    
    if (event.action === 'open' || !event.action) {
        event.waitUntil(
            self.clients.matchAll({ type: 'window' })
                .then((clients) => {
                    // –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ, —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –Ω–µ–º
                    for (const client of clients) {
                        if (client.url.includes(self.location.origin)) {
                            return client.focus();
                        }
                    }
                    
                    // –ò–Ω–∞—á–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
                    return self.clients.openWindow('/');
                })
        );
    }
});

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å IndexedDB (–∑–∞–≥–ª—É—à–∫–∏)
 * –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
 */
async function getPendingQuotes() {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç –∏–∑ IndexedDB
    return [];
}

async function removePendingQuote(quoteId) {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã –∏–∑ IndexedDB
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã:', quoteId);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
self.addEventListener('message', (event) => {
    console.log('üí¨ Service Worker: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', event.data);
    
    if (event.data && event.data.type === 'SKIP_WAITING') {
        self.skipWaiting();
    }
    
    if (event.data && event.data.type === 'GET_VERSION') {
        event.ports[0].postMessage({ version: CACHE_VERSION });
    }
});

console.log('üöÄ Service Worker –∑–∞–≥—Ä—É–∂–µ–Ω, –≤–µ—Ä—Å–∏—è:', CACHE_VERSION);
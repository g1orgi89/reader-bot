/**
 * üîù TopMenu.js - –í–µ—Ä—Ö–Ω–µ–µ –º–µ–Ω—é —Å drawer –≤—ã–¥–≤–∏–∂–Ω–æ–π –ø–∞–Ω–µ–ª—å—é
 * 
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π drawer pattern –∏–∑ modals.css
 * –í–∫–ª—é—á–∞–µ—Ç: –ü—Ä–æ—Ñ–∏–ª—å, –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –ù–∞—Å—Ç—Ä–æ–π–∫–∏, –ü–æ–º–æ—â—å, –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç drawer-right + drawer-backdrop –∏–∑ modals.css
 * - –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 * - Haptic feedback —á–µ—Ä–µ–∑ Telegram
 * - Accessibility support
 * 
 * @class TopMenu
 * @author Claude Assistant
 * @version 2.0.0 - Refactored to use drawer pattern
 */

/**
 * @typedef {Object} MenuItem
 * @property {string} id - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
 * @property {string} label - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞
 * @property {string} icon - SVG –∏–∫–æ–Ω–∫–∞
 * @property {string} [action] - –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ
 * @property {boolean} [isDivider] - –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–Ω—é
 */

/**
 * @typedef {Object} UserInfo
 * @property {string} name - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @property {string} initials - –ò–Ω–∏—Ü–∏–∞–ª—ã
 * @property {Object} stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

class TopMenu {
    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–µ—Ä—Ö–Ω–µ–≥–æ –º–µ–Ω—é
     * @param {Object|App} options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ App instance (backward compatible)
     * @param {Object} options.app - –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
     * @param {Object} options.api - API –∫–ª–∏–µ–Ω—Ç
     * @param {Object} options.state - –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     * @param {Object} options.telegram - Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
     */
    constructor(options) {
        // Backward compatibility: support both new TopMenu(app) and new TopMenu({ app })
        let app, api, state, telegram;
        
        if (options && typeof options === 'object' && options.api && options.state) {
            // New style: { app, api, state, telegram }
            ({ app, api, state, telegram } = options);
        } else if (options && typeof options === 'object' && options.router) {
            // Legacy style: direct app object
            app = options;
            api = options.api;
            state = options.state;
            telegram = options.telegram;
        } else {
            throw new Error('TopMenu: Invalid constructor arguments');
        }
        
        this.app = app;
        this.api = api;
        this.state = state;
        this.telegram = telegram;
        
        this.isOpen = false;
        this.drawer = null;
        this.backdrop = null;
        this.triggerButton = null;
        this.subscriptions = [];
        
        // üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ–Ω—é
        this.menuItems = [
            {
                id: 'profile',
                label: '–ü—Ä–æ—Ñ–∏–ª—å',
                icon: this.getProfileIcon(),
                action: 'profile'
            },
            {
                id: 'achievements',
                label: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                icon: this.getAchievementsIcon(),
                action: 'achievements'
            },
            {
                id: 'divider1',
                isDivider: true
            },
            {
                id: 'settings',
                label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                icon: this.getSettingsIcon(),
                action: 'settings'
            },
            {
                id: 'help',
                label: '–ü–æ–º–æ—â—å',
                icon: this.getHelpIcon(),
                action: 'help'
            },
            {
                id: 'about',
                label: '–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
                icon: this.getAboutIcon(),
                action: 'about'
            }
        ];
        
        this.init();
    }

    /**
     * üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    init() {
        this.createDrawerElements();
        this.attachEventListeners();
        this.subscribeToStateChanges();
        
        console.log('‚úÖ TopMenu: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å drawer pattern');
    }

    /**
     * üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ drawer —Å–æ–≥–ª–∞—Å–Ω–æ modals.css
     */
    createDrawerElements() {
        // –°–æ–∑–¥–∞–µ–º drawer
        this.drawer = document.createElement('div');
        this.drawer.className = 'drawer drawer-right';
        this.drawer.id = 'topMenuDrawer';
        this.drawer.setAttribute('role', 'dialog');
        this.drawer.setAttribute('aria-modal', 'true');
        this.drawer.setAttribute('aria-labelledby', 'topMenuTitle');
        this.drawer.innerHTML = this.renderDrawerContent();

        // –°–æ–∑–¥–∞–µ–º backdrop –∫–∞–∫ sibling —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ .drawer.active + .drawer-backdrop
        this.backdrop = document.createElement('div');
        this.backdrop.className = 'drawer-backdrop';
        this.backdrop.id = 'topMenuBackdrop';

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
        document.body.appendChild(this.drawer);
        document.body.appendChild(this.backdrop);
    }

    /**
     * üé® –†–µ–Ω–¥–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ drawer
     * @returns {string} HTML —Ä–∞–∑–º–µ—Ç–∫–∞
     */
    renderDrawerContent() {
        const userInfo = this.getUserInfo();
        const menuItemsHTML = this.menuItems.map(item => 
            item.isDivider ? '<div class="menu-divider"></div>' : this.renderMenuItem(item)
        ).join('');

        return `
            <div class="drawer-header">
                <button class="drawer-close" aria-label="–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="18" y1="6" x2="6" y2="18"></line>
                        <line x1="6" y1="6" x2="18" y2="18"></line>
                    </svg>
                </button>
                <h2 id="topMenuTitle" class="drawer-title">–ú–µ–Ω—é</h2>
            </div>
            
            <div class="drawer-body">
                <div class="menu-user-info">
                    ${this.renderUserAvatar()}
                    <div class="user-details">
                        <h3 class="user-name">${userInfo.name}</h3>
                        <p class="user-stats">${this.formatUserStats(userInfo.stats)}</p>
                    </div>
                </div>
                
                <nav class="menu-items" role="navigation">
                    ${menuItemsHTML}
                </nav>
            </div>
        `;
    }

    /**
     * üéØ –†–µ–Ω–¥–µ—Ä –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
     * @param {MenuItem} item - –ü—É–Ω–∫—Ç –º–µ–Ω—é
     * @returns {string} HTML –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
     */
    renderMenuItem(item) {
        return `
            <button class="menu-item" data-action="${item.action}" data-menu-id="${item.id}">
                <span class="menu-icon">
                    ${item.icon}
                </span>
                <span class="menu-text">${item.label}</span>
            </button>
        `;
    }

    /**
     * üéß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        if (!this.drawer || !this.backdrop) return;

        // ‚ùå –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeButton = this.drawer.querySelector('.drawer-close');
        if (closeButton) {
            closeButton.addEventListener('click', () => {
                this.close();
            });
        }

        // üëÜ –ö–ª–∏–∫ –ø–æ backdrop –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        this.backdrop.addEventListener('click', () => {
            this.close();
        });

        // üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –ø—É–Ω–∫—Ç–∞–º –º–µ–Ω—é
        const menuItems = this.drawer.querySelectorAll('.menu-item');
        menuItems.forEach(item => {
            item.addEventListener('click', (e) => {
                const action = e.currentTarget.dataset.action;
                const menuId = e.currentTarget.dataset.menuId;
                
                this.handleMenuAction(action, menuId);
            });
        });

        // ‚å®Ô∏è –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
        this.escHandler = (e) => {
            if (e.key === 'Escape' && this.isOpen) {
                this.close();
            }
        };
        document.addEventListener('keydown', this.escHandler);

        // üß≠ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω router)
        this.navigationHandler = () => {
            if (this.isOpen) {
                this.close();
            }
        };
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è hash –¥–ª—è –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è
        window.addEventListener('hashchange', this.navigationHandler);
    }

    /**
     * üìñ –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
     */
    open() {
        if (this.isOpen) return;
        
        this.isOpen = true;
        this.drawer.classList.add('active');
        
        // ‚ö° Haptic feedback
        if (this.telegram?.hapticFeedback) {
            try {
                this.telegram.hapticFeedback('light');
            } catch (error) {
                console.warn('TopMenu: Haptic feedback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        }
        
        // üîí –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.body.classList.add('modal-open');
        
        console.log('‚úÖ TopMenu: –ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ');
    }

    /**
     * üìï –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
     */
    close() {
        if (!this.isOpen) return;
        
        this.isOpen = false;
        this.drawer.classList.remove('active');
        
        // üîì –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.body.classList.remove('modal-open');
        
        console.log('‚úÖ TopMenu: –ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ');
    }

    /**
     * üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω—é
     */
    toggle() {
        if (this.isOpen) {
            this.close();
        } else {
            this.open();
        }
    }

    /**
     * üëÅÔ∏è –ú–µ—Ç–æ–¥ onHide –¥–ª—è lifecycle —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    onHide() {
        this.close();
    }

    /**
     * üîß –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –≤–Ω–µ—à–Ω–µ–π –∫–Ω–æ–ø–∫–µ (helper –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
     * @param {HTMLElement} buttonEl - –ö–Ω–æ–ø–∫–∞-—Ç—Ä–∏–≥–≥–µ—Ä
     */
    attachToButton(buttonEl) {
        if (!buttonEl) return;
        
        this.triggerButton = buttonEl;
        buttonEl.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            this.toggle();
        });
        
        console.log('‚úÖ TopMenu: –ü—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–æ–ø–∫–µ', buttonEl);
    }

    /**
     * üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–µ–Ω—é
     * @param {string} action - –î–µ–π—Å—Ç–≤–∏–µ
     * @param {string} _menuId - ID –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
     */
    handleMenuAction(action, _menuId) {
        try {
            // ‚ö° Haptic feedback
            if (this.telegram?.hapticFeedback) {
                try {
                    this.telegram.hapticFeedback('light');
                } catch (error) {
                    console.warn('TopMenu: Haptic feedback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                }
            }

            // üìï –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ü–ï–†–ï–î –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏—è
            this.close();

            // üéØ –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ - always navigate to routes
            this.navigateToRoute(action);

            console.log('‚úÖ TopMenu: –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ', action);
            
        } catch (error) {
            console.error('‚ùå TopMenu: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è', error);
            
            // ‚ùå Haptic feedback –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if (this.telegram?.hapticFeedback) {
                try {
                    this.telegram.hapticFeedback('error');
                } catch (error) {
                    console.warn('TopMenu: Error haptic feedback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                }
            }
        }
    }

    /**
     * üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –º–∞—Ä—à—Ä—É—Ç—É 
     * @param {string} action - –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    navigateToRoute(action) {
        const routes = {
            'profile': '/profile',
            'achievements': '/achievements', 
            'settings': '/settings',
            'help': '/help',
            'about': '/about'
        };

        const route = routes[action];
        if (route) {
            // Prefer app.navigate if available, else use app.router.navigate, else fallback to hash
            if (this.app && typeof this.app.navigate === 'function') {
                this.app.navigate(route);
            } else if (typeof window.appNavigate === 'function') {
                window.appNavigate(route);
            } else if (this.app && this.app.router && typeof this.app.router.navigate === 'function') {
                this.app.router.navigate(route);
            } else {
                // Safe fallback only - update location.hash (no history overwrite)
                window.location.hash = route;
            }
        } else {
            console.warn('TopMenu: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è', action);
        }
    }

    /**
     * üîÑ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    subscribeToStateChanges() {
        if (!this.state?.subscribe) return;

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const profileSubscription = this.state.subscribe('user.profile', () => {
            this.updateUserInfo();
        });
        this.subscriptions.push(profileSubscription);

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const statsSubscription = this.state.subscribe('stats', () => {
            this.updateUserInfo();
        });
        this.subscriptions.push(statsSubscription);

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        const achievementsSubscription = this.state.subscribe('achievements.items', () => {
            this.updateUserInfo();
        });
        this.subscriptions.push(achievementsSubscription);

        console.log('‚úÖ TopMenu: –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }

    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ UI
     */
    updateUserInfo() {
        if (!this.drawer) return;

        const userInfo = this.getUserInfo();
        
        const avatarContainer = this.drawer.querySelector('.user-avatar');
        const name = this.drawer.querySelector('.user-name');
        const stats = this.drawer.querySelector('.user-stats');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä
        if (avatarContainer) {
            avatarContainer.outerHTML = this.renderUserAvatar();
        }
        
        if (name) name.textContent = userInfo.name;
        if (stats) stats.textContent = this.formatUserStats(userInfo.stats);

        console.log('üîÑ TopMenu: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    }

    /**
     * üñºÔ∏è –†–µ–Ω–¥–µ—Ä –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     */
    renderUserAvatar() {
        const profile = this.state?.get('user.profile');
        const avatarUrl = profile?.avatarUrl;
        const telegramPhotoUrl = this.telegram?.getUser()?.photo_url;
        const userInfo = this.getUserInfo();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        const imageUrl = avatarUrl || telegramPhotoUrl;
        
        if (imageUrl) {
            return `
                <div class="user-avatar">
                    <img class="menu-user-avatar-img" src="${imageUrl}" alt="–ê–≤–∞—Ç–∞—Ä" 
                         onerror="this.style.display='none'; this.parentElement.classList.add('fallback')" />
                    <div class="user-avatar-fallback">${userInfo.initials}</div>
                </div>
            `;
        } else {
            return `
                <div class="user-avatar fallback">
                    <div class="user-avatar-fallback">${userInfo.initials}</div>
                </div>
            `;
        }
    }

    /**
     * üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
        this.close();

        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        if (this.escHandler) {
            document.removeEventListener('keydown', this.escHandler);
        }
        if (this.navigationHandler) {
            window.removeEventListener('hashchange', this.navigationHandler);
        }

        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.subscriptions.forEach(unsubscribe => {
            if (typeof unsubscribe === 'function') {
                unsubscribe();
            }
        });
        this.subscriptions = [];

        // –£–¥–∞–ª—è–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        if (this.drawer && this.drawer.parentNode) {
            this.drawer.parentNode.removeChild(this.drawer);
        }
        if (this.backdrop && this.backdrop.parentNode) {
            this.backdrop.parentNode.removeChild(this.backdrop);
        }
        
        this.drawer = null;
        this.backdrop = null;
        this.triggerButton = null;
        
        console.log('üßπ TopMenu: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }

    /**
     * üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     * @returns {UserInfo} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    getUserInfo() {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const userProfile = this.state?.get('user.profile');
        const stats = this.state?.get('stats');
        const achievementsCount = this.state?.get('achievements.items')?.length || 0;
        
        if (userProfile) {
            return {
                name: userProfile.name || userProfile.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                initials: this.getInitials(userProfile.name || userProfile.firstName),
                stats: {
                    totalQuotes: stats?.totalQuotes || 0,
                    currentStreak: stats?.currentStreak || 0,
                    achievementsCount
                }
            };
        }
        
        // Fallback –∏–∑ Telegram –¥–∞–Ω–Ω—ã—Ö
        const telegramData = this.state?.get('user.telegramData');
        if (telegramData) {
            const fullName = `${telegramData.first_name} ${telegramData.last_name || ''}`.trim();
            return {
                name: fullName || telegramData.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                initials: this.getInitials(fullName),
                stats: {
                    totalQuotes: 0,
                    currentStreak: 0,
                    achievementsCount: 0
                }
            };
        }
        
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return {
            name: '–¢–µ—Å—Ç–µ—Ä',
            initials: '–¢',
            stats: {
                totalQuotes: 0,
                currentStreak: 0,
                achievementsCount: 0
            }
        };
    }

    /**
     * üî§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤ –∏–∑ –∏–º–µ–Ω–∏ (–¥–æ –¥–≤—É—Ö —Å–ª–æ–≤)
     * @param {string} name - –ü–æ–ª–Ω–æ–µ –∏–º—è
     * @returns {string} –ò–Ω–∏—Ü–∏–∞–ª—ã
     */
    getInitials(name) {
        if (!name) return '?';
        
        const words = name.trim().split(' ').filter(word => word.length > 0);
        if (words.length === 0) return '?';
        if (words.length === 1) return words[0][0]?.toUpperCase() || '?';
        
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Å–ª–æ–≤
        return `${words[0][0]?.toUpperCase() || ''}${words[1][0]?.toUpperCase() || ''}`;
    }

    /**
     * üìä –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    formatUserStats(stats) {
        if (!stats) return '–ù–∞—á–∏–Ω–∞—é—â–∏–π —á–∏—Ç–∞—Ç–µ–ª—å';
        
        const parts = [];
        if (stats.totalQuotes > 0) parts.push(`${stats.totalQuotes} —Ü–∏—Ç–∞—Ç`);
        if (stats.currentStreak > 0) parts.push(`${stats.currentStreak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥`);
        if (stats.achievementsCount > 0) parts.push(`${stats.achievementsCount} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`);
        
        return parts.length > 0 ? parts.join(' ‚Ä¢ ') : '–ù–∞—á–∏–Ω–∞—é—â–∏–π —á–∏—Ç–∞—Ç–µ–ª—å';
    }

    // üé® SVG –ò–ö–û–ù–ö–ò

    /**
     * üë§ –ò–∫–æ–Ω–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
     * @returns {string} SVG –∏–∫–æ–Ω–∫–∞
     */
    getProfileIcon() {
        return `
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
                <circle cx="12" cy="7" r="4"/>
            </svg>
        `;
    }

    /**
     * üèÜ –ò–∫–æ–Ω–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     * @returns {string} SVG –∏–∫–æ–Ω–∫–∞
     */
    getAchievementsIcon() {
        return `
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M6 9H4.5a2.5 2.5 0 0 1 0-5H6"/>
                <path d="M18 9h1.5a2.5 2.5 0 0 0 0-5H18"/>
                <path d="M4 22h16"/>
                <path d="M10 14.66V17c0 .55-.47.98-.97 1.21C7.85 18.75 7 20.24 7 22"/>
                <path d="M14 14.66V17c0 .55.47.98.97 1.21C16.15 18.75 17 20.24 17 22"/>
                <path d="M18 2H6v7a6 6 0 0 0 12 0V2Z"/>
            </svg>
        `;
    }

    /**
     * ‚öôÔ∏è –ò–∫–æ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     * @returns {string} SVG –∏–∫–æ–Ω–∫–∞
     */
    getSettingsIcon() {
        return `
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="12" cy="12" r="3"/>
                <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1 1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82v.79a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"/>
            </svg>
        `;
    }

    /**
     * ‚ùì –ò–∫–æ–Ω–∫–∞ –ø–æ–º–æ—â–∏
     * @returns {string} SVG –∏–∫–æ–Ω–∫–∞
     */
    getHelpIcon() {
        return `
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="12" cy="12" r="10"/>
                <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"/>
                <point cx="12" cy="17" r="1"/>
            </svg>
        `;
    }

    /**
     * ‚ÑπÔ∏è –ò–∫–æ–Ω–∫–∞ "–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
     * @returns {string} SVG –∏–∫–æ–Ω–∫–∞
     */
    getAboutIcon() {
        return `
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="12" cy="12" r="10"/>
                <path d="M12 16v-4"/>
                <path d="M12 8h.01"/>
            </svg>
        `;
    }
}

// üåç –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = TopMenu;
} else {
    window.TopMenu = TopMenu;
}

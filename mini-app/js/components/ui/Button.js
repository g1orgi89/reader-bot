/**
 * üî≤ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ö–ù–û–ü–ö–ò - Button.js
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –†–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: primary, secondary, danger, ghost, outline
 * - –°–æ—Å—Ç–æ—è–Ω–∏—è: loading, disabled, active
 * - –†–∞–∑–º–µ—Ä—ã: small, medium, large
 * - Haptic feedback –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram
 * - Touch-friendly –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 * - –ò–∫–æ–Ω–∫–∏ –∏ —Ç–µ–∫—Å—Ç
 */

class Button {
    constructor(options = {}) {
        this.options = {
            variant: 'primary', // primary, secondary, danger, ghost, outline
            size: 'medium',     // small, medium, large
            disabled: false,
            loading: false,
            icon: null,
            iconPosition: 'left', // left, right, only
            haptic: 'light',    // light, medium, heavy, none
            fullWidth: false,
            ...options
        };
        
        this.element = null;
        this.telegram = window.Telegram?.WebApp;
        
        this.init();
    }
    
    /**
     * üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
     */
    init() {
        this.createElement();
        this.attachEventListeners();
    }
    
    /**
     * üé® –°–æ–∑–¥–∞–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–Ω–æ–ø–∫–∏
     */
    createElement() {
        this.element = document.createElement('button');
        this.element.className = this.getClasses();
        this.element.innerHTML = this.getContent();
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ü–∏–π
        if (this.options.disabled) {
            this.element.disabled = true;
        }
        
        if (this.options.loading) {
            this.element.classList.add('loading');
            this.element.disabled = true;
        }
        
        // –ê—Ç—Ä–∏–±—É—Ç—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        this.element.setAttribute('type', 'button');
        if (this.options.ariaLabel) {
            this.element.setAttribute('aria-label', this.options.ariaLabel);
        }
    }
    
    /**
     * üé≠ –ü–æ–ª—É—á–µ–Ω–∏–µ CSS –∫–ª–∞—Å—Å–æ–≤
     */
    getClasses() {
        const classes = ['btn'];
        
        // –í–∞—Ä–∏–∞–Ω—Ç –∫–Ω–æ–ø–∫–∏
        classes.push(`btn--${this.options.variant}`);
        
        // –†–∞–∑–º–µ—Ä
        classes.push(`btn--${this.options.size}`);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        if (this.options.fullWidth) classes.push('btn--full-width');
        if (this.options.loading) classes.push('btn--loading');
        if (this.options.disabled) classes.push('btn--disabled');
        if (this.options.icon && this.options.iconPosition === 'only') {
            classes.push('btn--icon-only');
        }
        
        return classes.join(' ');
    }
    
    /**
     * üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–Ω–æ–ø–∫–∏
     */
    getContent() {
        const { text, icon, iconPosition, loading } = this.options;
        
        if (loading) {
            return `
                <span class="btn__spinner">
                    <svg class="btn__spinner-icon" viewBox="0 0 24 24">
                        <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" 
                                fill="none" stroke-linecap="round" stroke-dasharray="31.416" 
                                stroke-dashoffset="31.416">
                            <animate attributeName="stroke-dasharray" dur="2s" 
                                     values="0 31.416;15.708 15.708;0 31.416" repeatCount="indefinite"/>
                            <animate attributeName="stroke-dashoffset" dur="2s" 
                                     values="0;-15.708;-31.416" repeatCount="indefinite"/>
                        </circle>
                    </svg>
                </span>
                ${text ? `<span class="btn__text btn__text--loading">${text}</span>` : ''}
            `;
        }
        
        if (iconPosition === 'only' && icon) {
            return `<span class="btn__icon">${icon}</span>`;
        }
        
        let content = '';
        
        if (icon && iconPosition === 'left') {
            content += `<span class="btn__icon btn__icon--left">${icon}</span>`;
        }
        
        if (text) {
            content += `<span class="btn__text">${text}</span>`;
        }
        
        if (icon && iconPosition === 'right') {
            content += `<span class="btn__icon btn__icon--right">${icon}</span>`;
        }
        
        return content;
    }
    
    /**
     * üì± –ù–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        if (!this.element) return;
        
        // –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–∫
        this.element.addEventListener('click', (e) => {
            this.handleClick(e);
        });
        
        // Touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        this.element.addEventListener('touchstart', () => {
            if (!this.options.disabled && !this.options.loading) {
                this.element.classList.add('btn--pressed');
            }
        });
        
        this.element.addEventListener('touchend', () => {
            this.element.classList.remove('btn--pressed');
        });
        
        this.element.addEventListener('touchcancel', () => {
            this.element.classList.remove('btn--pressed');
        });
    }
    
    /**
     * üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
     */
    handleClick(event) {
        if (this.options.disabled || this.options.loading) {
            event.preventDefault();
            return;
        }
        
        // Haptic feedback
        this.triggerHaptic();
        
        // –í—ã–∑–æ–≤ –∫–æ–ª–±—ç–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.options.onClick) {
            this.options.onClick(event, this);
        }
    }
    
    /**
     * üì≥ –í–∏–±—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram API
     */
    triggerHaptic() {
        if (this.options.haptic === 'none') return;
        
        if (this.telegram && this.telegram.HapticFeedback) {
            switch (this.options.haptic) {
                case 'light':
                    this.telegram.HapticFeedback.impactOccurred('light');
                    break;
                case 'medium':
                    this.telegram.HapticFeedback.impactOccurred('medium');
                    break;
                case 'heavy':
                    this.telegram.HapticFeedback.impactOccurred('heavy');
                    break;
            }
        }
    }
    
    /**
     * üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    setLoading(loading = true) {
        this.options.loading = loading;
        
        if (loading) {
            this.element.classList.add('btn--loading');
            this.element.disabled = true;
        } else {
            this.element.classList.remove('btn--loading');
            this.element.disabled = this.options.disabled;
        }
        
        this.element.innerHTML = this.getContent();
    }
    
    /**
     * üö´ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è disabled
     */
    setDisabled(disabled = true) {
        this.options.disabled = disabled;
        this.element.disabled = disabled;
        
        if (disabled) {
            this.element.classList.add('btn--disabled');
        } else {
            this.element.classList.remove('btn--disabled');
        }
    }
    
    /**
     * üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
     */
    setText(text) {
        this.options.text = text;
        this.element.innerHTML = this.getContent();
    }
    
    /**
     * üé® –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏
     */
    setIcon(icon) {
        this.options.icon = icon;
        this.element.innerHTML = this.getContent();
    }
    
    /**
     * üé≠ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–Ω–æ–ø–∫–∏
     */
    setVariant(variant) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª–∞—Å—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞
        this.element.classList.remove(`btn--${this.options.variant}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        this.options.variant = variant;
        this.element.classList.add(`btn--${variant}`);
    }
    
    /**
     * üéØ –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–ª–∏–∫
     */
    click() {
        if (!this.options.disabled && !this.options.loading) {
            this.element.click();
        }
    }
    
    /**
     * üé™ –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞
     */
    showSuccess(duration = 2000) {
        const originalContent = this.element.innerHTML;
        const originalVariant = this.options.variant;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–æ—á–∫—É
        this.element.innerHTML = `<span class="btn__icon">‚úì</span>`;
        this.setVariant('success');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ duration
        setTimeout(() => {
            this.element.innerHTML = originalContent;
            this.setVariant(originalVariant);
        }, duration);
    }
    
    /**
     * ‚ö†Ô∏è –ê–Ω–∏–º–∞—Ü–∏—è –æ—à–∏–±–∫–∏
     */
    showError(duration = 2000) {
        const originalContent = this.element.innerHTML;
        const originalVariant = this.options.variant;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–µ—Å—Ç–∏–∫
        this.element.innerHTML = `<span class="btn__icon">‚úï</span>`;
        this.setVariant('danger');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ duration
        setTimeout(() => {
            this.element.innerHTML = originalContent;
            this.setVariant(originalVariant);
        }, duration);
    }
    
    /**
     * üé™ Pulse –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è
     */
    pulse(count = 3) {
        let pulseCount = 0;
        const pulseInterval = setInterval(() => {
            this.element.style.transform = 'scale(1.05)';
            setTimeout(() => {
                this.element.style.transform = 'scale(1)';
            }, 150);
            
            pulseCount++;
            if (pulseCount >= count) {
                clearInterval(pulseInterval);
            }
        }, 300);
    }
    
    /**
     * üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        if (this.element && this.element.parentNode) {
            this.element.parentNode.removeChild(this.element);
        }
        this.element = null;
    }
    
    /**
     * üì§ –ü–æ–ª—É—á–µ–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    getElement() {
        return this.element;
    }
    
    /**
     * üè≠ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã-—Ñ–∞–±—Ä–∏–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
     */
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
     */
    static primary(text, onClick, options = {}) {
        return new Button({
            variant: 'primary',
            text,
            onClick,
            ...options
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–∏—á–Ω–æ–π –∫–Ω–æ–ø–∫–∏
     */
    static secondary(text, onClick, options = {}) {
        return new Button({
            variant: 'secondary',
            text,
            onClick,
            ...options
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏-–ø—Ä–∏–∑—Ä–∞–∫–∞
     */
    static ghost(text, onClick, options = {}) {
        return new Button({
            variant: 'ghost',
            text,
            onClick,
            ...options
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ–ø–∞—Å–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
     */
    static danger(text, onClick, options = {}) {
        return new Button({
            variant: 'danger',
            text,
            onClick,
            haptic: 'medium',
            ...options
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ —Å –∏–∫–æ–Ω–∫–æ–π
     */
    static icon(icon, onClick, options = {}) {
        return new Button({
            variant: 'ghost',
            icon,
            iconPosition: 'only',
            onClick,
            ...options
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ CTA –∫–Ω–æ–ø–∫–∏ (–±–æ–ª—å—à–∞—è, —è—Ä–∫–∞—è)
     */
    static cta(text, onClick, options = {}) {
        return new Button({
            variant: 'primary',
            size: 'large',
            fullWidth: true,
            haptic: 'medium',
            text,
            onClick,
            ...options
        });
    }
}

// üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.Button = Button;
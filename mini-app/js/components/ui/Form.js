/**
 * üìù –§–û–†–ú–´ –° –í–ê–õ–ò–î–ê–¶–ò–ï–ô - Form.js
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–ª–µ–π: text, textarea, select, checkbox, radio
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * - –°–æ—Å—Ç–æ—è–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ —É—Å–ø–µ—Ö–∞
 * - Touch-friendly –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å  
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API
 * - –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
 * - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */

class Form {
    constructor(options = {}) {
        this.options = {
            fields: [],               // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª–µ–π
            submitButton: null,       // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
            resetButton: null,        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞
            validation: 'realtime',   // realtime, submit, manual
            autoSave: false,          // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
            autoSaveKey: null,        // –ö–ª—é—á –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            className: '',            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ CSS –∫–ª–∞—Å—Å—ã  
            haptic: true,             // Haptic feedback
            ...options
        };
        
        this.element = null;
        this.fields = new Map();
        this.data = {};
        this.errors = {};
        this.touched = {};
        this.telegram = window.Telegram?.WebApp;
        
        this.init();
    }
    
    /**
     * üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
     */
    init() {
        this.createElement();
        this.initializeFields();
        this.attachEventListeners();
        this.loadAutoSavedData();
    }
    
    /**
     * üé® –°–æ–∑–¥–∞–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–∞ —Ñ–æ—Ä–º—ã
     */
    createElement() {
        this.element = document.createElement('form');
        this.element.className = this.getClasses();
        this.element.innerHTML = this.getContent();
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
        this.element.setAttribute('novalidate', 'true');
    }
    
    /**
     * üé≠ –ü–æ–ª—É—á–µ–Ω–∏–µ CSS –∫–ª–∞—Å—Å–æ–≤
     */
    getClasses() {
        const classes = ['form'];
        
        if (this.options.className) {
            classes.push(this.options.className);
        }
        
        return classes.join(' ');
    }
    
    /**
     * üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–æ—Ä–º—ã
     */
    getContent() {
        const fields = this.options.fields.map(field => this.renderField(field)).join('');
        const buttons = this.renderButtons();
        
        return `
            <div class="form__fields">
                ${fields}
            </div>
            ${buttons}
        `;
    }
    
    /**
     * üìù –†–µ–Ω–¥–µ—Ä –ø–æ–ª—è —Ñ–æ—Ä–º—ã
     */
    renderField(field) {
        const fieldId = `field-${field.name}`;
        const hasError = this.errors[field.name];
        const fieldClasses = [
            'form__field',
            `form__field--${field.type}`,
            hasError ? 'form__field--error' : '',
            field.required ? 'form__field--required' : ''
        ].filter(Boolean).join(' ');
        
        return `
            <div class="${fieldClasses}" data-field="${field.name}">
                ${field.label ? this.renderLabel(field, fieldId) : ''}
                ${this.renderInput(field, fieldId)}
                ${this.renderFieldHelp(field)}
                ${this.renderFieldError(field)}
            </div>
        `;
    }
    
    /**
     * üè∑Ô∏è –†–µ–Ω–¥–µ—Ä –ª–µ–π–±–ª–∞ –ø–æ–ª—è
     */
    renderLabel(field, fieldId) {
        return `
            <label class="form__label" for="${fieldId}">
                ${field.label}
                ${field.required ? '<span class="form__required">*</span>' : ''}
            </label>
        `;
    }
    
    /**
     * ‚úçÔ∏è –†–µ–Ω–¥–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–≤–æ–¥–∞
     */
    renderInput(field, fieldId) {
        switch (field.type) {
            case 'textarea':
                return this.renderTextarea(field, fieldId);
            case 'select':
                return this.renderSelect(field, fieldId);
            case 'checkbox':
                return this.renderCheckbox(field, fieldId);
            case 'radio':
                return this.renderRadio(field, fieldId);
            case 'file':
                return this.renderFile(field, fieldId);
            case 'text':
            case 'email':
            case 'password':
            case 'number':
            case 'tel':
            case 'url':
            default:
                return this.renderTextInput(field, fieldId);
        }
    }
    
    /**
     * üìù –†–µ–Ω–¥–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
     */
    renderTextInput(field, fieldId) {
        const value = this.data[field.name] || field.defaultValue || '';
        
        return `
            <input 
                type="${field.type || 'text'}"
                id="${fieldId}"
                name="${field.name}"
                class="form__input"
                value="${this.escapeHtml(value)}"
                placeholder="${field.placeholder || ''}"
                ${field.required ? 'required' : ''}
                ${field.disabled ? 'disabled' : ''}
                ${field.readonly ? 'readonly' : ''}
                ${field.min !== undefined ? `min="${field.min}"` : ''}
                ${field.max !== undefined ? `max="${field.max}"` : ''}
                ${field.minLength !== undefined ? `minlength="${field.minLength}"` : ''}
                ${field.maxLength !== undefined ? `maxlength="${field.maxLength}"` : ''}
                ${field.pattern ? `pattern="${field.pattern}"` : ''}
                autocomplete="${field.autocomplete || 'off'}"
            >
        `;
    }
    
    /**
     * üìÑ –†–µ–Ω–¥–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏
     */
    renderTextarea(field, fieldId) {
        const value = this.data[field.name] || field.defaultValue || '';
        
        return `
            <textarea 
                id="${fieldId}"
                name="${field.name}"
                class="form__textarea"
                placeholder="${field.placeholder || ''}"
                ${field.required ? 'required' : ''}
                ${field.disabled ? 'disabled' : ''}
                ${field.readonly ? 'readonly' : ''}
                ${field.minLength !== undefined ? `minlength="${field.minLength}"` : ''}
                ${field.maxLength !== undefined ? `maxlength="${field.maxLength}"` : ''}
                rows="${field.rows || 3}"
            >${this.escapeHtml(value)}</textarea>
            ${field.maxLength ? `
                <div class="form__char-counter">
                    <span class="form__char-current">${value.length}</span>/<span class="form__char-max">${field.maxLength}</span>
                </div>
            ` : ''}
        `;
    }
    
    /**
     * üìã –†–µ–Ω–¥–µ—Ä –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
     */
    renderSelect(field, fieldId) {
        const value = this.data[field.name] || field.defaultValue || '';
        
        return `
            <select 
                id="${fieldId}"
                name="${field.name}"
                class="form__select"
                ${field.required ? 'required' : ''}
                ${field.disabled ? 'disabled' : ''}
                ${field.multiple ? 'multiple' : ''}
            >
                ${!field.required && !field.multiple ? '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ...</option>' : ''}
                ${(field.options || []).map(option => `
                    <option value="${this.escapeHtml(option.value)}" 
                            ${option.value === value ? 'selected' : ''}>
                        ${this.escapeHtml(option.label)}
                    </option>
                `).join('')}
            </select>
        `;
    }
    
    /**
     * ‚òëÔ∏è –†–µ–Ω–¥–µ—Ä —á–µ–∫–±–æ–∫—Å–∞
     */
    renderCheckbox(field, fieldId) {
        const checked = this.data[field.name] || field.defaultValue || false;
        
        return `
            <div class="form__checkbox-wrapper">
                <input 
                    type="checkbox"
                    id="${fieldId}"
                    name="${field.name}"
                    class="form__checkbox"
                    value="${field.value || 'true'}"
                    ${checked ? 'checked' : ''}
                    ${field.required ? 'required' : ''}
                    ${field.disabled ? 'disabled' : ''}
                >
                <label class="form__checkbox-label" for="${fieldId}">
                    <span class="form__checkbox-indicator"></span>
                    <span class="form__checkbox-text">${field.text || field.label}</span>
                </label>
            </div>
        `;
    }
    
    /**
     * üîò –†–µ–Ω–¥–µ—Ä —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–æ–∫
     */
    renderRadio(field, fieldId) {
        const value = this.data[field.name] || field.defaultValue || '';
        
        return `
            <div class="form__radio-group">
                ${(field.options || []).map((option, index) => {
                    const optionId = `${fieldId}-${index}`;
                    return `
                        <div class="form__radio-wrapper">
                            <input 
                                type="radio"
                                id="${optionId}"
                                name="${field.name}"
                                class="form__radio"
                                value="${this.escapeHtml(option.value)}"
                                ${option.value === value ? 'checked' : ''}
                                ${field.required ? 'required' : ''}
                                ${field.disabled ? 'disabled' : ''}
                            >
                            <label class="form__radio-label" for="${optionId}">
                                <span class="form__radio-indicator"></span>
                                <span class="form__radio-text">${this.escapeHtml(option.label)}</span>
                            </label>
                        </div>
                    `;
                }).join('')}
            </div>
        `;
    }
    
    /**
     * üìÅ –†–µ–Ω–¥–µ—Ä –ø–æ–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
     */
    renderFile(field, fieldId) {
        return `
            <div class="form__file-wrapper">
                <input 
                    type="file"
                    id="${fieldId}"
                    name="${field.name}"
                    class="form__file"
                    ${field.accept ? `accept="${field.accept}"` : ''}
                    ${field.multiple ? 'multiple' : ''}
                    ${field.required ? 'required' : ''}
                    ${field.disabled ? 'disabled' : ''}
                >
                <label class="form__file-label" for="${fieldId}">
                    <span class="form__file-icon">üìÅ</span>
                    <span class="form__file-text">
                        ${field.multiple ? '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã' : '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª'}
                    </span>
                </label>
                <div class="form__file-list" id="file-list-${field.name}"></div>
            </div>
        `;
    }
    
    /**
     * ‚ùì –†–µ–Ω–¥–µ—Ä —Å–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—è
     */
    renderFieldHelp(field) {
        if (!field.help) return '';
        
        return `
            <div class="form__help">
                ${field.help}
            </div>
        `;
    }
    
    /**
     * ‚ö†Ô∏è –†–µ–Ω–¥–µ—Ä –æ—à–∏–±–∫–∏ –ø–æ–ª—è
     */
    renderFieldError(field) {
        const error = this.errors[field.name];
        if (!error) return '';
        
        return `
            <div class="form__error" role="alert">
                ${error}
            </div>
        `;
    }
    
    /**
     * üî≤ –†–µ–Ω–¥–µ—Ä –∫–Ω–æ–ø–æ–∫ —Ñ–æ—Ä–º—ã
     */
    renderButtons() {
        if (!this.options.submitButton && !this.options.resetButton) {
            return '';
        }
        
        return `
            <div class="form__buttons">
                ${this.options.resetButton ? this.renderResetButton() : ''}
                ${this.options.submitButton ? this.renderSubmitButton() : ''}
            </div>
        `;
    }
    
    /**
     * ‚úÖ –†–µ–Ω–¥–µ—Ä –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    renderSubmitButton() {
        const btn = this.options.submitButton;
        return `
            <button 
                type="submit" 
                class="form__submit form__submit--${btn.variant || 'primary'}"
                ${btn.disabled ? 'disabled' : ''}
            >
                ${btn.icon ? `<span class="form__button-icon">${btn.icon}</span>` : ''}
                <span class="form__button-text">${btn.text || '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}</span>
            </button>
        `;
    }
    
    /**
     * üîÑ –†–µ–Ω–¥–µ—Ä –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞
     */
    renderResetButton() {
        const btn = this.options.resetButton;
        return `
            <button 
                type="button" 
                class="form__reset form__reset--${btn.variant || 'secondary'}"
                ${btn.disabled ? 'disabled' : ''}
            >
                ${btn.icon ? `<span class="form__button-icon">${btn.icon}</span>` : ''}
                <span class="form__button-text">${btn.text || '–°–±—Ä–æ—Å–∏—Ç—å'}</span>
            </button>
        `;
    }
    
    /**
     * üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π
     */
    initializeFields() {
        this.options.fields.forEach(field => {
            this.fields.set(field.name, field);
            
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (field.defaultValue !== undefined) {
                this.data[field.name] = field.defaultValue;
            }
        });
    }
    
    /**
     * üì± –ù–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        if (!this.element) return;
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
        this.element.addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleSubmit(e);
        });
        
        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã  
        const resetButton = this.element.querySelector('.form__reset');
        if (resetButton) {
            resetButton.addEventListener('click', () => this.handleReset());
        }
        
        // –°–æ–±—ã—Ç–∏—è –ø–æ–ª–µ–π
        this.attachFieldListeners();
    }
    
    /**
     * üéØ –ù–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª–µ–π
     */
    attachFieldListeners() {
        this.options.fields.forEach(field => {
            const element = this.element.querySelector(`[name="${field.name}"]`);
            if (!element) return;
            
            // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            element.addEventListener('input', (e) => this.handleFieldInput(e, field));
            element.addEventListener('change', (e) => this.handleFieldChange(e, field));
            element.addEventListener('blur', (e) => this.handleFieldBlur(e, field));
            element.addEventListener('focus', (e) => this.handleFieldFocus(e, field));
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ñ–∞–π–ª–æ–≤
            if (field.type === 'file') {
                element.addEventListener('change', (e) => this.handleFileChange(e, field));
            }
            
            // –°—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è textarea
            if (field.type === 'textarea' && field.maxLength) {
                element.addEventListener('input', (e) => this.updateCharCounter(e, field));
            }
        });
    }
    
    /**
     * ‚úçÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤ –ø–æ–ª–µ
     */
    handleFieldInput(event, field) {
        const value = this.getFieldValue(event.target, field);
        this.updateFieldData(field.name, value);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        if (this.options.validation === 'realtime' && this.touched[field.name]) {
            this.validateField(field.name);
        }
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if (this.options.autoSave) {
            this.autoSave();
        }
    }
    
    /**
     * üîÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è
     */
    handleFieldChange(event, field) {
        const value = this.getFieldValue(event.target, field);
        this.updateFieldData(field.name, value);
        
        // Haptic feedback
        if (this.options.haptic) {
            this.triggerHaptic('light');
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (this.options.validation === 'realtime') {
            this.validateField(field.name);
        }
        
        // –ö–æ–ª–±—ç–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è
        if (field.onChange) {
            field.onChange(value, field, this);
        }
    }
    
    /**
     * üëÜ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞
     */
    handleFieldBlur(event, field) {
        this.touched[field.name] = true;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
        if (this.options.validation === 'realtime') {
            this.validateField(field.name);
        }
        
        // –ö–æ–ª–±—ç–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞
        if (field.onBlur) {
            field.onBlur(event, field, this);
        }
    }
    
    /**
     * üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∞
     */
    handleFieldFocus(event, field) {
        // –ö–æ–ª–±—ç–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∞
        if (field.onFocus) {
            field.onFocus(event, field, this);
        }
    }
    
    /**
     * üìÅ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
     */
    handleFileChange(event, field) {
        const files = Array.from(event.target.files);
        this.updateFieldData(field.name, files);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        this.updateFileList(field.name, files);
        
        // –ö–æ–ª–±—ç–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        if (field.onFileChange) {
            field.onFileChange(files, field, this);
        }
    }
    
    /**
     * üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
     */
    updateCharCounter(event, field) {
        const counter = this.element.querySelector(`[data-field="${field.name}"] .form__char-current`);
        if (counter) {
            counter.textContent = event.target.value.length;
        }
    }
    
    /**
     * üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
     */
    updateFileList(fieldName, files) {
        const listElement = this.element.querySelector(`#file-list-${fieldName}`);
        if (!listElement) return;
        
        listElement.innerHTML = files.map((file, index) => `
            <div class="form__file-item">
                <span class="form__file-name">${file.name}</span>
                <span class="form__file-size">${this.formatFileSize(file.size)}</span>
                <button type="button" class="form__file-remove" data-index="${index}">‚úï</button>
            </div>
        `).join('');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        listElement.querySelectorAll('.form__file-remove').forEach(button => {
            button.addEventListener('click', (e) => {
                const index = parseInt(e.target.dataset.index);
                this.removeFile(fieldName, index);
            });
        });
    }
    
    /**
     * üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
     */
    removeFile(fieldName, index) {
        const files = [...(this.data[fieldName] || [])];
        files.splice(index, 1);
        this.updateFieldData(fieldName, files);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ input
        const input = this.element.querySelector(`[name="${fieldName}"]`);
        if (input) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π FileList (–∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–ª—å–∑—è –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
            const dt = new DataTransfer();
            files.forEach(file => dt.items.add(file));
            input.files = dt.files;
        }
        
        this.updateFileList(fieldName, files);
    }
    
    /**
     * üìä –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
     */
    formatFileSize(bytes) {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
    }
    
    /**
     * üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
     */
    getFieldValue(element, field) {
        switch (field.type) {
            case 'checkbox':
                return element.checked;
            case 'radio':
                const radioGroup = this.element.querySelectorAll(`[name="${field.name}"]:checked`);
                return radioGroup.length > 0 ? radioGroup[0].value : '';
            case 'select':
                if (field.multiple) {
                    return Array.from(element.selectedOptions).map(option => option.value);
                }
                return element.value;
            case 'file':
                return Array.from(element.files);
            case 'number':
                return element.value ? parseFloat(element.value) : '';
            default:
                return element.value;
        }
    }
    
    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—è
     */
    updateFieldData(fieldName, value) {
        this.data[fieldName] = value;
        
        // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è
        if (this.errors[fieldName]) {
            delete this.errors[fieldName];
            this.updateFieldError(fieldName, null);
        }
    }
    
    /**
     * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—è
     */
    validateField(fieldName) {
        const field = this.fields.get(fieldName);
        if (!field) return true;
        
        const value = this.data[fieldName];
        const errors = [];
        
        // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
        if (field.required && this.isEmpty(value)) {
            errors.push(field.requiredMessage || `–ü–æ–ª–µ "${field.label}" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`);
        }
        
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if (field.validate && typeof field.validate === 'function') {
            const customError = field.validate(value, this.data, field);
            if (customError) {
                errors.push(customError);
            }
        }
        
        // –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if (value && !this.isEmpty(value)) {
            const builtInError = this.validateBuiltIn(value, field);
            if (builtInError) {
                errors.push(builtInError);
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
        if (errors.length > 0) {
            this.errors[fieldName] = errors[0];
            this.updateFieldError(fieldName, errors[0]);
            return false;
        } else {
            delete this.errors[fieldName];
            this.updateFieldError(fieldName, null);
            return true;
        }
    }
    
    /**
     * üîç –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
     */
    validateBuiltIn(value, field) {
        switch (field.type) {
            case 'email':
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailRegex.test(value)) {
                    return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å';
                }
                break;
                
            case 'url':
                try {
                    new URL(value);
                } catch {
                    return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL';
                }
                break;
                
            case 'tel':
                const phoneRegex = /^[\+]?[0-9\s\-\(\)]{10,}$/;
                if (!phoneRegex.test(value)) {
                    return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
                }
                break;
        }
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        if (field.minLength && value.length < field.minLength) {
            return `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: ${field.minLength} —Å–∏–º–≤–æ–ª–æ–≤`;
        }
        
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        if (field.maxLength && value.length > field.maxLength) {
            return `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: ${field.maxLength} —Å–∏–º–≤–æ–ª–æ–≤`;
        }
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (field.min !== undefined && parseFloat(value) < field.min) {
            return `–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${field.min}`;
        }
        
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (field.max !== undefined && parseFloat(value) > field.max) {
            return `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${field.max}`;
        }
        
        // –ü–∞—Ç—Ç–µ—Ä–Ω
        if (field.pattern && !new RegExp(field.pattern).test(value)) {
            return field.patternMessage || '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö';
        }
        
        return null;
    }
    
    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø–æ–ª—è
     */
    updateFieldError(fieldName, error) {
        const fieldElement = this.element.querySelector(`[data-field="${fieldName}"]`);
        if (!fieldElement) return;
        
        const errorElement = fieldElement.querySelector('.form__error');
        
        if (error) {
            fieldElement.classList.add('form__field--error');
            if (errorElement) {
                errorElement.textContent = error;
            }
        } else {
            fieldElement.classList.remove('form__field--error');
            if (errorElement) {
                errorElement.textContent = '';
            }
        }
    }
    
    /**
     * üì§ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
     */
    async handleSubmit(event) {
        event.preventDefault();
        
        // Haptic feedback
        if (this.options.haptic) {
            this.triggerHaptic('medium');
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
        const isValid = this.validateAll();
        if (!isValid) {
            this.focusFirstError();
            return;
        }
        
        // –ö–æ–ª–±—ç–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if (this.options.onSubmit) {
            try {
                const result = await this.options.onSubmit(this.data, this);
                
                // –û—á–∏—Å—Ç–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                if (result && this.options.autoSave) {
                    this.clearAutoSave();
                }
                
                return result;
            } catch (error) {
                console.error('Form submission error:', error);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if (this.options.onError) {
                    this.options.onError(error, this);
                }
            }
        }
    }
    
    /**
     * üîÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ —Ñ–æ—Ä–º—ã
     */
    handleReset() {
        // Haptic feedback
        if (this.options.haptic) {
            this.triggerHaptic('light');
        }
        
        // –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
        this.data = {};
        this.errors = {};
        this.touched = {};
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.options.fields.forEach(field => {
            if (field.defaultValue !== undefined) {
                this.data[field.name] = field.defaultValue;
            }
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        this.updateUI();
        
        // –û—á–∏—Å—Ç–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if (this.options.autoSave) {
            this.clearAutoSave();
        }
        
        // –ö–æ–ª–±—ç–∫ —Å–±—Ä–æ—Å–∞
        if (this.options.onReset) {
            this.options.onReset(this);
        }
    }
    
    /**
     * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
     */
    validateAll() {
        let isValid = true;
        
        this.options.fields.forEach(field => {
            const fieldValid = this.validateField(field.name);
            if (!fieldValid) {
                isValid = false;
            }
        });
        
        return isValid;
    }
    
    /**
     * üéØ –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ —Å –æ—à–∏–±–∫–æ–π
     */
    focusFirstError() {
        const firstErrorField = this.element.querySelector('.form__field--error input, .form__field--error textarea, .form__field--error select');
        if (firstErrorField) {
            firstErrorField.focus();
            firstErrorField.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
    }
    
    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
     */
    updateUI() {
        this.options.fields.forEach(field => {
            const element = this.element.querySelector(`[name="${field.name}"]`);
            if (!element) return;
            
            const value = this.data[field.name];
            
            switch (field.type) {
                case 'checkbox':
                    element.checked = Boolean(value);
                    break;
                case 'radio':
                    const radioButtons = this.element.querySelectorAll(`[name="${field.name}"]`);
                    radioButtons.forEach(radio => {
                        radio.checked = radio.value === value;
                    });
                    break;
                case 'select':
                    if (field.multiple && Array.isArray(value)) {
                        Array.from(element.options).forEach(option => {
                            option.selected = value.includes(option.value);
                        });
                    } else {
                        element.value = value || '';
                    }
                    break;
                case 'file':
                    // –§–∞–π–ª—ã –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ updateFileList
                    if (Array.isArray(value)) {
                        this.updateFileList(field.name, value);
                    }
                    break;
                default:
                    element.value = value || '';
                    break;
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
            this.updateFieldError(field.name, this.errors[field.name] || null);
        });
    }
    
    /**
     * üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
     */
    autoSave() {
        if (!this.options.autoSave || !this.options.autoSaveKey) return;
        
        try {
            localStorage.setItem(this.options.autoSaveKey, JSON.stringify(this.data));
        } catch (error) {
            console.warn('Auto-save failed:', error);
        }
    }
    
    /**
     * üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    loadAutoSavedData() {
        if (!this.options.autoSave || !this.options.autoSaveKey) return;
        
        try {
            const savedData = localStorage.getItem(this.options.autoSaveKey);
            if (savedData) {
                const parsedData = JSON.parse(savedData);
                this.data = { ...this.data, ...parsedData };
                this.updateUI();
            }
        } catch (error) {
            console.warn('Auto-save load failed:', error);
        }
    }
    
    /**
     * üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    clearAutoSave() {
        if (!this.options.autoSave || !this.options.autoSaveKey) return;
        
        try {
            localStorage.removeItem(this.options.autoSaveKey);
        } catch (error) {
            console.warn('Auto-save clear failed:', error);
        }
    }
    
    /**
     * üì≥ –í–∏–±—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram API
     */
    triggerHaptic(type = 'light') {
        if (!this.options.haptic) return;
        
        if (this.telegram && this.telegram.HapticFeedback) {
            this.telegram.HapticFeedback.impactOccurred(type);
        }
    }
    
    /**
     * üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
     */
    isEmpty(value) {
        if (value === null || value === undefined || value === '') return true;
        if (Array.isArray(value) && value.length === 0) return true;
        if (typeof value === 'string' && value.trim() === '') return true;
        return false;
    }
    
    /**
     * üõ°Ô∏è –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
     */
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    /**
     * üì§ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
     */
    getData() {
        return { ...this.data };
    }
    
    /**
     * üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
     */
    setData(data) {
        this.data = { ...this.data, ...data };
        this.updateUI();
        
        if (this.options.autoSave) {
            this.autoSave();
        }
    }
    
    /**
     * üìù –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
     */
    setFieldValue(fieldName, value) {
        this.updateFieldData(fieldName, value);
        this.updateUI();
    }
    
    /**
     * üìñ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
     */
    getFieldValue(fieldName) {
        return this.data[fieldName];
    }
    
    /**
     * ‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ–ª—è
     */
    setFieldError(fieldName, error) {
        if (error) {
            this.errors[fieldName] = error;
        } else {
            delete this.errors[fieldName];
        }
        this.updateFieldError(fieldName, error);
    }
    
    /**
     * üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—è
     */
    setFieldDisabled(fieldName, disabled = true) {
        const element = this.element.querySelector(`[name="${fieldName}"]`);
        if (element) {
            element.disabled = disabled;
        }
    }
    
    /**
     * üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        if (this.element && this.element.parentNode) {
            this.element.parentNode.removeChild(this.element);
        }
        
        this.element = null;
        this.fields.clear();
        this.data = {};
        this.errors = {};
        this.touched = {};
    }
    
    /**
     * üì§ –ü–æ–ª—É—á–µ–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    getElement() {
        return this.element;
    }
    
    /**
     * üè≠ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã-—Ñ–∞–±—Ä–∏–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º
     */
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º—ã —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
     */
    static simple(fields, onSubmit, options = {}) {
        const formFields = fields.map(field => ({
            type: 'text',
            ...field
        }));
        
        return new Form({
            fields: formFields,
            submitButton: { text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', variant: 'primary' },
            onSubmit,
            ...options
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
     */
    static withAutoSave(fields, autoSaveKey, onSubmit, options = {}) {
        return new Form({
            fields,
            submitButton: { text: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', variant: 'primary' },
            autoSave: true,
            autoSaveKey,
            onSubmit,
            ...options
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –æ–ø—Ä–æ—Å–∞
     */
    static survey(questions, onSubmit, options = {}) {
        const fields = questions.map((question, index) => ({
            name: `question_${index}`,
            label: question.text,
            type: question.type || 'text',
            required: question.required !== false,
            options: question.options,
            ...question
        }));
        
        return new Form({
            fields,
            submitButton: { text: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å', variant: 'primary' },
            onSubmit,
            ...options
        });
    }
}

// üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.Form = Form;
/**
 * ü™ü –ë–ê–ó–û–í–´–ï –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê - Modal.js
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - Backdrop —Å –∑–∞–∫—Ä—ã—Ç–∏–µ–º –ø–æ –∫–ª–∏–∫—É –∏ ESC
 * - –ê–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è/—Å–∫—Ä—ã—Ç–∏—è
 * - iOS –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–æ–Ω—ã
 * - Telegram Web App –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
 * - –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
 * - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Ñ–æ–Ω–∞
 * - –°—Ç–µ–∫–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
 */

class Modal {
    constructor(options = {}) {
        this.options = {
            title: '',
            content: '',
            size: 'medium',           // small, medium, large, fullscreen
            position: 'center',       // center, bottom, top
            backdrop: true,           // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å backdrop
            closeOnBackdrop: true,    // –ó–∞–∫—Ä—ã–≤–∞—Ç—å –ø–æ –∫–ª–∏–∫—É –Ω–∞ backdrop
            closeOnEscape: true,      // –ó–∞–∫—Ä—ã–≤–∞—Ç—å –ø–æ ESC
            autoFocus: true,          // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å
            preventScroll: true,      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Ñ–æ–Ω–∞
            animation: 'fade',        // fade, slide, zoom
            showCloseButton: true,    // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
            buttons: [],              // –ö–Ω–æ–ø–∫–∏ –≤ —Ñ—É—Ç–µ—Ä–µ
            className: '',            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ CSS –∫–ª–∞—Å—Å—ã
            ...options
        };
        
        this.element = null;
        this.backdrop = null;
        this.isOpen = false;
        this.telegram = window.Telegram?.WebApp;
        this.previousActiveElement = null;
        
        // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        Modal.stack = Modal.stack || [];
        
        this.init();
    }
    
    /**
     * üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    init() {
        this.createElement();
        this.attachEventListeners();
    }
    
    /**
     * üé® –°–æ–∑–¥–∞–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    createElement() {
        // –°–æ–∑–¥–∞–Ω–∏–µ backdrop
        if (this.options.backdrop) {
            this.backdrop = document.createElement('div');
            this.backdrop.className = 'modal-backdrop';
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.element = document.createElement('div');
        this.element.className = this.getClasses();
        this.element.innerHTML = this.getContent();
        
        // –ê—Ç—Ä–∏–±—É—Ç—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        this.element.setAttribute('role', 'dialog');
        this.element.setAttribute('aria-modal', 'true');
        this.element.setAttribute('tabindex', '-1');
        
        if (this.options.title) {
            this.element.setAttribute('aria-labelledby', 'modal-title');
        }
    }
    
    /**
     * üé≠ –ü–æ–ª—É—á–µ–Ω–∏–µ CSS –∫–ª–∞—Å—Å–æ–≤
     */
    getClasses() {
        const classes = ['modal'];
        
        // –†–∞–∑–º–µ—Ä
        classes.push(`modal--${this.options.size}`);
        
        // –ü–æ–∑–∏—Ü–∏—è
        classes.push(`modal--${this.options.position}`);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è
        classes.push(`modal--${this.options.animation}`);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        if (this.options.className) {
            classes.push(this.options.className);
        }
        
        return classes.join(' ');
    }
    
    /**
     * üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    getContent() {
        const header = this.renderHeader();
        const body = this.renderBody();
        const footer = this.renderFooter();
        
        return `
            <div class="modal__container">
                <div class="modal__content">
                    ${header}
                    ${body}
                    ${footer}
                </div>
            </div>
        `;
    }
    
    /**
     * üì± –†–µ–Ω–¥–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞
     */
    renderHeader() {
        if (!this.options.title && !this.options.showCloseButton) {
            return '';
        }
        
        return `
            <div class="modal__header">
                ${this.options.title ? `
                    <h3 class="modal__title" id="modal-title">${this.options.title}</h3>
                ` : ''}
                ${this.options.showCloseButton ? `
                    <button class="modal__close" aria-label="–ó–∞–∫—Ä—ã—Ç—å">
                        <svg class="modal__close-icon" viewBox="0 0 24 24" width="24" height="24">
                            <path stroke="currentColor" stroke-width="2" stroke-linecap="round" 
                                  d="M18 6L6 18M6 6l12 12"/>
                        </svg>
                    </button>
                ` : ''}
            </div>
        `;
    }
    
    /**
     * üìÑ –†–µ–Ω–¥–µ—Ä —Ç–µ–ª–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    renderBody() {
        return `
            <div class="modal__body">
                ${this.options.content}
            </div>
        `;
    }
    
    /**
     * üî≤ –†–µ–Ω–¥–µ—Ä —Ñ—É—Ç–µ—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
     */
    renderFooter() {
        if (!this.options.buttons || this.options.buttons.length === 0) {
            return '';
        }
        
        return `
            <div class="modal__footer">
                ${this.options.buttons.map((button, index) => `
                    <button class="modal__button modal__button--${button.variant || 'default'}" 
                            data-button-index="${index}"
                            ${button.disabled ? 'disabled' : ''}>
                        ${button.icon ? `<span class="modal__button-icon">${button.icon}</span>` : ''}
                        <span class="modal__button-text">${button.text}</span>
                    </button>
                `).join('')}
            </div>
        `;
    }
    
    /**
     * üì± –ù–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        if (this.options.showCloseButton) {
            const closeButton = this.element.querySelector('.modal__close');
            if (closeButton) {
                closeButton.addEventListener('click', () => this.close());
            }
        }
        
        // –ö–Ω–æ–ø–∫–∏ –≤ —Ñ—É—Ç–µ—Ä–µ
        const footerButtons = this.element.querySelectorAll('.modal__button');
        footerButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                const buttonIndex = parseInt(button.dataset.buttonIndex);
                this.handleButtonClick(buttonIndex, e);
            });
        });
        
        // Backdrop –∫–ª–∏–∫
        if (this.backdrop && this.options.closeOnBackdrop) {
            this.backdrop.addEventListener('click', (e) => {
                if (e.target === this.backdrop) {
                    this.close();
                }
            });
        }
        
        // ESC –∫–ª–∞–≤–∏—à–∞
        if (this.options.closeOnEscape) {
            document.addEventListener('keydown', this.handleKeyDown.bind(this));
        }
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.element.addEventListener('click', (e) => {
            e.stopPropagation();
        });
    }
    
    /**
     * ‚å®Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
     */
    handleKeyDown(event) {
        if (!this.isOpen) return;
        
        // ESC –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        if (event.key === 'Escape' && this.options.closeOnEscape) {
            event.preventDefault();
            this.close();
            return;
        }
        
        // Tab –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º
        if (event.key === 'Tab') {
            this.handleTabNavigation(event);
        }
    }
    
    /**
     * üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ Tab –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    handleTabNavigation(event) {
        const focusableElements = this.element.querySelectorAll(
            'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
        );
        
        const firstElement = focusableElements[0];
        const lastElement = focusableElements[focusableElements.length - 1];
        
        if (event.shiftKey) {
            // Shift+Tab - –Ω–∞–∑–∞–¥
            if (document.activeElement === firstElement) {
                event.preventDefault();
                lastElement.focus();
            }
        } else {
            // Tab - –≤–ø–µ—Ä–µ–¥
            if (document.activeElement === lastElement) {
                event.preventDefault();
                firstElement.focus();
            }
        }
    }
    
    /**
     * üî≤ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
     */
    handleButtonClick(buttonIndex, event) {
        const button = this.options.buttons[buttonIndex];
        if (!button) return;
        
        // Haptic feedback
        this.triggerHaptic();
        
        // –í—ã–∑–æ–≤ –∫–æ–ª–±—ç–∫–∞ –∫–Ω–æ–ø–∫–∏
        if (button.onClick) {
            const result = button.onClick(event, this, button);
            
            // –ï—Å–ª–∏ –∫–æ–ª–±—ç–∫ –≤–µ—Ä–Ω—É–ª false, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            if (result === false) return;
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ
        if (button.closeOnClick !== false) {
            this.close();
        }
    }
    
    /**
     * üì≥ –í–∏–±—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram API
     */
    triggerHaptic(type = 'light') {
        if (this.telegram && this.telegram.HapticFeedback) {
            this.telegram.HapticFeedback.impactOccurred(type);
        }
    }
    
    /**
     * üîì –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    open() {
        if (this.isOpen) return;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        this.previousActiveElement = document.activeElement;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–µ–∫
        Modal.stack.push(this);
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Ñ–æ–Ω–∞
        if (this.options.preventScroll) {
            document.body.style.overflow = 'hidden';
            
            // iOS viewport fix
            if (this.telegram) {
                this.telegram.expand();
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ DOM
        if (this.backdrop) {
            document.body.appendChild(this.backdrop);
        }
        document.body.appendChild(this.element);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        requestAnimationFrame(() => {
            if (this.backdrop) {
                this.backdrop.classList.add('modal-backdrop--show');
            }
            this.element.classList.add('modal--show');
        });
        
        // –§–æ–∫—É—Å
        if (this.options.autoFocus) {
            setTimeout(() => this.focusFirstElement(), 100);
        }
        
        this.isOpen = true;
        
        // –ö–æ–ª–±—ç–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è
        if (this.options.onOpen) {
            this.options.onOpen(this);
        }
        
        // Haptic feedback
        this.triggerHaptic('medium');
    }
    
    /**
     * üîí –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    close() {
        if (!this.isOpen) return;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        if (this.backdrop) {
            this.backdrop.classList.remove('modal-backdrop--show');
        }
        this.element.classList.remove('modal--show');
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ DOM –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            if (this.backdrop && this.backdrop.parentNode) {
                this.backdrop.parentNode.removeChild(this.backdrop);
            }
            if (this.element && this.element.parentNode) {
                this.element.parentNode.removeChild(this.element);
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            Modal.stack = Modal.stack.filter(modal => modal !== this);
            if (Modal.stack.length === 0 && this.options.preventScroll) {
                document.body.style.overflow = '';
            }
            
            // –í–æ–∑–≤—Ä–∞—Ç —Ñ–æ–∫—É—Å–∞
            if (this.previousActiveElement) {
                this.previousActiveElement.focus();
            }
            
        }, 300); // –í—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
        
        this.isOpen = false;
        
        // –ö–æ–ª–±—ç–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        if (this.options.onClose) {
            this.options.onClose(this);
        }
        
        // Haptic feedback
        this.triggerHaptic('light');
    }
    
    /**
     * üéØ –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
     */
    focusFirstElement() {
        const focusableElements = this.element.querySelectorAll(
            'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
        );
        
        if (focusableElements.length > 0) {
            focusableElements[0].focus();
        } else {
            this.element.focus();
        }
    }
    
    /**
     * üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
     */
    setContent(content) {
        this.options.content = content;
        const bodyElement = this.element.querySelector('.modal__body');
        if (bodyElement) {
            bodyElement.innerHTML = content;
        }
    }
    
    /**
     * üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
     */
    setTitle(title) {
        this.options.title = title;
        const titleElement = this.element.querySelector('.modal__title');
        if (titleElement) {
            titleElement.textContent = title;
        }
    }
    
    /**
     * üî≤ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
     */
    setButtons(buttons) {
        this.options.buttons = buttons;
        const footerElement = this.element.querySelector('.modal__footer');
        if (footerElement) {
            footerElement.innerHTML = this.renderFooter();
            this.attachEventListeners();
        }
    }
    
    /**
     * üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        this.close();
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        document.removeEventListener('keydown', this.handleKeyDown.bind(this));
        
        // –û—á–∏—Å—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.element = null;
        this.backdrop = null;
    }
    
    /**
     * üè≠ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
     */
    
    /**
     * –ü—Ä–æ—Å—Ç–æ–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
     */
    static alert(message, title = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', options = {}) {
        return new Modal({
            title,
            content: `<p class="modal__message">${message}</p>`,
            size: 'small',
            buttons: [
                {
                    text: 'OK',
                    variant: 'primary',
                    onClick: () => true // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                }
            ],
            ...options
        });
    }
    
    /**
     * –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
     */
    static confirm(message, title = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', options = {}) {
        return new Promise((resolve) => {
            const modal = new Modal({
                title,
                content: `<p class="modal__message">${message}</p>`,
                size: 'small',
                buttons: [
                    {
                        text: '–û—Ç–º–µ–Ω–∞',
                        variant: 'secondary',
                        onClick: () => {
                            resolve(false);
                            return true;
                        }
                    },
                    {
                        text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                        variant: 'primary',
                        onClick: () => {
                            resolve(true);
                            return true;
                        }
                    }
                ],
                onClose: () => resolve(false),
                ...options
            });
            modal.open();
        });
    }
    
    /**
     * –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ñ–æ—Ä–º–æ–π –≤–≤–æ–¥–∞
     */
    static prompt(message, defaultValue = '', title = '–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö', options = {}) {
        return new Promise((resolve) => {
            const inputId = 'modal-prompt-input';
            const modal = new Modal({
                title,
                content: `
                    <div class="modal__prompt">
                        <p class="modal__message">${message}</p>
                        <input type="text" id="${inputId}" class="modal__input" 
                               value="${defaultValue}" placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ...">
                    </div>
                `,
                size: 'small',
                buttons: [
                    {
                        text: '–û—Ç–º–µ–Ω–∞',
                        variant: 'secondary',
                        onClick: () => {
                            resolve(null);
                            return true;
                        }
                    },
                    {
                        text: 'OK',
                        variant: 'primary',
                        onClick: () => {
                            const input = document.getElementById(inputId);
                            resolve(input ? input.value : '');
                            return true;
                        }
                    }
                ],
                onClose: () => resolve(null),
                onOpen: (modal) => {
                    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                    const input = document.getElementById(inputId);
                    if (input) {
                        input.focus();
                        input.select();
                    }
                },
                ...options
            });
            modal.open();
        });
    }
    
    /**
     * Loading –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    static loading(message = '–ó–∞–≥—Ä—É–∑–∫–∞...', options = {}) {
        return new Modal({
            content: `
                <div class="modal__loading">
                    <div class="modal__spinner">
                        <svg class="modal__spinner-icon" viewBox="0 0 24 24">
                            <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" 
                                    fill="none" stroke-linecap="round" stroke-dasharray="31.416" 
                                    stroke-dashoffset="31.416">
                                <animate attributeName="stroke-dasharray" dur="2s" 
                                         values="0 31.416;15.708 15.708;0 31.416" repeatCount="indefinite"/>
                                <animate attributeName="stroke-dashoffset" dur="2s" 
                                         values="0;-15.708;-31.416" repeatCount="indefinite"/>
                            </circle>
                        </svg>
                    </div>
                    <p class="modal__loading-text">${message}</p>
                </div>
            `,
            size: 'small',
            showCloseButton: false,
            closeOnBackdrop: false,
            closeOnEscape: false,
            ...options
        });
    }
    
    /**
     * –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    static fullscreen(content, title = '', options = {}) {
        return new Modal({
            title,
            content,
            size: 'fullscreen',
            position: 'center',
            animation: 'slide',
            ...options
        });
    }
    
    /**
     * Bottom sheet –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    static bottomSheet(content, options = {}) {
        return new Modal({
            content,
            size: 'medium',
            position: 'bottom',
            animation: 'slide',
            ...options
        });
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
     */
    static closeAll() {
        const modals = [...Modal.stack];
        modals.forEach(modal => modal.close());
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    static getTop() {
        return Modal.stack[Modal.stack.length - 1] || null;
    }
}

// üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.Modal = Modal;
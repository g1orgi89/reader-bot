/**
 * üë§ –ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø - ProfileModal.js
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è (–∏–º—è, email, –æ —Å–µ–±–µ)
 * - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
 * - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Å–¥–∞—Ç—å —Ç–µ—Å—Ç (7 –≤–æ–ø—Ä–æ—Å–æ–≤)
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Web App
 * - –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */

class ProfileModal {
    constructor(app) {
        this.app = app;
        this.api = app.api;
        this.state = app.state;
        this.telegram = app.telegram;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.modal = null;
        this.isVisible = false;
        this.profileData = {};
        this.stats = {};
        this.saving = false;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
        this.uploadingAvatar = false;
        this.currentPreviewUrl = null;
        
        // –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.subscriptions = [];
        
        this.init();
    }
    
    /**
     * üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è
     */
    init() {
        this.setupSubscriptions();
        this.loadProfileData();
    }
    
    /**
     * üì° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setupSubscriptions() {
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const profileSubscription = this.state.subscribe('user.profile', (profile) => {
            this.profileData = { ...this.profileData, ...profile };
            this.updateProfileUI();
        });
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const statsSubscription = this.state.subscribe('stats', (stats) => {
            this.stats = stats;
            this.updateStatsUI();
        });
        
        this.subscriptions.push(profileSubscription, statsSubscription);
    }
    
    /**
     * üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
     */
    async loadProfileData() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const [profile, stats] = await Promise.all([
                this.loadUserProfile(),
                this.loadUserStats()
            ]);
            
            this.profileData = profile;
            this.stats = stats;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            this.state.set('user.profile', profile);
            this.state.set('stats', stats);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è:', error);
        }
    }
    
    /**
     * üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async loadUserProfile() {
        try {
            const profile = await this.api.getProfile();
            return profile;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            
            // Fallback –∫ –¥–∞–Ω–Ω—ã–º Telegram
            const telegramUser = this.telegram.getUser();
            return {
                name: telegramUser?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                email: '',
                username: telegramUser?.username || null,
                about: '',
                telegramId: telegramUser?.id,
                initials: this.getInitials(telegramUser?.first_name),
                registrationDate: new Date().toISOString()
            };
        }
    }
    
    /**
     * üìà –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async loadUserStats() {
        try {
            const stats = await this.api.getStats();
            return {
                totalQuotes: stats.totalQuotes || 0,
                thisWeek: stats.thisWeek || 0,
                currentStreak: stats.currentStreak || 0,
                longestStreak: stats.longestStreak || 0,
                achievements: stats.achievements || 0,
                favoriteAuthors: stats.favoriteAuthors || [],
                registrationDays: this.calculateRegistrationDays(stats.registrationDate)
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return {
                totalQuotes: 0,
                thisWeek: 0,
                currentStreak: 0,
                longestStreak: 0,
                achievements: 0,
                favoriteAuthors: [],
                registrationDays: 0
            };
        }
    }
    
    /**
     * üîì –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è
     */
    show() {
        if (this.isVisible) return;
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.modal = new Modal({
            title: '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
            content: this.renderContent(),
            size: 'medium',
            showCloseButton: true,
            onOpen: () => {
                this.isVisible = true;
                this.attachEventListeners();
                this.focusFirstField();
            },
            onClose: () => {
                this.isVisible = false;
                this.cleanup();
            }
        });
        
        this.modal.open();
        
        // Haptic feedback
        this.triggerHaptic('medium');
    }
    
    /**
     * üîí –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    hide() {
        if (this.modal && this.isVisible) {
            this.modal.close();
        }
    }
    
    /**
     * üé® –†–µ–Ω–¥–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    renderContent() {
        return `
            <div class="profile-modal">
                ${this.renderProfileHeader()}
                ${this.renderStatsSection()}
                ${this.renderEditForm()}
                ${this.renderPersonalizationSection()}
                ${this.renderActionButtons()}
            </div>
        `;
    }
    
    /**
     * üë§ –†–µ–Ω–¥–µ—Ä —à–∞–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è —Å –∞–≤–∞—Ç–∞—Ä–æ–º
     */
    renderProfileHeader() {
        const { name, initials, avatarUrl } = this.profileData;
        const { totalQuotes, currentStreak, achievements } = this.stats;
        const telegramPhotoUrl = this.telegram.getUser()?.photo_url;
        
        return `
            <div class="profile-header">
                ${this.renderAvatarBlock(avatarUrl, telegramPhotoUrl, initials || this.getInitials(name))}
                <div class="profile-name">${name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</div>
                <div class="profile-role">
                    ${this.getUserRole(totalQuotes, currentStreak)}
                </div>
                
                <div class="profile-stats-grid">
                    <div class="profile-stat">
                        <div class="profile-stat-number">${totalQuotes}</div>
                        <div class="profile-stat-label">–¶–∏—Ç–∞—Ç</div>
                    </div>
                    <div class="profile-stat">
                        <div class="profile-stat-number">${currentStreak}</div>
                        <div class="profile-stat-label">–î–Ω–µ–π</div>
                    </div>
                    <div class="profile-stat">
                        <div class="profile-stat-number">${achievements}</div>
                        <div class="profile-stat-label">–ù–∞–≥—Ä–∞–¥—ã</div>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * üñºÔ∏è –†–µ–Ω–¥–µ—Ä –±–ª–æ–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     */
    renderAvatarBlock(avatarUrl, telegramPhotoUrl, initials) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        let imageUrl = avatarUrl || telegramPhotoUrl;
        let showImage = !!imageUrl;
        
        return `
            <div class="profile-avatar-container">
                <div class="profile-avatar" id="profileAvatar">
                    ${showImage ? 
                        `<img class="profile-avatar-img" src="${imageUrl}" alt="–ê–≤–∞—Ç–∞—Ä" onerror="this.style.display='none'; this.parentElement.classList.add('fallback')" />
                         <div class="profile-avatar-fallback">${initials || 'üë§'}</div>` :
                        `<div class="profile-avatar-fallback">${initials || 'üë§'}</div>`
                    }
                </div>
                <button class="change-avatar-btn" id="changeAvatarBtn">
                    <span class="btn-icon">üì∑</span>
                    <span class="btn-text">–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ</span>
                </button>
                <input type="file" id="avatarFileInput" class="avatar-file-input" accept="image/*" style="display: none;">
            </div>
        `;
    }
    
    /**
     * üìä –†–µ–Ω–¥–µ—Ä —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    renderStatsSection() {
        const { longestStreak, favoriteAuthors, registrationDays } = this.stats;
        
        return `
            <div class="profile-section">
                <div class="section-title">üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</div>
                
                <div class="stats-details">
                    <div class="stat-item">
                        <span class="stat-label">–õ—É—á—à–∞—è —Å–µ—Ä–∏—è:</span>
                        <span class="stat-value">${longestStreak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">–° –Ω–∞–º–∏:</span>
                        <span class="stat-value">${registrationDays} –¥–Ω–µ–π</span>
                    </div>
                    ${favoriteAuthors.length > 0 ? `
                        <div class="stat-item">
                            <span class="stat-label">–õ—é–±–∏–º—ã–µ –∞–≤—Ç–æ—Ä—ã:</span>
                            <span class="stat-value">${favoriteAuthors.slice(0, 3).join(', ')}</span>
                        </div>
                    ` : ''}
                </div>
            </div>
        `;
    }
    
    /**
     * üìù –†–µ–Ω–¥–µ—Ä —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    renderEditForm() {
        const { name, email, about } = this.profileData;
        
        return `
            <div class="profile-section">
                <div class="section-title">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</div>
                
                <form id="profileForm" class="profile-form">
                    <div class="form-group">
                        <label class="form-label" for="profileName">–ò–º—è</label>
                        <input 
                            type="text" 
                            id="profileName" 
                            name="name"
                            class="form-input" 
                            value="${name || ''}" 
                            placeholder="–í–∞—à–µ –∏–º—è"
                            maxlength="50"
                        >
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label" for="profileEmail">Email</label>
                        <input 
                            type="email" 
                            id="profileEmail" 
                            name="email"
                            class="form-input" 
                            value="${email || ''}" 
                            placeholder="–í–∞—à email –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"
                            maxlength="100"
                        >
                        <div class="form-hint">
                            –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –æ—Ç –ê–Ω–Ω—ã
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label" for="profileAbout">–û —Å–µ–±–µ</label>
                        <textarea 
                            id="profileAbout" 
                            name="about"
                            class="form-textarea" 
                            placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                            maxlength="200"
                            rows="3"
                        >${about || ''}</textarea>
                        <div class="form-hint">
                            –ü–æ–º–æ–≥–∞–µ—Ç –ê–Ω–Ω–µ –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                        </div>
                    </div>
                </form>
            </div>
        `;
    }
    
    /**
     * üéØ –†–µ–Ω–¥–µ—Ä —Å–µ–∫—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    renderPersonalizationSection() {
        return `
            <div class="profile-section">
                <div class="section-title">üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è</div>
                <div class="section-description">
                    –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥ –∏ –∞–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç –æ—Ç –ê–Ω–Ω—ã
                </div>
                
                <button class="retake-test-button" id="retakeTestBtn">
                    <span class="button-icon">üîÑ</span>
                    <span class="button-text">–ü–µ—Ä–µ—Å–¥–∞—Ç—å —Ç–µ—Å—Ç (7 –≤–æ–ø—Ä–æ—Å–æ–≤)</span>
                </button>
                
                <div class="personalization-info">
                    <div class="info-item">
                        <span class="info-icon">üìö</span>
                        <span class="info-text">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –ø–æ–¥ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å</span>
                    </div>
                    <div class="info-item">
                        <span class="info-icon">ü§ñ</span>
                        <span class="info-text">–ò–ò –∞–Ω–∞–ª–∏–∑ —É—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</span>
                    </div>
                    <div class="info-item">
                        <span class="info-icon">üìà</span>
                        <span class="info-text">–û—Ç—á–µ—Ç—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º–∏</span>
                    </div>
                </div>
            </div>
        `;
    }
    
    /**
     * üî≤ –†–µ–Ω–¥–µ—Ä –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
     */
    renderActionButtons() {
        return `
            <div class="profile-actions">
                <button class="save-profile-button" id="saveProfileBtn" ${this.saving ? 'disabled' : ''}>
                    ${this.saving ? 
                        '<span class="button-spinner">‚è≥</span> –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 
                        '<span class="button-icon">üíæ</span> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'
                    }
                </button>
                
                <button class="cancel-profile-button" id="cancelProfileBtn">
                    –û—Ç–º–µ–Ω–∞
                </button>
            </div>
        `;
    }
    
    /**
     * üì± –ù–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        const saveBtn = document.getElementById('saveProfileBtn');
        if (saveBtn) {
            saveBtn.addEventListener('click', () => this.handleSaveProfile());
        }
        
        // –û—Ç–º–µ–Ω–∞
        const cancelBtn = document.getElementById('cancelProfileBtn');
        if (cancelBtn) {
            cancelBtn.addEventListener('click', () => this.hide());
        }
        
        // –ü–µ—Ä–µ—Å–¥–∞—á–∞ —Ç–µ—Å—Ç–∞
        const retakeTestBtn = document.getElementById('retakeTestBtn');
        if (retakeTestBtn) {
            retakeTestBtn.addEventListener('click', () => this.handleRetakeTest());
        }

        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
        const changeAvatarBtn = document.getElementById('changeAvatarBtn');
        if (changeAvatarBtn) {
            changeAvatarBtn.addEventListener('click', () => this.handleChangeAvatarClick());
        }

        // –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –∞–≤–∞—Ç–∞—Ä–∞
        const avatarFileInput = document.getElementById('avatarFileInput');
        if (avatarFileInput) {
            avatarFileInput.addEventListener('change', (e) => this.handleAvatarFileSelect(e));
        }
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ
        const form = document.getElementById('profileForm');
        if (form) {
            form.addEventListener('input', (e) => this.handleFormInput(e));
        }
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ Enter –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞
        const inputs = document.querySelectorAll('#profileForm input');
        inputs.forEach(input => {
            input.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    this.handleSaveProfile();
                }
            });
        });
    }
    
    /**
     * üíæ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
     */
    async handleSaveProfile() {
        if (this.saving) return;
        
        try {
            this.saving = true;
            this.updateSaveButtonState();
            
            // Haptic feedback
            this.triggerHaptic('medium');
            
            // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
            const formData = this.getFormData();
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            const validation = this.validateFormData(formData);
            if (!validation.isValid) {
                throw new Error(validation.error);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            const updatedProfile = await this.api.updateProfile(formData);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.profileData = { ...this.profileData, ...updatedProfile };
            this.state.set('user.profile', this.profileData);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
            this.showSuccessMessage('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
            
            // Haptic feedback —É—Å–ø–µ—Ö–∞
            this.triggerHaptic('light');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
            this.showErrorMessage(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å');
            
            // Haptic feedback –æ—à–∏–±–∫–∏
            this.triggerHaptic('heavy');
            
        } finally {
            this.saving = false;
            this.updateSaveButtonState();
        }
    }
    
    /**
     * üîÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–¥–∞—á–∏ —Ç–µ—Å—Ç–∞
     */
    handleRetakeTest() {
        // Haptic feedback
        this.triggerHaptic('medium');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        this.hide();
        
        setTimeout(() => {
            if (this.app.onboardingPage) {
                this.app.onboardingPage.show(true); // true = —Ä–µ–∂–∏–º –ø–µ—Ä–µ—Å–¥–∞—á–∏
            } else {
                // Fallback - –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä
                this.app.router.navigate('/onboarding?retake=true');
            }
        }, 300);
    }

    /**
     * üì∑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
     */
    handleChangeAvatarClick() {
        try {
            // Haptic feedback
            this.triggerHaptic('light');

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
            const fileInput = document.getElementById('avatarFileInput');
            if (fileInput) {
                fileInput.click();
            } else {
                throw new Error('–≠–ª–µ–º–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞:', error);
            this.showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞');
        }
    }

    /**
     * üìÅ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∞–≤–∞—Ç–∞—Ä–∞
     */
    async handleAvatarFileSelect(event) {
        try {
            const file = event.target.files[0];
            if (!file) {
                return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä
            }

            console.log('üìÅ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞:', {
                name: file.name,
                size: file.size,
                type: file.type
            });

            // Haptic feedback
            this.triggerHaptic('medium');

            // –ó–∞–≥—Ä—É–∂–∞–µ–º ImageUtils –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
            if (typeof ImageUtils === 'undefined') {
                throw new Error('ImageUtils –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
            const validation = ImageUtils.validateImage(file);
            if (!validation.isValid) {
                throw new Error(validation.error);
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            this.setAvatarUploadingState(true);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const { blob, preview } = await ImageUtils.processImage(file);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const userId = this.state.getCurrentUserId();
            const result = await this.api.uploadAvatar(blob, userId);

            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π preview URL
            if (this.currentPreviewUrl) {
                ImageUtils.cleanupUrls(this.currentPreviewUrl);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π preview URL
            this.currentPreviewUrl = preview;

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
            this.profileData.avatarUrl = result.avatarUrl || result.url || preview;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            this.state.set('user.profile', { 
                ...this.state.get('user.profile'),
                avatarUrl: this.profileData.avatarUrl 
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateAvatarDisplay();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
            this.showSuccessMessage('–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');

            // Haptic feedback —É—Å–ø–µ—Ö–∞
            this.triggerHaptic('light');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
            this.showErrorMessage(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä');

            // Haptic feedback –æ—à–∏–±–∫–∏
            this.triggerHaptic('heavy');

        } finally {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            this.setAvatarUploadingState(false);

            // –û—á–∏—â–∞–µ–º input –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
            const fileInput = document.getElementById('avatarFileInput');
            if (fileInput) {
                fileInput.value = '';
            }
        }
    }

    /**
     * ‚è≥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
     */
    setAvatarUploadingState(uploading) {
        this.uploadingAvatar = uploading;

        const changeBtn = document.getElementById('changeAvatarBtn');
        if (changeBtn) {
            if (uploading) {
                changeBtn.disabled = true;
                changeBtn.innerHTML = `
                    <span class="btn-icon">‚è≥</span>
                    <span class="btn-text">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                `;
            } else {
                changeBtn.disabled = false;
                changeBtn.innerHTML = `
                    <span class="btn-icon">üì∑</span>
                    <span class="btn-text">–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ</span>
                `;
            }
        }
    }

    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
     */
    updateAvatarDisplay() {
        const avatarContainer = document.getElementById('profileAvatar');
        if (!avatarContainer) return;

        const { avatarUrl, initials, name } = this.profileData;
        const telegramPhotoUrl = this.telegram.getUser()?.photo_url;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        const imageUrl = avatarUrl || telegramPhotoUrl;
        const fallbackInitials = initials || this.getInitials(name) || 'üë§';

        if (imageUrl) {
            avatarContainer.innerHTML = `
                <img class="profile-avatar-img" src="${imageUrl}" alt="–ê–≤–∞—Ç–∞—Ä" 
                     onerror="this.style.display='none'; this.parentElement.classList.add('fallback')" />
                <div class="profile-avatar-fallback">${fallbackInitials}</div>
            `;
            avatarContainer.classList.remove('fallback');
        } else {
            avatarContainer.innerHTML = `
                <div class="profile-avatar-fallback">${fallbackInitials}</div>
            `;
            avatarContainer.classList.add('fallback');
        }
    }
    
    /**
     * ‚úçÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤ —Ñ–æ—Ä–º—É
     */
    handleFormInput(event) {
        const { name, value } = event.target;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.profileData[name] = value;
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        clearTimeout(this.autoSaveTimer);
        this.autoSaveTimer = setTimeout(() => {
            this.autoSaveProfile();
        }, 2000);
    }
    
    /**
     * üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
     */
    async autoSaveProfile() {
        try {
            const formData = this.getFormData();
            await this.api.updateProfile(formData, { silent: true });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            this.state.set('user.profile', { ...this.profileData, ...formData });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        }
    }
    
    /**
     * üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
     */
    getFormData() {
        const form = document.getElementById('profileForm');
        if (!form) return {};
        
        return {
            name: form.name.value.trim(),
            email: form.email.value.trim(),
            about: form.about.value.trim()
        };
    }
    
    /**
     * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
     */
    validateFormData(data) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
        if (!data.name || data.name.length < 2) {
            return {
                isValid: false,
                error: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞'
            };
        }
        
        if (data.name.length > 50) {
            return {
                isValid: false,
                error: '–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤'
            };
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ email (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        if (data.email && !this.isValidEmail(data.email)) {
            return {
                isValid: false,
                error: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å'
            };
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è
        if (data.about && data.about.length > 200) {
            return {
                isValid: false,
                error: '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤'
            };
        }
        
        return { isValid: true };
    }
    
    /**
     * üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ email
     */
    isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }
    
    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    updateSaveButtonState() {
        const saveBtn = document.getElementById('saveProfileBtn');
        if (!saveBtn) return;
        
        if (this.saving) {
            saveBtn.disabled = true;
            saveBtn.innerHTML = '<span class="button-spinner">‚è≥</span> –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
        } else {
            saveBtn.disabled = false;
            saveBtn.innerHTML = '<span class="button-icon">üíæ</span> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
        }
    }
    
    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø—Ä–æ—Ñ–∏–ª—è
     */
    updateProfileUI() {
        if (!this.isVisible) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
        const nameInput = document.getElementById('profileName');
        if (nameInput && nameInput.value !== this.profileData.name) {
            nameInput.value = this.profileData.name || '';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º email
        const emailInput = document.getElementById('profileEmail');
        if (emailInput && emailInput.value !== this.profileData.email) {
            emailInput.value = this.profileData.email || '';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        const aboutInput = document.getElementById('profileAbout');
        if (aboutInput && aboutInput.value !== this.profileData.about) {
            aboutInput.value = this.profileData.about || '';
        }
    }
    
    /**
     * üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateStatsUI() {
        if (!this.isVisible) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —à–∞–ø–∫–µ –ø—Ä–æ—Ñ–∏–ª—è
        const statNumbers = document.querySelectorAll('.profile-stat-number');
        if (statNumbers.length >= 3) {
            statNumbers[0].textContent = this.stats.totalQuotes || 0;
            statNumbers[1].textContent = this.stats.currentStreak || 0;
            statNumbers[2].textContent = this.stats.achievements || 0;
        }
    }
    
    /**
     * üéØ –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
     */
    focusFirstField() {
        setTimeout(() => {
            const nameInput = document.getElementById('profileName');
            if (nameInput) {
                nameInput.focus();
                nameInput.select();
            }
        }, 100);
    }
    
    /**
     * ‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
     */
    showSuccessMessage(message) {
        // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å toast –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (this.telegram) {
            this.telegram.showAlert(message);
        } else {
            // Fallback - –ø—Ä–æ—Å—Ç–æ–π alert
            alert(message);
        }
    }
    
    /**
     * ‚ö†Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    showErrorMessage(message) {
        if (this.telegram) {
            this.telegram.showAlert(`–û—à–∏–±–∫–∞: ${message}`);
        } else {
            alert(`–û—à–∏–±–∫–∞: ${message}`);
        }
    }
    
    /**
     * üì≥ –í–∏–±—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram API
     */
    triggerHaptic(type = 'light') {
        if (this.telegram && this.telegram.HapticFeedback) {
            this.telegram.HapticFeedback.impactOccurred(type);
        }
    }
    
    /**
     * üßÆ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
     */
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤ –∏–∑ –∏–º–µ–Ω–∏
     */
    getInitials(name) {
        if (!name) return 'üë§';
        return name.split(' ')
            .map(word => word.charAt(0))
            .join('')
            .toUpperCase()
            .slice(0, 2);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    getUserRole(totalQuotes, currentStreak) {
        if (totalQuotes >= 100 && currentStreak >= 30) return '–ú–∞—Å—Ç–µ—Ä –º—É–¥—Ä–æ—Å—Ç–∏ üéì';
        if (totalQuotes >= 50 && currentStreak >= 14) return '–ê–∫—Ç–∏–≤–Ω—ã–π —á–∏—Ç–∞—Ç–µ–ª—å üìö';
        if (totalQuotes >= 20 && currentStreak >= 7) return '–ß–∏—Ç–∞—Ç–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫ üí°';
        if (totalQuotes >= 10) return '–ù–∞—á–∏–Ω–∞—é—â–∏–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä üå±';
        return '–ù–æ–≤–∏—á–æ–∫ üëã';
    }
    
    /**
     * –†–∞—Å—á–µ—Ç –¥–Ω–µ–π —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     */
    calculateRegistrationDays(registrationDate) {
        if (!registrationDate) return 0;
        
        const regDate = new Date(registrationDate);
        const now = new Date();
        const diffTime = Math.abs(now - regDate);
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }
    
    /**
     * üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    cleanup() {
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
        if (this.autoSaveTimer) {
            clearTimeout(this.autoSaveTimer);
        }

        // –û—á–∏—â–∞–µ–º preview URLs –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        if (this.currentPreviewUrl) {
            if (typeof ImageUtils !== 'undefined') {
                ImageUtils.cleanupUrls(this.currentPreviewUrl);
            } else {
                URL.revokeObjectURL(this.currentPreviewUrl);
            }
            this.currentPreviewUrl = null;
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.saving = false;
        this.uploadingAvatar = false;
    }
    
    /**
     * üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
     */
    destroy() {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.hide();
        
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
        this.subscriptions.forEach(unsubscribe => {
            if (typeof unsubscribe === 'function') {
                unsubscribe();
            }
        });
        this.subscriptions = [];
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        this.profileData = {};
        this.stats = {};
        this.modal = null;
        
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
        this.cleanup();
    }
}

// üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.ProfileModal = ProfileModal;
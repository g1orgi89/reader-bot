/**
 * üèÜ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –ò –ì–ï–ô–ú–ò–§–ò–ö–ê–¶–ò–Ø - AchievementsModal.js
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * - –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 * - –ê–Ω–∏–º–∞—Ü–∏–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 * - –°–∏—Å—Ç–µ–º–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 * - –ù–∞–≥—Ä–∞–¥—ã –∏ –±–µ–π–¥–∂–∏
 */

class AchievementsModal {
    constructor(app) {
        this.app = app;
        this.api = app.api;
        this.state = app.state;
        this.telegram = app.telegram;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.modal = null;
        this.isVisible = false;
        this.achievements = [];
        this.userStats = {};
        this.loading = false;
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        this.achievementConfig = this.getAchievementConfig();
        
        // –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.subscriptions = [];
        
        this.init();
    }
    
    /**
     * üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    init() {
        this.setupSubscriptions();
        this.loadAchievements();
    }
    
    /**
     * üì° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setupSubscriptions() {
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const statsSubscription = this.state.subscribe('stats', (stats) => {
            this.userStats = stats;
            this.updateAchievementsProgress();
            this.updateUI();
        });
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        const achievementsSubscription = this.state.subscribe('achievements', (achievements) => {
            this.achievements = achievements;
            this.updateUI();
        });
        
        this.subscriptions.push(statsSubscription, achievementsSubscription);
    }
    
    /**
     * üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async loadAchievements() {
        try {
            this.loading = true;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const [achievements, stats] = await Promise.all([
                this.loadUserAchievements(),
                this.loadUserStats()
            ]);
            
            this.achievements = achievements;
            this.userStats = stats;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            this.updateAchievementsProgress();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            this.state.set('achievements', achievements);
            this.state.set('stats', stats);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
        } finally {
            this.loading = false;
        }
    }
    
    /**
     * üèÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async loadUserAchievements() {
        try {
            const achievements = await this.api.getAchievements();
            return achievements || [];
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
            return [];
        }
    }
    
    /**
     * üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async loadUserStats() {
        try {
            const stats = await this.api.getStats();
            return stats;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return {};
        }
    }
    
    /**
     * üîì –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    show() {
        if (this.isVisible) return;
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.modal = new Modal({
            title: '–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
            content: this.renderContent(),
            size: 'medium',
            showCloseButton: true,
            onOpen: () => {
                this.isVisible = true;
                this.attachEventListeners();
                this.checkNewAchievements();
            },
            onClose: () => {
                this.isVisible = false;
                this.cleanup();
            }
        });
        
        this.modal.open();
        
        // Haptic feedback
        this.triggerHaptic('medium');
    }
    
    /**
     * üîí –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    hide() {
        if (this.modal && this.isVisible) {
            this.modal.close();
        }
    }
    
    /**
     * üé® –†–µ–Ω–¥–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    renderContent() {
        if (this.loading) {
            return this.renderLoading();
        }
        
        return `
            <div class="achievements-modal">
                ${this.renderHeader()}
                ${this.renderProgress()}
                ${this.renderAchievementsList()}
                ${this.renderMotivation()}
            </div>
        `;
    }
    
    /**
     * ‚è≥ –†–µ–Ω–¥–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    renderLoading() {
        return `
            <div class="achievements-loading">
                <div class="loading-spinner">üèÜ</div>
                <div class="loading-text">–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è...</div>
            </div>
        `;
    }
    
    /**
     * üìä –†–µ–Ω–¥–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
     */
    renderHeader() {
        const unlockedCount = this.getUnlockedAchievementsCount();
        const totalCount = this.achievementConfig.length;
        const completionPercent = Math.round((unlockedCount / totalCount) * 100);
        
        return `
            <div class="achievements-header">
                <div class="achievements-stats">
                    <div class="achievement-count">
                        <span class="count-number">${unlockedCount}</span>
                        <span class="count-separator">–∏–∑</span>
                        <span class="count-total">${totalCount}</span>
                        <span class="count-label">–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</span>
                    </div>
                    <div class="completion-percent">${completionPercent}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ</div>
                </div>
                
                <div class="achievements-progress-bar">
                    <div class="progress-fill" style="width: ${completionPercent}%"></div>
                </div>
                
                <div class="achievements-motivation">
                    ${this.getMotivationText(completionPercent)}
                </div>
            </div>
        `;
    }
    
    /**
     * üìà –†–µ–Ω–¥–µ—Ä –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    renderProgress() {
        const categories = this.getAchievementCategories();
        
        return `
            <div class="achievements-categories">
                <div class="categories-title">üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</div>
                <div class="categories-grid">
                    ${categories.map(category => this.renderCategoryProgress(category)).join('')}
                </div>
            </div>
        `;
    }
    
    /**
     * üìã –†–µ–Ω–¥–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    renderCategoryProgress(category) {
        const categoryAchievements = this.achievementConfig.filter(a => a.category === category.id);
        const unlockedInCategory = categoryAchievements.filter(a => this.isAchievementUnlocked(a.id)).length;
        const progressPercent = Math.round((unlockedInCategory / categoryAchievements.length) * 100);
        
        return `
            <div class="category-progress">
                <div class="category-icon">${category.icon}</div>
                <div class="category-info">
                    <div class="category-name">${category.name}</div>
                    <div class="category-stats">${unlockedInCategory}/${categoryAchievements.length}</div>
                </div>
                <div class="category-bar">
                    <div class="category-fill" style="width: ${progressPercent}%"></div>
                </div>
            </div>
        `;
    }
    
    /**
     * üèÜ –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    renderAchievementsList() {
        const groupedAchievements = this.groupAchievementsByCategory();
        
        return `
            <div class="achievements-list">
                ${Object.entries(groupedAchievements).map(([categoryId, achievements]) => 
                    this.renderAchievementCategory(categoryId, achievements)
                ).join('')}
            </div>
        `;
    }
    
    /**
     * üìÇ –†–µ–Ω–¥–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    renderAchievementCategory(categoryId, achievements) {
        const category = this.getCategoryInfo(categoryId);
        
        return `
            <div class="achievement-category">
                <div class="category-header">
                    <span class="category-icon">${category.icon}</span>
                    <span class="category-title">${category.name}</span>
                    <span class="category-count">(${achievements.length})</span>
                </div>
                
                <div class="category-achievements">
                    ${achievements.map(achievement => this.renderAchievementItem(achievement)).join('')}
                </div>
            </div>
        `;
    }
    
    /**
     * üèÖ –†–µ–Ω–¥–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    renderAchievementItem(achievement) {
        const isUnlocked = this.isAchievementUnlocked(achievement.id);
        const progress = this.getAchievementProgress(achievement);
        const canUnlock = progress.current >= progress.total;
        
        return `
            <div class="achievement-item ${isUnlocked ? 'unlocked' : 'locked'} ${canUnlock && !isUnlocked ? 'ready-to-unlock' : ''}" 
                 data-achievement-id="${achievement.id}">
                
                <div class="achievement-icon ${isUnlocked ? 'unlocked' : 'locked'}">
                    ${achievement.icon}
                    ${isUnlocked ? '<span class="unlock-badge">‚úì</span>' : ''}
                </div>
                
                <div class="achievement-info">
                    <div class="achievement-title">${achievement.title}</div>
                    <div class="achievement-description">${achievement.description}</div>
                    
                    ${isUnlocked ? 
                        `<div class="achievement-completed">
                            <span class="completed-icon">üéâ</span>
                            <span class="completed-text">–í—ã–ø–æ–ª–Ω–µ–Ω–æ!</span>
                            ${achievement.unlockedAt ? `<span class="completed-date">${this.formatDate(achievement.unlockedAt)}</span>` : ''}
                        </div>` :
                        `<div class="achievement-progress">
                            <div class="progress-text">
                                ${progress.current}/${progress.total} ${achievement.unit || ''}
                            </div>
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: ${Math.min((progress.current / progress.total) * 100, 100)}%"></div>
                            </div>
                            ${canUnlock ? '<div class="ready-unlock">–ì–æ—Ç–æ–≤–æ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é! üéâ</div>' : ''}
                        </div>`
                    }
                </div>
                
                ${achievement.reward ? `
                    <div class="achievement-reward">
                        <span class="reward-icon">${achievement.reward.icon}</span>
                        <span class="reward-text">${achievement.reward.text}</span>
                    </div>
                ` : ''}
            </div>
        `;
    }
    
    /**
     * üí™ –†–µ–Ω–¥–µ—Ä –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏
     */
    renderMotivation() {
        const nextAchievement = this.getNextAchievementToUnlock();
        const unlockedCount = this.getUnlockedAchievementsCount();
        
        return `
            <div class="achievements-motivation-section">
                ${nextAchievement ? `
                    <div class="next-achievement">
                        <div class="next-title">üéØ –°–ª–µ–¥—É—é—â–∞—è —Ü–µ–ª—å</div>
                        <div class="next-item">
                            <span class="next-icon">${nextAchievement.icon}</span>
                            <div class="next-info">
                                <div class="next-name">${nextAchievement.title}</div>
                                <div class="next-progress">${this.getProgressText(nextAchievement)}</div>
                            </div>
                        </div>
                    </div>
                ` : ''}
                
                <div class="motivation-tips">
                    <div class="tips-title">üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</div>
                    <div class="tips-list">
                        ${this.getMotivationTips(unlockedCount).map(tip => `
                            <div class="tip-item">
                                <span class="tip-icon">${tip.icon}</span>
                                <span class="tip-text">${tip.text}</span>
                            </div>
                        `).join('')}
                    </div>
                </div>
            </div>
        `;
    }
    
    /**
     * üì± –ù–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        // –ö–ª–∏–∫–∏ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
        const achievementItems = document.querySelectorAll('.achievement-item');
        achievementItems.forEach(item => {
            item.addEventListener('click', (e) => {
                const achievementId = item.dataset.achievementId;
                this.handleAchievementClick(achievementId);
            });
        });
        
        // –ö–ª–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
        const categoryHeaders = document.querySelectorAll('.category-header');
        categoryHeaders.forEach(header => {
            header.addEventListener('click', (e) => {
                this.toggleCategory(header.parentElement);
            });
        });
    }
    
    /**
     * üèÜ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é
     */
    handleAchievementClick(achievementId) {
        const achievement = this.achievementConfig.find(a => a.id === achievementId);
        if (!achievement) return;
        
        const isUnlocked = this.isAchievementUnlocked(achievementId);
        const progress = this.getAchievementProgress(achievement);
        const canUnlock = progress.current >= progress.total && !isUnlocked;
        
        // Haptic feedback
        this.triggerHaptic('light');
        
        if (canUnlock) {
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            this.unlockAchievement(achievementId);
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            this.showAchievementDetails(achievement, progress);
        }
    }
    
    /**
     * üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    async unlockAchievement(achievementId) {
        try {
            // Haptic feedback —É—Å–ø–µ—Ö–∞
            this.triggerHaptic('heavy');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            await this.api.unlockAchievement(achievementId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const achievementIndex = this.achievements.findIndex(a => a.id === achievementId);
            if (achievementIndex >= 0) {
                this.achievements[achievementIndex].unlocked = true;
                this.achievements[achievementIndex].unlockedAt = new Date().toISOString();
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                this.achievements.push({
                    id: achievementId,
                    unlocked: true,
                    unlockedAt: new Date().toISOString()
                });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            this.state.set('achievements', this.achievements);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            this.showUnlockAnimation(achievementId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateUI();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', error);
        }
    }
    
    /**
     * üéÜ –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
     */
    showUnlockAnimation(achievementId) {
        const achievement = this.achievementConfig.find(a => a.id === achievementId);
        if (!achievement) return;
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        const notification = document.createElement('div');
        notification.className = 'achievement-unlock-notification';
        notification.innerHTML = `
            <div class="unlock-animation">
                <div class="unlock-icon">${achievement.icon}</div>
                <div class="unlock-text">
                    <div class="unlock-title">üéâ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!</div>
                    <div class="unlock-name">${achievement.title}</div>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
        document.body.appendChild(notification);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        setTimeout(() => notification.classList.add('show'), 100);
        
        // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 500);
        }, 3000);
    }
    
    /**
     * ‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    showAchievementDetails(achievement, progress) {
        const detailModal = new Modal({
            title: achievement.title,
            content: `
                <div class="achievement-details">
                    <div class="detail-icon">${achievement.icon}</div>
                    <div class="detail-description">${achievement.description}</div>
                    
                    <div class="detail-progress">
                        <div class="progress-label">–ü—Ä–æ–≥—Ä–µ—Å—Å:</div>
                        <div class="progress-bar large">
                            <div class="progress-fill" style="width: ${Math.min((progress.current / progress.total) * 100, 100)}%"></div>
                        </div>
                        <div class="progress-numbers">${progress.current} / ${progress.total} ${achievement.unit || ''}</div>
                    </div>
                    
                    ${achievement.tips ? `
                        <div class="detail-tips">
                            <div class="tips-title">üí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å:</div>
                            <div class="tips-text">${achievement.tips}</div>
                        </div>
                    ` : ''}
                    
                    ${achievement.reward ? `
                        <div class="detail-reward">
                            <div class="reward-title">üéÅ –ù–∞–≥—Ä–∞–¥–∞:</div>
                            <div class="reward-content">
                                <span class="reward-icon">${achievement.reward.icon}</span>
                                <span class="reward-text">${achievement.reward.text}</span>
                            </div>
                        </div>
                    ` : ''}
                </div>
            `,
            size: 'small',
            buttons: [
                {
                    text: '–ü–æ–Ω—è—Ç–Ω–æ',
                    variant: 'primary',
                    onClick: () => true
                }
            ]
        });
        
        detailModal.open();
    }
    
    /**
     * üìÇ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ)
     */
    toggleCategory(categoryElement) {
        const achievements = categoryElement.querySelector('.category-achievements');
        const isCollapsed = categoryElement.classList.contains('collapsed');
        
        if (isCollapsed) {
            categoryElement.classList.remove('collapsed');
            achievements.style.maxHeight = achievements.scrollHeight + 'px';
        } else {
            categoryElement.classList.add('collapsed');
            achievements.style.maxHeight = '0px';
        }
        
        // Haptic feedback
        this.triggerHaptic('light');
    }
    
    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    updateAchievementsProgress() {
        this.achievementConfig.forEach(achievement => {
            const progress = this.calculateAchievementProgress(achievement);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ UI
            achievement.currentProgress = progress;
        });
    }
    
    /**
     * üìä –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    calculateAchievementProgress(achievement) {
        const stats = this.userStats;
        
        switch (achievement.id) {
            case 'first_quote':
                return { current: Math.min(stats.totalQuotes || 0, 1), total: 1 };
            
            case 'wisdom_collector':
                return { current: Math.min(stats.totalQuotes || 0, 25), total: 25 };
            
            case 'week_philosopher':
                return { current: Math.min(stats.currentStreak || 0, 7), total: 7 };
            
            case 'thinker':
                return { current: Math.min(stats.ownThoughts || 0, 10), total: 10 };
            
            case 'classic_lover':
                return { current: Math.min(stats.classicAuthors || 0, 10), total: 10 };
            
            case 'month_master':
                return { current: Math.min(stats.currentStreak || 0, 30), total: 30 };
            
            case 'hundred_quotes':
                return { current: Math.min(stats.totalQuotes || 0, 100), total: 100 };
            
            case 'year_reader':
                return { current: Math.min(stats.currentStreak || 0, 365), total: 365 };
            
            default:
                return { current: 0, total: 1 };
        }
    }
    
    /**
     * üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    getAchievementConfig() {
        return [
            // –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏
            {
                id: 'first_quote',
                title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
                description: '–î–æ–±–∞–≤–∏–ª–∏ –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É –≤ –¥–Ω–µ–≤–Ω–∏–∫',
                icon: 'üåü',
                category: 'beginner',
                unit: '—Ü–∏—Ç–∞—Ç–∞',
                tips: '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é –ø–æ–Ω—Ä–∞–≤–∏–≤—à—É—é—Å—è —Ü–∏—Ç–∞—Ç—É –±–æ—Ç—É!',
                reward: { icon: 'üéâ', text: '–î–æ—Å—Ç—É–ø –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É' }
            },
            {
                id: 'wisdom_collector',
                title: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –º—É–¥—Ä–æ—Å—Ç–∏',
                description: '–°–æ–±—Ä–∞–ª–∏ 25 —Ü–∏—Ç–∞—Ç',
                icon: 'üìö',
                category: 'beginner',
                unit: '—Ü–∏—Ç–∞—Ç',
                tips: '–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Ü–∏—Ç–∞—Ç—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ - –ø–æ –æ–¥–Ω–æ–π –≤ –¥–µ–Ω—å!'
            },
            
            // –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ
            {
                id: 'week_philosopher',
                title: '–§–∏–ª–æ—Å–æ—Ñ –Ω–µ–¥–µ–ª–∏',
                description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Ü–∏—Ç–∞—Ç—ã',
                icon: 'üî•',
                category: 'consistency',
                unit: '–¥–Ω–µ–π',
                tips: '–î–æ–±–∞–≤–ª—è–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ç–∞—Ç—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏',
                reward: { icon: '‚≠ê', text: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∫ –∞–Ω–∞–ª–∏–∑—É' }
            },
            {
                id: 'month_master',
                title: '–ú–∞—Å—Ç–µ—Ä –º–µ—Å—è—Ü–∞',
                description: '30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Ü–∏—Ç–∞—Ç—ã',
                icon: 'üëë',
                category: 'consistency',
                unit: '–¥–Ω–µ–π',
                tips: '–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É - –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Ü–∏—Ç–∞—Ç—ã –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è'
            },
            {
                id: 'year_reader',
                title: '–ß–∏—Ç–∞—Ç–µ–ª—å –≥–æ–¥–∞',
                description: '365 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Ü–∏—Ç–∞—Ç—ã',
                icon: 'üèÜ',
                category: 'consistency',
                unit: '–¥–Ω–µ–π',
                tips: '–°–æ–∑–¥–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –Ω–∏ –¥–Ω—è!',
                reward: { icon: 'üíé', text: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç –ê–Ω–Ω—ã' }
            },
            
            // –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ö–∞—á–µ—Å—Ç–≤–æ
            {
                id: 'thinker',
                title: '–ú—ã—Å–ª–∏—Ç–µ–ª—å',
                description: '–î–æ–±–∞–≤—å—Ç–µ 10 —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º—ã—Å–ª–µ–π',
                icon: 'üíé',
                category: 'quality',
                unit: '–º—ã—Å–ª–µ–π',
                tips: '–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Å–≤–æ–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞'
            },
            {
                id: 'classic_lover',
                title: '–õ—é–±–∏—Ç–µ–ª—å –∫–ª–∞—Å—Å–∏–∫–∏',
                description: '10 —Ü–∏—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤',
                icon: 'üé≠',
                category: 'quality',
                unit: '—Ü–∏—Ç–∞—Ç',
                tips: '–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–µ–ª–∏–∫–∏—Ö –ø–∏—Å–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª–æ—Å–æ—Ñ–æ–≤'
            },
            
            // –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ú–∞—Å—à—Ç–∞–±
            {
                id: 'hundred_quotes',
                title: '–°–æ—Ç–Ω—è –º—É–¥—Ä–æ—Å—Ç–∏',
                description: '–°–æ–±—Ä–∞–ª–∏ 100 —Ü–∏—Ç–∞—Ç',
                icon: 'üíØ',
                category: 'scale',
                unit: '—Ü–∏—Ç–∞—Ç',
                tips: '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤'
            }
        ];
    }
    
    /**
     * üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    getAchievementCategories() {
        return [
            { id: 'beginner', name: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏', icon: 'üå±' },
            { id: 'consistency', name: '–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ', icon: 'üî•' },
            { id: 'quality', name: '–ö–∞—á–µ—Å—Ç–≤–æ', icon: 'üíé' },
            { id: 'scale', name: '–ú–∞—Å—à—Ç–∞–±', icon: 'üìà' }
        ];
    }
    
    /**
     * üìã –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
     */
    groupAchievementsByCategory() {
        const grouped = {};
        
        this.achievementConfig.forEach(achievement => {
            const category = achievement.category;
            if (!grouped[category]) {
                grouped[category] = [];
            }
            grouped[category].push(achievement);
        });
        
        return grouped;
    }
    
    /**
     * ‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    getCategoryInfo(categoryId) {
        return this.getAchievementCategories().find(c => c.id === categoryId) || 
               { id: categoryId, name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', icon: '‚ùì' };
    }
    
    /**
     * üîì –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    isAchievementUnlocked(achievementId) {
        return this.achievements.some(a => a.id === achievementId && a.unlocked);
    }
    
    /**
     * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    getAchievementProgress(achievement) {
        return achievement.currentProgress || this.calculateAchievementProgress(achievement);
    }
    
    /**
     * üî¢ –ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    getUnlockedAchievementsCount() {
        return this.achievements.filter(a => a.unlocked).length;
    }
    
    /**
     * üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
     */
    getNextAchievementToUnlock() {
        return this.achievementConfig
            .filter(a => !this.isAchievementUnlocked(a.id))
            .sort((a, b) => {
                const progressA = this.getAchievementProgress(a);
                const progressB = this.getAchievementProgress(b);
                const percentA = progressA.current / progressA.total;
                const percentB = progressB.current / progressB.total;
                return percentB - percentA;
            })[0];
    }
    
    /**
     * üí™ –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
     */
    getMotivationText(completionPercent) {
        if (completionPercent >= 100) return '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è! üéâ';
        if (completionPercent >= 75) return '–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏! üí™';
        if (completionPercent >= 50) return '–•–æ—Ä–æ—à–æ! –ü–æ–ª–æ–≤–∏–Ω–∞ –ø—É—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞! üìà';
        if (completionPercent >= 25) return '–ù–µ–ø–ª–æ—Ö–æ–µ –Ω–∞—á–∞–ª–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üå±';
        return '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–ø–µ—Ä–µ–¥–∏ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π! üöÄ';
    }
    
    /**
     * üí° –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
     */
    getMotivationTips(unlockedCount) {
        const allTips = [
            { icon: 'üìÖ', text: '–î–æ–±–∞–≤–ª—è–π—Ç–µ —Ü–∏—Ç–∞—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è —Å–µ—Ä–∏–π' },
            { icon: 'üß†', text: '–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º—ã—Å–ª–∏ –∏ –∏–¥–µ–∏' },
            { icon: 'üìö', text: '–ò—Å—Å–ª–µ–¥—É–π—Ç–µ —Ü–∏—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤' },
            { icon: 'üéØ', text: '–°—Ç–∞–≤—å—Ç–µ —Å–µ–±–µ —Ü–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ü–∏—Ç–∞—Ç' },
            { icon: 'üí°', text: '–†–∞–∑–º—ã—à–ª—è–π—Ç–µ –Ω–∞–¥ —Å–º—ã—Å–ª–æ–º –∫–∞–∂–¥–æ–π —Ü–∏—Ç–∞—Ç—ã' },
            { icon: 'üîÑ', text: '–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞' }
        ];
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ 3 —Å–æ–≤–µ—Ç–∞
        return allTips.sort(() => 0.5 - Math.random()).slice(0, 3);
    }
    
    /**
     * üìÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
     */
    formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'short'
        });
    }
    
    /**
     * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    getProgressText(achievement) {
        const progress = this.getAchievementProgress(achievement);
        return `${progress.current}/${progress.total} ${achievement.unit || ''}`;
    }
    
    /**
     * üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    checkNewAchievements() {
        const readyToUnlock = this.achievementConfig.filter(achievement => {
            const isUnlocked = this.isAchievementUnlocked(achievement.id);
            const progress = this.getAchievementProgress(achievement);
            return !isUnlocked && progress.current >= progress.total;
        });
        
        if (readyToUnlock.length > 0) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
            this.showReadyAchievementsNotification(readyToUnlock.length);
        }
    }
    
    /**
     * üîî –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
     */
    showReadyAchievementsNotification(count) {
        if (this.telegram) {
            this.telegram.showAlert(`–£ –≤–∞—Å ${count} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≥–æ—Ç–æ–≤–æ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é! üéâ`);
        }
    }
    
    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
     */
    updateUI() {
        if (!this.isVisible) return;
        
        // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if (this.modal) {
            this.modal.setContent(this.renderContent());
            this.attachEventListeners();
        }
    }
    
    /**
     * üì≥ –í–∏–±—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram API
     */
    triggerHaptic(type = 'light') {
        if (this.telegram && this.telegram.HapticFeedback) {
            this.telegram.HapticFeedback.impactOccurred(type);
        }
    }
    
    /**
     * üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    cleanup() {
        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    }
    
    /**
     * üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
     */
    destroy() {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.hide();
        
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
        this.subscriptions.forEach(unsubscribe => {
            if (typeof unsubscribe === 'function') {
                unsubscribe();
            }
        });
        this.subscriptions = [];
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        this.achievements = [];
        this.userStats = {};
        this.modal = null;
    }
}

// üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.AchievementsModal = AchievementsModal;
/**
 * üéØ –û–ù–ë–û–†–î–ò–ù–ì –¢–ï–°–¢ - OnboardingPage.js
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –æ—Ç –ê–Ω–Ω—ã –ë—É—Å–µ–ª
 * - –¢–µ—Å—Ç –∏–∑ 7 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é
 * - –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
 * - –§–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */

class OnboardingPage {
    constructor(app) {
        this.app = app;
        this.api = app.api;
        this.state = app.state;
        this.telegram = app.telegram;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
        this.currentStep = 0; // 0 = welcome, 1-7 = questions, 8 = completion
        this.totalSteps = 7;
        this.loading = false;
        this.error = null;
        
        // RETAKE: –†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        this.isRetakeMode = false;
        
        // –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ - 7 –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        this.questions = [
            {
                id: 'name',
                title: '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?',
                type: 'text',
                placeholder: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è...',
                required: true,
                maxLength: 50
            },
            {
                id: 'lifestyle',
                title: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:',
                type: 'radio',
                options: [
                    'üë∂ –Ø –º–∞–º–∞ (–¥–µ—Ç–∏ - –≥–ª–∞–≤–Ω–∞—è –∑–∞–±–æ—Ç–∞)',
                    '‚öñÔ∏è –ó–∞–º—É–∂–µ–º, –±–∞–ª–∞–Ω—Å–∏—Ä—É—é –¥–æ–º/—Ä–∞–±–æ—Ç—É/—Å–µ–±—è', 
                    'üå∏ –ë–µ–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π, –∏–∑—É—á–∞—é –º–∏—Ä –∏ —Å–µ–±—è'
                ],
                required: true
            },
            {
                id: 'timeForSelf',
                title: '–ö–∞–∫ –Ω–∞—Ö–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Å–µ–±—è?',
                type: 'radio',
                options: [
                    'üåÖ –†–∞–Ω–æ —É—Ç—Ä–æ–º, –ø–æ–∫–∞ –≤—Å–µ —Å–ø—è—Ç',
                    'üåô –ü–æ–∑–¥–Ω–æ –≤–µ—á–µ—Ä–æ–º, –∫–æ–≥–¥–∞ –¥–µ–ª–∞ —Å–¥–µ–ª–∞–Ω—ã',
                    'üì± –£—Ä—ã–≤–∫–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è',
                    'ü§∑‚Äç‚ôÄÔ∏è –í—Ä–µ–º—è –¥–ª—è —Å–µ–±—è? –ß—Ç–æ —ç—Ç–æ?'
                ],
                required: true
            },
            {
                id: 'priorities',
                title: '–ß—Ç–æ —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ?',
                type: 'radio',
                options: [
                    'üßò‚Äç‚ôÄÔ∏è –ù–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å',
                    'üí≠ –ü–æ–Ω—è—Ç—å —Å–≤–æ–∏ –∏—Å—Ç–∏–Ω–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è',
                    'üíï –ù–∞—É—á–∏—Ç—å—Å—è –ª—é–±–∏—Ç—å —Å–µ–±—è',
                    'üèóÔ∏è –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è'
                ],
                required: true
            },
            {
                id: 'readingFeelings',
                title: '–ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —á–∏—Ç–∞—è –∫–Ω–∏–≥–∏?',
                type: 'radio',
                options: [
                    'üîç –ù–∞—Ö–æ–∂—É –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã',
                    '‚ö° –ü–æ–ª—É—á–∞—é –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ —ç–Ω–µ—Ä–≥–∏—é',
                    'üòå –£—Å–ø–æ–∫–∞–∏–≤–∞—é—Å—å –∏ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—Å—å',
                    'üå± –£—á—É—Å—å –Ω–æ–≤–æ–º—É –æ —Å–µ–±–µ –∏ –º–∏—Ä–µ'
                ],
                required: true
            },
            {
                id: 'closestPhrase',
                title: '–ö–∞–∫–∞—è —Ñ—Ä–∞–∑–∞ –±–ª–∏–∂–µ?',
                type: 'radio',
                options: [
                    '‚ú® "–°—á–∞—Å—Ç—å–µ ‚Äî —ç—Ç–æ –≤—ã–±–æ—Ä"',
                    '‚ù§Ô∏è "–õ—é–±–æ–≤—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Å–µ–±—è"',
                    'üåç "–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ"',
                    'üß† "–ú—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –æ–ø—ã—Ç–æ–º"'
                ],
                required: true
            },
            {
                id: 'readingTime',
                title: '–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —á–∏—Ç–∞–µ—Ç–µ –≤ –Ω–µ–¥–µ–ª—é?',
                type: 'radio',
                options: [
                    'üìö –ú–µ–Ω—å—à–µ —á–∞—Å–∞ (—á–∏—Ç–∞—é —Ä–µ–¥–∫–æ)',
                    '‚è∞ 1-3 —á–∞—Å–∞ (–ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º)',
                    'üìñ  3-7 —á–∞—Å–æ–≤ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)',
                    'ü§ì –ë–æ–ª—å—à–µ 7 —á–∞—Å–æ–≤ (—á–∏—Ç–∞—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)'
                ],
                required: true
            }
        ];
        
        // –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.answers = {};
        
        // –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.contactData = {
            email: '',
            source: '' // –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –±–æ—Ç–µ
        };
        
        this.init();
    }
    
    /**
     * üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async init() {
        // RETAKE: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        this.detectRetakeMode();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ API
        try {
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            const profile = this.state.get('user.profile');
            const userId = profile?.telegramId || profile?.id || 'demo-user';
            console.log('üîç OnboardingPage: –ò—Å–ø–æ–ª—å–∑—É–µ–º userId –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', userId);
            
            const onboardingStatus = await this.api.checkOnboardingStatus(userId);
            console.log('üìä OnboardingPage: –°—Ç–∞—Ç—É—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞:', onboardingStatus);
            
            // RETAKE: –¢–æ–ª—å–∫–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –µ—Å–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –ò –ù–ï –≤ —Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            if (onboardingStatus.completed && !this.isRetakeMode) {
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                this.app.router.navigate('/home');
                return;
            }
            
            // RETAKE: –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è, –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã
            if (this.isRetakeMode && onboardingStatus.completed) {
                this.prefillPreviousAnswers(onboardingStatus);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è OnboardingPage: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞:', error);
            
            // Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const onboardingCompleted = this.state.get('user.profile.isOnboardingCompleted');
            // RETAKE: –¢–æ–ª—å–∫–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –µ—Å–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –ò –ù–ï –≤ —Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            if (onboardingCompleted && !this.isRetakeMode) {
                this.app.router.navigate('/home');
                return;
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        this.prefillUserData();
    }
    
    /**
     * üîÑ RETAKE: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
     */
    detectRetakeMode() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä retake=1 –∏–ª–∏ retake=true
        const urlParams = new URLSearchParams(window.location.search);
        const retakeParam = urlParams.get('retake');
        const isRetakeFromUrl = retakeParam === '1' || retakeParam === 'true';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const forceRetakeFlag = this.state.get('onboarding.forceRetake');
        
        this.isRetakeMode = isRetakeFromUrl || forceRetakeFlag;
        
        console.log('üîÑ OnboardingPage: –†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:', this.isRetakeMode, {
            urlParam: retakeParam,
            stateFlag: forceRetakeFlag
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if (this.isRetakeMode) {
            this.state.set('onboarding.isRetake', true);
        }
    }
    
    /**
     * üìã RETAKE: –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
     */
    prefillPreviousAnswers(onboardingStatus) {
        if (onboardingStatus.answers) {
            console.log('üìã OnboardingPage: –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã:', onboardingStatus.answers);
            this.answers = { ...onboardingStatus.answers };
        } else if (onboardingStatus.testResults) {
            console.log('üìã OnboardingPage: –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –∏–∑ testResults:', onboardingStatus.testResults);
            this.answers = { ...onboardingStatus.testResults };
        }
        
        // –¢–∞–∫–∂–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (onboardingStatus.email) {
            this.contactData.email = onboardingStatus.email;
        }
        if (onboardingStatus.source) {
            this.contactData.source = onboardingStatus.source;
        }
    }
    
    /**
     * üë§ –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    prefillUserData() {
        console.log('üë§ OnboardingPage: –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram
        let telegramUser = null;
        
        if (this.telegram && typeof this.telegram.getUser === 'function') {
            telegramUser = this.telegram.getUser();
            console.log('üì± OnboardingPage: –î–∞–Ω–Ω—ã–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramUser);
        } else {
            console.warn('‚ö†Ô∏è OnboardingPage: TelegramService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        
        // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –∏–º—è –∏–∑ Telegram
        if (telegramUser && telegramUser.first_name) {
            this.answers.name = telegramUser.first_name;
            console.log('‚úÖ OnboardingPage: –ò–º—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–æ:', telegramUser.first_name);
        } else {
            // Fallback: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            const userProfile = this.state.get('user.profile');
            if (userProfile && userProfile.firstName) {
                this.answers.name = userProfile.firstName;
                console.log('‚úÖ OnboardingPage: –ò–º—è –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', userProfile.firstName);
            } else {
                console.log('‚ÑπÔ∏è OnboardingPage: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ –≤—Ä—É—á–Ω—É—é');
            }
        }
    }
    
    /**
     * üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —Ä–∞–∑–º–µ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    render() {
        // RETAKE: –î–æ–±–∞–≤–ª—è–µ–º CSS –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        const retakeClass = this.isRetakeMode ? ' is-retake' : '';
        
        return `
            <div class="onboarding-page${retakeClass}">
                ${this.renderHeader()}
                ${this.renderProgress()}
                <div class="onboarding-content-wrapper">
                    ${this.renderCurrentStep()}
                </div>
                ${this.renderNavigationButton()}
            </div>
        `;
    }
    
    /**
     * üì± –†–µ–Ω–¥–µ—Ä —à–∞–ø–∫–∏
     */
    renderHeader() {
        // RETAKE: –†–∞–∑–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        if (this.isRetakeMode) {
            const titles = [
                '–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ',
                '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ', '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ', '–í–∞—à —Ä–∏—Ç–º –∂–∏–∑–Ω–∏', '–í–∞—à–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã',
                '–í–∞—à–µ —á—Ç–µ–Ω–∏–µ', '–í–∞—à–∞ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è', '–í–∞—à —Ä–∏—Ç–º',
                '–ì–æ—Ç–æ–≤–æ!'
            ];
            
            const subtitles = [
                '–û–±–Ω–æ–≤–ª—è–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
                '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ', '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ', '–ü–æ–Ω–∏–º–∞–µ–º –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏', '–ß—Ç–æ –≤–∞–∂–Ω–æ —Å–µ–π—á–∞—Å',
                '–ü–æ–Ω–∏–º–∞–µ–º –≤–∞—à –æ–ø—ã—Ç', '–ß—Ç–æ –≤–∞–º –±–ª–∏–∂–µ', '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å',
                '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω'
            ];
            
            return `
                <div class="onboarding-header">
                    <div class="onboarding-title">${titles[this.currentStep]}</div>
                    <div class="onboarding-subtitle">${subtitles[this.currentStep]}</div>
                </div>
            `;
        }
        
        // –û–±—ã—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        const titles = [
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
            '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ', '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ', '–í–∞—à —Ä–∏—Ç–º –∂–∏–∑–Ω–∏', '–í–∞—à–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã',
            '–í–∞—à–µ —á—Ç–µ–Ω–∏–µ', '–í–∞—à–∞ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è', '–í–∞—à —Ä–∏—Ç–º',
            '–ì–æ—Ç–æ–≤–æ!'
        ];
        
        const subtitles = [
            '–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ —Ü–∏—Ç–∞—Ç',
            '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ', '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ', '–ü–æ–Ω–∏–º–∞–µ–º –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏', '–ß—Ç–æ –≤–∞–∂–Ω–æ —Å–µ–π—á–∞—Å',
            '–ü–æ–Ω–∏–º–∞–µ–º –≤–∞—à –æ–ø—ã—Ç', '–ß—Ç–æ –≤–∞–º –±–ª–∏–∂–µ', '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å',
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ'
        ];
        
        return `
            <div class="onboarding-header">
                <div class="onboarding-title">${titles[this.currentStep]}</div>
                <div class="onboarding-subtitle">${subtitles[this.currentStep]}</div>
            </div>
        `;
    }
    
    /**
     * üìä –†–µ–Ω–¥–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
     */
    renderProgress() {
        const progressPercent = this.currentStep === 0 ? 0 : 
                               this.currentStep > this.totalSteps ? 100 : 
                               Math.round((this.currentStep / this.totalSteps) * 100);
        
        const stepText = this.currentStep === 0 ? '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ' :
                        this.currentStep > this.totalSteps ? '–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω' :
                        `–í–æ–ø—Ä–æ—Å ${this.currentStep}`;
        
        const stepCount = this.currentStep === 0 ? '0 / 7' :
                         this.currentStep > this.totalSteps ? '7 / 7' :
                         `${this.currentStep} / ${this.totalSteps}`;
        
        return `
            <div class="progress-section">
                <div class="progress-info">
                    <div class="progress-text">${stepText}</div>
                    <div class="progress-steps">${stepCount}</div>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${progressPercent}%;"></div>
                </div>
            </div>
        `;
    }
    
    /**
     * üìÑ –†–µ–Ω–¥–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
     */
    renderCurrentStep() {
        if (this.currentStep === 0) {
            return this.renderWelcome();
        } else if (this.currentStep > this.totalSteps) {
            return this.renderCompletion();
        } else {
            return this.renderQuestion(this.currentStep - 1);
        }
    }
    
    /**
     * üëã –†–µ–Ω–¥–µ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
     */
    renderWelcome() {
        return `
            <div class="welcome-screen">
                <div class="welcome-title">–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</div>
                <div class="welcome-description">
                    –í—ã –ø–æ–ø–∞–ª–∏ –≤ ¬´–ß–∏—Ç–∞—Ç–µ–ª—å¬ª ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ —Å–ª–æ–≤ –∏ —Ü–∏—Ç–∞—Ç.
                    <br><br>
                    –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞ –ë—É—Å–µ–ª, —è –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å ¬´–ö–Ω–∏–∂–Ω–æ–≥–æ –∫–ª—É–±–∞¬ª. 
                    –ó–¥–µ—Å—å –º—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏–º –≤–∞—à–∏ —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ —Ä–æ—Å—Ç–∞.
                </div>
                
                <div class="anna-signature">
                    "–•–æ—Ä–æ—à–∞—è –∂–∏–∑–Ω—å —Å—Ç—Ä–æ–∏—Ç—Å—è, –∞ –Ω–µ –¥–∞–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –î–∞–≤–∞–π—Ç–µ —Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à—É –≤–º–µ—Å—Ç–µ!"
                    <br><br>
                    ‚Äî –ê–Ω–Ω–∞ –ë—É—Å–µ–ª
                </div>
            </div>
        `;
    }
    
    /**
     * ‚ùì –†–µ–Ω–¥–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
     */
    renderQuestion(questionIndex) {
        const question = this.questions[questionIndex];
        const currentAnswer = this.answers[question.id] || '';
        
        return `
            <div class="question-screen">
                <div class="question-section">
                    <div class="question-number">${questionIndex + 1}</div>
                    <div class="question-title">${question.title}</div>
                    ${this.renderQuestionInput(question, currentAnswer)}
                </div>
            </div>
        `;
    }
    
    /**
     * üîß –†–µ–Ω–¥–µ—Ä –ø–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
     */
    renderQuestionInput(question, currentAnswer) {
        switch (question.type) {
            case 'text':
                return `
                    <input class="question-input" 
                           id="questionInput"
                           type="text"
                           placeholder="${question.placeholder}"
                           value="${currentAnswer}"
                           maxlength="${question.maxLength || 100}">
                `;
                
            case 'textarea':
                return `
                    <textarea class="question-input question-textarea" 
                              id="questionInput"
                              placeholder="${question.placeholder}"
                              maxlength="${question.maxLength || 500}">${currentAnswer}</textarea>
                `;
                
            case 'radio':
                return `
                    <div class="answer-options">
                        ${question.options.map((option, index) => `
                            <button class="answer-option ${currentAnswer === option ? 'selected' : ''}" 
                                    data-value="${option}">
                                ${option}
                            </button>
                        `).join('')}
                    </div>
                `;
                
            default:
                return '<div class="error">–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞</div>';
        }
    }
    
    /**
     * ‚úÖ –†–µ–Ω–¥–µ—Ä —ç–∫—Ä–∞–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
     */
    renderCompletion() {
        const userName = this.answers.name || '–î—Ä—É–≥';
        
        return `
            <div class="completion-screen">
                <div class="completion-title">${userName}, —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!</div>
                <div class="completion-description">
                    –¢–µ–ø–µ—Ä—å —è –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ —Å–º–æ–≥—É –¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
                    <br><br>
                    –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º?
                </div>
                
                <div class="anna-signature">
                    "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –æ—Å–Ω–æ–≤–∞ –¥–ª—è –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç—ã –≤–º–µ—Å—Ç–µ!"
                    <br><br>
                    ‚Äî –ê–Ω–Ω–∞ –ë—É—Å–µ–ª
                </div>
                
                ${this.renderContactForm()}
            </div>
        `;
    }
    
    /**
     * üìß –†–µ–Ω–¥–µ—Ä —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    renderContactForm() {
        return `
            <div class="contact-form" style="margin-top: 20px;">
                <div class="form-group">
                    <label class="form-label">üìß Email –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤</label>
                    <input class="question-input" 
                           id="emailInput"
                           type="email"
                           placeholder="your@email.com"
                           value="${this.contactData.email}">
                </div>
                
                <div class="form-group">
                    <label class="form-label">üì± –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –±–æ—Ç–µ?</label>
                    <div class="answer-options">
                        ${['Instagram', 'Telegram', 'YouTube', 'Threads', '–û—Ç –¥—Ä—É–∑–µ–π', '–î—Ä—É–≥–æ–µ'].map(source => `
                            <button class="answer-option source-option ${this.contactData.source === source ? 'selected' : ''}" 
                                    data-source="${source}">
                                ${source}
                            </button>
                        `).join('')}
                    </div>
                </div>
            </div>
        `;
    }
    
    /**
     * ‚¨áÔ∏è –†–µ–Ω–¥–µ—Ä –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    renderNavigationButton() {
        let buttonText, buttonId, disabled = false;
        
        if (this.currentStep === 0) {
            buttonText = '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç (2 –º–∏–Ω—É—Ç—ã)';
            buttonId = 'startBtn';
        } else if (this.currentStep > this.totalSteps) {
            buttonText = this.loading ? '–°–æ—Ö—Ä–∞–Ω—è–µ–º...' : '–í–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ';
            buttonId = 'completeBtn';
            disabled = this.loading || !this.isContactDataValid();
        } else {
            buttonText = this.currentStep === this.totalSteps ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç' : '–î–∞–ª–µ–µ ‚Üí';
            buttonId = 'nextBtn';
            disabled = !this.isCurrentStepValid();
        }
        
        return `
            <button class="next-button" 
                    id="${buttonId}" 
                    ${disabled ? 'disabled' : ''}>
                ${buttonText}
            </button>
        `;
    }
    
    /**
     * üéØ –ù–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.attachNavigationListener();
        
        // –ü–æ–ª—è –≤–≤–æ–¥–∞
        this.attachInputListeners();
        
        // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (radio buttons)
        this.attachOptionListeners();
        
        // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞
        this.attachContactListeners();
    }
    
    /**
     * ‚û°Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    attachNavigationListener() {
        const navButton = document.querySelector('.next-button');
        if (navButton) {
            navButton.addEventListener('click', () => this.handleNavigation());
        }
    }
    
    /**
     * üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
     */
    attachInputListeners() {
        const input = document.getElementById('questionInput');
        if (input) {
            input.addEventListener('input', (e) => {
                this.saveCurrentAnswer(e.target.value);
                this.updateNavigationButton();
            });
            
            // Enter –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && this.isCurrentStepValid()) {
                    this.handleNavigation();
                }
            });
        }
    }
    
    /**
     * ‚ö™ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
     */
    attachOptionListeners() {
        const options = document.querySelectorAll('.answer-option:not(.source-option)');
        options.forEach(option => {
            option.addEventListener('click', () => {
                // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –æ–ø—Ü–∏–π
                options.forEach(opt => opt.classList.remove('selected'));
                
                // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –æ–ø—Ü–∏—é
                option.classList.add('selected');
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
                const value = option.dataset.value;
                this.saveCurrentAnswer(value);
                this.updateNavigationButton();
                
                // Haptic feedback
                this.telegram.hapticFeedback('light');
            });
        });
    }
    
    /**
     * üìß –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã
     */
    attachContactListeners() {
        // Email
        const emailInput = document.getElementById('emailInput');
        if (emailInput) {
            emailInput.addEventListener('input', (e) => {
                this.contactData.email = e.target.value;
                this.updateNavigationButton();
            });
        }
        
        // –ò—Å—Ç–æ—á–Ω–∏–∫
        const sourceOptions = document.querySelectorAll('.source-option');
        sourceOptions.forEach(option => {
            option.addEventListener('click', () => {
                // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –æ–ø—Ü–∏–π
                sourceOptions.forEach(opt => opt.classList.remove('selected'));
                
                // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –æ–ø—Ü–∏—é
                option.classList.add('selected');
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                this.contactData.source = option.dataset.source;
                this.updateNavigationButton();
                
                // Haptic feedback
                this.telegram.hapticFeedback('light');
            });
        });
    }
    
    /**
     * üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    async handleNavigation() {
        this.telegram.hapticFeedback('medium');
        
        if (this.currentStep === 0) {
            // –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
            this.nextStep();
        } else if (this.currentStep > this.totalSteps) {
            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
            await this.completeOnboarding();
        } else {
            // –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            if (this.isCurrentStepValid()) {
                this.nextStep();
            }
        }
    }
    
    /**
     * ‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
     */
    nextStep() {
        this.currentStep++;
        this.rerender();
    }
    
    /**
     * üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
     */
    saveCurrentAnswer(value) {
        if (this.currentStep > 0 && this.currentStep <= this.totalSteps) {
            const question = this.questions[this.currentStep - 1];
            this.answers[question.id] = value;
        }
    }
    
    /**
     * ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
     */
    isCurrentStepValid() {
        if (this.currentStep === 0 || this.currentStep > this.totalSteps) {
            return true;
        }
        
        const question = this.questions[this.currentStep - 1];
        const answer = this.answers[question.id];
        
        if (question.required) {
            return answer && answer.trim().length > 0;
        }
        
        return true;
    }
    
    /**
     * ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    isContactDataValid() {
        // Email –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –Ω–æ –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º
        if (this.contactData.email && !this.isValidEmail(this.contactData.email)) {
            return false;
        }
        
        // –ò—Å—Ç–æ—á–Ω–∏–∫ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        return this.contactData.source && this.contactData.source.length > 0;
    }
    
    /**
     * üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ email
     */
    isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }
    
    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    updateNavigationButton() {
        const button = document.querySelector('.next-button');
        if (!button) return;
        
        let disabled = false;
        
        if (this.currentStep > this.totalSteps) {
            disabled = this.loading || !this.isContactDataValid();
        } else if (this.currentStep > 0) {
            disabled = !this.isCurrentStepValid();
        }
        
        button.disabled = disabled;
    }
    
    /**
     * ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
     */
    async completeOnboarding() {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã
        if (this.loading) {
            console.log('‚ö†Ô∏è –û–Ω–±–æ—Ä–¥–∏–Ω–≥ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤');
            return;
        }
        
        if (!this.isContactDataValid()) {
            this.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return;
        }
        
        try {
            this.loading = true;
            this.updateNavigationButton();
            
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            let telegramData = null;
            
            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Telegram
            if (this.telegram && typeof this.telegram.getUser === 'function') {
                try {
                    telegramData = this.telegram.getUser();
                    console.log('üì± OnboardingPage: –î–∞–Ω–Ω—ã–µ Telegram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', telegramData);
                } catch (error) {
                    console.warn('‚ö†Ô∏è OnboardingPage: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Telegram:', error);
                }
            }
            
            const onboardingData = {
                user: telegramData,               // ‚úÖ Backend –æ–∂–∏–¥–∞–µ—Ç "user"
                answers: this.answers,            // ‚úÖ OK
                email: this.contactData.email,    // ‚úÖ Backend –æ–∂–∏–¥–∞–µ—Ç "email"
                source: this.contactData.source,  // ‚úÖ Backend –æ–∂–∏–¥–∞–µ—Ç "source"
                telegramData: telegramData,
                retake: this.isRetakeMode         // RETAKE: –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            };
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            await this.api.completeOnboarding(onboardingData);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.state.update('user.profile', {
                isOnboardingCompleted: true,
                // RETAKE: –û–±–Ω–æ–≤–ª—è–µ–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
                lastOnboardingAt: new Date().toISOString()
            });
            this.state.set('user.onboardingData', onboardingData);
            
            // RETAKE: –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            if (this.isRetakeMode) {
                this.state.remove('onboarding.forceRetake');
                this.state.remove('onboarding.isRetake');
            }
            
            // Haptic feedback —É—Å–ø–µ—Ö–∞
            this.telegram.hapticFeedback('success');
            
            // RETAKE: –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ
            const successMessage = this.isRetakeMode 
                ? '‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ!' 
                : '‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —á–∏—Ç–∞—Ç–µ–ª–µ–π!';
            
            // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
            this.showSuccess(successMessage);
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
            setTimeout(() => {
                this.app.router.navigate('/home');
            }, 1500);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            this.loading = false;
            this.updateNavigationButton();
        }
    }
    
    /**
     * ‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—Ö
     */
    showSuccess(message) {
        if (this.telegram) {
            this.telegram.showAlert(message);
        }
    }
    
    /**
     * ‚ö†Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
     */
    showError(message) {
        this.error = message;
        
        if (this.telegram) {
            this.telegram.showAlert(message);
        }
    }
    
    /**
     * üîÑ –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    rerender() {
        const container = document.querySelector('.onboarding-page');
        if (container) {
            // RETAKE: –°–æ—Ö—Ä–∞–Ω—è–µ–º CSS –∫–ª–∞—Å—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–µ
            const retakeClass = this.isRetakeMode ? ' is-retake' : '';
            container.className = `onboarding-page${retakeClass}`;
            
            container.innerHTML = `
                ${this.renderHeader()}
                ${this.renderProgress()}
                <div class="onboarding-content-wrapper">
                    ${this.renderCurrentStep()}
                </div>
                ${this.renderNavigationButton()}
            `;
            this.attachEventListeners();
        }
    }
    
    /**
     * üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
     */
    getProgressPercent() {
        if (this.currentStep === 0) return 0;
        if (this.currentStep > this.totalSteps) return 100;
        return Math.round((this.currentStep / this.totalSteps) * 100);
    }
    
    /**
     * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
     */
    getAnswersAnalytics() {
        const analytics = {
            totalQuestions: this.totalSteps,
            answeredQuestions: Object.keys(this.answers).length,
            completionRate: (Object.keys(this.answers).length / this.totalSteps) * 100
        };
        
        return analytics;
    }
    
    /**
     * üì± Lifecycle –º–µ—Ç–æ–¥—ã
     */
    
    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    onShow() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —É–∂–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        const onboardingCompleted = this.state.get('user.profile.isOnboardingCompleted');
        if (onboardingCompleted) {
            this.app.router.navigate('/home');
            return;
        }
        
        // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        setTimeout(() => {
            const input = document.getElementById('questionInput');
            if (input && input.type !== 'radio') {
                input.focus();
            }
        }, 300);
    }
    
    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    onHide() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        this.state.set('onboarding.progress', {
            currentStep: this.currentStep,
            answers: this.answers,
            contactData: this.contactData
        });
    }
    
    /**
     * üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
     */
    destroy() {
        // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        this.loading = false;
        this.error = null;
        this.answers = {};
        this.contactData = { email: '', source: '' };
    }
}

// üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.OnboardingPage = OnboardingPage;

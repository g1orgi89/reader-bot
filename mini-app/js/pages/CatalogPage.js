/**
 * üìö –ö–ê–¢–ê–õ–û–ì –ö–ù–ò–ì - CatalogPage.js
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
 * - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–≥–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 * - –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–∞—Ö
 * - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–∏—Ç–∞—Ç
 * - –°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∞–≤—Ç–æ—Ä—É, –æ–ø–∏—Å–∞–Ω–∏—é
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –∏–∑ –æ—Ç—á–µ—Ç–æ–≤
 * - –ü–æ–∫—É–ø–∫–∞ –∫–Ω–∏–≥ —Å UTM —Ç—Ä–µ–∫–∏–Ω–≥–æ–º
 */

class CatalogPage {
    constructor(app) {
        this.app = app;
        this.api = app.api;
        this.state = app.state;
        this.telegram = app.telegram;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.activeView = 'grid'; // grid, list, detail
        this.selectedCategory = 'all';
        this.searchQuery = '';
        this.sortBy = 'featured'; // featured, popular, newest, price
        
        // –§–∏–ª—å—Ç—Ä—ã
        this.filters = {
            category: 'all',
            price: 'all', // all, free, paid
            author: '',
            tags: []
        };
        
        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        this.currentPage = 1;
        this.itemsPerPage = 12;
        this.hasMore = true;
        
        // –î–∞–Ω–Ω—ã–µ
        this.books = [];
        this.categories = [];
        this.selectedBook = null;
        this.recommendations = [];
        this.loading = false;
        
        // URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, book=id, promo=true)
        this.urlParams = this.parseURLParams();
        
        // –ü–æ–¥–ø–∏—Å–∫–∏
        this.subscriptions = [];
        
        this.init();
    }
    
    /**
     * üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    init() {
        this.setupSubscriptions();
        this.loadInitialData();
        this.handleURLParams();
    }
    
    /**
     * üì° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
     */
    setupSubscriptions() {
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
        const catalogSubscription = this.state.subscribe('catalog', (catalog) => {
            this.updateCatalogUI(catalog);
        });
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        const userSubscription = this.state.subscribe('user.profile', (profile) => {
            this.updatePersonalization(profile);
        });
        
        this.subscriptions.push(catalogSubscription, userSubscription);
    }
    
    /**
     * üìä –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async loadInitialData() {
        try {
            this.loading = true;
            this.state.set('catalog.loading', true);
            
            // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            const [books, categories, recommendations] = await Promise.all([
                this.loadBooks(),
                this.loadCategories(),
                this.loadRecommendations()
            ]);
            
            this.books = books;
            this.categories = categories;
            this.recommendations = recommendations;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.state.update('catalog', {
                books: books,
                categories: categories,
                recommendations: recommendations,
                loading: false
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥');
        } finally {
            this.loading = false;
        }
    }
    
    /**
     * üìö –ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥
     */
    async loadBooks(reset = false) {
        try {
            if (reset) {
                this.currentPage = 1;
                this.hasMore = true;
            }
            
            const params = {
                page: this.currentPage,
                limit: this.itemsPerPage,
                sort: this.sortBy,
                category: this.selectedCategory !== 'all' ? this.selectedCategory : undefined,
                search: this.searchQuery || undefined,
                ...this.filters
            };
            
            const response = await this.api.getCatalog(params);
            const books = response.items || response || [];
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∫–Ω–∏–≥
            if (reset || this.currentPage === 1) {
                this.books = books;
            } else {
                this.books = [...this.books, ...books];
            }
            
            this.hasMore = books.length === this.itemsPerPage;
            
            return books;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥:', error);
            return [];
        }
    }
    
    /**
     * üè∑Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    async loadCategories() {
        try {
            const categories = await this.api.getCategories();
            return [
                { id: 'all', name: '–í—Å–µ –∫–Ω–∏–≥–∏', count: 0 },
                ...categories
            ];
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
            return [{ id: 'all', name: '–í—Å–µ –∫–Ω–∏–≥–∏', count: 0 }];
        }
    }
    
    /**
     * üí° –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
     */
    async loadRecommendations() {
        try {
            const recommendations = await this.api.getRecommendations();
            return recommendations.slice(0, 6); // –¢–æ–ø 6 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
            return [];
        }
    }
    
    /**
     * üîó –û–±—Ä–∞–±–æ—Ç–∫–∞ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    handleURLParams() {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π book ID
        if (this.urlParams.book) {
            this.viewBookDetail(this.urlParams.book);
        }
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥
        if (this.urlParams.promo) {
            this.showPromoBooks();
        }
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        if (this.urlParams.category) {
            this.selectedCategory = this.urlParams.category;
            this.loadBooks(true);
        }
    }
    
    /**
     * üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —Ä–∞–∑–º–µ—Ç–∫–∏
     */
    render() {
        if (this.activeView === 'detail' && this.selectedBook) {
            return this.renderBookDetail();
        }
        
        return `
            <div class="catalog-page">
                <div class="page-header">üìö –ö–∞—Ç–∞–ª–æ–≥ —Ä–∞–∑–±–æ—Ä–æ–≤</div>
                <div class="content">
                    ${this.renderSearchAndFilters()}
                    ${this.renderRecommendationsSection()}
                    ${this.renderCatalogContent()}
                </div>
            </div>
        `;
    }
    
    /**
     * üîç –†–µ–Ω–¥–µ—Ä –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    renderSearchAndFilters() {
        return `
            <div class="search-filters-section">
                <div class="search-bar">
                    <input class="search-input" 
                           id="catalogSearchInput"
                           placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∞–≤—Ç–æ—Ä—É..."
                           value="${this.searchQuery}">
                    <button class="search-btn" id="catalogSearchBtn">üîç</button>
                </div>
                
                <div class="filters-row">
                    <div class="categories-filter">
                        <select class="category-select" id="categorySelect">
                            ${this.categories.map(cat => `
                                <option value="${cat.id}" ${cat.id === this.selectedCategory ? 'selected' : ''}>
                                    ${cat.name} ${cat.count ? `(${cat.count})` : ''}
                                </option>
                            `).join('')}
                        </select>
                    </div>
                    
                    <div class="sort-filter">
                        <select class="sort-select" id="sortSelect">
                            <option value="featured" ${this.sortBy === 'featured' ? 'selected' : ''}>üìå –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ</option>
                            <option value="popular" ${this.sortBy === 'popular' ? 'selected' : ''}>üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ</option>
                            <option value="newest" ${this.sortBy === 'newest' ? 'selected' : ''}>üÜï –ù–æ–≤–∏–Ω–∫–∏</option>
                            <option value="price" ${this.sortBy === 'price' ? 'selected' : ''}>üí∞ –ü–æ —Ü–µ–Ω–µ</option>
                        </select>
                    </div>
                    
                    <button class="view-toggle-btn" id="viewToggleBtn">
                        ${this.activeView === 'grid' ? 'üìã' : '‚äû'}
                    </button>
                </div>
            </div>
        `;
    }
    
    /**
     * üí° –†–µ–Ω–¥–µ—Ä —Å–µ–∫—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
     */
    renderRecommendationsSection() {
        if (this.recommendations.length === 0) return '';
        
        return `
            <div class="recommendations-section">
                <div class="section-header">
                    <h3 class="section-title">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å</h3>
                    <p class="section-subtitle">–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ü–∏—Ç–∞—Ç –∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤</p>
                </div>
                
                <div class="recommendations-carousel">
                    ${this.recommendations.map(book => this.renderRecommendationCard(book)).join('')}
                </div>
            </div>
        `;
    }
    
    /**
     * üéØ –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
     */
    renderRecommendationCard(book) {
        return `
            <div class="recommendation-card" data-book-id="${book._id || book.id}">
                <div class="rec-badge">üí° –î–ª—è –≤–∞—Å</div>
                <div class="book-cover-small">
                    ${book.coverImage ? 
                        `<img src="${book.coverImage}" alt="${book.title}" loading="lazy">` :
                        `<div class="cover-placeholder">üìö</div>`
                    }
                </div>
                <div class="rec-info">
                    <div class="rec-title">${book.title}</div>
                    <div class="rec-author">${book.author}</div>
                    <div class="rec-reason">${book.recommendationReason || '–ü–æ–¥—Ö–æ–¥–∏—Ç –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º'}</div>
                </div>
            </div>
        `;
    }
    
    /**
     * üìã –†–µ–Ω–¥–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
     */
    renderCatalogContent() {
        if (this.loading && this.books.length === 0) {
            return this.renderLoadingState();
        }
        
        if (this.books.length === 0) {
            return this.renderEmptyState();
        }
        
        return `
            <div class="catalog-content">
                <div class="catalog-header">
                    <div class="results-info">
                        üìö –ù–∞–π–¥–µ–Ω–æ: ${this.books.length} —Ä–∞–∑–±–æ—Ä–æ–≤
                    </div>
                </div>
                
                <div class="books-container ${this.activeView}-view" id="booksContainer">
                    ${this.books.map(book => 
                        this.activeView === 'grid' ? 
                        this.renderBookCard(book) : 
                        this.renderBookListItem(book)
                    ).join('')}
                </div>
                
                ${this.hasMore ? this.renderLoadMoreButton() : ''}
            </div>
        `;
    }
    
    /**
     * üìñ –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–Ω–∏–≥–∏ (—Å–µ—Ç–∫–∞)
     */
    renderBookCard(book) {
        const hasDiscount = book.originalPrice && book.price < book.originalPrice;
        const isRecommended = this.recommendations.some(r => (r._id || r.id) === (book._id || book.id));
        
        return `
            <div class="book-card" data-book-id="${book._id || book.id}">
                ${isRecommended ? '<div class="recommended-badge">üí°</div>' : ''}
                ${hasDiscount ? '<div class="discount-badge">üî•</div>' : ''}
                
                <div class="book-cover" onclick="this.viewBookDetail('${book._id || book.id}')">
                    ${book.coverImage ? 
                        `<img src="${book.coverImage}" alt="${book.title}" loading="lazy">` :
                        `<div class="cover-placeholder">üìö</div>`
                    }
                </div>
                
                <div class="book-info">
                    <h4 class="book-title">${book.title}</h4>
                    <p class="book-author">${book.author}</p>
                    
                    ${book.description ? `
                        <p class="book-description">${book.description.slice(0, 100)}...</p>
                    ` : ''}
                    
                    <div class="book-meta">
                        <div class="book-rating">
                            <span class="rating-stars">${this.renderStars(book.rating || 4.5)}</span>
                            <span class="rating-count">(${book.reviewsCount || 0})</span>
                        </div>
                        
                        <div class="book-stats">
                            <span class="stat-item">üìñ ${book.chaptersCount || 0} –≥–ª–∞–≤</span>
                            <span class="stat-item">‚è±Ô∏è ${book.readingTime || '30'} –º–∏–Ω</span>
                        </div>
                    </div>
                    
                    <div class="book-price">
                        ${hasDiscount ? `
                            <span class="original-price">${book.originalPrice}‚ÇΩ</span>
                            <span class="current-price">${book.price}‚ÇΩ</span>
                        ` : `
                            <span class="current-price">${book.price || '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}</span>
                        `}
                    </div>
                    
                    <div class="book-actions">
                        <button class="book-action-btn primary" 
                                data-action="view" 
                                data-book-id="${book._id || book.id}">
                            üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                        </button>
                        <button class="book-action-btn secondary" 
                                data-action="buy" 
                                data-book-id="${book._id || book.id}">
                            ${book.price ? 'üí≥ –ö—É–ø–∏—Ç—å' : 'üìñ –ß–∏—Ç–∞—Ç—å'}
                        </button>
                    </div>
                </div>
            </div>
        `;
    }
    
    /**
     * üìù –†–µ–Ω–¥–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥–∏
     */
    renderBookListItem(book) {
        return `
            <div class="book-list-item" data-book-id="${book._id || book.id}">
                <div class="book-cover-small">
                    ${book.coverImage ? 
                        `<img src="${book.coverImage}" alt="${book.title}" loading="lazy">` :
                        `<div class="cover-placeholder-small">üìö</div>`
                    }
                </div>
                
                <div class="book-details">
                    <div class="book-main-info">
                        <h4 class="book-title">${book.title}</h4>
                        <p class="book-author">${book.author}</p>
                        <div class="book-rating-inline">
                            ${this.renderStars(book.rating || 4.5)} (${book.reviewsCount || 0})
                        </div>
                    </div>
                    
                    <div class="book-description-short">
                        ${book.description ? book.description.slice(0, 150) + '...' : ''}
                    </div>
                    
                    <div class="book-bottom-row">
                        <div class="book-price-inline">
                            ${book.price ? `${book.price}‚ÇΩ` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}
                        </div>
                        
                        <div class="book-actions-inline">
                            <button class="action-btn-small" 
                                    data-action="view" 
                                    data-book-id="${book._id || book.id}">
                                –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                            </button>
                            <button class="action-btn-small primary" 
                                    data-action="buy" 
                                    data-book-id="${book._id || book.id}">
                                ${book.price ? '–ö—É–ø–∏—Ç—å' : '–ß–∏—Ç–∞—Ç—å'}
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    
    /**
     * üìÑ –†–µ–Ω–¥–µ—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏
     */
    renderBookDetail() {
        const book = this.selectedBook;
        if (!book) return this.renderEmptyState();
        
        return `
            <div class="book-detail-page">
                <div class="detail-header">
                    <button class="back-btn" id="backToListBtn">
                        ‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É
                    </button>
                    <div class="detail-actions">
                        <button class="share-book-btn" id="shareBookBtn">üì§</button>
                        <button class="favorite-book-btn" id="favoriteBookBtn">ü§ç</button>
                    </div>
                </div>
                
                <div class="book-detail-content">
                    <div class="book-detail-main">
                        <div class="book-cover-large">
                            ${book.coverImage ? 
                                `<img src="${book.coverImage}" alt="${book.title}">` :
                                `<div class="cover-placeholder-large">üìö</div>`
                            }
                        </div>
                        
                        <div class="book-detail-info">
                            <h1 class="detail-title">${book.title}</h1>
                            <h2 class="detail-author">–ê–≤—Ç–æ—Ä: ${book.author}</h2>
                            
                            <div class="detail-rating">
                                <div class="rating-display">
                                    ${this.renderStars(book.rating || 4.5)}
                                    <span class="rating-number">${book.rating || 4.5}</span>
                                    <span class="reviews-count">(${book.reviewsCount || 0} –æ—Ç–∑—ã–≤–æ–≤)</span>
                                </div>
                            </div>
                            
                            <div class="book-stats-detailed">
                                <div class="stat-item">
                                    <span class="stat-icon">üìñ</span>
                                    <span class="stat-text">${book.chaptersCount || 0} –≥–ª–∞–≤</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-icon">‚è±Ô∏è</span>
                                    <span class="stat-text">${book.readingTime || '30 –º–∏–Ω—É—Ç'}</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-icon">üìÖ</span>
                                    <span class="stat-text">${this.formatDate(book.publishedAt)}</span>
                                </div>
                            </div>
                            
                            <div class="book-price-detailed">
                                ${book.originalPrice && book.price < book.originalPrice ? `
                                    <div class="price-with-discount">
                                        <span class="original-price-large">${book.originalPrice}‚ÇΩ</span>
                                        <span class="current-price-large">${book.price}‚ÇΩ</span>
                                        <span class="discount-percent">-${Math.round((1 - book.price / book.originalPrice) * 100)}%</span>
                                    </div>
                                ` : `
                                    <div class="price-single">
                                        <span class="current-price-large">${book.price || '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}</span>
                                    </div>
                                `}
                            </div>
                            
                            <div class="detail-actions-main">
                                <button class="detail-action-btn primary" id="buyBookBtn">
                                    ${book.price ? 'üí≥ –ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å' : 'üìñ –ß–∏—Ç–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ'}
                                </button>
                                <button class="detail-action-btn secondary" id="previewBookBtn">
                                    üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="book-description-full">
                        <h3>üìù –û–ø–∏—Å–∞–Ω–∏–µ</h3>
                        <p>${book.description || '–û–ø–∏—Å–∞–Ω–∏–µ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è'}</p>
                    </div>
                    
                    ${book.chapters && book.chapters.length > 0 ? `
                        <div class="book-chapters">
                            <h3>üìö –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</h3>
                            <div class="chapters-list">
                                ${book.chapters.slice(0, 5).map((chapter, index) => `
                                    <div class="chapter-item">
                                        <span class="chapter-number">${index + 1}</span>
                                        <span class="chapter-title">${chapter.title}</span>
                                        <span class="chapter-duration">${chapter.duration || '5 –º–∏–Ω'}</span>
                                    </div>
                                `).join('')}
                                ${book.chapters.length > 5 ? `
                                    <div class="more-chapters">
                                        +${book.chapters.length - 5} –≥–ª–∞–≤
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                    ` : ''}
                    
                    ${this.renderPromoCodeSection()}
                    ${this.renderRelatedBooks()}
                </div>
            </div>
        `;
    }
    
    /**
     * üéÅ –†–µ–Ω–¥–µ—Ä —Å–µ–∫—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
     */
    renderPromoCodeSection() {
        const promoCode = this.getAvailablePromoCode();
        if (!promoCode) return '';
        
        return `
            <div class="promo-code-section">
                <div class="promo-header">
                    <span class="promo-icon">üéÅ</span>
                    <span class="promo-title">–£ –≤–∞—Å –µ—Å—Ç—å —Å–∫–∏–¥–∫–∞!</span>
                </div>
                <div class="promo-content">
                    <div class="promo-code-display">
                        <span class="promo-code-text">${promoCode.code}</span>
                        <button class="copy-promo-btn" onclick="this.copyPromoCode('${promoCode.code}')">üìã</button>
                    </div>
                    <div class="promo-description">
                        ${promoCode.description} ‚Ä¢ –°–∫–∏–¥–∫–∞ ${promoCode.discount}%
                    </div>
                </div>
            </div>
        `;
    }
    
    /**
     * üìö –†–µ–Ω–¥–µ—Ä –ø–æ—Ö–æ–∂–∏—Ö –∫–Ω–∏–≥
     */
    renderRelatedBooks() {
        const related = this.getRelatedBooks();
        if (related.length === 0) return '';
        
        return `
            <div class="related-books-section">
                <h3>üìö –ü–æ—Ö–æ–∂–∏–µ —Ä–∞–∑–±–æ—Ä—ã</h3>
                <div class="related-books-grid">
                    ${related.slice(0, 4).map(book => `
                        <div class="related-book-card" data-book-id="${book._id || book.id}">
                            <div class="related-book-cover">
                                ${book.coverImage ? 
                                    `<img src="${book.coverImage}" alt="${book.title}" loading="lazy">` :
                                    `<div class="cover-placeholder-small">üìö</div>`
                                }
                            </div>
                            <div class="related-book-info">
                                <div class="related-book-title">${book.title}</div>
                                <div class="related-book-author">${book.author}</div>
                                <div class="related-book-price">${book.price || '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}</div>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }
    
    /**
     * ‚è≥ –†–µ–Ω–¥–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    renderLoadingState() {
        return `
            <div class="loading-state">
                <div class="loading-spinner">‚è≥</div>
                <div class="loading-text">–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥...</div>
            </div>
        `;
    }
    
    /**
     * üì≠ –†–µ–Ω–¥–µ—Ä –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    renderEmptyState() {
        return `
            <div class="empty-state">
                <div class="empty-icon">üìö</div>
                <div class="empty-title">
                    ${this.searchQuery ? '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' : '–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç'}
                </div>
                <div class="empty-text">
                    ${this.searchQuery ? 
                        `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${this.searchQuery}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ` :
                        '–ö–Ω–∏–≥–∏ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ'
                    }
                </div>
                ${this.searchQuery ? `
                    <button class="empty-action" onclick="this.clearSearch()">
                        üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫
                    </button>
                ` : ''}
            </div>
        `;
    }
    
    /**
     * ‚¨áÔ∏è –†–µ–Ω–¥–µ—Ä –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ"
     */
    renderLoadMoreButton() {
        return `
            <button class="load-more-btn" id="loadMoreBtn">
                üìö –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ –∫–Ω–∏–≥–∏
            </button>
        `;
    }
    
    /**
     * üéØ –ù–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        // –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
        this.attachSearchListeners();
        
        // –î–µ–π—Å—Ç–≤–∏—è —Å –∫–Ω–∏–≥–∞–º–∏
        this.attachBookActionListeners();
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        this.attachRecommendationListeners();
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        this.attachDetailListeners();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –µ—â–µ
        this.attachLoadMoreListener();
    }
    
    /**
     * üîç –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞
     */
    attachSearchListeners() {
        const searchInput = document.getElementById('catalogSearchInput');
        const searchBtn = document.getElementById('catalogSearchBtn');
        const categorySelect = document.getElementById('categorySelect');
        const sortSelect = document.getElementById('sortSelect');
        const viewToggleBtn = document.getElementById('viewToggleBtn');
        
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                this.searchQuery = e.target.value;
            });
            
            searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.performSearch();
                }
            });
        }
        
        if (searchBtn) {
            searchBtn.addEventListener('click', () => this.performSearch());
        }
        
        if (categorySelect) {
            categorySelect.addEventListener('change', (e) => {
                this.changeCategory(e.target.value);
            });
        }
        
        if (sortSelect) {
            sortSelect.addEventListener('change', (e) => {
                this.changeSorting(e.target.value);
            });
        }
        
        if (viewToggleBtn) {
            viewToggleBtn.addEventListener('click', () => this.toggleView());
        }
    }
    
    /**
     * üìö –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–Ω–∏–≥–∞–º–∏
     */
    attachBookActionListeners() {
        const bookActions = document.querySelectorAll('.book-action-btn[data-action], .action-btn-small[data-action]');
        bookActions.forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const action = btn.dataset.action;
                const bookId = btn.dataset.bookId;
                
                if (bookId) {
                    this.handleBookAction(action, bookId);
                }
            });
        });
        
        // –ö–ª–∏–∫–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º –∫–Ω–∏–≥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
        const bookCards = document.querySelectorAll('.book-card, .book-list-item');
        bookCards.forEach(card => {
            card.addEventListener('click', () => {
                const bookId = card.dataset.bookId;
                if (bookId) {
                    this.viewBookDetail(bookId);
                }
            });
        });
    }
    
    /**
     * üí° –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
     */
    attachRecommendationListeners() {
        const recCards = document.querySelectorAll('.recommendation-card');
        recCards.forEach(card => {
            card.addEventListener('click', () => {
                const bookId = card.dataset.bookId;
                if (bookId) {
                    this.viewBookDetail(bookId);
                }
            });
        });
    }
    
    /**
     * üìÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    attachDetailListeners() {
        const backBtn = document.getElementById('backToListBtn');
        const buyBtn = document.getElementById('buyBookBtn');
        const previewBtn = document.getElementById('previewBookBtn');
        const shareBtn = document.getElementById('shareBookBtn');
        const favoriteBtn = document.getElementById('favoriteBookBtn');
        
        if (backBtn) {
            backBtn.addEventListener('click', () => this.backToList());
        }
        
        if (buyBtn) {
            buyBtn.addEventListener('click', () => this.buyCurrentBook());
        }
        
        if (previewBtn) {
            previewBtn.addEventListener('click', () => this.previewCurrentBook());
        }
        
        if (shareBtn) {
            shareBtn.addEventListener('click', () => this.shareCurrentBook());
        }
        
        if (favoriteBtn) {
            favoriteBtn.addEventListener('click', () => this.toggleFavoriteBook());
        }
        
        // –ü–æ—Ö–æ–∂–∏–µ –∫–Ω–∏–≥–∏
        const relatedCards = document.querySelectorAll('.related-book-card');
        relatedCards.forEach(card => {
            card.addEventListener('click', () => {
                const bookId = card.dataset.bookId;
                if (bookId) {
                    this.viewBookDetail(bookId);
                }
            });
        });
    }
    
    /**
     * ‚¨áÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –µ—â–µ
     */
    attachLoadMoreListener() {
        const loadMoreBtn = document.getElementById('loadMoreBtn');
        if (loadMoreBtn) {
            loadMoreBtn.addEventListener('click', () => this.loadMoreBooks());
        }
    }
    
    /**
     * üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
     */
    async performSearch() {
        this.telegram.hapticFeedback('light');
        await this.loadBooks(true);
        this.rerender();
    }
    
    /**
     * üè∑Ô∏è –°–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    async changeCategory(categoryId) {
        this.selectedCategory = categoryId;
        this.telegram.hapticFeedback('light');
        
        await this.loadBooks(true);
        this.rerender();
    }
    
    /**
     * üìä –°–º–µ–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
     */
    async changeSorting(sortBy) {
        this.sortBy = sortBy;
        this.telegram.hapticFeedback('light');
        
        await this.loadBooks(true);
        this.rerender();
    }
    
    /**
     * üìã –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∞
     */
    toggleView() {
        this.activeView = this.activeView === 'grid' ? 'list' : 'grid';
        this.telegram.hapticFeedback('light');
        this.rerender();
    }
    
    /**
     * üìö –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–Ω–∏–≥–∞–º–∏
     */
    handleBookAction(action, bookId) {
        this.telegram.hapticFeedback('light');
        
        switch (action) {
            case 'view':
                this.viewBookDetail(bookId);
                break;
            case 'buy':
                this.buyBook(bookId);
                break;
        }
    }
    
    /**
     * üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ
     */
    async viewBookDetail(bookId) {
        try {
            this.telegram.hapticFeedback('medium');
            
            // –ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É –≤ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å
            let book = this.books.find(b => (b._id || b.id) === bookId);
            
            if (!book) {
                // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                book = await this.api.getBookDetails(bookId);
            }
            
            if (book) {
                this.selectedBook = book;
                this.activeView = 'detail';
                this.updateURL({ book: bookId });
                this.rerender();
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∫–Ω–∏–≥–∏:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ');
        }
    }
    
    /**
     * üí≥ –ü–æ–∫—É–ø–∫–∞ –∫–Ω–∏–≥–∏
     */
    buyBook(bookId) {
        const book = this.books.find(b => (b._id || b.id) === bookId) || this.selectedBook;
        if (!book) return;
        
        this.telegram.hapticFeedback('success');
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å UTM –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const promoCode = this.getAvailablePromoCode();
        const utmParams = this.buildUTMParams(book, promoCode);
        const buyUrl = this.buildBuyURL(book, utmParams);
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω—é—é —Å—Å—ã–ª–∫—É
        this.telegram.openLink(buyUrl);
        
        // –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ–∫—É–ø–∫–∏
        this.trackPurchaseIntent(book, promoCode);
    }
    
    /**
     * ‚Üê –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É
     */
    backToList() {
        this.activeView = 'grid';
        this.selectedBook = null;
        this.updateURL({});
        this.telegram.hapticFeedback('light');
        this.rerender();
    }
    
    /**
     * üí≥ –ü–æ–∫—É–ø–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–Ω–∏–≥–∏
     */
    buyCurrentBook() {
        if (this.selectedBook) {
            this.buyBook(this.selectedBook._id || this.selectedBook.id);
        }
    }
    
    /**
     * üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–Ω–∏–≥–∏
     */
    previewCurrentBook() {
        this.telegram.hapticFeedback('light');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –∏–ª–∏ –ø–µ—Ä–≤—É—é –≥–ª–∞–≤—É
        this.showSuccess('üìñ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    /**
     * üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–Ω–∏–≥–æ–π
     */
    shareCurrentBook() {
        if (!this.selectedBook) return;
        
        this.telegram.hapticFeedback('medium');
        
        const shareText = `üìö –†–µ–∫–æ–º–µ–Ω–¥—É—é —Ä–∞–∑–±–æ—Ä "${this.selectedBook.title}" –æ—Ç ${this.selectedBook.author}\n\n${this.selectedBook.description?.slice(0, 100) || '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∫–Ω–∏–≥–∏'}...\n\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ Reader Bot!`;
        
        if (this.telegram.isShareSupported()) {
            this.telegram.shareMessage(shareText);
        } else {
            navigator.clipboard.writeText(shareText);
            this.showSuccess('‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        }
    }
    
    /**
     * ü§ç –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
     */
    toggleFavoriteBook() {
        this.telegram.hapticFeedback('success');
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        this.showSuccess('üíñ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
    }
    
    /**
     * ‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–∏–≥
     */
    async loadMoreBooks() {
        if (!this.hasMore) return;
        
        this.currentPage++;
        await this.loadBooks();
        this.updateBooksContainer();
    }
    
    /**
     * üßπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
     */
    
    parseURLParams() {
        const params = new URLSearchParams(window.location.search);
        return {
            book: params.get('book'),
            promo: params.get('promo'),
            category: params.get('category')
        };
    }
    
    updateURL(params) {
        const url = new URL(window.location);
        Object.keys(params).forEach(key => {
            if (params[key]) {
                url.searchParams.set(key, params[key]);
            } else {
                url.searchParams.delete(key);
            }
        });
        window.history.replaceState({}, '', url);
    }
    
    renderStars(rating) {
        const fullStars = Math.floor(rating);
        const hasHalfStar = rating % 1 >= 0.5;
        const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
        
        return '‚≠ê'.repeat(fullStars) + 
               (hasHalfStar ? '‚≠ê' : '') + 
               '‚òÜ'.repeat(emptyStars);
    }
    
    formatDate(dateString) {
        if (!dateString) return '–ù–µ–¥–∞–≤–Ω–æ';
        return new Date(dateString).toLocaleDateString('ru-RU');
    }
    
    getAvailablePromoCode() {
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –æ—Ç—á–µ—Ç–æ–≤)
        const reports = this.state.get('reports');
        return reports?.current?.promoCode || null;
    }
    
    getRelatedBooks() {
        if (!this.selectedBook) return [];
        
        // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∫–Ω–∏–≥ –ø–æ –∞–≤—Ç–æ—Ä—É –∏–ª–∏ —Ç–µ–º–µ
        return this.books.filter(book => 
            book.author === this.selectedBook.author ||
            book.category === this.selectedBook.category
        ).filter(book => 
            (book._id || book.id) !== (this.selectedBook._id || this.selectedBook.id)
        );
    }
    
    buildUTMParams(book, promoCode) {
        return {
            utm_source: 'telegram_mini_app',
            utm_medium: 'catalog',
            utm_campaign: 'book_purchase',
            utm_content: book._id || book.id,
            promo_code: promoCode?.code || null
        };
    }
    
    buildBuyURL(book, utmParams) {
        const baseURL = `https://annabusel.org/catalog/${book._id || book.id}`;
        const params = new URLSearchParams(utmParams);
        return `${baseURL}?${params.toString()}`;
    }
    
    trackPurchaseIntent(book, promoCode) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        if (this.api.trackEvent) {
            this.api.trackEvent('purchase_intent', {
                book_id: book._id || book.id,
                book_title: book.title,
                book_price: book.price,
                promo_code: promoCode?.code || null,
                source: 'mini_app_catalog'
            });
        }
    }
    
    copyPromoCode(code) {
        navigator.clipboard.writeText(code);
        this.telegram.hapticFeedback('success');
        this.showSuccess('‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
    }
    
    clearSearch() {
        this.searchQuery = '';
        const searchInput = document.getElementById('catalogSearchInput');
        if (searchInput) searchInput.value = '';
        this.performSearch();
    }
    
    showPromoBooks() {
        // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
        this.sortBy = 'featured';
        this.selectedCategory = 'promo';
        this.loadBooks(true);
    }
    
    updateCatalogUI(catalog) {
        if (catalog.books) {
            this.books = catalog.books;
            this.updateBooksContainer();
        }
    }
    
    updatePersonalization(profile) {
        // –û–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è
        if (profile) {
            this.loadRecommendations();
        }
    }
    
    updateBooksContainer() {
        const container = document.getElementById('booksContainer');
        if (container) {
            container.innerHTML = this.books.map(book => 
                this.activeView === 'grid' ? 
                this.renderBookCard(book) : 
                this.renderBookListItem(book)
            ).join('');
            
            this.attachBookActionListeners();
        }
    }
    
    rerender() {
        const container = document.querySelector('.catalog-page');
        if (container) {
            container.innerHTML = this.render();
            this.attachEventListeners();
        }
    }
    
    showSuccess(message) {
        if (this.telegram) {
            this.telegram.showAlert(message);
        }
    }
    
    showError(message) {
        if (this.telegram) {
            this.telegram.showAlert(message);
        }
    }
    
    /**
     * üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
     */
    destroy() {
        this.subscriptions.forEach(unsubscribe => {
            if (typeof unsubscribe === 'function') {
                unsubscribe();
            }
        });
        this.subscriptions = [];
    }
}

// üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.CatalogPage = CatalogPage;
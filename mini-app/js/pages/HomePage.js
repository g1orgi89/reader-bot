/**
 * üè† –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê - HomePage.js (üîß –£–ë–†–ê–ù–´ –•–ï–î–ï–†–´)
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –±–ª–æ–∫ —Å –∞–≤–∞—Ç–∞—Ä–æ–º –∏ –º–µ–Ω—é
 * - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
 * - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 2x2: —Ü–∏—Ç–∞—Ç—ã —Å–æ–±—Ä–∞–Ω–æ, –¥–Ω–∏ –ø–æ–¥—Ä—è–¥
 * - CTA –∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É" 
 * - –¢–æ–ø 3 —Ä–∞–∑–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
 * - –ë–ª–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –∏ State Management
 * - –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 * 
 * ‚úÖ –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê: 
 * - –£–±—Ä–∞–Ω—ã –≤–Ω–µ—à–Ω–∏–µ —Ö–µ–¥–µ—Ä—ã
 * - –î–æ–±–∞–≤–ª–µ–Ω –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π header-–±–ª–æ–∫ –¢–û–õ–¨–ö–û –Ω–∞ –≥–ª–∞–≤–Ω–æ–π
 * - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ç–æ—á–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏–∑ –∫–æ–Ω—Ü–µ–ø—Ç–∞
 * - –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –¥–∏–∑–∞–π–Ω 1:1 –∫–∞–∫ –≤ –∫–æ–Ω—Ü–µ–ø—Ç–µ "5 —Å—Ç—Ä–∞–Ω–∏—Ü"
 */

class HomePage {
    constructor(app) {
        this.app = app;
        this.api = app.api;
        this.state = app.state;
        this.telegram = app.telegram;
        this.statistics = app.statistics || window.statisticsService || null;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        this.loading = false;
        this.error = null;
        this.dataLoaded = false;
        
        // –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.subscriptions = [];
        
        this.init();
    }
    
    /**
     * üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    init() {
        this.setupSubscriptions();
        this.setupStatsEventListener();
    }

    /**
     * üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    setupStatsEventListener() {
        // Add listener for stats:updated event from StatisticsService
        document.addEventListener('stats:updated', (e) => {
            if (e.detail) {
                this.updateStatsUI(e.detail);
            }
        });
    }

    /**
     * üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ userId –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–æ–Ω–∫–∏ —É—Å–ª–æ–≤–∏–π
     * @param {number} timeout - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     * @returns {Promise<string>} - –í–∞–ª–∏–¥–Ω—ã–π userId
     */
    async waitForValidUserId(timeout = 10000) {
        const startTime = Date.now();
        
        while (Date.now() - startTime < timeout) {
            let userId = this.state.getCurrentUserId();
            
            // ‚úÖ FIX: Accept numeric string userId and coerce to number
            if (typeof userId === 'string' && /^\d+$/.test(userId)) {
                userId = parseInt(userId, 10);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ userId –≤–∞–ª–∏–¥–Ω—ã–π –∏ –Ω–µ —Ä–∞–≤–µ–Ω demo-user
            if (userId && userId !== 'demo-user' && typeof userId === 'number') {
                console.log('‚úÖ HomePage: –ü–æ–ª—É—á–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π userId:', userId);
                return userId;
            }
            
            // –¢–∞–∫–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º demo-user —Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ
            if (userId === 'demo-user' && this.state.get('debugMode')) {
                console.log('üß™ HomePage: –ò—Å–ø–æ–ª—å–∑—É–µ–º demo-user –≤ debug —Ä–µ–∂–∏–º–µ');
                return userId;
            }
            
            // –ñ–¥–µ–º 100ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        throw new Error('Timeout: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π userId');
    }
    
    /**
     * üì° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setupSubscriptions() {
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const statsSubscription = this.state.subscribe('stats', (stats) => {
            this.updateStatsUI(stats);
        });
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–Ω–∏–≥  
        const catalogSubscription = this.state.subscribe('catalog.books', (books) => {
            this.updateTopBooksUI(books);
        });
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userSubscription = this.state.subscribe('user.profile', (profile) => {
            this.updateUserInfoUI(profile);
        });
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        const loadingSubscription = this.state.subscribe('ui.loading', (loading) => {
            this.updateLoadingState(loading);
        });
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ç–∞—Ç
        const recentQuotesSubscription = this.state.subscribe('quotes.recent', () => {
            this.updateRecentQuotesUI();
        });
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ü–∏—Ç–∞—Ç (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
        const quotesSubscription = this.state.subscribe('quotes.items', (quotes) => {
            // –ï—Å–ª–∏ –Ω–æ–≤–∞—è —Ü–∏—Ç–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
            if (quotes && quotes.length > 0) {
                const lastAddedQuote = this.state.get('quotes.lastAdded');
                if (lastAddedQuote) {
                    this.loadRecentQuotes();
                }
            }
        });
        
        this.subscriptions.push(
            statsSubscription,
            catalogSubscription, 
            userSubscription,
            loadingSubscription,
            recentQuotesSubscription,
            quotesSubscription
        );
    }
    
    /**
     * üìä –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async loadInitialData() {
        if (this.loading) {
            console.log('üîÑ HomePage: –ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }
        
        try {
            this.loading = true;
            this.state.set('ui.loading', true);
            
            console.log('üìä HomePage: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö');
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ñ–¥–µ–º –≤–∞–ª–∏–¥–Ω—ã–π userId –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
            const userId = await this.waitForValidUserId();
            console.log('üìä HomePage: –ò—Å–ø–æ–ª—å–∑—É–µ–º userId:', userId);
            
            // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–µ—Ä–µ–¥–∞—á–µ–π userId
            const [stats, topBooks, profile] = await Promise.all([
                this.loadUserStats(userId),
                this.loadTopBooks(), 
                this.loadUserProfile(userId),
                this.loadRecentQuotes(userId)
            ]);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if (stats) {
                this.state.set('stats', stats);
                this.state.set('stats.lastUpdate', Date.now());
            }
            if (topBooks) this.state.set('catalog.books', topBooks);
            
            // ‚úÖ FIX: Merge profile data instead of overwriting to avoid clobbering existing valid data
            if (profile) {
                const prev = this.state.get('user.profile') || {};
                const pick = (oldVal, newVal) => (newVal !== undefined && newVal !== null && String(newVal).trim() !== '' ? newVal : oldVal);
                
                // Compute name from new profile, but only use it if it's explicitly provided or computed from non-empty firstName/lastName
                let computedName = '';
                if (profile.name) {
                    computedName = profile.name;
                } else if (profile.firstName || profile.lastName) {
                    computedName = [profile.firstName, profile.lastName].filter(Boolean).join(' ');
                } else if (profile.username && !prev.name) {
                    // Only use username as fallback if there's no existing name
                    computedName = profile.username;
                }
                
                const merged = {
                    ...prev,
                    ...profile,
                    id: profile.id || prev.id || userId,
                    name: pick(prev?.name, computedName),
                    firstName: pick(prev?.firstName, profile.firstName),
                    lastName: pick(prev?.lastName, profile.lastName),
                    username: pick(prev?.username, profile.username)
                };
                
                if (merged.name) {
                    merged.initials = this.getInitials(merged.name);
                }
                
                this.state.set('user.profile', merged);
            }
            
            this.dataLoaded = true;
            console.log('‚úÖ HomePage: –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
            this.error = error.message;
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å.');
        } finally {
            this.loading = false;
            this.state.set('ui.loading', false);
        }
    }
    
    async loadFromStatistics() {
        if (!this.statistics) return this.loadInitialData();
        if (this.loading) return;
        try {
            this.loading = true;
            this.state.set('ui.loading', true);
            await this.waitForValidUserId(); // Ensure userId is ready
            const [mainStats, latestQuotes, topAnalyses, progress] = await Promise.all([
                this.statistics.getMainStats(),
                this.statistics.getLatestQuotes(3),
                this.statistics.getTopAnalyses(3),
                this.statistics.getUserProgress()
            ]);
            if (progress && progress.currentStreak > mainStats.currentStreak) {
                mainStats.currentStreak = progress.currentStreak;
            }
            this.state.update('stats', {
                totalQuotes: mainStats.totalQuotes,
                currentStreak: mainStats.currentStreak,
                daysInApp: mainStats.daysInApp,
                loading: false,
                loadedAt: Date.now()
            });
            this.state.setRecentQuotes(latestQuotes);
            const mapped = topAnalyses.map(a => ({ _id: a.id, title: a.title, author: a.author, salesCount: a.clicks }));
            this.state.set('catalog.books', mapped);
            this.state.set('stats.progressTemp', progress);
            this.dataLoaded = true;
            this.updateHeaderStats();
            this.updateProgressUI();
        } catch (e) {
            console.error('HomePage statistics load error', e);
            this.error = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ';
        } finally {
            this.loading = false;
            this.state.set('ui.loading', false);
        }
    }

    updateProgressUI() {
        const wrap = document.querySelector('.progress-block');
        if (!wrap) return;
        const p = this.state.get('stats.progressTemp');
        if (!p) return;
        const grid = wrap.querySelector('.progress-grid');
        const activityNode = wrap.querySelector('.progress-activity');
        if (grid) {
            grid.innerHTML = [
                { label: '–ó–∞ 7 –¥–Ω–µ–π', value: p.weeklyQuotes ?? '‚Äî' },
                { label: '–°–µ—Ä–∏—è (–¥–Ω–µ–π –ø–æ–¥—Ä—è–¥)', value: p.currentStreak ?? '‚Äî' },
                { label: '–õ—é–±–∏–º—ã–π –∞–≤—Ç–æ—Ä', value: p.favoriteAuthor || '‚Äî' }
            ].map(item => `
                <div class="stat-card" style="min-height:74px;display:flex;flex-direction:column;justify-content:space-between;">
                    <div style="font-size:11px;text-transform:uppercase;letter-spacing:.5px;">${item.label}</div>
                    <div style="font-size:20px;font-weight:600;">${item.value}</div>
                </div>
            `).join('');
        }
        if (activityNode) {
            activityNode.textContent = '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ' + (p.activityLevel === 'high' ? '–í—ã—Å–æ–∫–∞—è üî•' : p.activityLevel === 'medium' ? '–°—Ä–µ–¥–Ω—è—è üìà' : '–ù–∏–∑–∫–∞—è üå±');
        }
        console.debug('[Progress] backendStreak:', p.backendStreak, 'computedStreak:', p.computedStreak, 'used:', p.currentStreak);
    }
    
    /**
     * üìà –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async loadUserStats(userId = null) {
        try {
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π userId –∏–ª–∏ –∂–¥–µ–º –≤–∞–ª–∏–¥–Ω—ã–π
            if (!userId) {
                userId = await this.waitForValidUserId();
            }
            console.log('üìà HomePage: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è userId:', userId);
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º userId –≤ API –≤—ã–∑–æ–≤
            const stats = await this.api.getStats(userId);
            return {
                totalQuotes: stats.totalQuotes != null ? stats.totalQuotes : null,
                currentStreak: stats.currentStreak != null ? stats.currentStreak : null,
                thisWeek: stats.thisWeek || 0,
                longestStreak: stats.longestStreak || 0,
                favoriteAuthors: stats.favoriteAuthors || [],
                progressPercent: this.calculateProgress(stats.thisWeek || 5),
                loading: false
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return {
                totalQuotes: null,
                currentStreak: null,
                thisWeek: 5,
                progressPercent: 35,
                loading: false
            };
        }
    }
    
    /**
     * üïê –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ç–∞—Ç
     */
    async loadRecentQuotes(userId = null) {
        try {
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π userId –∏–ª–∏ –∂–¥–µ–º –≤–∞–ª–∏–¥–Ω—ã–π
            if (!userId) {
                userId = await this.waitForValidUserId();
            }
            console.log('üïê HomePage: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã –¥–ª—è userId:', userId);
            
            this.state.set('quotes.recentLoading', true);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ API
            const result = await this.api.getRecentQuotes(3, userId);
            const quotes = result.data?.quotes || result.quotes || result.items || result.data || result;
            
            // Ensure we only treat arrays as quotes
            if (!Array.isArray(quotes)) {
                throw new Error('API response does not contain valid quotes array');
            }
            
            this.state.setRecentQuotes(quotes);
            this.state.set('quotes.recentLoading', false);
            
            return quotes;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ç–∞—Ç:', error);
            
            // Fallback: –±–µ—Ä–µ–º –∏–∑ state.get('quotes.items') –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            const allQuotes = this.state.get('quotes.items') || [];
            const sortedQuotes = allQuotes
                .filter(quote => quote.createdAt || quote.dateAdded)
                .sort((a, b) => {
                    const dateA = new Date(a.createdAt || a.dateAdded);
                    const dateB = new Date(b.createdAt || b.dateAdded);
                    return dateB - dateA; // –ü–æ —É–±—ã–≤–∞–Ω–∏—é (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
                })
                .slice(0, 3);
            
            this.state.setRecentQuotes(sortedQuotes);
            this.state.set('quotes.recentLoading', false);
            
            return sortedQuotes;
        }
    }
    
    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ç–∞—Ç –±–µ–∑ –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    updateRecentQuotesUI() {
        const recentQuotesList = document.getElementById('recent-quotes-list');
        if (!recentQuotesList) return;
        
        const recentQuotes = this.state.get('quotes.recent') || [];
        const isLoading = this.state.get('quotes.recentLoading') || false;
        
        recentQuotesList.innerHTML = isLoading ? 
            this.renderRecentQuotesLoading() : 
            this.renderRecentQuotesList(recentQuotes);
            
        // –ü–µ—Ä–µ–Ω–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.attachRecentQuoteEvents();
    }
    
    /**
     * üì± –ù–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ç–∞—Ç
     */
    attachRecentQuoteEvents() {
        const quoteItems = document.querySelectorAll('.recent-quote-item');
        quoteItems.forEach(item => {
            if (!item.classList.contains('skeleton')) {
                item.addEventListener('click', () => {
                    const quoteId = item.dataset.quoteId;
                    this.handleRecentQuoteClick(quoteId);
                });
            }
        });
    }
    
    /**
     * üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ç–∞—Ç–µ
     */
    handleRecentQuoteClick(quoteId) {
        if (!quoteId) return;
        
        this.telegram.hapticFeedback('light');
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–Ω–µ–≤–Ω–∏–∫–∞ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ü–∏—Ç–∞—Ç–µ
        this.app.router.navigate(`/diary?quote=${quoteId}`);
    }
    
    /**
     * üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ç–∞—Ç (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ mount)
     */
    async initRecentQuotes() {
        try {
            await this.loadRecentQuotes();
            this.updateRecentQuotesUI();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ç–∞—Ç:', error);
        }
    }
    async loadTopBooks() {
        try {
            const books = await this.api.getCatalog({ 
                limit: 3, 
                sort: 'popular',
                featured: true 
            });
            return books.items || books || this.getFallbackTopBooks();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø –∫–Ω–∏–≥:', error);
            return this.getFallbackTopBooks();
        }
    }
    
    /**
     * üìö Fallback –¥–∞–Ω–Ω—ã–µ —Ç–æ–ø –∫–Ω–∏–≥ –∏–∑ –∫–æ–Ω—Ü–µ–ø—Ç–∞
     */
    getFallbackTopBooks() {
        return [
            {
                _id: '1',
                title: '–ò—Å–∫—É—Å—Å—Ç–≤–æ –ª—é–±–∏—Ç—å',
                author: '–≠—Ä–∏—Ö –§—Ä–æ–º–º',
                salesCount: 47
            },
            {
                _id: '2', 
                title: '–ë—ã—Ç—å —Å–æ–±–æ–π',
                author: '–ê–Ω–Ω–∞ –ë—É—Å–µ–ª',
                salesCount: 31
            },
            {
                _id: '3',
                title: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π', 
                author: '–ê–Ω–Ω–∞ –ë—É—Å–µ–ª',
                salesCount: 23
            }
        ];
    }
    
    /**
     * üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async loadUserProfile(userId = null) {
        try {
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π userId –∏–ª–∏ –∂–¥–µ–º –≤–∞–ª–∏–¥–Ω—ã–π
            if (!userId) {
                userId = await this.waitForValidUserId();
            }
            console.log('üë§ HomePage: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è userId:', userId);
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º userId –≤ API –≤—ã–∑–æ–≤
            const apiProfile = await this.api.getProfile(userId);
            
            // ‚úÖ FIX: Unpack API response to return flat profile object, not wrapper
            const profile = apiProfile?.user || apiProfile?.result?.user || apiProfile || {};
            if (!profile.id) profile.id = userId;
            return profile;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            const telegramUser = this.telegram.getUser();
            return {
                id: userId,
                name: telegramUser?.first_name || '–ê–Ω–Ω–∞ –ú.',
                username: telegramUser?.username || null,
                initials: this.getInitials(telegramUser?.first_name || '–ê–Ω–Ω–∞ –ú.')
            };
        }
    }
    
    /**
     * üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —Ä–∞–∑–º–µ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–°–û –í–°–¢–†–û–ï–ù–ù–´–ú –ë–õ–û–ö–û–ú –ê–í–ê–¢–ê–†–ê)
     */
    render() {
        const user = this.state.get('user.profile') || {};
        const stats = this.state.get('stats') || {};
        const books = this.state.get('catalog.books') || [];
        
        console.log('[DEBUG] HomePage.js render: Profile data before rendering - profile:', user, 'profile.name:', user.name, 'profile.userId:', user.userId || user.id);
        
        return `
            <div class="content">
                ${this.renderUserHeader(user)}
                <!-- ${this.renderWelcomeSection()}  –£–î–ê–õ–ï–ù–û -->
                ${this.renderStatsInline(stats)}
                ${this.renderMainCTA()}
                ${this.renderRecentQuotesSection()}
                ${this.renderTopBooks(books)} 
                ${this.renderProgressSection(stats)}
                ${this.renderError()}
            </div>
        `;
    }
    
    /**
     * üë§ –†–µ–Ω–¥–µ—Ä –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º –∏ –º–µ–Ω—é (–¢–û–õ–¨–ö–û –Ω–∞ –≥–ª–∞–≤–Ω–æ–π!)
     */
    renderUserHeader(user) {
        const name =
            user.name ||
            [user.firstName, user.lastName].filter(Boolean).join(' ') ||
            user.username ||
            '';
        const initials = name ? this.getInitials(name) : '';
        
        return `
            <div class="user-header-inline">
                <div class="user-info-inline">
                    ${this.renderUserAvatar(user.avatarUrl, initials)}
                    <div class="user-details-inline">
                        <h3 class="user-name-inline">${name}</h3>
                    </div>
                </div>
                <button class="menu-button-inline" id="homeMenuBtn">‚ò∞</button>
            </div>
        `;
    }

    /**
     * üñºÔ∏è –†–µ–Ω–¥–µ—Ä –∞–≤–∞—Ç–∞—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     */
    renderUserAvatar(avatarUrl, initials) {
        const telegramPhotoUrl = this.telegram.getUser()?.photo_url;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        const imageUrl = avatarUrl || telegramPhotoUrl;
        
        if (imageUrl) {
            return `
                <div class="user-avatar-inline">
                    <img class="user-avatar-img" src="${imageUrl}" alt="–ê–≤–∞—Ç–∞—Ä" 
                         onerror="this.style.display='none'; this.parentElement.classList.add('fallback')" />
                    <div class="user-avatar-fallback">${initials || '–ê'}</div>
                </div>
            `;
        } else {
            return `
                <div class="user-avatar-inline fallback">
                    <div class="user-avatar-fallback">${initials || '–ê'}</div>
                </div>
            `;
        }
    }
    
    /**
     * üëã –†–µ–Ω–¥–µ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏
     */
    renderWelcomeSection() {
        return `
            <div class="page-title">
                <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã</h2>
                <p>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ –º—É–¥—Ä–æ—Å—Ç–∏</p>
            </div>
        `;
    }
    
    /**
     * üìä –†–µ–Ω–¥–µ—Ä –∏–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∑–∞–º–µ–Ω—è–µ—Ç —Å–µ—Ç–∫—É)
     */
    renderStatsInline(stats) {
        const loading = stats.loading || this.loading;
        const totalQuotes = loading ? '‚è≥' : (stats.totalQuotes != null ? stats.totalQuotes : '‚Äî');
        const currentStreak = loading ? '‚è≥' : (stats.currentStreak != null ? stats.currentStreak : '‚Äî');
        
        if (loading) {
            return `
                <div class="stats-inline" id="statsInline">
                    <span class="stat-summary">‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...</span>
                </div>
            `;
        }
        
        const quotesWord = totalQuotes !== '‚Äî' ? this.getQuoteWord(totalQuotes) : '';
        const daysWord = currentStreak !== '‚Äî' ? this.getDayWord(currentStreak) : '';
        
        return `
            <div class="stats-inline" id="statsInline">
                <span class="stat-summary">${totalQuotes} ${quotesWord}${totalQuotes !== '‚Äî' && currentStreak !== '‚Äî' ? ' ‚Ä¢ ' : ''}${currentStreak !== '‚Äî' ? currentStreak + ' ' + daysWord + ' –ø–æ–¥—Ä—è–¥' : ''}</span>
            </div>
        `;
    }
    
    /**
     * üïê –†–µ–Ω–¥–µ—Ä —Å–µ–∫—Ü–∏–∏ "–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã"
     */
    renderRecentQuotesSection() {
        const recentQuotes = this.state.get('quotes.recent') || [];
        const isLoading = this.state.get('quotes.recentLoading') || false;
        
        return `
            <div class="recent-quotes-section" id="recentQuotesSection">
                <div class="section-title">üí´ –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã</div>
                <div id="recent-quotes-list">
                    ${isLoading ? this.renderRecentQuotesLoading() : this.renderRecentQuotesList(recentQuotes)}
                </div>
            </div>
        `;
    }
    
    /**
     * üîÑ –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ç–∞—Ç
     */
    renderRecentQuotesList(quotes) {
        if (!Array.isArray(quotes) || quotes.length === 0) {
            return this.renderEmptyRecentQuotes();
        }
        
        const recentQuotes = quotes.slice(0, 3);
        return recentQuotes.map(quote => this.renderRecentQuoteItem(quote)).join('');
    }
    
    /**
     * üìù –†–µ–Ω–¥–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ç–∞—Ç—ã
     */
    renderRecentQuoteItem(quote) {
        const text = quote.text || '';
        const author = quote.author || '';
        const truncatedText = text.length > 120 ? text.substring(0, 120) + '...' : text;
        
        return `
            <div class="recent-quote-item" data-quote-id="${quote._id || quote.id}">
                <div class="quote-text">"${truncatedText}"</div>
                ${author ? `<div class="quote-author">‚Äî ${author}</div>` : ''}
            </div>
        `;
    }
    
    /**
     * ‚è≥ –†–µ–Ω–¥–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ç–∞—Ç (—Å–∫–µ–ª–µ—Ç–æ–Ω)
     */
    renderRecentQuotesLoading() {
        return `
            <div class="recent-quote-item skeleton">
                <div class="quote-text skeleton-line"></div>
                <div class="quote-author skeleton-line-short"></div>
            </div>
            <div class="recent-quote-item skeleton">
                <div class="quote-text skeleton-line"></div>
                <div class="quote-author skeleton-line-short"></div>
            </div>
            <div class="recent-quote-item skeleton">
                <div class="quote-text skeleton-line"></div>
                <div class="quote-author skeleton-line-short"></div>
            </div>
        `;
    }
    
    /**
     * üì≠ –†–µ–Ω–¥–µ—Ä –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ç–∞—Ç
     */
    renderEmptyRecentQuotes() {
        return `
            <div class="empty-recent-quotes">
                <p>‚úçÔ∏è –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É, —á—Ç–æ–±—ã –æ–Ω–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –∑–¥–µ—Å—å</p>
            </div>
        `;
    }
    
    /**
     * ‚úçÔ∏è –†–µ–Ω–¥–µ—Ä –≥–ª–∞–≤–Ω–æ–π CTA –∫–Ω–æ–ø–∫–∏
     */
    renderMainCTA() {
        return `
            <button class="main-cta" id="addQuoteBtn">
                ‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É
            </button>
        `;
    }
    
    /**
     * üî• –†–µ–Ω–¥–µ—Ä —Ç–æ–ø –∫–Ω–∏–≥ –Ω–µ–¥–µ–ª–∏
     */
    renderTopBooks(books) {
        if (!Array.isArray(books)) books = [];
        const topBooks = books.slice(0, 3);
        return `
            <div class="top-books-section">
                <div class="section-title">üî• –¢–æ–ø 3 —Ä–∞–∑–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏</div>
                <div id="top-books-list">
                    ${topBooks.length > 0 ? 
                        topBooks.map((book, index) => this.renderBookItem(book, index + 1)).join('') :
                        this.renderEmptyBooks()
                    }
                </div>
            </div>
        `;
    }
    
    /**
     * üìñ –†–µ–Ω–¥–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–Ω–∏–≥–∏
     */
    renderBookItem(book, rank) {
        return `
            <div class="book-item" data-book-id="${book._id || book.id}">
                <div class="book-rank">${rank}</div>
                <div class="book-info">
                    <div class="book-title">${book.title || '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏'}</div>
                    <div class="book-author">${book.author || '–ê–≤—Ç–æ—Ä'}</div>
                </div>
                <div class="book-sales">${book.salesCount || 0} –ø–æ–∫—É–ø–æ–∫</div>
            </div>
        `;
    }
    
    /**
     * üìö –†–µ–Ω–¥–µ—Ä –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–∏–≥
     */
    renderEmptyBooks() {
        return `
            <div class="empty-books">
                <p>üìö –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø —Ä–∞–∑–±–æ—Ä—ã...</p>
            </div>
        `;
    }
    
    /**
     * üìà –†–µ–Ω–¥–µ—Ä —Å–µ–∫—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    renderProgressSection(_stats) {
        return `
        <div class="progress-block" style="margin:16px 0;">
          <div style="font-weight:600;font-size:13px;margin:0 0 10px;color:var(--text-primary);">üìà –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</div>
          <div class="progress-grid" style="display:grid;grid-template-columns:repeat(3,1fr);gap:10px;">
            ${[1,2,3].map(()=>`<div class="stat-card" style="min-height:74px;opacity:.45;display:flex;flex-direction:column;justify-content:space-between;"><div style="font-size:11px;text-transform:uppercase;letter-spacing:.5px;">‚Ä¶</div><div style="font-size:20px;font-weight:600;">‚Äî</div></div>`).join('')}
          </div>
          <div class="progress-activity" style="margin-top:10px;font-size:11px;color:var(--text-secondary);">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</div>
        </div>`;
    }
    
    /**
     * ‚ö†Ô∏è –†–µ–Ω–¥–µ—Ä –æ—à–∏–±–∫–∏
     */
    renderError() {
        if (!this.error) return '';
        
        return `
            <div class="error-message" id="errorMessage">
                <span>‚ö†Ô∏è ${this.error}</span>
                <button onclick="this.parentElement.style.display='none'">‚úï</button>
            </div>
        `;
    }
    
    /**
     * üì± –ù–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é
        const menuBtn = document.getElementById('homeMenuBtn');
        if (menuBtn) {
            menuBtn.addEventListener('click', () => this.handleMenuClick());
        }
        
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã
        const addQuoteBtn = document.getElementById('addQuoteBtn');
        if (addQuoteBtn) {
            addQuoteBtn.addEventListener('click', () => this.handleAddQuoteClick());
        }
        
        // –ö–ª–∏–∫–∏ –ø–æ –∫–Ω–∏–≥–∞–º
        const bookItems = document.querySelectorAll('.book-item');
        bookItems.forEach(item => {
            item.addEventListener('click', () => {
                const bookId = item.dataset.bookId;
                this.handleBookClick(bookId);
            });
        });
        
        // –ö–ª–∏–∫ –ø–æ –∏–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        const statsInline = document.getElementById('statsInline');
        if (statsInline) {
            statsInline.addEventListener('click', () => this.handleStatClick('inline'));
        }
        
        // –ö–ª–∏–∫–∏ –ø–æ —Å—Ç–∞—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        const statCards = document.querySelectorAll('.stat-card');
        statCards.forEach(card => {
            card.addEventListener('click', () => {
                const statType = card.dataset.stat;
                this.handleStatClick(statType);
            });
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ç–∞—Ç
        this.attachRecentQuoteEvents();
    }
    
    /**
     * ‚ò∞ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
     */
    handleMenuClick() {
        // Haptic feedback
        this.telegram.hapticFeedback('medium');
        
        // We're on HomePage, so TopMenu should be available
        // –í—ã–∑—ã–≤–∞–µ–º –º–µ–Ω—é —á–µ—Ä–µ–∑ app
        if (this.app && typeof this.app.showTopMenu === 'function') {
            this.app.showTopMenu();
        } else {
            console.warn('‚ö†Ô∏è showTopMenu –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            if (this.telegram && typeof this.telegram.showAlert === 'function') {
                this.telegram.showAlert('–ú–µ–Ω—é –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ');
            } else {
                alert('–ú–µ–Ω—é –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ');
            }
        }
    }
    
    /**
     * ‚úçÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã
     */
    handleAddQuoteClick() {
        this.telegram.hapticFeedback('medium');
        this.app.router.navigate('/diary');
    }
    
    /**
     * üìñ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–∏–≥–µ
     */
    handleBookClick(bookId) {
        if (!bookId) return;
        
        this.telegram.hapticFeedback('light');
        this.app.router.navigate(`/catalog?book=${bookId}`);
    }
    
    /**
     * üìä –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
     */
    handleStatClick(_statType) {
        this.telegram.hapticFeedback('light');
        this.app.router.navigate('/reports');
    }
    
    /**
     * üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –º–µ—Ä—Ü–∞–Ω–∏—è)
     */
    updateHeaderStats() {
        const statsInline = document.getElementById('statsInline');
        if (!statsInline) return;
        const stats = this.state.get('stats') || {};
        if (!stats.loadedAt) {
            statsInline.innerHTML = '';
            return;
        }
        const totalQuotes = stats.totalQuotes ?? 0;
        const daysInApp = stats.daysInApp ?? 0;
        const quotesWord = this.getQuoteWord(totalQuotes);
        const daysWord = this.getDayWord(daysInApp);
        statsInline.innerHTML = `
            <span class="stat-summary">${totalQuotes} ${quotesWord} ‚Ä¢ ${daysInApp} ${daysWord} –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</span>
        `;
    }

    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateStatsUI(stats) {
        if (!stats) return;
        
        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–Ω–ª–∞–π–Ω —Ñ–æ—Ä–º–∞—Ç–∞
        const statsInline = document.getElementById('statsInline');
        if (statsInline) {
            const loading = stats.loading || this.loading;
            const totalQuotes = loading ? '‚è≥' : (stats.totalQuotes != null ? stats.totalQuotes : '‚Äî');
            const currentStreak = loading ? '‚è≥' : (stats.currentStreak != null ? stats.currentStreak : '‚Äî');
            
            if (loading) {
                statsInline.innerHTML = '<span class="stat-summary">‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...</span>';
            } else {
                const quotesWord = totalQuotes !== '‚Äî' ? this.getQuoteWord(totalQuotes) : '';
                const daysWord = currentStreak !== '‚Äî' ? this.getDayWord(currentStreak) : '';
                const separator = totalQuotes !== '‚Äî' && currentStreak !== '‚Äî' ? ' ‚Ä¢ ' : '';
                const streakPart = currentStreak !== '‚Äî' ? currentStreak + ' ' + daysWord + ' –ø–æ–¥—Ä—è–¥' : '';
                statsInline.innerHTML = `<span class="stat-summary">${totalQuotes} ${quotesWord}${separator}${streakPart}</span>`;
            }
            return;
        }
        
        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–µ—Ç–∫–∏ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        const statsGrid = document.getElementById('statsGrid');
        if (!statsGrid) return;
        
        const quotesCard = statsGrid.querySelector('[data-stat="quotes"] .stat-number');
        const streakCard = statsGrid.querySelector('[data-stat="streak"] .stat-number');
        
        if (quotesCard) {
            quotesCard.textContent = stats.loading ? '‚è≥' : (stats.totalQuotes != null ? stats.totalQuotes : '‚Äî');
        }
        
        if (streakCard) {
            streakCard.textContent = stats.loading ? '‚è≥' : (stats.currentStreak != null ? stats.currentStreak : '‚Äî');
        }
    }
    
    /**
     * üìö –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Ç–æ–ø –∫–Ω–∏–≥
     */
    updateTopBooksUI(books) {
        const topBooksList = document.getElementById('top-books-list');
        if (!topBooksList || !books) return;
        if (!Array.isArray(books)) books = [];
        const topBooks = books.slice(0, 3);
        topBooksList.innerHTML = topBooks.length > 0 ? 
            topBooks.map((book, index) => this.renderBookItem(book, index + 1)).join('') :
            this.renderEmptyBooks();
        this.attachBookEventListeners();
    }   
    
    /**
     * üë§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º –±–ª–æ–∫–µ
     */
    updateUserInfoUI(profile) {
        if (!profile) return;

        // –°–æ–±–∏—Ä–∞–µ–º –∏–º—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É: name ‚Üí firstName+lastName ‚Üí username ‚Üí ''
        const computed = profile.name ||
            [profile.firstName, profile.lastName].filter(Boolean).join(' ') ||
            profile.username ||
            '';

        const userAvatarContainer = document.querySelector('.user-avatar-inline');
        const userName = document.querySelector('.user-name-inline');

        // ‚úÖ FIX: Do not overwrite DOM with empty values
        if (userName) {
            const currentName = userName.textContent || '';
            const nameToShow = computed || currentName;
            
            // Only update if we have a meaningful name to show
            if (nameToShow.trim()) {
                userName.textContent = nameToShow;
                
                // Update avatar based on the name and new avatar URL
                if (userAvatarContainer) {
                    const initials = this.getInitials(nameToShow);
                    userAvatarContainer.outerHTML = this.renderUserAvatar(profile.avatarUrl, initials);
                }
            }
        }
    }

    /**
     * ‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    updateLoadingState(loading) {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä –∏–ª–∏ skeleton loading
        if (loading) {
            document.body.classList.add('loading');
        } else {
            document.body.classList.remove('loading');
        }
    }
    
    /**
     * üîÑ –ü–µ—Ä–µ–Ω–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–∏–≥
     */
    attachBookEventListeners() {
        const bookItems = document.querySelectorAll('.book-item');
        bookItems.forEach(item => {
            item.removeEventListener('click', this.handleBookClick);
            item.addEventListener('click', () => {
                const bookId = item.dataset.bookId;
                this.handleBookClick(bookId);
            });
        });
    }
    
    /**
     * ‚ö†Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
     */
    showError(message) {
        this.error = message;
        
        if (this.telegram) {
            this.telegram.showAlert(message);
        }
    }
    
    /**
     * üßÆ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
     */
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã —Å–ª–æ–≤–∞ "—Ü–∏—Ç–∞—Ç–∞" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞
     */
    getQuoteWord(count) {
        const num = Math.abs(count);
        const lastDigit = num % 10;
        const lastTwoDigits = num % 100;
        
        if (lastTwoDigits >= 11 && lastTwoDigits <= 14) {
            return '—Ü–∏—Ç–∞—Ç';
        }
        
        if (lastDigit === 1) {
            return '—Ü–∏—Ç–∞—Ç–∞';
        } else if (lastDigit >= 2 && lastDigit <= 4) {
            return '—Ü–∏—Ç–∞—Ç—ã';
        } else {
            return '—Ü–∏—Ç–∞—Ç';
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã —Å–ª–æ–≤–∞ "–¥–µ–Ω—å" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞
     */
    getDayWord(count) {
        const num = Math.abs(count);
        const lastDigit = num % 10;
        const lastTwoDigits = num % 100;
        
        if (lastTwoDigits >= 11 && lastTwoDigits <= 14) {
            return '–¥–Ω–µ–π';
        }
        
        if (lastDigit === 1) {
            return '–¥–µ–Ω—å';
        } else if (lastDigit >= 2 && lastDigit <= 4) {
            return '–¥–Ω—è';
        } else {
            return '–¥–Ω–µ–π';
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤ –∏–∑ –∏–º–µ–Ω–∏
     */
    getInitials(name) {
        if (!name) return '–ê';
        return name.split(' ')
            .map(word => word.charAt(0))
            .join('')
            .toUpperCase()
            .slice(0, 2);
    }
    
    /**
     * –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (% –æ—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–π —Ü–µ–ª–∏)
     */
    calculateProgress(thisWeek) {
        const weeklyGoal = 7;
        return Math.min(Math.round((thisWeek / weeklyGoal) * 100), 100);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    getProgressComparison(percent) {
        if (percent >= 75) return `–í—ã –Ω–∞ ${percent}% –∞–∫—Ç–∏–≤–Ω–µ–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–∏—Ç–∞—Ç–µ–ª—è! üî•`;
        if (percent >= 50) return `–•–æ—Ä–æ—à–æ! –í—ã –Ω–∞ ${percent}% –ø—É—Ç–∏ –∫ —Ü–µ–ª–∏! üìà`;
        if (percent >= 25) return `–ù–µ–ø–ª–æ—Ö–æ–µ –Ω–∞—á–∞–ª–æ! –í—ã –Ω–∞ ${percent}% –∫ —Ü–µ–ª–∏! üå±`;
        return '–í—Ä–µ–º—è –Ω–∞—á–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å –º—É–¥—Ä–æ—Å—Ç—å! üìö';
    }
    
    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async refresh() {
        await this.loadInitialData();
    }
    
    /**
     * üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
     */
    destroy() {
        // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        this.subscriptions.forEach(unsubscribe => {
            if (typeof unsubscribe === 'function') {
                unsubscribe();
            }
        });
        this.subscriptions = [];
        
        // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        this.loading = false;
        this.error = null;
        this.dataLoaded = false;
    }
    
    /**
     * üì± Lifecycle –º–µ—Ç–æ–¥—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–æ—É—Ç–µ—Ä–æ–º
     */
    
    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    onShow() {
        if (!this.dataLoaded) {
            this.loadFromStatistics();
        } else {
            const stats = this.state.get('stats');
            if (!stats?.loadedAt || (Date.now() - stats.loadedAt) > 60_000) {
                this.loadFromStatistics();
            } else {
                this.updateHeaderStats();
                this.updateProgressUI();
            }
        }
    }
    
    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    onHide() {
        console.log('üè† HomePage: onHide');
        // –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å —Ö–µ–¥–µ—Ä–∞–º–∏ –Ω–µ –Ω—É–∂–Ω–æ
    }
}

// üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.HomePage = HomePage;

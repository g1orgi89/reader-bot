/**
 * üè† –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê - HomePage.js
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –®–∞–ø–∫–∞ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é
 * - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Ü–∏—Ç–∞—Ç—ã —Å–æ–±—Ä–∞–Ω–æ, –¥–Ω–∏ –ø–æ–¥—Ä—è–¥
 * - CTA –∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É" 
 * - –¢–æ–ø 3 —Ä–∞–∑–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
 * - –ë–ª–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –∏ State Management
 * - –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 */

class HomePage {
    constructor(app) {
        this.app = app;
        this.api = app.api;
        this.state = app.state;
        this.telegram = app.telegram;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        this.loading = false;
        this.error = null;
        
        // –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.subscriptions = [];
        
        this.init();
    }
    
    /**
     * üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    init() {
        this.setupSubscriptions();
        this.loadInitialData();
    }
    
    /**
     * üì° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setupSubscriptions() {
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const statsSubscription = this.state.subscribe('stats', (stats) => {
            this.updateStatsUI(stats);
        });
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–Ω–∏–≥  
        const catalogSubscription = this.state.subscribe('catalog.books', (books) => {
            this.updateTopBooksUI(books);
        });
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userSubscription = this.state.subscribe('user.profile', (profile) => {
            this.updateUserInfoUI(profile);
        });
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        const loadingSubscription = this.state.subscribe('ui.loading', (loading) => {
            this.updateLoadingState(loading);
        });
        
        this.subscriptions.push(
            statsSubscription,
            catalogSubscription, 
            userSubscription,
            loadingSubscription
        );
    }
    
    /**
     * üìä –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async loadInitialData() {
        try {
            this.loading = true;
            this.state.set('ui.loading', true);
            
            // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            const [stats, topBooks, profile] = await Promise.all([
                this.loadUserStats(),
                this.loadTopBooks(), 
                this.loadUserProfile()
            ]);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if (stats) this.state.set('stats', stats);
            if (topBooks) this.state.set('catalog.books', topBooks);
            if (profile) this.state.set('user.profile', profile);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
            this.error = error.message;
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å.');
        } finally {
            this.loading = false;
            this.state.set('ui.loading', false);
        }
    }
    
    /**
     * üìà –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async loadUserStats() {
        try {
            const stats = await this.api.getStats();
            return {
                totalQuotes: stats.totalQuotes || 0,
                thisWeek: stats.thisWeek || 0,
                currentStreak: stats.currentStreak || 0,
                longestStreak: stats.longestStreak || 0,
                favoriteAuthors: stats.favoriteAuthors || [],
                progressPercent: this.calculateProgress(stats.thisWeek),
                loading: false
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return null;
        }
    }
    
    /**
     * üìö –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ø –∫–Ω–∏–≥ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
     */
    async loadTopBooks() {
        try {
            const books = await this.api.getCatalog({ 
                limit: 3, 
                sort: 'popular',
                featured: true 
            });
            return books.items || books || [];
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø –∫–Ω–∏–≥:', error);
            return [];
        }
    }
    
    /**
     * üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async loadUserProfile() {
        try {
            const profile = await this.api.getProfile();
            return profile;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram –∫–∞–∫ fallback
            const telegramUser = this.telegram.getUser();
            return {
                name: telegramUser?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                username: telegramUser?.username || null,
                initials: this.getInitials(telegramUser?.first_name)
            };
        }
    }
    
    /**
     * üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —Ä–∞–∑–º–µ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    render() {
        const user = this.state.get('user.profile') || {};
        const stats = this.state.get('stats') || {};
        const books = this.state.get('catalog.books') || [];
        
        return `
            <div class="home-page">
                ${this.renderHeader(user)}
                ${this.renderContent(stats, books)}
            </div>
        `;
    }
    
    /**
     * üì± –†–µ–Ω–¥–µ—Ä —à–∞–ø–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    renderHeader(user) {
        const initials = user.initials || this.getInitials(user.name);
        const displayName = user.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        return `
            <div class="home-header">
                <div class="user-info">
                    <div class="user-avatar">${initials}</div>
                    <div class="user-details">
                        <h3>${displayName}</h3>
                        <p>–ß–∏—Ç–∞—Ç–µ–ª—å</p>
                    </div>
                </div>
                <button class="menu-button" id="menuButton">‚ãØ</button>
            </div>
        `;
    }
    
    /**
     * üìÑ –†–µ–Ω–¥–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    renderContent(stats, books) {
        return `
            <div class="content">
                ${this.renderWelcomeSection()}
                ${this.renderStatsGrid(stats)}
                ${this.renderMainCTA()}
                ${this.renderTopBooks(books)}
                ${this.renderProgressSection(stats)}
                ${this.renderError()}
            </div>
        `;
    }
    
    /**
     * üëã –†–µ–Ω–¥–µ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏
     */
    renderWelcomeSection() {
        return `
            <div class="page-title">
                <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã</h2>
                <p>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ –º—É–¥—Ä–æ—Å—Ç–∏</p>
            </div>
        `;
    }
    
    /**
     * üìä –†–µ–Ω–¥–µ—Ä —Å–µ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    renderStatsGrid(stats) {
        const loading = stats.loading || this.loading;
        
        return `
            <div class="stats-grid" id="statsGrid">
                <div class="stat-card" data-stat="quotes">
                    <div class="stat-number">${loading ? '‚è≥' : (stats.totalQuotes || 0)}</div>
                    <div class="stat-label">–¶–∏—Ç–∞—Ç —Å–æ–±—Ä–∞–Ω–æ</div>
                </div>
                <div class="stat-card" data-stat="streak">
                    <div class="stat-number">${loading ? '‚è≥' : (stats.currentStreak || 0)}</div>
                    <div class="stat-label">–î–Ω–µ–π –ø–æ–¥—Ä—è–¥</div>
                </div>
            </div>
        `;
    }
    
    /**
     * ‚úçÔ∏è –†–µ–Ω–¥–µ—Ä –≥–ª–∞–≤–Ω–æ–π CTA –∫–Ω–æ–ø–∫–∏
     */
    renderMainCTA() {
        return `
            <button class="main-cta" id="addQuoteBtn">
                ‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É
            </button>
        `;
    }
    
    /**
     * üî• –†–µ–Ω–¥–µ—Ä —Ç–æ–ø –∫–Ω–∏–≥ –Ω–µ–¥–µ–ª–∏
     */
    renderTopBooks(books) {
        const topBooks = books.slice(0, 3);
        
        return `
            <div class="top-books-section">
                <div class="section-title">üî• –¢–æ–ø 3 —Ä–∞–∑–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏</div>
                <div id="top-books-list">
                    ${topBooks.length > 0 ? 
                        topBooks.map((book, index) => this.renderBookItem(book, index + 1)).join('') :
                        this.renderEmptyBooks()
                    }
                </div>
            </div>
        `;
    }
    
    /**
     * üìñ –†–µ–Ω–¥–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–Ω–∏–≥–∏
     */
    renderBookItem(book, rank) {
        return `
            <div class="book-item" data-book-id="${book._id || book.id}">
                <div class="book-rank">${rank}</div>
                <div class="book-info">
                    <div class="book-title">${book.title || '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏'}</div>
                    <div class="book-author">${book.author || '–ê–≤—Ç–æ—Ä'}</div>
                </div>
                <div class="book-sales">${book.salesCount || 0} –ø–æ–∫—É–ø–æ–∫</div>
            </div>
        `;
    }
    
    /**
     * üìö –†–µ–Ω–¥–µ—Ä –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–∏–≥
     */
    renderEmptyBooks() {
        return `
            <div class="empty-books">
                <p>üìö –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø —Ä–∞–∑–±–æ—Ä—ã...</p>
            </div>
        `;
    }
    
    /**
     * üìà –†–µ–Ω–¥–µ—Ä —Å–µ–∫—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    renderProgressSection(stats) {
        const progressPercent = stats.progressPercent || 0;
        const comparisonText = this.getProgressComparison(progressPercent);
        
        return `
            <div class="progress-section">
                <div class="progress-title">üìà –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</div>
                <div class="progress-text">${comparisonText}</div>
            </div>
        `;
    }
    
    /**
     * ‚ö†Ô∏è –†–µ–Ω–¥–µ—Ä –æ—à–∏–±–∫–∏
     */
    renderError() {
        if (!this.error) return '';
        
        return `
            <div class="error-message" id="errorMessage">
                <span>‚ö†Ô∏è ${this.error}</span>
                <button onclick="this.parentElement.style.display='none'">‚úï</button>
            </div>
        `;
    }
    
    /**
     * üì± –ù–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é
        const menuButton = document.getElementById('menuButton');
        if (menuButton) {
            menuButton.addEventListener('click', () => this.handleMenuClick());
        }
        
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã
        const addQuoteBtn = document.getElementById('addQuoteBtn');
        if (addQuoteBtn) {
            addQuoteBtn.addEventListener('click', () => this.handleAddQuoteClick());
        }
        
        // –ö–ª–∏–∫–∏ –ø–æ –∫–Ω–∏–≥–∞–º
        const bookItems = document.querySelectorAll('.book-item');
        bookItems.forEach(item => {
            item.addEventListener('click', () => {
                const bookId = item.dataset.bookId;
                this.handleBookClick(bookId);
            });
        });
        
        // –ö–ª–∏–∫–∏ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        const statCards = document.querySelectorAll('.stat-card');
        statCards.forEach(card => {
            card.addEventListener('click', () => {
                const statType = card.dataset.stat;
                this.handleStatClick(statType);
            });
        });
    }
    
    /**
     * üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –º–µ–Ω—é
     */
    handleMenuClick() {
        // Haptic feedback
        this.telegram.hapticFeedback('light');
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö)
        this.app.showTopMenu();
    }
    
    /**
     * ‚úçÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã
     */
    handleAddQuoteClick() {
        // Haptic feedback
        this.telegram.hapticFeedback('medium');
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–Ω–µ–≤–Ω–∏–∫–∞
        this.app.router.navigate('/diary');
    }
    
    /**
     * üìñ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–∏–≥–µ
     */
    handleBookClick(bookId) {
        if (!bookId) return;
        
        // Haptic feedback
        this.telegram.hapticFeedback('light');
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–æ–π
        this.app.router.navigate(`/catalog?book=${bookId}`);
    }
    
    /**
     * üìä –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
     */
    handleStatClick(statType) {
        // Haptic feedback
        this.telegram.hapticFeedback('light');
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç—á–µ—Ç–æ–≤
        this.app.router.navigate('/reports');
    }
    
    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateStatsUI(stats) {
        if (!stats) return;
        
        const statsGrid = document.getElementById('statsGrid');
        if (!statsGrid) return;
        
        const quotesCard = statsGrid.querySelector('[data-stat="quotes"] .stat-number');
        const streakCard = statsGrid.querySelector('[data-stat="streak"] .stat-number');
        
        if (quotesCard) {
            quotesCard.textContent = stats.loading ? '‚è≥' : (stats.totalQuotes || 0);
        }
        
        if (streakCard) {
            streakCard.textContent = stats.loading ? '‚è≥' : (stats.currentStreak || 0);
        }
    }
    
    /**
     * üìö –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Ç–æ–ø –∫–Ω–∏–≥
     */
    updateTopBooksUI(books) {
        const topBooksList = document.getElementById('top-books-list');
        if (!topBooksList || !books) return;
        
        const topBooks = books.slice(0, 3);
        topBooksList.innerHTML = topBooks.length > 0 ? 
            topBooks.map((book, index) => this.renderBookItem(book, index + 1)).join('') :
            this.renderEmptyBooks();
        
        // –ü–µ—Ä–µ–Ω–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.attachBookEventListeners();
    }
    
    /**
     * üë§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    updateUserInfoUI(profile) {
        if (!profile) return;
        
        const userAvatar = document.querySelector('.user-avatar');
        const userNameEl = document.querySelector('.user-details h3');
        
        if (userAvatar) {
            userAvatar.textContent = profile.initials || this.getInitials(profile.name);
        }
        
        if (userNameEl) {
            userNameEl.textContent = profile.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        }
    }
    
    /**
     * ‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    updateLoadingState(loading) {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä –∏–ª–∏ skeleton loading
        if (loading) {
            document.body.classList.add('loading');
        } else {
            document.body.classList.remove('loading');
        }
    }
    
    /**
     * üîÑ –ü–µ—Ä–µ–Ω–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–∏–≥
     */
    attachBookEventListeners() {
        const bookItems = document.querySelectorAll('.book-item');
        bookItems.forEach(item => {
            item.removeEventListener('click', this.handleBookClick); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
            item.addEventListener('click', () => {
                const bookId = item.dataset.bookId;
                this.handleBookClick(bookId);
            });
        });
    }
    
    /**
     * ‚ö†Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
     */
    showError(message) {
        this.error = message;
        
        // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (this.telegram) {
            this.telegram.showAlert(message);
        }
    }
    
    /**
     * üßÆ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
     */
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤ –∏–∑ –∏–º–µ–Ω–∏
     */
    getInitials(name) {
        if (!name) return 'üë§';
        return name.split(' ')
            .map(word => word.charAt(0))
            .join('')
            .toUpperCase()
            .slice(0, 2);
    }
    
    /**
     * –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (% –æ—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–π —Ü–µ–ª–∏)
     */
    calculateProgress(thisWeek) {
        const weeklyGoal = 7; // 1 —Ü–∏—Ç–∞—Ç–∞ –≤ –¥–µ–Ω—å
        return Math.min(Math.round((thisWeek / weeklyGoal) * 100), 100);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    getProgressComparison(percent) {
        if (percent >= 100) return '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–µ–¥–µ–ª—å–Ω—É—é —Ü–µ–ª—å! üî•';
        if (percent >= 75) return `–û—Ç–ª–∏—á–Ω–æ! –í—ã –Ω–∞ ${percent}% –∞–∫—Ç–∏–≤–Ω–µ–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–∏—Ç–∞—Ç–µ–ª—è! üí™`;
        if (percent >= 50) return `–•–æ—Ä–æ—à–æ! –í—ã –Ω–∞ ${percent}% –ø—É—Ç–∏ –∫ —Ü–µ–ª–∏! üìà`;
        if (percent >= 25) return `–ù–µ–ø–ª–æ—Ö–æ–µ –Ω–∞—á–∞–ª–æ! –í—ã –Ω–∞ ${percent}% –∫ —Ü–µ–ª–∏! üå±`;
        return '–í—Ä–µ–º—è –Ω–∞—á–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å –º—É–¥—Ä–æ—Å—Ç—å! üìö';
    }
    
    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async refresh() {
        await this.loadInitialData();
    }
    
    /**
     * üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
     */
    destroy() {
        // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        this.subscriptions.forEach(unsubscribe => {
            if (typeof unsubscribe === 'function') {
                unsubscribe();
            }
        });
        this.subscriptions = [];
        
        // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        this.loading = false;
        this.error = null;
    }
    
    /**
     * üì± Lifecycle –º–µ—Ç–æ–¥—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–æ—É—Ç–µ—Ä–æ–º
     */
    
    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    onShow() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±—ã–ª–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –¥–æ–ª–≥–æ
        const lastUpdate = this.state.get('stats.lastUpdate');
        const now = Date.now();
        const fiveMinutes = 5 * 60 * 1000;
        
        if (!lastUpdate || (now - lastUpdate) > fiveMinutes) {
            this.refresh();
        }
    }
    
    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    onHide() {
        // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }
}

// üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.HomePage = HomePage;
/**
 * üë§ –ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø - ProfilePage.js
 * 
 * –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:
 * - –ó–∞–≥—Ä—É–∑–∫–∞/—Å–º–µ–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∞
 * - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ email
 * - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ (—Å–±—Ä–æ—Å —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤)
 * - –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
 * - –£–±—Ä–∞–Ω–∞ –ª–∏—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è
 */

class ProfilePage {
    constructor(app) {
        this.app = app;
        this.api = app.api;
        this.state = app.state;
        this.telegram = app.telegram;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        this.loading = false;
        this.error = null;
        this.profileData = {};
        this.editing = false;
        this.uploadingAvatar = false;
        
        // –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.subscriptions = [];
        
        this.init();
    }
    
    /**
     * üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    init() {
        this.setupSubscriptions();
        this.loadProfileData();
    }
    
    /**
     * üì° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setupSubscriptions() {
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const profileSubscription = this.state.subscribe('user.profile', (profile) => {
            this.profileData = { ...this.profileData, ...profile };
            this.updateProfileUI();
        });
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const statsSubscription = this.state.subscribe('stats', (stats) => {
            this.updateStatsUI(stats);
        });
        
        this.subscriptions.push(profileSubscription, statsSubscription);
    }
    
    /**
     * üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
     */
    async loadProfileData() {
        if (this.loading) return;
        
        try {
            this.loading = true;
            
            // Get userId with fallback methods
            let userId = null;
            if (this.state && typeof this.state.getCurrentUserId === 'function') {
                userId = this.state.getCurrentUserId();
            } else if (this.state && this.state.get) {
                userId = this.state.get('user.profile.id') || this.state.get('user.telegramData.id');
            }
            
            if (!userId || userId === 'demo-user') {
                // Use local data
                this.profileData = this.state?.get('user.profile') || {};
                return;
            }
            
            // Load from API if available
            try {
                const profile = await this.api.getProfile(userId);
                if (profile) {
                    this.profileData = profile.user || profile;
                    this.state?.update('user.profile', this.profileData);
                }
            } catch (apiError) {
                console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                this.profileData = this.state?.get('user.profile') || {};
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            this.error = error.message;
        } finally {
            this.loading = false;
        }
    }
    
    /**
     * üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —Ä–∞–∑–º–µ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    render() {
        const profile = this.profileData;
        
        return `
            <div class="content">
                ${this.renderHeader()}
                ${this.renderProfileCard(profile)}
                ${this.renderError()}
            </div>
        `;
    }
    
    /**
     * üìã –†–µ–Ω–¥–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    renderHeader() {
        return `
            <div class="page-header">
                <h1>üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</h1>
                <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–º, email –∏ —Ç–µ—Å—Ç–æ–º</p>
            </div>
        `;
    }
    
    /**
     * üë§ –†–µ–Ω–¥–µ—Ä –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
     */
    renderProfileCard(profile) {
        const name = profile.name || 
                    [profile.firstName, profile.lastName].filter(Boolean).join(' ') ||
                    profile.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        const email = profile.email || '–ù–µ —É–∫–∞–∑–∞–Ω';
        const initials = this.getInitials(name);
        const avatarUrl = profile.avatarUrl;
        
        return `
            <div class="profile-compact">
                <div class="profile-top-inline">
                    <div class="profile-avatar-inline ${!avatarUrl ? 'fallback' : ''}" id="profileAvatar">
                        ${avatarUrl ? 
                            `<img src="${avatarUrl}" alt="–ê–≤–∞—Ç–∞—Ä" onerror="this.style.display='none'; this.parentElement.classList.add('fallback')" />` : ''
                        }
                        <div class="avatar-fallback">${initials}</div>
                    </div>
                    
                    <div class="profile-name-row">
                        <div class="profile-name">${name}</div>
                    </div>
                    
                    <button class="profile-change-photo-btn" id="uploadAvatarBtn" ${this.uploadingAvatar ? 'disabled' : ''}>
                        ${this.uploadingAvatar ? '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...' : 'üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ'}
                    </button>
                    <input type="file" id="avatarInput" accept="image/*" style="display: none;">
                </div>
                
                <div class="profile-email-row" id="emailRow">
                    <span class="email-text" id="emailDisplay">${email}</span>
                    <button class="email-edit-icon" id="editEmailBtn">‚úèÔ∏è</button>
                    
                    <input type="email" class="profile-email-input" id="emailInput" value="${email}" style="display: none;">
                    <div class="profile-email-actions" id="emailActions" style="display: none;">
                        <button class="btn-icon btn-save" id="saveEmailBtn">üíæ</button>
                        <button class="btn-icon btn-cancel" id="cancelEmailBtn">‚ùå</button>
                    </div>
                </div>
                
                <div class="profile-actions-compact">
                    <button class="btn btn-primary" id="viewAchievementsBtn">
                        üèÜ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                    </button>
                    <button class="btn btn-warning" id="resetTestBtn">
                        üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç
                    </button>
                </div>
            </div>
        `;
    }

    /**
     * ‚ö†Ô∏è –†–µ–Ω–¥–µ—Ä –æ—à–∏–±–∫–∏
     */
    renderError() {
        if (!this.error) return '';
        
        return `
            <div class="error-message" id="errorMessage">
                <span>‚ö†Ô∏è ${this.error}</span>
                <button onclick="this.parentElement.style.display='none'">‚úï</button>
            </div>
        `;
    }
    
    /**
     * üì± –ù–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
        const uploadBtn = document.getElementById('uploadAvatarBtn');
        if (uploadBtn) {
            uploadBtn.addEventListener('click', () => this.handleUploadAvatar());
        }
        
        // –°–∫—Ä—ã—Ç—ã–π input –¥–ª—è —Ñ–∞–π–ª–∞ –∞–≤–∞—Ç–∞—Ä–∞
        const avatarInput = document.getElementById('avatarInput');
        if (avatarInput) {
            avatarInput.addEventListener('change', (e) => this.handleAvatarFileSelect(e));
        }
        
        // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email
        const editEmailBtn = document.getElementById('editEmailBtn');
        if (editEmailBtn) {
            editEmailBtn.addEventListener('click', () => this.handleEditEmail());
        }
        
        // –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã email
        const saveEmailBtn = document.getElementById('saveEmailBtn');
        const cancelEmailBtn = document.getElementById('cancelEmailBtn');
        if (saveEmailBtn) {
            saveEmailBtn.addEventListener('click', () => this.handleSaveEmail());
        }
        if (cancelEmailBtn) {
            cancelEmailBtn.addEventListener('click', () => this.handleCancelEmail());
        }
        
        // Enter –Ω–∞ –ø–æ–ª–µ email
        const emailInput = document.getElementById('emailInput');
        if (emailInput) {
            emailInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    this.handleSaveEmail();
                } else if (e.key === 'Escape') {
                    this.handleCancelEmail();
                }
            });
        }
        
        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        const achievementsBtn = document.getElementById('viewAchievementsBtn');
        if (achievementsBtn) {
            achievementsBtn.addEventListener('click', () => this.handleViewAchievements());
        }
        
        // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞
        const resetTestBtn = document.getElementById('resetTestBtn');
        if (resetTestBtn) {
            resetTestBtn.addEventListener('click', () => this.handleResetTest());
        }
    }
    
    /**
     * üì∑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
     */
    handleUploadAvatar() {
        // Haptic feedback
        if (this.telegram?.hapticFeedback) {
            this.telegram.hapticFeedback('light');
        }
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        const avatarInput = document.getElementById('avatarInput');
        if (avatarInput) {
            avatarInput.click();
        }
    }
    
    /**
     * üìÅ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∞–≤–∞—Ç–∞—Ä–∞ —Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º –ø—Ä–µ–≤—å—é
     */
    async handleAvatarFileSelect(event) {
        const file = event.target.files[0];
        if (!file) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if (!file.type.startsWith('image/')) {
            this.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å 3MB)
        if (file.size > 3 * 1024 * 1024) {
            this.showError('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 3MB');
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø—Ä–µ–≤—å—é
        const previewUrl = URL.createObjectURL(file);
        this.showAvatarPreview(previewUrl);
        
        try {
            this.uploadingAvatar = true;
            this.updateUploadButtonState();
            
            const userId = this.state.getCurrentUserId();
            const result = await this.api.uploadAvatar(file, userId);
            
            if (result.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π URL –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                this.profileData.avatarUrl = result.avatarUrl;
                this.state?.update('user.profile.avatarUrl', result.avatarUrl);
                
                // –û—á–∏—â–∞–µ–º –ø—Ä–µ–≤—å—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º UI —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –∞–≤–∞—Ç–∞—Ä–æ–º
                this.clearAvatarPreview();
                this.updateAvatarDisplay();
                
                // Haptic feedback —É—Å–ø–µ—Ö–∞
                if (this.telegram?.hapticFeedback) {
                    this.telegram.hapticFeedback('light');
                }
                
                console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
            this.showError(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä');
            
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–≤—å—é
            this.clearAvatarPreview();
            
            // Haptic feedback –æ—à–∏–±–∫–∏
            if (this.telegram?.hapticFeedback) {
                this.telegram.hapticFeedback('heavy');
            }
        } finally {
            this.uploadingAvatar = false;
            this.updateUploadButtonState();
            
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
            URL.revokeObjectURL(previewUrl);
            
            // –û—á–∏—â–∞–µ–º input –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
            event.target.value = '';
        }
    }
    
    /**
     * üñºÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø—Ä–µ–≤—å—é –∞–≤–∞—Ç–∞—Ä–∞
     */
    showAvatarPreview(previewUrl) {
        const avatarContainer = document.getElementById('profileAvatar');
        if (!avatarContainer) return;
        
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–≤—å—é –µ—Å–ª–∏ –µ—Å—Ç—å
        this.clearAvatarPreview();
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–≤—å—é
        const previewOverlay = document.createElement('div');
        previewOverlay.className = 'avatar-preview-overlay';
        previewOverlay.style.backgroundImage = `url(${previewUrl})`;
        previewOverlay.id = 'avatarPreview';
        
        avatarContainer.appendChild(previewOverlay);
    }
    
    /**
     * üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–≤—å—é –∞–≤–∞—Ç–∞—Ä–∞
     */
    clearAvatarPreview() {
        const previewOverlay = document.getElementById('avatarPreview');
        if (previewOverlay) {
            previewOverlay.remove();
        }
    }
    
    /**
     * ‚úèÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email
     */
    handleEditEmail() {
        // Haptic feedback
        if (this.telegram?.hapticFeedback) {
            this.telegram.hapticFeedback('light');
        }
        
        const emailDisplay = document.getElementById('emailDisplay');
        const emailInput = document.getElementById('emailInput');
        const emailActions = document.getElementById('emailActions');
        const editBtn = document.getElementById('editEmailBtn');
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (emailDisplay) emailDisplay.style.display = 'none';
        if (editBtn) editBtn.style.display = 'none';
        if (emailInput) {
            emailInput.style.display = 'inline-block';
            emailInput.focus();
            emailInput.select();
        }
        if (emailActions) emailActions.style.display = 'block';
    }
    
    /**
     * üíæ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è email
     */
    async handleSaveEmail() {
        const emailInput = document.getElementById('emailInput');
        if (!emailInput) return;
        
        const newEmail = emailInput.value.trim();
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(newEmail)) {
            this.showError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
            emailInput.focus();
            return;
        }
        
        try {
            const userId = this.state.getCurrentUserId();
            const result = await this.api.updateProfile({ email: newEmail }, userId);
            
            if (result.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
                this.profileData.email = newEmail;
                this.state?.update('user.profile.email', newEmail);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                this.updateEmailDisplay(newEmail);
                this.handleCancelEmail(); // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                
                // Haptic feedback —É—Å–ø–µ—Ö–∞
                if (this.telegram?.hapticFeedback) {
                    this.telegram.hapticFeedback('light');
                }
                
                console.log('‚úÖ Email –æ–±–Ω–æ–≤–ª–µ–Ω');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è email:', error);
            this.showError(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å email');
            
            // Haptic feedback –æ—à–∏–±–∫–∏
            if (this.telegram?.hapticFeedback) {
                this.telegram.hapticFeedback('heavy');
            }
        }
    }
    
    /**
     * ‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email
     */
    handleCancelEmail() {
        const emailDisplay = document.getElementById('emailDisplay');
        const emailInput = document.getElementById('emailInput');
        const emailActions = document.getElementById('emailActions');
        const editBtn = document.getElementById('editEmailBtn');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (emailInput) {
            emailInput.value = this.profileData.email || '';
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        if (emailDisplay) emailDisplay.style.display = 'inline';
        if (editBtn) editBtn.style.display = 'inline';
        if (emailInput) emailInput.style.display = 'none';
        if (emailActions) emailActions.style.display = 'none';
    }
    
    /**
     * üèÜ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    handleViewAchievements() {
        if (this.telegram?.hapticFeedback) {
            this.telegram.hapticFeedback('light');
        }
        
        // Navigate to achievements page
        window.location.hash = '/achievements';
    }
    
    /**
     * üîÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞
     */
    async handleResetTest() {
        if (this.telegram?.hapticFeedback) {
            this.telegram.hapticFeedback('medium');
        }
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const confirmed = confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç? –í—Å–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã, –Ω–æ –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è.');
        
        if (!confirmed) return;
        
        try {
            const userId = this.state.getCurrentUserId();
            
            // RETAKE: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ backend reset (–µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω)
            try {
                const result = await this.api.resetTest(userId);
                if (result.success) {
                    console.log('‚úÖ Backend reset –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                }
            } catch (apiError) {
                console.warn('‚ö†Ô∏è Backend reset –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–±—Ä–æ—Å–æ–º:', apiError.message);
            }
            
            // RETAKE: –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            this.state?.set('user.profile.isOnboardingCompleted', false);
            this.state?.set('user.testResults', null);
            
            // RETAKE: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            this.state?.set('onboarding.forceRetake', true);
            
            // RETAKE: –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–ª—é—á–∏ localStorage
            if (typeof localStorage !== 'undefined') {
                localStorage.removeItem('onboardingComplete');
                localStorage.removeItem('testResults');
            }
            
            // Haptic feedback —É—Å–ø–µ—Ö–∞
            if (this.telegram?.hapticFeedback) {
                this.telegram.hapticFeedback('light');
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (this.telegram?.showAlert) {
                this.telegram.showAlert('–¢–µ—Å—Ç —Å–±—Ä–æ—à–µ–Ω! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ...');
            }
            
            // RETAKE: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ UI (100-150ms)
            setTimeout(() => {
                // –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º retake=1 –∏ —Ñ–ª–∞–≥–æ–º force –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
                if (this.app.router && typeof this.app.router.navigate === 'function') {
                    this.app.router.navigate('/onboarding?retake=1', { force: true });
                } else {
                    // Fallback —á–µ—Ä–µ–∑ hash
                    window.location.hash = '#/onboarding?retake=1';
                }
            }, 150);
            
            console.log('‚úÖ –¢–µ—Å—Ç —Å–±—Ä–æ—à–µ–Ω —É—Å–ø–µ—à–Ω–æ, —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞:', error);
            this.showError(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ—Å—Ç');
            
            // Haptic feedback –æ—à–∏–±–∫–∏
            if (this.telegram?.hapticFeedback) {
                this.telegram.hapticFeedback('heavy');
            }
        }
    }
    
    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø—Ä–æ—Ñ–∏–ª—è
     */
    updateProfileUI() {
        // Update profile info if page is rendered
        const emailDisplay = document.getElementById('emailDisplay');
        
        if (emailDisplay && this.profileData.email) {
            emailDisplay.textContent = this.profileData.email;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä
        this.updateAvatarDisplay();
    }
    
    /**
     * üñºÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
     */
    updateAvatarDisplay() {
        const avatarContainer = document.getElementById('profileAvatar');
        if (!avatarContainer) return;
        
        const { avatarUrl, name } = this.profileData;
        const initials = this.getInitials(name) || 'üë§';
        
        if (avatarUrl) {
            avatarContainer.innerHTML = `
                <img src="${avatarUrl}" alt="–ê–≤–∞—Ç–∞—Ä" onerror="this.style.display='none'; this.parentElement.classList.add('fallback')" />
                <div class="avatar-fallback">${initials}</div>
            `;
            avatarContainer.classList.remove('fallback');
        } else {
            avatarContainer.innerHTML = `
                <div class="avatar-fallback">${initials}</div>
            `;
            avatarContainer.classList.add('fallback');
        }
    }
    
    /**
     * üìß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è email
     */
    updateEmailDisplay(newEmail) {
        const emailDisplay = document.getElementById('emailDisplay');
        if (emailDisplay) {
            emailDisplay.textContent = newEmail;
        }
    }
    
    /**
     * ‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    updateUploadButtonState() {
        const uploadBtn = document.getElementById('uploadAvatarBtn');
        if (!uploadBtn) return;
        
        if (this.uploadingAvatar) {
            uploadBtn.disabled = true;
            uploadBtn.textContent = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...';
        } else {
            uploadBtn.disabled = false;
            uploadBtn.textContent = 'üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ';
        }
    }
    
    /**
     * ‚ö†Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
     */
    showError(message) {
        this.error = message;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const errorEl = document.getElementById('errorMessage');
        if (errorEl) {
            errorEl.innerHTML = `
                <span>‚ö†Ô∏è ${message}</span>
                <button onclick="this.parentElement.style.display='none'">‚úï</button>
            `;
            errorEl.style.display = 'block';
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                if (errorEl.style.display !== 'none') {
                    errorEl.style.display = 'none';
                }
            }, 5000);
        }
    }
    

    /**
     * üî§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤ –∏–∑ –∏–º–µ–Ω–∏
     */
    getInitials(name) {
        if (!name) return '?';
        return name.split(' ')
            .map(word => word.charAt(0))
            .join('')
            .toUpperCase()
            .slice(0, 2);
    }
    
    /**
     * üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
     */
    destroy() {
        // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        this.subscriptions.forEach(unsubscribe => {
            if (typeof unsubscribe === 'function') {
                unsubscribe();
            }
        });
        this.subscriptions = [];
        
        // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        this.loading = false;
        this.error = null;
        this.editing = false;
    }
    
    /**
     * üì± Lifecycle –º–µ—Ç–æ–¥—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–æ—É—Ç–µ—Ä–æ–º
     */
    
    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    onShow() {
        console.log('üë§ ProfilePage: onShow');
        // Refresh data if needed
        if (!this.profileData.name) {
            this.loadProfileData();
        }
    }
    
    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    onHide() {
        console.log('üë§ ProfilePage: onHide');
    }
}

// üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.ProfilePage = ProfilePage;
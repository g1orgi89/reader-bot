/**
 * üë§ –ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø - ProfilePage.js
 * 
 * –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è (–∏–º—è, email, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
 * - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –∏ State Management
 * - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—É
 */

class ProfilePage {
    constructor(app) {
        this.app = app;
        this.api = app.api;
        this.state = app.state;
        this.telegram = app.telegram;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        this.loading = false;
        this.error = null;
        this.profileData = {};
        this.editing = false;
        
        // –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.subscriptions = [];
        
        this.init();
    }
    
    /**
     * üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    init() {
        this.setupSubscriptions();
        this.loadProfileData();
    }
    
    /**
     * üì° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setupSubscriptions() {
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const profileSubscription = this.state.subscribe('user.profile', (profile) => {
            this.profileData = { ...this.profileData, ...profile };
            this.updateProfileUI();
        });
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const statsSubscription = this.state.subscribe('stats', (stats) => {
            this.updateStatsUI(stats);
        });
        
        this.subscriptions.push(profileSubscription, statsSubscription);
    }
    
    /**
     * üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
     */
    async loadProfileData() {
        if (this.loading) return;
        
        try {
            this.loading = true;
            
            // Get userId with fallback methods
            let userId = null;
            if (this.state && typeof this.state.getCurrentUserId === 'function') {
                userId = this.state.getCurrentUserId();
            } else if (this.state && this.state.get) {
                userId = this.state.get('user.profile.id') || this.state.get('user.telegramData.id');
            }
            
            if (!userId || userId === 'demo-user') {
                // Use local data
                this.profileData = this.state?.get('user.profile') || {};
                return;
            }
            
            // Load from API if available
            try {
                const profile = await this.api.getProfile(userId);
                if (profile) {
                    this.profileData = profile.user || profile;
                    this.state?.update('user.profile', this.profileData);
                }
            } catch (apiError) {
                console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                this.profileData = this.state?.get('user.profile') || {};
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            this.error = error.message;
        } finally {
            this.loading = false;
        }
    }
    
    /**
     * üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —Ä–∞–∑–º–µ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    render() {
        const profile = this.profileData;
        const stats = this.state.get('stats') || {};
        
        return `
            <div class="content">
                ${this.renderHeader()}
                ${this.renderProfileCard(profile)}
                ${this.renderStatsSection(stats)}
                ${this.renderActionsSection()}
                ${this.renderError()}
            </div>
        `;
    }
    
    /**
     * üìã –†–µ–Ω–¥–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    renderHeader() {
        return `
            <div class="page-header">
                <h1>üë§ –ü—Ä–æ—Ñ–∏–ª—å</h1>
                <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏</p>
            </div>
        `;
    }
    
    /**
     * üë§ –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
     */
    renderProfileCard(profile) {
        const name = profile.name || 
                    [profile.firstName, profile.lastName].filter(Boolean).join(' ') ||
                    profile.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        const initials = this.getInitials(name);
        
        return `
            <div class="profile-card">
                <div class="profile-avatar-large">${initials}</div>
                <div class="profile-info">
                    <h2 class="profile-name">${name}</h2>
                    <p class="profile-username">@${profile.username || 'user'}</p>
                    ${profile.bio ? `<p class="profile-bio">${profile.bio}</p>` : ''}
                </div>
                <button class="btn btn-secondary btn-sm" id="editProfileBtn">
                    ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
            </div>
        `;
    }
    
    /**
     * üìä –†–µ–Ω–¥–µ—Ä —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    renderStatsSection(stats) {
        return `
            <div class="stats-section">
                <h3>üìà –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                <div class="stats-grid">
                    <div class="stat-item">
                        <div class="stat-number">${stats.totalQuotes || 0}</div>
                        <div class="stat-label">–¶–∏—Ç–∞—Ç —Å–æ–±—Ä–∞–Ω–æ</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">${stats.currentStreak || 0}</div>
                        <div class="stat-label">–î–Ω–µ–π –ø–æ–¥—Ä—è–¥</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">${stats.longestStreak || 0}</div>
                        <div class="stat-label">–õ—É—á—à–∞—è —Å–µ—Ä–∏—è</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">${stats.favoriteAuthors?.length || 0}</div>
                        <div class="stat-label">–õ—é–±–∏–º—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤</div>
                    </div>
                </div>
            </div>
        `;
    }
    
    /**
     * ‚ö° –†–µ–Ω–¥–µ—Ä —Å–µ–∫—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π
     */
    renderActionsSection() {
        return `
            <div class="actions-section">
                <h3>‚ö° –î–µ–π—Å—Ç–≤–∏—è</h3>
                <button class="btn btn-primary btn-block" id="viewAchievementsBtn">
                    üèÜ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                </button>
                <button class="btn btn-secondary btn-block" id="exportDataBtn">
                    üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
                </button>
            </div>
        `;
    }
    
    /**
     * ‚ö†Ô∏è –†–µ–Ω–¥–µ—Ä –æ—à–∏–±–∫–∏
     */
    renderError() {
        if (!this.error) return '';
        
        return `
            <div class="error-message" id="errorMessage">
                <span>‚ö†Ô∏è ${this.error}</span>
                <button onclick="this.parentElement.style.display='none'">‚úï</button>
            </div>
        `;
    }
    
    /**
     * üì± –ù–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        const editBtn = document.getElementById('editProfileBtn');
        if (editBtn) {
            editBtn.addEventListener('click', () => this.handleEditProfile());
        }
        
        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        const achievementsBtn = document.getElementById('viewAchievementsBtn');
        if (achievementsBtn) {
            achievementsBtn.addEventListener('click', () => this.handleViewAchievements());
        }
        
        // –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        const exportBtn = document.getElementById('exportDataBtn');
        if (exportBtn) {
            exportBtn.addEventListener('click', () => this.handleExportData());
        }
    }
    
    /**
     * ‚úèÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
     */
    handleEditProfile() {
        // Haptic feedback
        if (this.telegram?.hapticFeedback) {
            this.telegram.hapticFeedback('light');
        }
        
        // TODO: Implement edit functionality or navigate to edit page
        console.log('Edit profile clicked');
        
        if (this.telegram?.showAlert) {
            this.telegram.showAlert('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö');
        }
    }
    
    /**
     * üèÜ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    handleViewAchievements() {
        if (this.telegram?.hapticFeedback) {
            this.telegram.hapticFeedback('light');
        }
        
        // Navigate to achievements page
        window.location.hash = '/achievements';
    }
    
    /**
     * üì§ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    handleExportData() {
        if (this.telegram?.hapticFeedback) {
            this.telegram.hapticFeedback('light');
        }
        
        // TODO: Implement data export functionality
        console.log('Export data clicked');
        
        if (this.telegram?.showAlert) {
            this.telegram.showAlert('–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö');
        }
    }
    
    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø—Ä–æ—Ñ–∏–ª—è
     */
    updateProfileUI() {
        // Update profile info if page is rendered
        const nameEl = document.querySelector('.profile-name');
        const usernameEl = document.querySelector('.profile-username');
        const avatarEl = document.querySelector('.profile-avatar-large');
        
        if (nameEl && this.profileData.name) {
            nameEl.textContent = this.profileData.name;
        }
        
        if (usernameEl && this.profileData.username) {
            usernameEl.textContent = '@' + this.profileData.username;
        }
        
        if (avatarEl && this.profileData.name) {
            avatarEl.textContent = this.getInitials(this.profileData.name);
        }
    }
    
    /**
     * üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateStatsUI(stats) {
        // Update stats if page is rendered
        const statItems = document.querySelectorAll('.stat-number');
        if (statItems.length >= 4) {
            statItems[0].textContent = stats.totalQuotes || 0;
            statItems[1].textContent = stats.currentStreak || 0;
            statItems[2].textContent = stats.longestStreak || 0;
            statItems[3].textContent = stats.favoriteAuthors?.length || 0;
        }
    }
    
    /**
     * üî§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤ –∏–∑ –∏–º–µ–Ω–∏
     */
    getInitials(name) {
        if (!name) return '?';
        return name.split(' ')
            .map(word => word.charAt(0))
            .join('')
            .toUpperCase()
            .slice(0, 2);
    }
    
    /**
     * üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
     */
    destroy() {
        // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        this.subscriptions.forEach(unsubscribe => {
            if (typeof unsubscribe === 'function') {
                unsubscribe();
            }
        });
        this.subscriptions = [];
        
        // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        this.loading = false;
        this.error = null;
        this.editing = false;
    }
    
    /**
     * üì± Lifecycle –º–µ—Ç–æ–¥—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–æ—É—Ç–µ—Ä–æ–º
     */
    
    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    onShow() {
        console.log('üë§ ProfilePage: onShow');
        // Refresh data if needed
        if (!this.profileData.name) {
            this.loadProfileData();
        }
    }
    
    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    onHide() {
        console.log('üë§ ProfilePage: onHide');
    }
}

// üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.ProfilePage = ProfilePage;
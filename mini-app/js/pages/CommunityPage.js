/**
 * üë• –°–û–û–ë–©–ï–°–¢–í–û –ß–ò–¢–ê–¢–ï–õ–ï–ô - CommunityPage.js (–ò–°–ü–†–ê–í–õ–ï–ù–û - –ë–ï–ó –®–ê–ü–ö–ò!)
 * 
 * ‚úÖ –ü–û–õ–ù–û–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –ö–û–ù–¶–ï–ü–¢–£ –ò–ó "–∫–æ–Ω—Ü–µ–ø—Ç 5 —Å—Ç—Ä–∞–Ω–∏—Ü app.txt":
 * - 3 —Ç–∞–±–∞: üì∞ –õ–µ–Ω—Ç–∞, üèÜ –¢–æ–ø –Ω–µ–¥–µ–ª–∏, üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 * - MVP –≤–µ—Ä—Å–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
 * - –¢–æ—á–Ω–∞—è HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑ –∫–æ–Ω—Ü–µ–ø—Ç–∞
 * - –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–∫ –≤ –º–∞–∫–µ—Ç–µ
 * 
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–ï–ó –®–ê–ü–ö–ò –°–í–ï–†–•–£ - –ß–ò–°–¢–´–ô –î–ò–ó–ê–ô–ù!
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å—Ç—Ä–∞–Ω–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è API –≤—ã–∑–æ–≤—ã –∫–∞–∫ –≤ HomePage –∏ DiaryPage
 */

// üéõÔ∏è FEATURE FLAG: Show/hide + (add-to-diary) button in community sections
const COMMUNITY_SHOW_ADD_BUTTON = false;

class CommunityPage {
    constructor(app) {
        this.app = app;
        this.api = app.api;
        this.state = app.state;
        this.telegram = app.telegram;
        this.statisticsService = app.statistics || window.statisticsService;
        
        // –°—Ç–µ–π—Ç
        this.activeTab = 'feed';
        this.isHydrated = false; // ‚Üê –ø–µ—Ä–≤—ã–π –ø–æ–∫–∞–∑ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–µ—Ç—á–∞
        this.communityData = { activeReaders: 0, newQuotes: 0, totalReaders: 0, totalQuotes: 0, totalAuthors: 0, daysActive: 0 };
        this.latestQuotes = [];
        this.popularQuotes = [];
        this.popularFavorites = [];
        this.popularBooks = [];
        this.recentClicks = [];
        this.leaderboard = [];
        this.userProgress = null;
        this.communityMessage = null;
        this.communityTrend = null;
        this.communityInsights = null;
        this.funFact = null;

        // üåü SPOTLIGHT CACHE (TTL —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–∏–≥–∞–Ω–∏—è)
        this._spotlightCache = {
            ts: 0,
            items: []
        };

        // üîí FAVORITE LOCKS (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ —Ç–∞–ø–∞)
        this._favoriteLocks = new Set();

        // –§–ª–∞–≥–∏ "–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
        this.loaded = {
            latestQuotes: false,
            popularQuotes: false,
            popularBooks: false,
            recentClicks: false,
            leaderboard: false,
            stats: false,
            insights: false,
            funFact: false,
            message: false,
            trend: false,
            activityPercent: false
        };
        
        // ‚úÖ LEGACY: –°—Ç–∞—Ä—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        this.communityLoaded = false;
        this.communityLoading = false;
        
        // –î–∞–Ω–Ω—ã–µ –¥–ª—è "–°–µ–π—á–∞—Å –∏–∑—É—á–∞—é—Ç" –∏–∑ StatisticsService
        this.topAnalyses = [];

        // ‚úÖ LEGACY: –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏ (PR-3)
        this.loadingStates = {
            latestQuotes: false,
            popularQuotes: false,
            popularFavorites: false,
            popularBooks: false,
            recentClicks: false,
            leaderboard: false,
            stats: false,
            communityInsights: false,
            funFact: false
        };

        // ‚úÖ LEGACY: –°–æ—Å—Ç–æ—è–Ω–∏—è –æ—à–∏–±–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏ (PR-3)
        this.errorStates = {
            latestQuotes: null,
            popularQuotes: null,
            popularFavorites: null,
            popularBooks: null,
            recentClicks: null,
            leaderboard: null,
            stats: null,
            communityInsights: null,
            funFact: null
        };
        
        this.init();
    }
    
    init() {
        this.setupSubscriptions();
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ init()
    }

    // PREFETCH: –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è Router –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º render ‚Äî –≥—Ä—É–∑–∏–º –≤—Å—ë –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    async prefetch() {
        if (this.isHydrated) return; // —É–∂–µ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

        console.log('üîÑ CommunityPage: –ó–∞–ø—É—Å–∫ prefetch - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ —Ä–µ–Ω–¥–µ—Ä–∞');

        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞
        await Promise.allSettled([
            this._safe(async () => { const r = await this.api.getCommunityStats(); if (r?.success) { this.communityData = { ...this.communityData, ...r.data }; this.loaded.stats = true; } }),
            this._safe(async () => { const r = await this.api.getCommunityLatestQuotes({ limit: 3 }); if (r?.success) { this.latestQuotes = r.data || []; this.loaded.latestQuotes = true; } }),
            this._safe(async () => { const r = await this.api.getTopBooks({ period: '7d', limit: 10 }); if (r?.success) { this.popularBooks = r.data || []; this.loaded.popularBooks = true; } }),
            this._safe(async () => { const r = await this.api.getCatalogRecentClicks({ limit: 3 }); if (r?.success) { this.recentClicks = r.clicks || r.data || []; this.loaded.recentClicks = true; } }),
            this._safe(async () => { const r = await this.api.getCommunityMessage(); if (r?.success) { this.communityMessage = r.data; this.loaded.message = true; } }),
            this._safe(async () => { const r = await this.api.getCommunityTrend(); if (r?.success) { this.communityTrend = r.data; this.loaded.trend = true; } }),
            this._safe(async () => { // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º fallback
                await this.loadPopularFavorites('7d', 10);
            }),
            this._safe(async () => { // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã (–∞–≥—Ä–µ–≥–∞—Ü–∏—è) –∫–∞–∫ fallback –¥–ª—è spotlight
                await this.loadPopularQuotes('7d', 10);
            }),
            this._safe(async () => { // –ª–∏–¥–µ—Ä–±–æ—Ä–¥ + me
                const r = await this.api.getLeaderboard({ period: '7d', limit: 10 });
                if (r?.success) { this.leaderboard = r.data || []; this.userProgress = r.me || null; this.loaded.leaderboard = true; }
            }),
            this._safe(async () => { const r = await this.api.getCommunityInsights?.({ period: '7d' }); if (r?.success) { this.communityInsights = r.insights; this.loaded.insights = true; } }),
            this._safe(async () => { const r = await this.api.getCommunityFunFact?.({ period: '7d' }); if (r?.success) { this.funFact = r.data; this.loaded.funFact = true; } })
        ]);

        // ‚ú® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è spotlight –∫—ç—à–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await this._safe(async () => {
            await this.getSpotlightItems();
        });

        this.isHydrated = true; // —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å
        console.log('‚úÖ CommunityPage: Prefetch –∑–∞–≤–µ—Ä—à–µ–Ω - –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã');
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫
    async _safe(fn) { try { await fn(); } catch { /* ignore errors */ } }
    
    /**
     * –°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "—Ü–∏—Ç–∞—Ç–∞" –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç
     * @returns {string} –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ
     */
    pluralQuotes(count) {
        if (count % 10 === 1 && count % 100 !== 11) return '—Ü–∏—Ç–∞—Ç—É';
        if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '—Ü–∏—Ç–∞—Ç—ã';
        return '—Ü–∏—Ç–∞—Ç';
    }
    
    setupSubscriptions() {
        // –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    }
    
    async loadCommunityData() {
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –≤—ã–∑–æ–≤—ã
        if (this.communityLoading) {
            console.log('üîÑ CommunityPage: –°–æ–æ–±—â–µ—Å—Ç–≤–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }
        
        try {
            this.communityLoading = true;
            console.log('üë• CommunityPage: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞...');
            
            const stats = await this.api.getCommunityStats();
            if (stats && stats.success) {
                this.communityData = { ...this.communityData, ...stats.data };
                this.errorStates.stats = null;
            }
            
            this.communityLoaded = true;
            this.state.set('community.lastUpdate', Date.now());
            console.log('‚úÖ CommunityPage: –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:', error);
            this.errorStates.stats = error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏';
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ü–µ–ø—Ç–∞ –∫–∞–∫ fallback
        } finally {
            this.communityLoading = false;
        }
    }

    /**
     * üì∞ –ó–ê–ì–†–£–ó–ö–ê –ü–û–°–õ–ï–î–ù–ò–• –¶–ò–¢–ê–¢ –°–û–û–ë–©–ï–°–¢–í–ê (PR-3)
     */
    async loadLatestQuotes(limit = 5) {
        if (this.loadingStates.latestQuotes) return;
        
        try {
            this.loadingStates.latestQuotes = true;
            this.errorStates.latestQuotes = null;
            console.log('üì∞ CommunityPage: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã...');
            
            const response = await this.api.getCommunityLatestQuotes({ limit });
            if (response && response.success) {
                // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: —á–∏—Ç–∞–µ–º –∏–∑ resp.data, –µ—Å–ª–∏ –Ω–µ—Ç - –∏–∑ resp.quotes/resp.data.quotes/resp
                this.latestQuotes = response.data || response.quotes || response.data?.quotes || [];
                console.log('‚úÖ CommunityPage: –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.latestQuotes.length);
            } else {
                this.latestQuotes = [];
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ç–∞—Ç:', error);
            this.errorStates.latestQuotes = error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç';
            this.latestQuotes = [];
        } finally {
            this.loadingStates.latestQuotes = false;
        }
    }

    /**
     * üî• –ó–ê–ì–†–£–ó–ö–ê –ü–û–ü–£–õ–Ø–†–ù–´–• –¶–ò–¢–ê–¢ –°–û–û–ë–©–ï–°–¢–í–ê (PR-3)
     */
    async loadPopularQuotes(period = '7d', limit = 10) {
        if (this.loadingStates.popularQuotes) return;
        
        try {
            this.loadingStates.popularQuotes = true;
            this.errorStates.popularQuotes = null;
            console.log('üî• CommunityPage: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã...');
            
            const response = await this.api.getCommunityPopularQuotes({ period, limit });
            if (response && response.success) {
                this.popularQuotes = response.data || response.quotes || [];
                console.log('‚úÖ CommunityPage: –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.popularQuotes.length);
            } else {
                this.popularQuotes = [];
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ü–∏—Ç–∞—Ç:', error);
            this.errorStates.popularQuotes = error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ü–∏—Ç–∞—Ç';
            this.popularQuotes = [];
        } finally {
            this.loadingStates.popularQuotes = false;
        }
    }

    /**
     * ‚ù§Ô∏è –ó–ê–ì–†–£–ó–ö–ê –ü–û–ü–£–õ–Ø–†–ù–´–• –¶–ò–¢–ê–¢ –ü–û –õ–ê–ô–ö–ê–ú (–ù–û–í–û–ï)
     */
    async loadPopularFavorites(period = '7d', limit = 10) {
        if (this.loadingStates.popularFavorites) return;
        
        try {
            this.loadingStates.popularFavorites = true;
            this.errorStates.popularFavorites = null;
            console.log('‚ù§Ô∏è CommunityPage: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã...');
            
            // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞ 7d
            let response = await this.api.getCommunityPopularFavorites({ period, limit });
            if (response && response.success && response.data && response.data.length > 0) {
                this.popularFavorites = response.data;
                console.log('‚úÖ CommunityPage: –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.popularFavorites.length);
                return;
            }
            
            // Fallback 1: –ü–æ–ø—ã—Ç–∫–∞ 30d –µ—Å–ª–∏ 7d –ø—É—Å—Ç–æ–π
            if (period === '7d') {
                console.log('üîÑ Fallback 1: –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞ 30d...');
                response = await this.api.getCommunityPopularFavorites({ period: '30d', limit });
                if (response && response.success && response.data && response.data.length > 0) {
                    this.popularFavorites = response.data;
                    console.log('‚úÖ CommunityPage: –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã (30d) –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.popularFavorites.length);
                    return;
                }
            }
            
            // Fallback 2: –û–±—ã—á–Ω—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã (–∞–≥—Ä–µ–≥–∞—Ü–∏—è)
            console.log('üîÑ Fallback 2: –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ã—á–Ω—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã (–∞–≥—Ä–µ–≥–∞—Ü–∏—è)...');
            await this.loadPopularQuotes('7d', limit);
            if (this.popularQuotes && this.popularQuotes.length > 0) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
                this.popularFavorites = this.popularQuotes.map(q => ({
                    text: q.text,
                    author: q.author,
                    favorites: q.favorites || q.count || q.likes || 0
                }));
                console.log('‚úÖ CommunityPage: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∫–∞–∫ fallback:', this.popularFavorites.length);
                return;
            }
            
            // Fallback 3: –û–±—ã—á–Ω—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∑–∞ 30d –µ—Å–ª–∏ 7d –ø—É—Å—Ç—ã–µ
            console.log('üîÑ Fallback 3: –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ã—á–Ω—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∑–∞ 30d...');
            await this.loadPopularQuotes('30d', limit);
            if (this.popularQuotes && this.popularQuotes.length > 0) {
                this.popularFavorites = this.popularQuotes.map(q => ({
                    text: q.text,
                    author: q.author,
                    favorites: q.favorites || q.count || q.likes || 0
                }));
                console.log('‚úÖ CommunityPage: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã (30d) –∫–∞–∫ fallback:', this.popularFavorites.length);
                return;
            }
            
            // –ï—Å–ª–∏ –≤—Å–µ fallback –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
            this.popularFavorites = [];
            console.log('‚ö†Ô∏è CommunityPage: –í—Å–µ fallback –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, popularFavorites –ø—É—Å—Ç');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç:', error);
            this.errorStates.popularFavorites = error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç';
            this.popularFavorites = [];
        } finally {
            this.loadingStates.popularFavorites = false;
        }
    }

    /**
     * üìö –ó–ê–ì–†–£–ó–ö–ê –ü–û–ü–£–õ–Ø–†–ù–´–• –ö–ù–ò–ì –°–û–û–ë–©–ï–°–¢–í–ê (–û–ë–ù–û–í–õ–ï–ù–û –î–õ–Ø –¢–û–ü–ê –ù–ï–î–ï–õ–ò)
     */
    async loadPopularBooks(period = '7d', limit = 10) {
        if (this.loadingStates.popularBooks) return;
        
        try {
            this.loadingStates.popularBooks = true;
            this.errorStates.popularBooks = null;
            console.log('üìö CommunityPage: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–Ω–∏–≥–∏ –Ω–µ–¥–µ–ª–∏...');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º getTopBooks –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–∞–∑–±–æ—Ä–æ–≤ –Ω–µ–¥–µ–ª–∏
            const response = await this.api.getTopBooks({ period, limit });
            if (response && response.success) {
                // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: —á–∏—Ç–∞–µ–º –∏–∑ resp.data –∏–ª–∏ resp.books
                this.popularBooks = response.data || response.books || [];
                console.log('‚úÖ CommunityPage: –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–Ω–∏–≥–∏ –Ω–µ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.popularBooks.length);
            } else {
                this.popularBooks = [];
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–Ω–∏–≥ –Ω–µ–¥–µ–ª–∏:', error);
            this.errorStates.popularBooks = error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–Ω–∏–≥';
            this.popularBooks = [];
        } finally {
            this.loadingStates.popularBooks = false;
        }
    }

    /**
     * üëÜ –ó–ê–ì–†–£–ó–ö–ê –ü–û–°–õ–ï–î–ù–ò–• –ö–õ–ò–ö–û–í –ü–û –ö–ê–¢–ê–õ–û–ì–£ (PR-3)
     */
    async loadRecentClicks(limit = 5) {
        if (this.loadingStates.recentClicks) return;
        
        try {
            this.loadingStates.recentClicks = true;
            this.errorStates.recentClicks = null;
            console.log('üëÜ CommunityPage: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–ª–∏–∫–∏...');
            
            const response = await this.api.getCatalogRecentClicks({ limit });
            if (response && response.success) {
                // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: —á–∏—Ç–∞–µ–º –∏–∑ resp.clicks, –µ—Å–ª–∏ –Ω–µ—Ç - –∏–∑ resp.data/items
                this.recentClicks = response.clicks || response.data || response.items || [];
                console.log('‚úÖ CommunityPage: –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–ª–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.recentClicks.length);
            } else {
                this.recentClicks = [];
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–ª–∏–∫–æ–≤:', error);
            this.errorStates.recentClicks = error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–∫–æ–≤';
            this.recentClicks = [];
        } finally {
            this.loadingStates.recentClicks = false;
        }
    }

    /**
     * üìö –ó–ê–ì–†–£–ó–ö–ê –¢–û–ü–û–í–´–• –ê–ù–ê–õ–ò–ó–û–í –ò–ó STATISTICSSERVICE
     */
    async loadTopAnalyses() {
        if (!this.statisticsService || typeof this.statisticsService.getTopAnalyses !== 'function') {
            console.warn('‚ö†Ô∏è CommunityPage: StatisticsService –∏–ª–∏ getTopAnalyses –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return;
        }
        
        try {
            console.log('üìö CommunityPage: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø–æ–≤—ã–µ –∞–Ω–∞–ª–∏–∑—ã —á–µ—Ä–µ–∑ StatisticsService...');
            this.topAnalyses = await this.statisticsService.getTopAnalyses(3);
            console.log('‚úÖ CommunityPage: –¢–æ–ø–æ–≤—ã–µ –∞–Ω–∞–ª–∏–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.topAnalyses);
        } catch (error) {
            console.error('‚ùå CommunityPage: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–æ–≤—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤:', error);
            this.topAnalyses = []; // Fallback to empty array
        }
    }

    /**
     * üí¨ –ó–ê–ì–†–£–ó–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –û–¢ –ê–ù–ù–´ (–ù–û–í–û–ï)
     */
    async loadCommunityMessage() {
        try {
            console.log('üí¨ CommunityPage: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–Ω–Ω—ã...');
            const response = await this.api.getCommunityMessage();
            if (response && response.success && response.data) {
                this.communityMessage = response.data;
                console.log('‚úÖ CommunityPage: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–Ω–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
                return response.data;
            } else {
                // Fallback to static message
                this.communityMessage = {
                    text: "–î–æ—Ä–æ–≥–∏–µ —á–∏—Ç–∞—Ç–µ–ª–∏! –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –º—É–¥—Ä–æ—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!",
                    time: "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"
                };
                return this.communityMessage;
            }
        } catch (error) {
            console.error('‚ùå CommunityPage: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ê–Ω–Ω—ã:', error);
            // Fallback to static message
            this.communityMessage = {
                text: "–î–æ—Ä–æ–≥–∏–µ —á–∏—Ç–∞—Ç–µ–ª–∏! –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –º—É–¥—Ä–æ—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!",
                time: "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"
            };
            return this.communityMessage;
        }
    }

    /**
     * üìà –ó–ê–ì–†–£–ó–ö–ê –¢–†–ï–ù–î–ê –ù–ï–î–ï–õ–ò (–ù–û–í–û–ï)
     */
    async loadCommunityTrend() {
        try {
            console.log('üìà CommunityPage: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–Ω–¥ –Ω–µ–¥–µ–ª–∏...');
            const response = await this.api.getCommunityTrend();
            if (response && response.success && response.data) {
                this.communityTrend = response.data;
                console.log('‚úÖ CommunityPage: –¢—Ä–µ–Ω–¥ –Ω–µ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω');
                return response.data;
            } else {
                // Fallback to static trend
                this.communityTrend = {
                    title: "–¢—Ä–µ–Ω–¥ –Ω–µ–¥–µ–ª–∏",
                    text: '–¢–µ–º–∞ "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π" –Ω–∞–±–∏—Ä–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å',
                    buttonText: "–ò–∑—É—á–∏—Ç—å —Ä–∞–∑–±–æ—Ä—ã"
                };
                return this.communityTrend;
            }
        } catch (error) {
            console.error('‚ùå CommunityPage: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–Ω–¥–∞ –Ω–µ–¥–µ–ª–∏:', error);
            // Fallback to static trend
            this.communityTrend = {
                title: "–¢—Ä–µ–Ω–¥ –Ω–µ–¥–µ–ª–∏",
                text: '–¢–µ–º–∞ "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π" –Ω–∞–±–∏—Ä–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å',
                buttonText: "–ò–∑—É—á–∏—Ç—å —Ä–∞–∑–±–æ—Ä—ã"
            };
            return this.communityTrend;
        }
    }
    
    /**
     * üèÜ –ó–ê–ì–†–£–ó–ö–ê –õ–ò–î–ï–†–ë–û–†–î–ê –ó–ê –ü–ï–†–ò–û–î (–ù–û–í–û–ï)
     */
    async loadLeaderboard(limit = 10, period = '7d') {
        if (this.loadingStates.leaderboard) return;
        try {
            this.loadingStates.leaderboard = true;
            this.errorStates.leaderboard = null;
            console.log('üèÜ CommunityPage: –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –∑–∞', period);
            const resp = await this.api.getLeaderboard({ period, limit });
            if (resp && resp.success) {
                this.leaderboard = resp.data || [];
                this.userProgress = resp.me || null;
                console.log('‚úÖ CommunityPage: –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–µ–Ω:', this.leaderboard.length, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            } else {
                this.leaderboard = [];
                this.userProgress = null;
                console.warn('‚ö†Ô∏è CommunityPage: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞');
            }
        } catch (e) {
            this.errorStates.leaderboard = e.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–æ–≤';
            this.leaderboard = [];
            this.userProgress = null;
            console.error('‚ùå CommunityPage: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', e);
        } finally {
            this.loadingStates.leaderboard = false;
        }
    }

    /**
     * üìä –ó–ê–ì–†–£–ó–ö–ê –ò–ù–°–ê–ô–¢–û–í –°–û–û–ë–©–ï–°–¢–í–ê
     */
    async loadCommunityInsights(period = '7d') {
        if (this.loadingStates.communityInsights) return;
        
        try {
            this.loadingStates.communityInsights = true;
            this.errorStates.communityInsights = null;
            console.log('üìä CommunityPage: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Å–∞–π—Ç—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∑–∞', period);
            
            const response = await this.api.getCommunityInsights({ period });
            if (response && response.success) {
                this.communityInsights = response.insights;
                console.log('‚úÖ CommunityPage: –ò–Ω—Å–∞–π—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.communityInsights);
            } else {
                this.communityInsights = null;
                console.warn('‚ö†Ô∏è CommunityPage: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–Ω—Å–∞–π—Ç–æ–≤');
            }
        } catch (e) {
            this.errorStates.communityInsights = e.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å–∞–π—Ç–æ–≤';
            this.communityInsights = null;
            console.error('‚ùå CommunityPage: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å–∞–π—Ç–æ–≤:', e);
        } finally {
            this.loadingStates.communityInsights = false;
        }
    }

    /**
     * üéâ –ó–ê–ì–†–£–ó–ö–ê –ò–ù–¢–ï–†–ï–°–ù–û–ì–û –§–ê–ö–¢–ê –ù–ï–î–ï–õ–ò
     */
    async loadFunFact(period = '7d') {
        if (this.loadingStates.funFact) return;
        
        try {
            this.loadingStates.funFact = true;
            this.errorStates.funFact = null;
            console.log('üéâ CommunityPage: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –∑–∞', period);
            
            const response = await this.api.getCommunityFunFact({ period });
            if (response && response.success) {
                this.funFact = response.data;
                console.log('‚úÖ CommunityPage: –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω:', this.funFact);
            } else {
                this.funFact = null;
                console.warn('‚ö†Ô∏è CommunityPage: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Ñ–∞–∫—Ç–∞');
            }
        } catch (e) {
            this.errorStates.funFact = e.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–∫—Ç–∞';
            this.funFact = null;
            console.error('‚ùå CommunityPage: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–∫—Ç–∞:', e);
        } finally {
            this.loadingStates.funFact = false;
        }
    }

    /**
     * ‚ú® SPOTLIGHT CACHE METHODS
     */
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –∫—ç—à–∞ spotlight (TTL —Å–∏—Å—Ç–µ–º–∞)
     */
    isSpotlightFresh(ttlMs = 3600000) { // 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const now = Date.now();
        return (now - this._spotlightCache.ts) < ttlMs;
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∏–∫—Å–∞ spotlight: 1 —Å–≤–µ–∂–∞—è + 2 –Ω–µ–¥–∞–≤–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
     */
    async buildSpotlightMix() {
        const items = [];
        
        // 1. –î–æ–±–∞–≤–ª—è–µ–º 1 —Å–≤–µ–∂—É—é —Ü–∏—Ç–∞—Ç—É
        if (this.latestQuotes && this.latestQuotes.length > 0) {
            const fresh = this.latestQuotes[0];
            items.push({
                kind: 'fresh',
                id: fresh.id || fresh._id,
                text: fresh.text,
                author: fresh.author,
                createdAt: fresh.createdAt,
                favorites: typeof fresh.favorites === 'number' ? fresh.favorites : 0, // Ensure favorites is numeric >=0
                user: fresh.user || null // Propagate user data if present
            });
        }
        
        // 2. –î–æ–±–∞–≤–ª—è–µ–º –¥–æ 2 –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å fallback –ª–æ–≥–∏–∫–æ–π
        let favoritesSource = [];
        
        try {
            // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π endpoint –¥–ª—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
            const recentResponse = await this.api.getCommunityRecentFavorites({ hours: 48, limit: 3 });
            if (recentResponse && recentResponse.success && recentResponse.data && recentResponse.data.length > 0) {
                favoritesSource = recentResponse.data;
            } else {
                throw new Error('Recent favorites endpoint –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—É—Å—Ç');
            }
        } catch {
            console.log('üîÑ Spotlight fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∏–ª–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—é');
            
            // Fallback 1: popularFavorites
            if (this.popularFavorites && this.popularFavorites.length > 0) {
                favoritesSource = this.popularFavorites;
            } 
            // Fallback 2: popularQuotes (–∞–≥—Ä–µ–≥–∞—Ü–∏—è)
            else if (this.popularQuotes && this.popularQuotes.length > 0) {
                favoritesSource = this.popularQuotes.map(q => ({
                    text: q.text,
                    author: q.author,
                    favorites: q.favorites || q.count || q.likes || 0,
                    user: q.user || null // Propagate user data if available
                }));
            }
        }
        
        // Create enrichment map from popularFavorites for user info fallback
        const enrichmentMap = new Map();
        if (this.popularFavorites && this.popularFavorites.length > 0) {
            this.popularFavorites.forEach(pf => {
                if (pf.user) {
                    const key = `${pf.text.toLowerCase().trim()}||${(pf.author || '').toLowerCase().trim()}`;
                    enrichmentMap.set(key, pf.user);
                }
            });
        }
        
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö (–∏—Å–∫–ª—é—á–∞—è –¥—É–±–ª–∏–∫–∞—Ç —Å–≤–µ–∂–µ–π —Ü–∏—Ç–∞—Ç—ã)
        let addedFavorites = 0;
        for (const fav of favoritesSource) {
            if (addedFavorites >= 2) break;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –ª–∏ —Å fresh —Ü–∏—Ç–∞—Ç–æ–π
            const isDuplicate = items.some(item => 
                item.text === fav.text && item.author === fav.author
            );
            
            if (!isDuplicate) {
                // Use returned user directly from fav.user, with enrichment fallback
                let user = fav.user || null;
                
                // If no user but we have enrichment data, try to enrich
                if (!user && enrichmentMap.size > 0) {
                    const enrichmentKey = `${fav.text.toLowerCase().trim()}||${(fav.author || '').toLowerCase().trim()}`;
                    user = enrichmentMap.get(enrichmentKey) || null;
                }
                
                items.push({
                    kind: 'fav',
                    id: fav.id || fav._id,
                    text: fav.text,
                    author: fav.author,
                    favorites: typeof fav.favorites === 'number' ? fav.favorites : 0, // Ensure favorites is numeric >=0
                    user: user // Use enriched user data
                });
                addedFavorites++;
            }
        }
        
        return items.slice(0, 3); // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º—É–º 3 —ç–ª–µ–º–µ–Ω—Ç–∞
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ spotlight —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –∫—ç—à–∞
     */
    async getSpotlightItems() {
        if (this.isSpotlightFresh()) {
            return this._spotlightCache.items;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        this._spotlightCache.items = await this.buildSpotlightMix();
        this._spotlightCache.ts = Date.now();
        
        return this._spotlightCache.items;
    }

    /**
     * ‚ú® –†–µ–Ω–¥–µ—Ä —Å–µ–∫—Ü–∏–∏ "–°–µ–π—á–∞—Å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ"
     */
    renderSpotlightSection() {
        // –î–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω
        const items = this.isSpotlightFresh() ? this._spotlightCache.items : [];
        
        let cards = '';
        
        if (!items || items.length === 0) {
            // –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ —Ñ–æ–Ω–µ
            if (!this.isSpotlightFresh()) {
                this.getSpotlightItems().then(() => {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    this.rerender?.();
                }).catch(error => {
                    console.warn('Spotlight –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å:', error);
                });
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω –≤–º–µ—Å—Ç–æ –ø—É—Å—Ç–æ–π —Å–µ–∫—Ü–∏–∏
            cards = `
                <div class="quote-card skeleton">
                    <div class="spotlight-badge">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                    <div class="quote-card__header">
                        <div class="quote-card__user-avatar">
                            <div class="avatar-initials">?</div>
                        </div>
                        <div class="quote-card__user">
                            <span class="quote-card__user-name">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                        </div>
                    </div>
                    <div class="quote-card__text">–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ —Ü–∏—Ç–∞—Ç—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞...</div>
                    <div class="quote-card__author">‚Äî –ü–æ–¥–æ–∂–¥–∏—Ç–µ</div>
                    <div class="quote-card__footer">
                        <div class="quote-card__likes">‚ù§ 0</div>
                        <div class="quote-card__actions"></div>
                    </div>
                </div>
            `;
        } else {
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            cards = items.map(item => {
                const badge = item.kind === 'fresh' ? '–ù–æ–≤–æ–µ' : '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ';
                const badgeClass = item.kind === 'fresh' ? 'spotlight-card--fresh' : 'spotlight-card--fav';
                
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ item.user (–¥–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ –æ—Ç –±—ç–∫–µ–Ω–¥–∞)
                const user = item.user;
                const userAvatarHtml = this.getUserAvatarHtml(user);
                const userName = user?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                
                // –õ–∞–π–∫–∏ –¥–ª—è —Ñ—É—Ç–µ—Ä–∞
                const likesCount = item.favorites || 0;
                
                return `
                    <div class="quote-card ${badgeClass}" data-quote-id="${item.id || ''}">
                        <div class="spotlight-badge">${badge}</div>
                        
                        <!-- Header —Å –∞–≤–∞—Ç–∞—Ä–æ–º –∏ –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -->
                        <div class="quote-card__header">
                            ${userAvatarHtml}
                            <div class="quote-card__user">
                                <span class="quote-card__user-name">${this.escapeHtml(userName)}</span>
                            </div>
                        </div>
                        
                        <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç -->
                        <div class="quote-card__text">"${this.escapeHtml(item.text)}"</div>
                        <div class="quote-card__author">‚Äî ${this.escapeHtml(item.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')}</div>
                        
                        <!-- Footer —Å –ª–∞–π–∫–∞–º–∏ —Å–ª–µ–≤–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ —Å–ø—Ä–∞–≤–∞ -->
                        <div class="quote-card__footer">
                            <div class="quote-card__likes">
                                ‚ù§ <span class="favorites-count">${likesCount}</span>
                            </div>
                            <div class="quote-card__actions">
                                ${COMMUNITY_SHOW_ADD_BUTTON ? `<button class="quote-card__add-btn" 
                                        data-quote-id="${item.id || ''}"
                                        data-quote-text="${this.escapeHtml(item.text)}"
                                        data-quote-author="${this.escapeHtml(item.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')}"
                                        aria-label="–î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –≤ –¥–Ω–µ–≤–Ω–∏–∫">+</button>` : ''}
                                <button class="quote-card__heart-btn" 
                                        data-quote-id="${item.id || ''}"
                                        data-quote-text="${this.escapeHtml(item.text)}"
                                        data-quote-author="${this.escapeHtml(item.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')}"
                                        data-favorites="${likesCount}"
                                        aria-label="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ">‚ô°</button>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }
        
        // ALWAYS render container (with refresh button) even if no items
        return `
            <div class="community-spotlight">
                <div class="spotlight-header">
                    <h3 class="spotlight-title">‚ú® –°–µ–π—á–∞—Å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ</h3>
                    <button class="spotlight-refresh-btn" id="spotlightRefreshBtn" 
                            aria-label="–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É">‚Üª</button>
                </div>
                <div class="spotlight-grid">
                    ${cards}
                </div>
            </div>
        `;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è spotlight (—Å–µ–≥–æ–¥–Ω—è/–≤—á–µ—Ä–∞/—á –Ω–∞–∑–∞–¥)
     */
    formatSpotlightDate(date) {
        if (!date) return '';
        
        const d = new Date(date);
        const now = new Date();
        const diffTime = Math.abs(now - d);
        const diffHours = Math.floor(diffTime / (1000 * 60 * 60));
        const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
        
        if (diffDays === 0) return '—Å–µ–≥–æ–¥–Ω—è';
        if (diffDays === 1) return '–≤—á–µ—Ä–∞';
        if (diffHours <= 24) return `${diffHours}—á –Ω–∞–∑–∞–¥`;
        
        return d.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'short'
        });
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    /**
     * üñºÔ∏è –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ HTML –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–æ–ª–ª–±—ç–∫–æ–º –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª—ã
     * @param {Object} user - –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª—è–º–∏ userId, name, avatarUrl
     * @returns {string} HTML —Å—Ç—Ä–æ–∫–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏
     */
    getUserAvatarHtml(user) {
        if (!user) {
            // –§–æ–ª–ª–±—ç–∫ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            return `<div class="quote-card__user-avatar">
                <div class="avatar-initials">?</div>
            </div>`;
        }
        
        const name = user.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        const initials = this.getInitials(name);
        
        if (user.avatarUrl) {
            // –ï—Å—Ç—å –∞–≤–∞—Ç–∞—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ñ–æ–ª–ª–±—ç–∫–æ–º –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª—ã
            return `<div class="quote-card__user-avatar">
                <img src="${this.escapeHtml(user.avatarUrl)}" 
                     alt="${this.escapeHtml(name)}" 
                     class="avatar-image"
                     onerror="this.style.display='none';this.nextElementSibling.style.display='flex';">
                <div class="avatar-initials" style="display:none;">${initials}</div>
            </div>`;
        } else {
            // –ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã
            return `<div class="quote-card__user-avatar">
                <div class="avatar-initials">${initials}</div>
            </div>`;
        }
    }
    
    /**
     * üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤ –∏–∑ –∏–º–µ–Ω–∏ (–¥–æ 2 –±—É–∫–≤, –∑–∞–≥–ª–∞–≤–Ω—ã–µ)
     * @param {string} name - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {string} –∏–Ω–∏—Ü–∏–∞–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ê–ë")
     */
    getInitials(name) {
        if (!name || typeof name !== 'string') return '?';
        
        const parts = name.trim().split(/\s+/);
        if (parts.length === 0) return '?';
        
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –¥–æ 2 —á–∞—Å—Ç–µ–π –∏–º–µ–Ω–∏
        const initials = parts
            .slice(0, 2)
            .map(part => part.charAt(0).toUpperCase())
            .join('');
            
        return initials || '?';
    }
    
    /**
     * üé® –†–ï–ù–î–ï–† –°–¢–†–ê–ù–ò–¶–´ (–¢–û–ß–ù–û –ü–û –ö–û–ù–¶–ï–ü–¢–£!) - –ë–ï–ó –®–ê–ü–ö–ò!
     */
    render() {
        if (!this.isHydrated) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, Router —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ —ç–∫—Ä–∞–Ω–µ –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            return '';
        }

        return `
            <div class="content">
                ${this.renderTabs()}
                ${this.renderTabContent()}
            </div>
        `;
    }
    
    /**
     * üìë –¢–ê–ë–´ (–¢–û–ß–ù–û –ò–ó –ö–û–ù–¶–ï–ü–¢–ê!)
     */
    renderTabs() {
        return `
            <div class="tabs">
                <button class="tab ${this.activeTab === 'feed' ? 'active' : ''}" data-tab="feed">üì∞ –õ–µ–Ω—Ç–∞</button>
                <button class="tab ${this.activeTab === 'top' ? 'active' : ''}" data-tab="top">üèÜ –¢–æ–ø –Ω–µ–¥–µ–ª–∏</button>
                <button class="tab ${this.activeTab === 'stats' ? 'active' : ''}" data-tab="stats">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</button>
            </div>
        `;
    }
    
    renderTabContent() {
        switch (this.activeTab) {
            case 'feed':
                return this.renderFeedTab();
            case 'top':
                return this.renderTopTab();
            case 'stats':
                return this.renderStatsTab();
            default:
                return this.renderFeedTab();
        }
    }
    
    /**
     * üì∞ –¢–ê–ë –õ–ï–ù–¢–ê (–û–ë–ù–û–í–õ–ï–ù –î–õ–Ø PR-3 - –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó API!)
     */
    renderFeedTab() {
        // ‚ú® –ù–û–í–û–ï: Spotlight —Å–µ–∫—Ü–∏—è (1 —Å–≤–µ–∂–∞—è + 2 –Ω–µ–¥–∞–≤–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ) - –∑–∞–º–µ–Ω—è–µ—Ç "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã"
        const spotlightSection = this.renderSpotlightSection();
        
        // "–°–µ–π—á–∞—Å –∏–∑—É—á–∞—é—Ç" —Å–µ–∫—Ü–∏—è —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∫–ª–∏–∫–∞–º–∏ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É
        const currentlyStudyingSection = this.renderCurrentlyStudyingSection();
        
        // –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–Ω–Ω—ã —Å fallback
        const annaMessageSection = this.renderAnnaMessageSection();
        
        // –¢—Ä–µ–Ω–¥ –Ω–µ–¥–µ–ª–∏ —Å fallback
        const trendSection = this.renderTrendSection();
        
        return `
            <div class="stats-summary">
                üìä –°–µ–≥–æ–¥–Ω—è: ${this.communityData.activeReaders} –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π ‚Ä¢ ${this.communityData.newQuotes} –Ω–æ–≤—ã—Ö —Ü–∏—Ç–∞—Ç
            </div>
            
            ${spotlightSection}
            
            ${currentlyStudyingSection}
            
            ${annaMessageSection}
            
            ${trendSection}
        `;
    }

    /**
     * üì∞ –°–ï–ö–¶–ò–Ø –ü–û–°–õ–ï–î–ù–ò–• –¶–ò–¢–ê–¢ –°–û–û–ë–©–ï–°–¢–í–ê (–û–ë–ù–û–í–õ–ï–ù–û –î–õ–Ø PR-3)
     */
    renderLatestQuotesSection() {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –Ω–æ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º empty state
        if (this.loaded.latestQuotes && (!this.latestQuotes || this.latestQuotes.length === 0)) {
            return `
                <div class="empty-state">
                    <div class="empty-icon">üìù</div>
                    <div class="empty-title">–ü–æ–∫–∞ –Ω–µ—Ç —Ü–∏—Ç–∞—Ç</div>
                    <div class="empty-description">–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è –º—É–¥—Ä–æ—Å—Ç—å—é!</div>
                </div>
            `;
        }

        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º (–±–µ–∑ –∑–∞–≥–ª—É—à–µ–∫)
        if (!this.latestQuotes || this.latestQuotes.length === 0) {
            return '';
        }

        const quotesCards = this.latestQuotes.slice(0, 3).map((quote, index) => {
            return `
                <div class="quote-card" data-quote-id="${quote.id || index}">
                    <div class="quote-card__content">
                        <div class="quote-card__text">"${quote.text || quote.content || ''}"</div>
                        <div class="quote-card__author">‚Äî ${quote.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'}</div>
                        <div class="quote-card__meta">
                            <span class="quote-card__date">${this.formatDate(quote.createdAt || quote.date)}</span>
                            <div class="quote-card__actions">
                                <button class="quote-card__fav-btn" data-quote-id="${quote.id || index}"
                                        data-quote-text="${(quote.text || quote.content || '').replace(/"/g, '&quot;')}"
                                        data-quote-author="${(quote.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä').replace(/"/g, '&quot;')}"
                                        style="min-height: var(--touch-target-min);" aria-label="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ">‚ô°</button>
                                <button class="quote-card__add-btn" data-quote-id="${quote.id || index}"
                                        data-quote-text="${(quote.text || quote.content || '').replace(/"/g, '&quot;')}"
                                        data-quote-author="${(quote.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä').replace(/"/g, '&quot;')}"
                                        style="min-height: var(--touch-target-min);" aria-label="–î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –≤ –¥–Ω–µ–≤–Ω–∏–∫">
                                  <span class="add-icon">+</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }).join('');

        return `
            <div class="latest-quotes-section">
                <div class="mvp-community-title">üí´ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞</div>
                <div class="quotes-grid">
                    ${quotesCards}
                </div>
            </div>
        `;
    }
    
    /**
     * üìö –°–ï–ö–¶–ò–Ø "–°–ï–ô–ß–ê–° –ò–ó–£–ß–ê–Æ–¢" (–û–ë–ù–û–í–õ–ï–ù–û: –ü–û–ö–ê–ó–´–í–ê–ï–¢ –ü–û–°–õ–ï–î–ù–ò–ï –ö–õ–ò–ö–ò –ü–û –ö–ê–¢–ê–õ–û–ì–£)
     */
    renderCurrentlyStudyingSection() {
        if (this.loadingStates.recentClicks) {
            return `
                <div class="mvp-community-item">
                    <div class="mvp-community-title">üìö –°–µ–π—á–∞—Å –∏–∑—É—á–∞—é—Ç</div>
                    <div class="loading-state">
                        <div class="loading-spinner"></div>
                        <div class="loading-text">–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞–∑–±–æ—Ä—ã...</div>
                    </div>
                </div>
            `;
        }

        if (this.errorStates.recentClicks) {
            return `
                <div class="error-state">
                    <div class="error-icon">‚ùå</div>
                    <div class="error-title">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>
                    <div class="error-description">${this.errorStates.recentClicks}</div>
                    <button class="error-retry-btn" data-retry="recent-clicks" style="min-height: var(--touch-target-min);">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
                </div>
            `;
        }

        if (!this.recentClicks || this.recentClicks.length === 0) {
            return `
                <div class="mvp-community-item">
                    <div class="mvp-community-title">üìö –°–µ–π—á–∞—Å –∏–∑—É—á–∞—é—Ç</div>
                    <div class="mvp-community-text">–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</div>
                    <div class="mvp-community-author">–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è</div>
                </div>
            `;
        }
        
        const recentClicksCards = this.recentClicks.slice(0, 3).map((click, _index) => `
            <div class="currently-studying-item" data-book-id="${click.book?.id || click.bookId || click.id}" style="margin-bottom: var(--spacing-sm); min-height: var(--touch-target-min);">
                <div class="studying-rank">${_index + 1}</div>
                <div class="studying-content">
                    <div class="studying-title">${click.book?.title || click.bookTitle || click.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–∏–≥–∞'}</div>
                    <div class="studying-author">${click.book?.author || click.bookAuthor || click.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'}</div>
                    <div class="studying-stats">${this.formatClickTime(click.timestamp || click.clickTime || click.createdAt)}</div>
                </div>
            </div>
        `).join('');
        
        return `
            <div class="currently-studying-section">
                <div class="mvp-community-title">üìö –°–µ–π—á–∞—Å –∏–∑—É—á–∞—é—Ç</div>
                <div class="currently-studying-list">
                    ${recentClicksCards}
                </div>
            </div>
        `;
    }
    
    /**
     * üí¨ –°–ï–ö–¶–ò–Ø –°–û–û–ë–©–ï–ù–ò–Ø –û–¢ –ê–ù–ù–´ (–ù–û–í–ê–Ø –° API –ò FALLBACK)
     */
    renderAnnaMessageSection() {
        const message = this.communityMessage || {
            text: "–î–æ—Ä–æ–≥–∏–µ —á–∏—Ç–∞—Ç–µ–ª–∏! –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –º—É–¥—Ä–æ—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!",
            time: "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"
        };

        return `
            <div class="anna-message-block">
                <div class="anna-message-header">üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–Ω–Ω—ã</div>
                <div class="anna-message-text">"${message.text}"</div>
                <div class="anna-message-time">${message.time}</div>
            </div>
        `;
    }

    /**
     * üìà –°–ï–ö–¶–ò–Ø –¢–†–ï–ù–î–ê –ù–ï–î–ï–õ–ò (–ù–û–í–ê–Ø –° API –ò FALLBACK)
     */
    renderTrendSection() {
        const trend = this.communityTrend || {
            title: "–¢—Ä–µ–Ω–¥ –Ω–µ–¥–µ–ª–∏",
            text: '–¢–µ–º–∞ "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π" –Ω–∞–±–∏—Ä–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å',
            buttonText: "–ò–∑—É—á–∏—Ç—å —Ä–∞–∑–±–æ—Ä—ã"
        };

        return `
            <div class="promo-section">
                <div class="promo-title">üéØ ${trend.title}</div>
                <div class="promo-text">${trend.text}</div>
                <button class="promo-btn" 
                        id="exploreBtn"
                        style="min-height: var(--touch-target-min);">
                    ${trend.buttonText}
                </button>
            </div>
        `;
    }
    
    /**
     * üèÜ –¢–ê–ë –¢–û–ü –ù–ï–î–ï–õ–ò (REDESIGNED - NEW ORDER AND STRUCTURE!)
     */
    renderTopTab() {
        // New order per requirements:
        // 1. Community stats cards
        // 2. Leaderboard (Top 3)
        // 3. Popular quotes week (Top 3, new design)
        // 4. Popular books week
        // 5. User progress
        
        const statsSection = this.renderCommunityStatsCards();
        const leaderboardSection = this.renderLeaderboardSection();
        const popularQuotesSection = this.renderPopularQuotesWeekSection();
        const popularBooksSection = this.renderPopularBooksSection();
        const userProgressSection = this.renderUserProgressSection();

        return `
            ${statsSection}
            ${leaderboardSection}
            ${popularQuotesSection}
            ${popularBooksSection}
            ${userProgressSection}
        `;
    }

    /**
     * üìä COMMUNITY STATS CARDS SECTION (SECTION 1)
     */
    renderCommunityStatsCards() {
        return `
            <div class="community-stats-grid">
                <div class="community-stat-card">
                    <div class="community-stat-number">${this.communityData.activeReaders}</div>
                    <div class="community-stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π</div>
                </div>
                <div class="community-stat-card">
                    <div class="community-stat-number">${this.communityData.newQuotes}</div>
                    <div class="community-stat-label">–ù–æ–≤—ã—Ö —Ü–∏—Ç–∞—Ç</div>
                </div>
            </div>
        `;
    }

    /**
     * üñºÔ∏è Render user avatar with fallback to initials
     */
    renderUserAvatar(avatarUrl, initials) {
        if (avatarUrl) {
            return `
                <div class="leader-avatar">
                    <img class="leader-avatar-img" src="${avatarUrl}" alt="–ê–≤–∞—Ç–∞—Ä" 
                         onerror="this.style.display='none'; this.parentElement.classList.add('fallback')" />
                    <div class="leader-avatar-fallback">${initials || '–ê'}</div>
                </div>
            `;
        } else {
            return `
                <div class="leader-avatar fallback">
                    <div class="leader-avatar-fallback">${initials || '–ê'}</div>
                </div>
            `;
        }
    }
    
    /**
     * üèÜ LEADERBOARD SECTION - TOP 3 ONLY (SECTION 2)
     */
    renderLeaderboardSection() {
        if (this.loadingStates.leaderboard) {
            return `
                <div class="leaders-week-section">
                    <div class="leaders-week-title">üèÜ –õ–∏–¥–µ—Ä—ã –Ω–µ–¥–µ–ª–∏</div>
                    <div class="loading-state">
                        <div class="loading-spinner"></div>
                        <div class="loading-text">–ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥...</div>
                    </div>
                </div>
            `;
        }

        if (this.errorStates.leaderboard) {
            return `
                <div class="error-state">
                    <div class="error-icon">‚ùå</div>
                    <div class="error-title">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞</div>
                    <div class="error-description">${this.errorStates.leaderboard}</div>
                    <button class="error-retry-btn" data-retry="leaderboard" style="min-height: var(--touch-target-min);">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
                </div>
            `;
        }

        if (!this.leaderboard || this.leaderboard.length === 0) {
            return `
                <div class="empty-state">
                    <div class="empty-icon">üèÜ</div>
                    <div class="empty-title">–ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤</div>
                    <div class="empty-description">–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º –≤ —Ç–æ–ø–µ —á–∏—Ç–∞—Ç–µ–ª–µ–π!</div>
                </div>
            `;
        }

        // TOP 3 only per requirements
        const leaderboardItems = this.leaderboard.slice(0, 3).map((leader, index) => {
            const position = index + 1;
            const badgeClass = position === 1 ? 'gold' : position === 2 ? 'silver' : 'bronze';
            const count = leader.quotesWeek ?? leader.quotes ?? 0;
            const name = leader.name || '–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∏—Ç–∞—Ç–µ–ª—å';
            const initials = this.getInitials(name);
            const avatarUrl = leader.avatarUrl; // Assuming API provides avatarUrl

            return `
                <div class="leaderboard-item">
                    <div class="rank-badge ${badgeClass}">${position}</div>
                    ${this.renderUserAvatar(avatarUrl, initials)}
                    <div class="leader-info">
                        <div class="leader-name">${name}</div>
                        <div class="leader-stats">${count} —Ü–∏—Ç–∞—Ç –∑–∞ –Ω–µ–¥–µ–ª—é</div>
                    </div>
                </div>
            `;
        }).join('');

        return `
            <div class="leaders-week-section">
                <div class="leaders-week-title">üèÜ –õ–∏–¥–µ—Ä—ã –Ω–µ–¥–µ–ª–∏</div>
                <div class="leaders-week-subtitle">–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∏—Ç–∞—Ç–µ–ª–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞</div>
                <div class="leaderboard-list">
                    ${leaderboardItems}
                </div>
            </div>
        `;
    }

    /**
     * ‚≠ê POPULAR QUOTES WEEK SECTION - SPOTLIGHT-STYLE DESIGN (SECTION 3)
     */
    renderPopularQuotesWeekSection() {
        if (this.loadingStates.popularFavorites) {
            return `
                <div class="popular-quotes-week-section">
                    <div class="popular-quotes-week-title">‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –Ω–µ–¥–µ–ª–∏</div>
                    <div class="loading-state">
                        <div class="loading-spinner"></div>
                        <div class="loading-text">–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø —Ü–∏—Ç–∞—Ç...</div>
                    </div>
                </div>
            `;
        }

        if (this.errorStates.popularFavorites) {
            return `
                <div class="error-state">
                    <div class="error-icon">‚ùå</div>
                    <div class="error-title">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç</div>
                    <div class="error-description">${this.errorStates.popularFavorites}</div>
                    <button class="error-retry-btn" data-retry="popular-favorites" style="min-height: var(--touch-target-min);">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
                </div>
            `;
        }

        // Use popularFavorites if available, otherwise fallback to popularQuotes
        const quotes = this.popularFavorites?.length > 0 ? this.popularFavorites : this.popularQuotes || [];
        
        if (quotes.length === 0) {
            return `
                <div class="empty-state">
                    <div class="empty-icon">‚≠ê</div>
                    <div class="empty-title">–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ü–∏—Ç–∞—Ç</div>
                    <div class="empty-description">–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –¥–æ–±–∞–≤–∏—Ç —Ü–∏—Ç–∞—Ç—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!</div>
                </div>
            `;
        }

        // TOP 3 quotes with Spotlight-style design and working buttons
        const quotesCards = quotes.slice(0, 3).map((quote, _index) => {
            const favorites = quote.favorites || quote.count || 0;
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ quote.user (–¥–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ –æ—Ç –±—ç–∫–µ–Ω–¥–∞)
            const user = quote.user;
            const userAvatarHtml = this.getUserAvatarHtml(user);
            const userName = user?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            
            return `
                <div class="quote-card popular-quote-card" data-quote-id="${quote.id || ''}">
                    <!-- Header —Å –∞–≤–∞—Ç–∞—Ä–æ–º –∏ –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -->
                    <div class="quote-card__header">
                        ${userAvatarHtml}
                        <div class="quote-card__user">
                            <span class="quote-card__user-name">${this.escapeHtml(userName)}</span>
                        </div>
                    </div>
                    
                    <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç -->
                    <div class="quote-card__text">"${this.escapeHtml(quote.text || '')}"</div>
                    <div class="quote-card__author">‚Äî ${this.escapeHtml(quote.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')}</div>
                    
                    <!-- Footer —Å –ª–∞–π–∫–∞–º–∏ —Å–ª–µ–≤–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ —Å–ø—Ä–∞–≤–∞ -->
                    <div class="quote-card__footer">
                        <div class="quote-card__likes">
                            ‚ù§ <span class="favorites-count">${favorites}</span>
                        </div>
                        <div class="quote-card__actions">
                            ${COMMUNITY_SHOW_ADD_BUTTON ? `<button class="quote-card__add-btn" 
                                    data-quote-id="${quote.id || ''}"
                                    data-quote-text="${this.escapeHtml(quote.text || '')}"
                                    data-quote-author="${this.escapeHtml(quote.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')}"
                                    aria-label="–î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –≤ –¥–Ω–µ–≤–Ω–∏–∫">+</button>` : ''}
                            <button class="quote-card__heart-btn" 
                                    data-quote-id="${quote.id || ''}"
                                    data-quote-text="${this.escapeHtml(quote.text || '')}"
                                    data-quote-author="${this.escapeHtml(quote.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')}"
                                    data-favorites="${favorites}"
                                    aria-label="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ">‚ô°</button>
                        </div>
                    </div>
                </div>
            `;
        }).join('');

        return `
            <div class="popular-quotes-week-section">
                <div class="popular-quotes-week-title">‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –Ω–µ–¥–µ–ª–∏</div>
                <div class="popular-quotes-grid">
                    ${quotesCards}
                </div>
            </div>
        `;
    }

    /**
     * üéØ USER PROGRESS SECTION WITH ACTIVITY PERCENTAGE (SECTION 5)
     */
    renderUserProgressSection() {
        if (!this.userProgress) {
            return `
                <div class="user-progress-section">
                    <div class="progress-header">üéØ –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ç–æ–ø–∞—Ö</div>
                    <div class="progress-stats">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ...</div>
                    <div class="progress-bar-white">
                        <div class="progress-fill-white" style="width: 0%;"></div>
                    </div>
                    <div class="progress-description">–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...</div>
                </div>
            `;
        }

        const { position, quotesWeek, percentile, deltaToNext, activityPercent } = this.userProgress;
        
        // Calculate progress bar relative to leader
        const leaderCount = this.leaderboard.length > 0 ? (this.leaderboard[0].quotesWeek ?? this.leaderboard[0].quotes ?? 0) : 1;
        const progressPercent = Math.min(100, Math.round((quotesWeek / Math.max(1, leaderCount)) * 100));
        
        // Progress text
        let progressText;
        if (position === 1) {
            progressText = "–í—ã –ª–∏–¥–µ—Ä –Ω–µ–¥–µ–ª–∏! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ";
        } else {
            const quotesNeeded = deltaToNext || 1;
            const quotesWord = this.pluralQuotes(quotesNeeded);
            progressText = `–î–æ–±–∞–≤—å—Ç–µ –µ—â—ë ${quotesNeeded} ${quotesWord} –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—Ç–∞`;
        }

        return `
            <div class="user-progress-section">
                <div class="progress-header">üéØ –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ç–æ–ø–∞—Ö</div>
                <div class="progress-stats">
                    –ú–µ—Å—Ç–æ: #${position} ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: ${quotesWeek} ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–µ–µ ${percentile || activityPercent || 0}% —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                </div>
                <div class="progress-bar-container">
                    <div class="progress-bar-fill" style="width: ${progressPercent}%;"></div>
                </div>
                <div class="progress-description">${progressText}</div>
            </div>
        `;
    }

    /**
     * ‚≠ê –°–ï–ö–¶–ò–Ø –ü–û–ü–£–õ–Ø–†–ù–´–• –¶–ò–¢–ê–¢ (–ù–û–í–ê–Ø –î–õ–Ø PR-3)
     */
    renderPopularQuotesSection() {
        if (this.loadingStates.popularQuotes) {
            return `
                <div class="popular-quotes-section">
                    <div class="popular-quotes-title">‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –Ω–µ–¥–µ–ª–∏</div>
                    <div class="loading-state">
                        <div class="loading-spinner"></div>
                        <div class="loading-text">–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã...</div>
                    </div>
                </div>
            `;
        }

        if (this.errorStates.popularQuotes) {
            return `
                <div class="error-state">
                    <div class="error-icon">‚ùå</div>
                    <div class="error-title">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç</div>
                    <div class="error-description">${this.errorStates.popularQuotes}</div>
                    <button class="error-retry-btn" data-retry="popular-quotes" style="min-height: var(--touch-target-min);">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
                </div>
            `;
        }

        if (!this.popularQuotes || this.popularQuotes.length === 0) {
            return `
                <div class="empty-state">
                    <div class="empty-icon">‚≠ê</div>
                    <div class="empty-title">–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ü–∏—Ç–∞—Ç</div>
                    <div class="empty-description">–î–æ–±–∞–≤–ª—è–π—Ç–µ —Ü–∏—Ç–∞—Ç—ã —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ!</div>
                </div>
            `;
        }

        const quotesItems = this.popularQuotes.slice(0, 3).map(quote => `
            <div class="quote-item">
                <div class="quote-text">"${quote.text}"</div>
                <div class="quote-meta">${quote.author} ‚Ä¢ –¥–æ–±–∞–≤–∏–ª–∏ ${quote.count || 0} —á–µ–ª–æ–≤–µ–∫</div>
            </div>
        `).join('');

        return `
            <div class="popular-quotes-section">
                <div class="popular-quotes-title">‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –Ω–µ–¥–µ–ª–∏</div>
                ${quotesItems}
            </div>
        `;
    }

    /**
     * üìö –°–ï–ö–¶–ò–Ø –ü–û–ü–£–õ–Ø–†–ù–´–• –ö–ù–ò–ì (–ù–û–í–ê–Ø –î–õ–Ø PR-3)
     */
    renderPopularBooksSection() {
        if (this.loadingStates.popularBooks) {
            return `
                <div class="popular-books-section">
                    <div class="popular-books-title">üìö –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã –Ω–µ–¥–µ–ª–∏</div>
                    <div class="loading-state">
                        <div class="loading-spinner"></div>
                        <div class="loading-text">–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–Ω–∏–≥–∏...</div>
                    </div>
                </div>
            `;
        }

        if (this.errorStates.popularBooks) {
            return `
                <div class="error-state">
                    <div class="error-icon">‚ùå</div>
                    <div class="error-title">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥</div>
                    <div class="error-description">${this.errorStates.popularBooks}</div>
                    <button class="error-retry-btn" data-retry="popular-books" style="min-height: var(--touch-target-min);">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
                </div>
            `;
        }

        if (!this.popularBooks || this.popularBooks.length === 0) {
            return `
                <div class="empty-state">
                    <div class="empty-icon">üìö</div>
                    <div class="empty-title">–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–Ω–∏–≥</div>
                    <div class="empty-description">–ò–∑—É—á–∞–π—Ç–µ —Ä–∞–∑–±–æ—Ä—ã —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ!</div>
                </div>
            `;
        }

        const booksItems = this.popularBooks.slice(0, 3).map((book, index) => `
            <div class="book-item">
                <div class="book-title-line">${index + 1}. "${book.title}" ${book.author}</div>
                <div class="book-interest-line">üí´ ${book.clicksCount || 0} —á–µ–ª–æ–≤–µ–∫ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ—Å—å</div>
            </div>
        `).join('');

        return `
            <div class="popular-books-section">
                <div class="popular-books-title">üìö –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã –Ω–µ–¥–µ–ª–∏</div>
                ${booksItems}
            </div>
        `;
    }
    
    /**
     * üìä –¢–ê–ë –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–ò–ó –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ì–û –ö–û–ù–¶–ï–ü–¢–ê!)
     */
    renderStatsTab() {
        // –ò–Ω—Ç–µ—Ä–µ—Å –∫ —Ä–∞–∑–±–æ—Ä–∞–º
        const interestSection = this.renderInterestSection();
        
        // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã
        const authorsSection = this.renderPopularAuthorsSection();
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        const achievementsSection = this.renderAchievementsSection();
        
        // –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userRatingSection = this.renderUserRatingSection();
        
        // –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
        const factSection = this.renderFunFactSection();
        
        return `
            <div class="community-stats-overview">
                <div class="community-stats-title">üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞</div>
                <div class="community-stats-2x2-grid">
                    <div class="community-stat-big">
                        <div class="community-stat-value">${this.communityData.totalReaders.toLocaleString()}</div>
                        <div class="community-stat-small-label">–í—Å–µ–≥–æ —á–∏—Ç–∞—Ç–µ–ª–µ–π</div>
                    </div>
                    <div class="community-stat-big">
                        <div class="community-stat-value">${this.communityData.totalQuotes.toLocaleString()}</div>
                        <div class="community-stat-small-label">–¶–∏—Ç–∞—Ç —Å–æ–±—Ä–∞–Ω–æ</div>
                    </div>
                    <div class="community-stat-big">
                        <div class="community-stat-value">${this.communityData.totalAuthors}</div>
                        <div class="community-stat-small-label">–ê–≤—Ç–æ—Ä–æ–≤</div>
                    </div>
                    <div class="community-stat-big">
                        <div class="community-stat-value">${this.communityData.daysActive}</div>
                        <div class="community-stat-small-label">–î–Ω–µ–π —Ä–∞–±–æ—Ç—ã</div>
                    </div>
                </div>
            </div>
            
            ${interestSection}
            ${authorsSection}
            ${achievementsSection}
            ${userRatingSection}
            ${factSection}
        `;
    }

    /**
     * üìö –°–ï–ö–¶–ò–Ø –ò–ù–¢–ï–†–ï–°–ê –ö –†–ê–ó–ë–û–†–ê–ú (–î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø)
     */
    renderInterestSection() {
        if (!this.communityInsights?.interest) {
            return `
                <div class="stats-detail-section">
                    <div class="stats-detail-title">üìö –ò–Ω—Ç–µ—Ä–µ—Å –∫ —Ä–∞–∑–±–æ—Ä–∞–º</div>
                    <div class="stats-detail-item">üìä –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...</div>
                </div>
            `;
        }

        const interest = this.communityInsights.interest;
        const leader = interest.leader;
        const growthText = interest.growthPct > 0 ? `+${interest.growthPct}%` : 
                          interest.growthPct < 0 ? `${interest.growthPct}%` : '0%';
        
        return `
            <div class="stats-detail-section">
                <div class="stats-detail-title">üìö –ò–Ω—Ç–µ—Ä–µ—Å –∫ —Ä–∞–∑–±–æ—Ä–∞–º</div>
                ${leader ? `<div class="stats-detail-item">üî• –õ–∏–¥–µ—Ä –Ω–µ–¥–µ–ª–∏: "${leader.title}" ‚Äî ${leader.author}</div>` : ''}
                <div class="stats-detail-item">üìà –†–æ—Å—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞: ${growthText} –∫ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ</div>
                <div class="stats-detail-item">üìñ –ê–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞—é—Ç ${interest.activelyStudying} —Ä–∞–∑–±–æ—Ä–æ–≤</div>
            </div>
        `;
    }

    /**
     * ‚úçÔ∏è –°–ï–ö–¶–ò–Ø –ü–û–ü–£–õ–Ø–†–ù–´–• –ê–í–¢–û–†–û–í (–î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø)
     */
    renderPopularAuthorsSection() {
        if (!this.communityInsights?.topAuthors || this.communityInsights.topAuthors.length === 0) {
            return `
                <div class="stats-detail-section">
                    <div class="stats-detail-title">‚úçÔ∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã –≤ —Ü–∏—Ç–∞—Ç–∞—Ö</div>
                    <div class="stats-detail-item">üìä –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...</div>
                </div>
            `;
        }

        const authorsItems = this.communityInsights.topAuthors.slice(0, 5).map((author, index) => {
            const count = author.count;
            const plural = count % 10 === 1 && count % 100 !== 11 ? '—Ü–∏—Ç–∞—Ç–∞' : 
                          (count % 10 >= 2 && count % 10 <= 4 && (count % 100 < 10 || count % 100 >= 20)) ? '—Ü–∏—Ç–∞—Ç—ã' : '—Ü–∏—Ç–∞—Ç';
            return `<div class="stats-detail-item">${index + 1}. ${author.author} ‚Äî ${count} ${plural}</div>`;
        }).join('');

        return `
            <div class="stats-detail-section">
                <div class="stats-detail-title">‚úçÔ∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã –≤ —Ü–∏—Ç–∞—Ç–∞—Ö</div>
                ${authorsItems}
            </div>
        `;
    }

    /**
     * üèÜ –°–ï–ö–¶–ò–Ø –î–û–°–¢–ò–ñ–ï–ù–ò–ô –°–û–û–ë–©–ï–°–¢–í–ê (–î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø)
     */
    renderAchievementsSection() {
        if (!this.communityInsights?.achievements || this.communityInsights.achievements.length === 0) {
            return `
                <div class="stats-detail-section">
                    <div class="stats-detail-title">üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞</div>
                    <div class="stats-detail-item">üìä –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...</div>
                </div>
            `;
        }

        const achievementItems = this.communityInsights.achievements.map(achievement => {
            const users = achievement.users;
            const plural = users % 10 === 1 && users % 100 !== 11 ? '—á–µ–ª–æ–≤–µ–∫' : 
                          (users % 10 >= 2 && users % 10 <= 4 && (users % 100 < 10 || users % 100 >= 20)) ? '—á–µ–ª–æ–≤–µ–∫–∞' : '—á–µ–ª–æ–≤–µ–∫';
            let icon = 'üìñ';
            let title = '–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∏—Ç–∞—Ç–µ–ª–∏';
            
            if (achievement.threshold === '20+') {
                icon = 'üî•';
                title = '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä—ã –º—É–¥—Ä–æ—Å—Ç–∏';
            } else if (achievement.threshold === '10+') {
                icon = '‚≠ê';
                title = '–§–∏–ª–æ—Å–æ—Ñ—ã –Ω–µ–¥–µ–ª–∏';
            } else if (achievement.threshold === '7+') {
                icon = 'üíé';
                title = '–ú—ã—Å–ª–∏—Ç–µ–ª–∏';
            } else if (achievement.threshold === '5+') {
                icon = 'üìö';
                title = '–õ—é–±–∏—Ç–µ–ª–∏ –∫–ª–∞—Å—Å–∏–∫–∏';
            } else if (achievement.threshold === '3+') {
                icon = '‚ú®';
                title = '–í–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª–∏';
            }
            
            return `<div class="stats-detail-item">${icon} "${title}" ‚Äî ${users} ${plural}</div>`;
        }).join('');

        return `
            <div class="stats-detail-section">
                <div class="stats-detail-title">üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞</div>
                ${achievementItems}
            </div>
        `;
    }

    /**
     * üìä –°–ï–ö–¶–ò–Ø –†–ï–ô–¢–ò–ù–ì–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (–î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø)
     */
    renderUserRatingSection() {
        if (!this.communityInsights?.userRating) {
            return `
                <div class="user-rating-section">
                    <div class="user-rating-title">üìä –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥</div>
                    <div class="user-rating-grid">
                        <div class="user-rating-item">
                            <div class="user-rating-value">‚Äî</div>
                            <div class="user-rating-label">–ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ</div>
                        </div>
                        <div class="user-rating-item">
                            <div class="user-rating-value">‚Äî</div>
                            <div class="user-rating-label">–ê–∫—Ç–∏–≤–Ω–µ–µ –¥—Ä—É–≥–∏—Ö</div>
                        </div>
                    </div>
                </div>
            `;
        }

        const userRating = this.communityInsights.userRating;
        
        return `
            <div class="user-rating-section">
                <div class="user-rating-title">üìä –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥</div>
                <div class="user-rating-grid">
                    <div class="user-rating-item">
                        <div class="user-rating-value">#${userRating.position}</div>
                        <div class="user-rating-label">–ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ</div>
                    </div>
                    <div class="user-rating-item">
                        <div class="user-rating-value">${userRating.percentile}%</div>
                        <div class="user-rating-label">–ê–∫—Ç–∏–≤–Ω–µ–µ –¥—Ä—É–≥–∏—Ö</div>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * ‚ú® –°–ï–ö–¶–ò–Ø –ò–ù–¢–ï–†–ï–°–ù–û–ì–û –§–ê–ö–¢–ê (–î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø)
     */
    renderFunFactSection() {
        const factText = this.funFact || '–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...';
        
        return `
            <div class="fact-section">
                <div class="fact-title">‚ú® –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç</div>
                <div class="fact-text">${factText}</div>
            </div>
        `;
    }
    
    /**
     * üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô (–û–ë–ù–û–í–õ–ï–ù –î–õ–Ø PR-3)
     */
    attachEventListeners() {
        this.attachTabListeners();
        this.attachExploreButton();
        this.attachCurrentlyStudyingListeners();
        this.attachCommunityCardListeners(); // ‚úÖ –ù–û–í–û–ï: Haptic feedback –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        this.attachRetryButtons(); // ‚úÖ –ù–û–í–û–ï PR-3
        this.attachQuoteCardListeners(); // ‚úÖ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ü–∏—Ç–∞—Ç
        this.attachSpotlightRefreshButton(); // ‚úÖ –ù–û–í–û–ï: –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è spotlight
        this.setupQuoteChangeListeners();
    }

    /**
     * üí¨ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ê–†–¢–û–ß–ï–ö –¶–ò–¢–ê–¢ (–ù–û–í–û–ï –î–õ–Ø PR-3)
     */
    attachQuoteCardListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç
        const addButtons = document.querySelectorAll('.quote-card__add-btn');
        addButtons.forEach(button => {
            button.addEventListener('click', (event) => {
                this.addQuoteToJournal(event);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–µ—Ä–¥–µ—á–∫–∞ (–∏–∑–±—Ä–∞–Ω–Ω–æ–µ) - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –∫–ª–∞—Å—Å–∞
        const heartButtons = document.querySelectorAll('.quote-card__heart-btn, .quote-card__fav-btn');
        heartButtons.forEach(button => {
            button.addEventListener('click', (event) => {
                this.addQuoteToFavorites(event);
            });
        });
    }
    
    /**
     * üì≥ –ï–î–ò–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø HAPTIC FEEDBACK
     * @param {string} type - –¢–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: 'light', 'medium', 'heavy', 'success', 'error'
     */
    triggerHapticFeedback(type = 'light') {
        if (this.telegram?.HapticFeedback) {
            switch (type) {
                case 'light':
                    this.telegram.HapticFeedback.impactOccurred('light');
                    break;
                case 'medium':
                    this.telegram.HapticFeedback.impactOccurred('medium');
                    break;
                case 'heavy':
                    this.telegram.HapticFeedback.impactOccurred('heavy');
                    break;
                case 'success':
                    this.telegram.HapticFeedback.notificationOccurred('success');
                    break;
                case 'error':
                    this.telegram.HapticFeedback.notificationOccurred('error');
                    break;
                case 'warning':
                    this.telegram.HapticFeedback.notificationOccurred('warning');
                    break;
            }
        }
    }

    attachTabListeners() {
        const tabs = document.querySelectorAll('.tab[data-tab]');
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const tabName = tab.dataset.tab;
                this.switchTab(tabName);
            });
        });
    }

    attachExploreButton() {
        const exploreBtn = document.getElementById('exploreBtn');
        if (exploreBtn) {
            exploreBtn.addEventListener('click', () => {
                this.triggerHapticFeedback('medium');
                const link = this.communityTrend?.link || '/catalog';
                this.app.router.navigate(link);
            });
        }
    }

    /**
     * üîÑ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø SPOTLIGHT
     */
    attachSpotlightRefreshButton() {
        const refreshBtn = document.getElementById('spotlightRefreshBtn');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', async () => {
                try {
                    // Haptic feedback
                    this.triggerHapticFeedback('medium');
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loading —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                    refreshBtn.innerHTML = '‚ü≥';
                    refreshBtn.disabled = true;
                    refreshBtn.style.animation = 'spin 1s linear infinite';
                    
                    // –û—á–∏—â–∞–µ–º –∫—ç—à
                    this._spotlightCache = { ts: 0, items: [] };
                    
                    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    await Promise.all([
                        this.loadLatestQuotes(5),
                        this.loadPopularFavorites('7d', 10)
                    ]);
                    
                    // –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –ø–æ–¥–±–æ—Ä–∫—É
                    await this.getSpotlightItems();
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    this.rerender();
                    
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è spotlight:', error);
                    this.showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 'error');
                } finally {
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                    if (refreshBtn) {
                        refreshBtn.innerHTML = '‚Üª';
                        refreshBtn.disabled = false;
                        refreshBtn.style.animation = '';
                    }
                }
            });
        }
    }

    /**
     * üìö –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–ï–ö–¶–ò–ò "–°–ï–ô–ß–ê–° –ò–ó–£–ß–ê–Æ–¢" –° HAPTIC FEEDBACK
     */
    attachCurrentlyStudyingListeners() {
        const studyingItems = document.querySelectorAll('.currently-studying-item');
        studyingItems.forEach(item => {
            // –î–æ–±–∞–≤–ª—è–µ–º haptic feedback –Ω–∞ –∫–∞—Å–∞–Ω–∏–µ
            item.addEventListener('touchstart', () => {
                this.triggerHapticFeedback('light');
            }, { passive: true });
            
            item.addEventListener('click', () => {
                this.triggerHapticFeedback('medium');
                const bookId = item.dataset.bookId;
                if (bookId) {
                    // Navigate to catalog with selected book
                    this.app.router.navigate(`/catalog?book=${bookId}`);
                }
            });
        });
    }
    
    /**
     * üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò COMMUNITY –ö–ê–†–¢–û–ß–ï–ö –° –£–õ–£–ß–®–ï–ù–ù–´–ú HAPTIC FEEDBACK
     */
    attachCommunityCardListeners() {
        // –ö–∞—Ä—Ç–æ—á–∫–∏ —Ü–∏—Ç–∞—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        const communityItems = document.querySelectorAll('.mvp-community-item');
        communityItems.forEach(item => {
            // Haptic feedback –Ω–∞ –∫–∞—Å–∞–Ω–∏–µ
            item.addEventListener('touchstart', () => {
                this.triggerHapticFeedback('light');
            }, { passive: true });
            
            // –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            item.addEventListener('click', () => {
                this.triggerHapticFeedback('medium');
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
            });
        });
        
        // –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const statCards = document.querySelectorAll('.community-stat-card');
        statCards.forEach(card => {
            card.addEventListener('touchstart', () => {
                this.triggerHapticFeedback('light');
            }, { passive: true });
        });
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        const leaderboardItems = document.querySelectorAll('.leaderboard-item');
        leaderboardItems.forEach(item => {
            item.addEventListener('touchstart', () => {
                this.triggerHapticFeedback('light');
            }, { passive: true });
            
            item.addEventListener('click', () => {
                this.triggerHapticFeedback('medium');
                // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
            });
        });
    }

    /**
     * üîÑ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ü–û–í–¢–û–†–ê (–ù–û–í–û–ï –î–õ–Ø PR-3)
     */
    attachRetryButtons() {
        // –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –ø–æ–≤—Ç–æ—Ä–∞ —Å data-retry –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
        const retryButtons = document.querySelectorAll('[data-retry]');
        retryButtons.forEach(button => {
            button.addEventListener('click', (event) => {
                event.preventDefault();
                this.triggerHapticFeedback('medium');
                
                const retryType = button.dataset.retry;
                switch (retryType) {
                    case 'latest-quotes':
                        this.retryLoadLatestQuotes();
                        break;
                    case 'recent-clicks':
                        this.retryLoadRecentClicks();
                        break;
                    case 'popular-books':
                        this.retryLoadPopularBooks();
                        break;
                    case 'popular-quotes':
                        this.retryLoadPopularQuotes();
                        break;
                    case 'popular-favorites':
                        this.retryLoadPopularFavorites();
                        break;
                    case 'leaderboard':
                        this.retryLoadLeaderboard();
                        break;
                    default:
                        // Fallback - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ
                        this.loadAllSections();
                        break;
                }
            });
        });
    }
    
    /**
     * üîÑ –ù–ê–°–¢–†–û–ô–ö–ê –°–õ–£–®–ê–¢–ï–õ–ï–ô –ò–ó–ú–ï–ù–ï–ù–ò–ô –¶–ò–¢–ê–¢
     */
    setupQuoteChangeListeners() {
        if (typeof document === 'undefined') return;

        // –°–Ω–∏–º–∞–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –±—ã–ª
        if (this._quoteChangeHandler) {
            document.removeEventListener('quotes:changed', this._quoteChangeHandler);
            this._quoteChangeHandler = null;
        }

        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this._quoteChangeHandler = (event) => {
            console.log('üë• CommunityPage: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ quotes:changed:', event.detail);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –°–æ–æ–±—â–µ—Å—Ç–≤–∞
            const isActive = this.app?.router?.currentRoute === '/community' || 
                           document.querySelector('.nav-item.active')?.dataset.route === 'community' ||
                           document.querySelector('.nav-item.active')?.dataset.page === 'community';
            
            if (!isActive) {
                console.log('üë• CommunityPage: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º rerender');
                return;
            }
            
            // Refresh top analyses when quotes change
            this.loadTopAnalyses().then(() => {
                this.rerender();
            });
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        document.addEventListener('quotes:changed', this._quoteChangeHandler);
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ ‚Äî –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –ª–æ–∞–¥–µ—Ä–æ–≤
    switchTab(tabName) {
        this.activeTab = tabName;
        this.triggerHapticFeedback('light');
        this.rerender();
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –≤ —Ñ–æ–Ω–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è UI)
        if (tabName === 'top') {
            Promise.allSettled([
                this._safe(async () => { 
                    if (!this.loaded.leaderboard) { 
                        const r = await this.api.getLeaderboard({ period: '7d', limit: 10 }); 
                        if (r?.success) { 
                            this.leaderboard = r.data || []; 
                            this.userProgress = r.me || null; 
                            this.loaded.leaderboard = true; 
                        } 
                    } 
                }),
                this._safe(async () => { 
                    if (!this.loaded.popularQuotes) { 
                        let r = await this.api.getCommunityPopularFavorites({ period: '7d', limit: 10 }).catch(() => null); 
                        if (!(r && r.success)) r = await this.api.getCommunityPopularQuotes({ period: '7d', limit: 10 }).catch(() => null); 
                        if (r?.success) { 
                            const arr = r.data || r.quotes || []; 
                            this.popularQuotes = arr.map(q => ({ 
                                text: q.text, 
                                author: q.author, 
                                favorites: q.favorites || q.count || q.likes || 0,
                                id: q.id,
                                creator: q.creator || q.addedBy
                            })); 
                            this.loaded.popularQuotes = true; 
                        } 
                    } 
                }),
                this._safe(async () => {
                    if (!this.loaded.activityPercent && this.api.getActivityPercent) {
                        const r = await this.api.getActivityPercent();
                        if (typeof r === 'number' || (r?.success && typeof r.activityPercent === 'number')) {
                            const percent = typeof r === 'number' ? r : r.activityPercent;
                            if (this.userProgress) {
                                this.userProgress.activityPercent = percent;
                            } else {
                                this.userProgress = { activityPercent: percent };
                            }
                            this.loaded.activityPercent = true;
                        }
                    }
                })
            ]).then(() => this.rerender());
        } else if (tabName === 'stats') {
            Promise.allSettled([
                this._safe(async () => { if (!this.loaded.stats) { const r = await this.api.getCommunityStats(); if (r?.success) { this.communityData = { ...this.communityData, ...r.data }; this.loaded.stats = true; } } }),
                this._safe(async () => { if (!this.loaded.insights && this.api.getCommunityInsights) { const r = await this.api.getCommunityInsights({ period: '7d' }); if (r?.success) { this.communityInsights = r.insights; this.loaded.insights = true; } } }),
                this._safe(async () => { if (!this.loaded.funFact && this.api.getCommunityFunFact) { const r = await this.api.getCommunityFunFact({ period: '7d' }); if (r?.success) { this.funFact = r.data; this.loaded.funFact = true; } } })
            ]).then(() => this.rerender());
        }
    }
    
    /**
     * üì± LIFECYCLE –ú–ï–¢–û–î–´ - –û–ë–ù–û–í–õ–ï–ù –î–õ–Ø PR-3!
     */
    // onShow –±–æ–ª—å—à–µ –ù–ï –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫/–ª–æ–∞–¥–µ—Ä–æ–≤ ‚Äî —Ç–æ–ª—å–∫–æ —Ñ–æ–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    async onShow() {
        console.log('üë• CommunityPage: onShow - —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è SWR –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
        
        // ‚úÖ –ù–û–í–û–ï: –í—ã–∑–æ–≤ warmupInitialStats –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω
        if (this.statisticsService && typeof this.statisticsService.warmupInitialStats === 'function') {
            try {
                await this.statisticsService.warmupInitialStats();
                console.log('‚úÖ CommunityPage: warmupInitialStats completed');
            } catch (error) {
                console.warn('‚ö†Ô∏è CommunityPage: warmupInitialStats failed:', error);
            }
        }
        
        // SWR: –º–æ–∂–Ω–æ —Ç–∏—Ö–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —á—Ç–æ-—Ç–æ –≤ —Ñ–æ–Ω–µ (–Ω–µ –º–µ–Ω—è—è UI) –ø–æ —Ç–∞–π–º–∞—É—Ç—É/–∫—Ä–∏—Ç–µ—Ä–∏—é —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏—è
        // –ù–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç:
        const last = this.state.get('community.lastUpdate') || 0;
        if (Date.now() - last > 10 * 60 * 1000) {
            this.state.set('community.lastUpdate', Date.now());
            console.log('üîÑ CommunityPage: –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ - –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
            // –í —Ñ–æ–Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–µ–∫—Ü–∏–∏, –Ω–æ –ù–ï —Ç—Ä–æ–≥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞—Ç–µ–º –æ–¥–∏–Ω –æ–±—â–∏–π rerender
            Promise.allSettled([
                this._safe(async () => { const r = await this.api.getCommunityStats(); if (r?.success) { this.communityData = { ...this.communityData, ...r.data }; } }),
                this._safe(async () => { const r = await this.api.getCommunityTrend(); if (r?.success) { this.communityTrend = r.data; } }),
                this._safe(async () => { const r = await this.api.getCommunityInsights?.({ period: '7d' }); if (r?.success) { this.communityInsights = r.insights; } })
            ]).then(() => {
                console.log('‚úÖ CommunityPage: –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
                this.rerender();
            });
        } else {
            console.log('‚úÖ CommunityPage: –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
        }
    }

    /**
     * üîÑ –ó–ê–ì–†–£–ó–ö–ê –í–°–ï–• –°–ï–ö–¶–ò–ô (–û–ë–ù–û–í–õ–ï–ù–ê –î–õ–Ø PR-3)
     */
    async loadAllSections() {
        console.log('üîÑ CommunityPage: –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const loadPromises = [
            this.loadLatestQuotes(3), // –¢–æ–ª—å–∫–æ 3 —Ü–∏—Ç–∞—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
            this.loadPopularFavorites('7d', 10), // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –¥–ª—è —Ç–æ–ø–∞ –Ω–µ–¥–µ–ª–∏
            this.loadPopularBooks('7d', 10), // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã –Ω–µ–¥–µ–ª–∏ –¥–ª—è "–¢–æ–ø –Ω–µ–¥–µ–ª–∏"
            this.loadRecentClicks(3), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∫–ª–∏–∫–∞ –¥–ª—è "–°–µ–π—á–∞—Å –∏–∑—É—á–∞—é—Ç"
            this.loadCommunityMessage(), // –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–Ω–Ω—ã
            this.loadCommunityTrend(), // –¢—Ä–µ–Ω–¥ –Ω–µ–¥–µ–ª–∏
            this.loadLeaderboard(10, '7d'), // –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –∑–∞ –Ω–µ–¥–µ–ª—é
            this.loadCommunityInsights('7d'), // –ò–Ω—Å–∞–π—Ç—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
            this.loadFunFact('7d') // –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –Ω–µ–¥–µ–ª–∏
        ];

        try {
            await Promise.allSettled(loadPromises);
            console.log('‚úÖ CommunityPage: –í—Å–µ —Å–µ–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            this.rerender();
        } catch (error) {
            console.error('‚ùå CommunityPage: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∫—Ü–∏–π:', error);
            this.rerender(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
        }
    }

    /**
     * üîÑ –ú–ï–¢–û–î–´ –ü–û–í–¢–û–†–ê –ó–ê–ì–†–£–ó–ö–ò –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö (PR-3)
     */
    retryLoadLatestQuotes() {
        this.triggerHapticFeedback('medium');
        this.loadLatestQuotes(5).then(() => this.rerender());
    }

    retryLoadPopularQuotes() {
        this.triggerHapticFeedback('medium');
        this.loadPopularQuotes('7d', 10).then(() => this.rerender());
    }

    retryLoadPopularFavorites() {
        this.triggerHapticFeedback('medium');
        this.loadPopularFavorites('7d', 10).then(() => this.rerender());
    }

    retryLoadPopularBooks() {
        this.triggerHapticFeedback('medium');
        this.loadPopularBooks('7d', 10).then(() => this.rerender());
    }

    retryLoadLeaderboard() {
        this.triggerHapticFeedback('medium');
        this.loadLeaderboard(10, '7d').then(() => this.rerender());
    }

    retryLoadRecentClicks() {
        this.triggerHapticFeedback('medium');
        this.loadRecentClicks(5).then(() => this.rerender());
    }

    /**
     * ‚ûï –î–û–ë–ê–í–ò–¢–¨ –¶–ò–¢–ê–¢–£ –í –î–ù–ï–í–ù–ò–ö (–ù–û–í–û–ï –î–õ–Ø PR-3)
     */
    async addQuoteToJournal(event) {
        event.preventDefault();
        event.stopPropagation();
        
        const button = event.target.closest('.quote-card__add-btn');
        if (!button) return;
        
        const quoteCard = button.closest('.quote-card');
        
        if (!quoteCard) return;
        
        try {
            // Haptic feedback
            this.triggerHapticFeedback('medium');
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∏–ª–∏ –∏–∑ DOM
            const quoteText = button.dataset.quoteText || quoteCard.querySelector('.quote-card__text')?.textContent?.replace(/"/g, '') || '';
            const quoteAuthor = button.dataset.quoteAuthor || quoteCard.querySelector('.quote-card__author')?.textContent?.replace('‚Äî ', '') || '';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loading —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            button.innerHTML = '<span class="loading-spinner-small"></span>';
            button.disabled = true;
            
            // üîß GLOBAL DUP CHECK
            const existingQuotes = this.state.get('quotes.items') || window.appState?.get('quotes.items') || [];
            if (window.QuoteUtils && window.QuoteUtils.isDuplicateQuote(existingQuotes, quoteText, quoteAuthor)) {
                this.showNotification('–≠—Ç–∞ —Ü–∏—Ç–∞—Ç–∞ —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º –¥–Ω–µ–≤–Ω–∏–∫–µ.', 'info');
                button.innerHTML = '<span class="add-icon">+</span>';
                button.disabled = false;
                this.triggerHapticFeedback('light');
                return;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É —á–µ—Ä–µ–∑ API
            const response = await this.api.addQuote({
                text: quoteText,
                author: quoteAuthor,
                source: 'community'
            });
            
            if (response && response.success) {
                // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ state –∏ –∏–Ω–¥–µ–∫—Å (—á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ª–æ–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É)
                try {
                    const raw = response.data?.quote || response.data || response.quote || response;
                    if (raw && raw.text) {
                        const normalizedQuote = {
                            ...raw,
                            id: raw.id || raw._id,
                            text: raw.text,
                            author: raw.author || '',
                            source: raw.source || 'community',
                            createdAt: raw.createdAt || new Date().toISOString()
                        };
                        // prepend
                        const currentQuotes = this.state.get('quotes.items') || [];
                        this.state.set('quotes.items', [normalizedQuote, ...currentQuotes]);
                        if (window.QuoteUtils) {
                            window.QuoteUtils.addQuoteToDuplicateIndex(normalizedQuote);
                        }
                        // —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                        document.dispatchEvent(new CustomEvent('quotes:changed', { detail: { type: 'added', quote: normalizedQuote } }));
                    }
                } catch (dupSyncErr) {
                    console.warn('Community dup sync skipped:', dupSyncErr);
                }
                
                // –£—Å–ø–µ—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–æ—á–∫—É
                button.innerHTML = '<span class="add-icon">‚úì</span>';
                button.classList.add('added');
                this.triggerHapticFeedback('success');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                this.showNotification('–¶–∏—Ç–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫!', 'success');
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    button.innerHTML = '<span class="add-icon">+</span>';
                    button.classList.remove('added');
                    button.disabled = false;
                }, 2000);
            } else {
                throw new Error(response?.message || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', error);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            button.innerHTML = '<span class="add-icon">+</span>';
            button.disabled = false;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            if (error && (error.status === 429 || 
                         error.response?.status === 429 ||
                         /limit|quota|exceed/i.test(error.message || '') || 
                         /limit|quota|exceed/i.test(error?.data?.message || '') ||
                         /limit|quota|exceed/i.test(error?.response?.data?.message || '') ||
                         /Daily limit of 10 quotes exceeded/i.test(error?.response?.data?.error || ''))) {
                this.showNotification('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–æ 10 —Ü–∏—Ç–∞—Ç –≤ —Å—É—Ç–∫–∏.', 'info');
            } else {
                this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã', 'error');
            }
            this.triggerHapticFeedback('error');
        }
    }

    /**
     * ‚ù§Ô∏è –î–û–ë–ê–í–ò–¢–¨ –¶–ò–¢–ê–¢–£ –í –ò–ó–ë–†–ê–ù–ù–û–ï (–° LIVE –°–ß–ï–¢–ß–ò–ö–û–ú –õ–ê–ô–ö–û–í)
     */
    async addQuoteToFavorites(event) {
        event.preventDefault();
        event.stopPropagation();
        
        const button = event.target.closest('.quote-card__heart-btn, .quote-card__fav-btn');
        if (!button) return;
        
        const quoteCard = button.closest('.quote-card');
        if (!quoteCard) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —Ü–∏—Ç–∞—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        if (button.classList.contains('favorited')) {
            return; // –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∏–ª–∏ –∏–∑ DOM
        const quoteText = button.dataset.quoteText || quoteCard.querySelector('.quote-card__text')?.textContent?.replace(/"/g, '') || '';
        const quoteAuthor = button.dataset.quoteAuthor || quoteCard.querySelector('.quote-card__author')?.textContent?.replace('‚Äî ', '') || '';
        
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ —Ç–∞–ø–∞
        const lockKey = `${quoteText.trim()}_${(quoteAuthor || '').trim()}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ —Ç–∞–ø–∞
        if (this._favoriteLocks.has(lockKey)) {
            console.log('üîí Duplicate tap prevented for:', lockKey);
            return;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        this._favoriteLocks.add(lockKey);
        
        // Declare variables outside try block to avoid scope issues
        let currentFavorites = 0;
        let newCount = 0;
        
        try {
            // Haptic feedback
            this.triggerHapticFeedback('medium');
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã: –µ—Å–ª–∏ —Ü–∏—Ç–∞—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏,
            // –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π
            const existingQuotes = this.state.get('quotes.items') || [];
            const existingQuote = existingQuotes.find(q => 
                q.text && quoteText && 
                q.text.trim().toLowerCase() === quoteText.trim().toLowerCase() &&
                (q.author || '').trim().toLowerCase() === (quoteAuthor || '').trim().toLowerCase()
            );
            
            if (existingQuote) {
                // –¶–∏—Ç–∞—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º isFavorite –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–∞
                if (existingQuote.isFavorite) {
                    this.showNotification('–≠—Ç–∞ —Ü–∏—Ç–∞—Ç–∞ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!', 'info');
                    this.triggerHapticFeedback('light');
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –ø–æ–∫–∞–∑–∞ —á—Ç–æ —Ü–∏—Ç–∞—Ç–∞ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
                    button.innerHTML = '‚ù§';
                    button.classList.add('favorited');
                    return;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É
                try {
                    const response = await this.api.request('PUT', `/quotes/${existingQuote.id}`, {
                        text: existingQuote.text,
                        author: existingQuote.author,
                        source: existingQuote.source,
                        isFavorite: true
                    });
                    
                    if (response && response.success) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                        const updatedQuotes = existingQuotes.map(q => 
                            q.id === existingQuote.id ? { ...q, isFavorite: true } : q
                        );
                        this.state.set('quotes.items', updatedQuotes);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º UI
                        button.innerHTML = '‚ù§';
                        button.classList.add('favorited');
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
                        const favoritesCountElement = quoteCard.querySelector('.favorites-count');
                        if (favoritesCountElement) {
                            const currentCount = parseInt(favoritesCountElement.textContent, 10) || 0;
                            favoritesCountElement.textContent = currentCount + 1;
                        }
                        
                        this.triggerHapticFeedback('success');
                        this.showNotification('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!', 'success');
                        
                        // Update spotlight cache item favorites so rerender does not revert
                        // Find item in this._spotlightCache.items by text+author and ++favorites  
                        if (this._spotlightCache.items && this._spotlightCache.items.length > 0) {
                            const spotlightItem = this._spotlightCache.items.find(item => 
                                item.text === quoteText && item.author === quoteAuthor
                            );
                            if (spotlightItem) {
                                spotlightItem.favorites = (spotlightItem.favorites || 0) + 1;
                                console.log('üåü Updated spotlight cache item favorites (existing quote):', spotlightItem.favorites);
                            }
                        }
                        
                        // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                        document.dispatchEvent(new CustomEvent('quotes:changed', { 
                            detail: { type: 'edited', quoteId: existingQuote.id, updates: { isFavorite: true } } 
                        }));
                        
                        return;
                    } else {
                        throw new Error(response?.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã');
                    }
                } catch (updateError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ü–∏—Ç–∞—Ç—ã:', updateError);
                    throw updateError;
                }
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤
            currentFavorites = parseInt(button.dataset.favorites, 10) || 0;
            const favoritesCountElement = quoteCard.querySelector('.favorites-count');
            
            // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI (–æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
            button.innerHTML = '‚ù§';
            button.classList.add('favorited');
            newCount = currentFavorites + 1;
            button.dataset.favorites = newCount;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ .favorites-count —Å–ø–∞–Ω–∞—Ö
            if (favoritesCountElement) {
                favoritesCountElement.textContent = newCount;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ API
            const response = await this.api.addQuote({
                text: quoteText,
                author: quoteAuthor,
                source: 'community',
                isFavorite: true
            });
            
            if (response && response.success) {
                try {
                    const raw = response.data?.quote || response.data || response.quote || response;
                    if (raw && raw.text) {
                        const favoriteQuote = {
                            ...raw,
                            id: raw.id || raw._id,
                            text: raw.text,
                            author: raw.author || '',
                            isFavorite: true,
                            source: raw.source || 'community',
                            createdAt: raw.createdAt || new Date().toISOString()
                        };
                        const currentQuotes = this.state.get('quotes.items') || [];
                        this.state.set('quotes.items', [favoriteQuote, ...currentQuotes]);
                        if (window.QuoteUtils) {
                            window.QuoteUtils.addQuoteToDuplicateIndex(favoriteQuote);
                        }
                        document.dispatchEvent(new CustomEvent('quotes:changed', { detail: { type: 'added', quote: favoriteQuote } }));
                    }
                } catch (e) {
                    console.warn('Favorite dup sync failed:', e);
                }
                
                // –£—Å–ø–µ—Ö
                this.triggerHapticFeedback('success');
                this.showNotification('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!', 'success');
                
                // Update spotlight cache item favorites so rerender does not revert
                // Find item in this._spotlightCache.items by text+author and ++favorites
                if (this._spotlightCache.items && this._spotlightCache.items.length > 0) {
                    const spotlightItem = this._spotlightCache.items.find(item => 
                        item.text === quoteText && item.author === quoteAuthor
                    );
                    if (spotlightItem) {
                        spotlightItem.favorites = (spotlightItem.favorites || 0) + 1;
                        console.log('üåü Updated spotlight cache item favorites:', spotlightItem.favorites);
                    }
                }
                
                // –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                if (response.data && typeof response.data.favorites === 'number') {
                    const apiCount = response.data.favorites;
                    button.dataset.favorites = apiCount;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ .favorites-count —Å–ø–∞–Ω–∞—Ö
                    if (favoritesCountElement) {
                        favoritesCountElement.textContent = apiCount;
                    }
                }
                
            } else {
                throw new Error(response?.message || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', error);
            
            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è UI –ø—Ä–∏ –æ—à–∏–±–∫–µ
            button.innerHTML = '‚ô°';
            button.classList.remove('favorited');
            button.dataset.favorites = currentFavorites;
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ .favorites-count —Å–ø–∞–Ω–∞—Ö
            const favoritesCountElement = quoteCard.querySelector('.favorites-count');
            if (favoritesCountElement) {
                favoritesCountElement.textContent = currentFavorites;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            if (error && (error.status === 429 || /limit|quota|exceed/i.test(error.message || '') || /limit|quota/i.test(error?.data?.message || ''))) {
                this.showNotification('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–æ 10 —Ü–∏—Ç–∞—Ç –≤ —Å—É—Ç–∫–∏.', 'info');
            } else {
                this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', 'error');
            }
            this.triggerHapticFeedback('error');
        } finally {
            // –í—Å–µ–≥–¥–∞ —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            setTimeout(() => {
                this._favoriteLocks.delete(lockKey);
            }, 1000);
        }
    }

    /**
     * üéØ –ò–ó–£–ß–ò–¢–¨ –¢–†–ï–ù–î (–ù–û–í–û–ï –î–õ–Ø PR-3)
     */
    exploreTrend(event) {
        event.preventDefault();
        this.triggerHapticFeedback('medium');
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∏–∑—É—á–µ–Ω–∏—é —Ç—Ä–µ–Ω–¥–∞
        console.log('üéØ –ò–∑—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –Ω–µ–¥–µ–ª–∏');
        this.showNotification('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
    }

    /**
     * üîî –ü–û–ö–ê–ó–ê–¢–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï
     */
    showNotification(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `notification notification--${type}`;
        notification.textContent = message;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.body.appendChild(notification);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º
        setTimeout(() => notification.classList.add('show'), 100);
        
        // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }

    /**
     * üïí –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –í–†–ï–ú–ï–ù–ò –ö–õ–ò–ö–ê
     */
    formatClickTime(clickTime) {
        if (!clickTime) return '–Ω–µ–¥–∞–≤–Ω–æ';
        
        try {
            const now = new Date();
            const clickDate = new Date(clickTime);
            const diffMs = now - clickDate;
            const diffMins = Math.floor(diffMs / (1000 * 60));
            const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
            const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
            
            if (diffMins < 60) {
                return `${diffMins} –º–∏–Ω –Ω–∞–∑–∞–¥`;
            } else if (diffHours < 24) {
                return `${diffHours} —á –Ω–∞–∑–∞–¥`;
            } else if (diffDays < 7) {
                return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
            } else {
                return clickDate.toLocaleDateString('ru-RU');
            }
        } catch {
            return '–Ω–µ–¥–∞–≤–Ω–æ';
        }
    }

    /**
     * üìÖ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–ê–¢–´
     */
    formatDate(date) {
        if (!date) return '';
        
        try {
            const dateObj = new Date(date);
            const now = new Date();
            const diffMs = now - dateObj;
            const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
            
            if (diffDays === 0) {
                return '—Å–µ–≥–æ–¥–Ω—è';
            } else if (diffDays === 1) {
                return '–≤—á–µ—Ä–∞';
            } else if (diffDays < 7) {
                return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
            } else {
                return dateObj.toLocaleDateString('ru-RU');
            }
        } catch {
            return '';
        }
    }
    
    onHide() {
        console.log('üë• CommunityPage: onHide');
        // Cleanup event listeners
        if (this._quoteChangeHandler) {
            document.removeEventListener('quotes:changed', this._quoteChangeHandler);
        }
    }

    rerender() {
        const container = document.getElementById('page-content');
        if (container) {
            container.innerHTML = this.render();
            this.attachEventListeners();
            
            // ‚úÖ –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ CSS –∫–ª–∞—Å—Å—ã
            this.triggerContentAnimations();
        }
    }
    
    /**
     * üé¨ –ü–õ–ê–í–ù–´–ï –ê–ù–ò–ú–ê–¶–ò–ò –ü–û–Ø–í–õ–ï–ù–ò–Ø –ß–ï–†–ï–ó CSS –ö–õ–ê–°–°–´
     */
    triggerContentAnimations() {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
        const contentContainer = document.querySelector('.content');
        if (!contentContainer) return;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π
        setTimeout(() => {
            contentContainer.classList.add('animate-content');
        }, 50); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
        setTimeout(() => {
            contentContainer.classList.remove('animate-content');
        }, 1000);
    }

    /**
     * üßπ –û–ß–ò–°–¢–ö–ê –†–ï–°–£–†–°–û–í
     */
    destroy() {
        console.log('üßπ CommunityPage: –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤');
        // Remove event listeners
        if (this._quoteChangeHandler) {
            document.removeEventListener('quotes:changed', this._quoteChangeHandler);
            this._quoteChangeHandler = null;
        }

        // ‚úÖ –ù–û–í–û–ï: –°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤
        this.communityLoaded = false;
        this.communityLoading = false;

        // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏
        Object.keys(this.loadingStates).forEach(key => {
            this.loadingStates[key] = false;
        });

        // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ—à–∏–±–æ–∫
        Object.keys(this.errorStates).forEach(key => {
            this.errorStates[key] = null;
        });
    }
}

// üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.CommunityPage = CommunityPage;

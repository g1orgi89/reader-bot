/**
 * üèÜ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø - AchievementsPage.js
 * 
 * –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –Ω–∞–≥—Ä–∞–¥
 * - –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 * - –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –∏ State Management
 * - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—É
 */

class AchievementsPage {
    constructor(app) {
        this.app = app;
        this.api = app.api;
        this.state = app.state;
        this.telegram = app.telegram;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        this.loading = false;
        this.error = null;
        this.achievements = [];
        this.progress = {};
        
        // –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.subscriptions = [];
        
        this.init();
    }
    
    /**
     * üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    init() {
        this.setupSubscriptions();
        this.loadAchievementsData();
    }
    
    /**
     * üì° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setupSubscriptions() {
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        const achievementsSubscription = this.state.subscribe('achievements', (achievements) => {
            this.achievements = achievements.items || [];
            this.progress = achievements.progress || {};
            this.updateAchievementsUI();
        });
        
        this.subscriptions.push(achievementsSubscription);
    }
    
    /**
     * üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    async loadAchievementsData() {
        if (this.loading) return;
        
        try {
            this.loading = true;
            
            // Get userId with fallback methods
            let userId = null;
            if (this.state && typeof this.state.getCurrentUserId === 'function') {
                userId = this.state.getCurrentUserId();
            } else if (this.state && this.state.get) {
                userId = this.state.get('user.profile.id') || this.state.get('user.telegramData.id');
            }
            
            if (!userId || userId === 'demo-user') {
                // Use fallback data
                this.achievements = this.getFallbackAchievements();
                this.progress = this.getFallbackProgress();
                return;
            }
            
            // Load from API (if available)
            try {
                const achievementsData = await this.api.getAchievements(userId);
                if (achievementsData) {
                    this.achievements = achievementsData.items || [];
                    this.progress = achievementsData.progress || {};
                    this.state.set('achievements', {
                        items: this.achievements,
                        progress: this.progress
                    });
                }
            } catch (apiError) {
                console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
                this.achievements = this.getFallbackAchievements();
                this.progress = this.getFallbackProgress();
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
            this.error = error.message;
        } finally {
            this.loading = false;
        }
    }
    
    /**
     * üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —Ä–∞–∑–º–µ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    render() {
        return `
            <div class="content">
                ${this.renderHeader()}
                ${this.renderProgressSection()}
                ${this.renderAchievementsList()}
                ${this.renderError()}
            </div>
        `;
    }
    
    /**
     * üìã –†–µ–Ω–¥–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    renderHeader() {
        const unlockedCount = this.achievements.filter(a => a.unlocked).length;
        const totalCount = this.achievements.length;
        
        return `
            <div class="page-header">
                <h1>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h1>
                <p>–í–∞—à–∏ –Ω–∞–≥—Ä–∞–¥—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å (${unlockedCount}/${totalCount})</p>
            </div>
        `;
    }
    
    /**
     * üìà –†–µ–Ω–¥–µ—Ä —Å–µ–∫—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    renderProgressSection() {
        return `
            <div class="progress-section">
                <h3>üìà –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</h3>
                <div class="progress-cards">
                    ${this.renderProgressCard('quotes', '–¶–∏—Ç–∞—Ç—ã', 'üìö', this.progress.quotes)}
                    ${this.renderProgressCard('streak', '–°–µ—Ä–∏–∏', 'üî•', this.progress.streak)}
                    ${this.renderProgressCard('exploration', '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', 'üåü', this.progress.exploration)}
                </div>
            </div>
        `;
    }
    
    /**
     * üìä –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    renderProgressCard(type, title, emoji, data) {
        const current = data?.current || 0;
        const target = data?.target || 100;
        const percentage = Math.min((current / target) * 100, 100);
        
        return `
            <div class="progress-card">
                <div class="progress-header">
                    <span class="progress-emoji">${emoji}</span>
                    <span class="progress-title">${title}</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${percentage}%"></div>
                </div>
                <div class="progress-text">${current}/${target}</div>
            </div>
        `;
    }
    
    /**
     * üèÜ –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    renderAchievementsList() {
        const unlockedAchievements = this.achievements.filter(a => a.unlocked);
        const lockedAchievements = this.achievements.filter(a => !a.unlocked);
        
        return `
            <div class="achievements-section">
                <h3>üèÜ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</h3>
                <div class="achievements-grid">
                    ${unlockedAchievements.map(achievement => this.renderAchievementItem(achievement, true)).join('')}
                </div>
                
                <h3>üîí –ï—â–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø–æ–ª—É—á–∏—Ç—å</h3>
                <div class="achievements-grid">
                    ${lockedAchievements.map(achievement => this.renderAchievementItem(achievement, false)).join('')}
                </div>
            </div>
        `;
    }
    
    /**
     * üéñÔ∏è –†–µ–Ω–¥–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    renderAchievementItem(achievement, unlocked) {
        const lockClass = unlocked ? '' : 'locked';
        const emoji = unlocked ? achievement.emoji : 'üîí';
        
        return `
            <div class="achievement-item ${lockClass}" data-achievement-id="${achievement.id}">
                <div class="achievement-emoji">${emoji}</div>
                <div class="achievement-info">
                    <h4 class="achievement-title">${achievement.title}</h4>
                    <p class="achievement-description">${achievement.description}</p>
                    ${achievement.unlockedAt ? `<small class="achievement-date">–ü–æ–ª—É—á–µ–Ω–æ: ${new Date(achievement.unlockedAt).toLocaleDateString()}</small>` : ''}
                </div>
                ${achievement.rarity ? `<div class="achievement-rarity ${achievement.rarity}">${this.getRarityText(achievement.rarity)}</div>` : ''}
            </div>
        `;
    }
    
    /**
     * ‚ö†Ô∏è –†–µ–Ω–¥–µ—Ä –æ—à–∏–±–∫–∏
     */
    renderError() {
        if (!this.error) return '';
        
        return `
            <div class="error-message" id="errorMessage">
                <span>‚ö†Ô∏è ${this.error}</span>
                <button onclick="this.parentElement.style.display='none'">‚úï</button>
            </div>
        `;
    }
    
    /**
     * üì± –ù–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        // –ö–ª–∏–∫–∏ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π
        const achievementItems = document.querySelectorAll('.achievement-item');
        achievementItems.forEach(item => {
            item.addEventListener('click', () => {
                const achievementId = item.dataset.achievementId;
                this.handleAchievementClick(achievementId);
            });
        });
    }
    
    /**
     * üéñÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é
     */
    handleAchievementClick(achievementId) {
        // Haptic feedback
        if (this.telegram?.hapticFeedback) {
            this.telegram.hapticFeedback('light');
        }
        
        const achievement = this.achievements.find(a => a.id === achievementId);
        if (achievement) {
            this.showAchievementDetails(achievement);
        }
    }
    
    /**
     * üìñ –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    showAchievementDetails(achievement) {
        const details = `
${achievement.emoji} ${achievement.title}

${achievement.description}

${achievement.unlocked ? 
    `‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: ${new Date(achievement.unlockedAt).toLocaleDateString()}` : 
    `üîí –ï—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ`}

${achievement.hint ? `üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: ${achievement.hint}` : ''}
        `.trim();
        
        if (this.telegram?.showAlert) {
            this.telegram.showAlert(details);
        } else {
            alert(details);
        }
    }
    
    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    updateAchievementsUI() {
        // Update header counts
        const headerP = document.querySelector('.page-header p');
        if (headerP) {
            const unlockedCount = this.achievements.filter(a => a.unlocked).length;
            const totalCount = this.achievements.length;
            headerP.textContent = `–í–∞—à–∏ –Ω–∞–≥—Ä–∞–¥—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å (${unlockedCount}/${totalCount})`;
        }
    }
    
    /**
     * üéØ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏
     */
    getRarityText(rarity) {
        const rarityMap = {
            common: '–û–±—ã—á–Ω–æ–µ',
            rare: '–†–µ–¥–∫–æ–µ',
            epic: '–≠–ø–∏—á–µ—Å–∫–æ–µ',
            legendary: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ'
        };
        return rarityMap[rarity] || '';
    }
    
    /**
     * üìö –ü–æ–ª—É—á–∏—Ç—å fallback –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    getFallbackAchievements() {
        return [
            {
                id: 'first_quote',
                title: '–ü–µ—Ä–≤–∞—è —Ü–∏—Ç–∞—Ç–∞',
                description: '–î–æ–±–∞–≤–∏–ª–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É –≤ –¥–Ω–µ–≤–Ω–∏–∫',
                emoji: 'üìù',
                unlocked: true,
                unlockedAt: new Date().toISOString(),
                rarity: 'common'
            },
            {
                id: 'week_streak',
                title: '–ù–µ–¥–µ–ª—å–Ω–∞—è —Å–µ—Ä–∏—è',
                description: '–î–æ–±–∞–≤–ª—è–ª–∏ —Ü–∏—Ç–∞—Ç—ã 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
                emoji: 'üî•',
                unlocked: true,
                unlockedAt: new Date().toISOString(),
                rarity: 'rare'
            },
            {
                id: 'book_explorer',
                title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –∫–Ω–∏–≥',
                description: '–ò–∑—É—á–∏–ª–∏ 10 —Ä–∞–∑–Ω—ã—Ö –∫–Ω–∏–≥ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞',
                emoji: 'üìö',
                unlocked: false,
                rarity: 'epic',
                hint: '–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∫–Ω–∏–≥–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ'
            },
            {
                id: 'wisdom_keeper',
                title: '–•—Ä–∞–Ω–∏—Ç–µ–ª—å –º—É–¥—Ä–æ—Å—Ç–∏',
                description: '–°–æ–±—Ä–∞–ª–∏ 100 —Ü–∏—Ç–∞—Ç –≤ –¥–Ω–µ–≤–Ω–∏–∫',
                emoji: 'üß†',
                unlocked: false,
                rarity: 'legendary',
                hint: '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ü–∏—Ç–∞—Ç—ã'
            }
        ];
    }
    
    /**
     * üìà –ü–æ–ª—É—á–∏—Ç—å fallback –ø—Ä–æ–≥—Ä–µ—Å—Å
     */
    getFallbackProgress() {
        return {
            quotes: { current: 47, target: 100 },
            streak: { current: 12, target: 30 },
            exploration: { current: 3, target: 10 }
        };
    }
    
    /**
     * üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
     */
    destroy() {
        // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        this.subscriptions.forEach(unsubscribe => {
            if (typeof unsubscribe === 'function') {
                unsubscribe();
            }
        });
        this.subscriptions = [];
        
        // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        this.loading = false;
        this.error = null;
        this.achievements = [];
        this.progress = {};
    }
    
    /**
     * üì± Lifecycle –º–µ—Ç–æ–¥—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–æ—É—Ç–µ—Ä–æ–º
     */
    
    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    onShow() {
        console.log('üèÜ AchievementsPage: onShow');
        // Refresh data if needed
        if (this.achievements.length === 0) {
            this.loadAchievementsData();
        }
    }
    
    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    onHide() {
        console.log('üèÜ AchievementsPage: onHide');
    }
}

// üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.AchievementsPage = AchievementsPage;
/**
 * üìñ –î–ù–ï–í–ù–ò–ö –¶–ò–¢–ê–¢ - DiaryPage.js (üîß –ò–°–ü–†–ê–í–õ–ï–ù–´ API –í–´–ó–û–í–´)
 * 
 * ‚úÖ –ü–û–õ–ù–û–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –ö–û–ù–¶–ï–ü–¢–ê–ú:
 * - HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑ "–∫–æ–Ω—Ü–µ–ø—Ç 5 —Å—Ç—Ä–∞–Ω–∏—Ü app.txt"
 * - CSS –∫–ª–∞—Å—Å—ã –∏–∑ –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤
 * - –ü–æ–∏—Å–∫ –∏–∑ "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ü–µ–ø—Ç —Å—Ç—Ä–∞–Ω–∏—Ü app.txt"
 * - –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–∞–∫ –≤ –∫–æ–Ω—Ü–µ–ø—Ç–µ
 * 
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–ï–ó –®–ê–ü–ö–ò –°–í–ï–†–•–£ - –ß–ò–°–¢–´–ô –î–ò–ó–ê–ô–ù!
 * üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è API –≤—ã–∑–æ–≤—ã - –Ω–µ—Ç "–º–æ—Ä–≥–∞–Ω–∏—è" –∞–Ω–∞–ª–∏–∑–∞
 */

class DiaryPage {
    constructor(app) {
        this.app = app;
        this.api = app.api;
        this.state = app.state;
        this.telegram = app.telegram;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –∫–æ–Ω—Ü–µ–ø—Ç–µ)
        this.activeTab = 'add'; // add, my-quotes, search
        this.currentFilter = 'all'; // all, favorites, this-week, by-author
        this.searchQuery = '';
        this.searchFilters = ['all', 'favorites', 'this-week', 'month', 'classics'];
        this.activeSearchFilter = 'all';
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
        this.formData = {
            text: '',
            author: '',
            source: ''
        };
        
        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏ –¥–∞–Ω–Ω—ã–µ
        this.currentPage = 1;
        this.itemsPerPage = 20;
        this.hasMore = true;
        this.subscriptions = [];
        
        // ‚úÖ –ù–û–í–û–ï: –§–ª–∞–≥–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–≥—Ä—É–∑–æ–∫
        this.quotesLoaded = false;
        this.quotesLoading = false;
        this.statsLoaded = false;
        this.statsLoading = false;
        
        // ‚úÖ –ù–û–í–û–ï: Debug —Ä–µ–∂–∏–º (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å API)
        this.debug = this.api?.debug || false;
        
        // Removed global quote delegation flag
        
        this.init();
    }
    
    init() {
        this.setupSubscriptions();
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–∏—Ç–∞—Ç
        this._onQuoteEdit = this._onQuoteEdit.bind(this);
        document.addEventListener('quotes:edit', this._onQuoteEdit, false);
        
        // Removed global quote click delegation - using container-level delegation instead
    }

    /**
     * üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ userId –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–æ–Ω–∫–∏ —É—Å–ª–æ–≤–∏–π
     * @param {number} timeout - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     * @returns {Promise<string>} - –í–∞–ª–∏–¥–Ω—ã–π userId
     */
    async waitForValidUserId(timeout = 10000) {
        const startTime = Date.now();
        
        while (Date.now() - startTime < timeout) {
            const userId = this.state.getCurrentUserId();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ userId –≤–∞–ª–∏–¥–Ω—ã–π –∏ –Ω–µ —Ä–∞–≤–µ–Ω demo-user
            if (userId && userId !== 'demo-user' && typeof userId === 'number') {
                console.log('‚úÖ DiaryPage: –ü–æ–ª—É—á–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π userId:', userId);
                return userId;
            }
            
            // –¢–∞–∫–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º demo-user —Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ
            if (userId === 'demo-user' && this.state.get('debugMode')) {
                console.log('üß™ DiaryPage: –ò—Å–ø–æ–ª—å–∑—É–µ–º demo-user –≤ debug —Ä–µ–∂–∏–º–µ');
                return userId;
            }
            
            // –ñ–¥–µ–º 100ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        throw new Error('Timeout: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π userId');
    }
    
    setupSubscriptions() {
        const quotesSubscription = this.state.subscribe('quotes', (quotes) => {
            this.updateQuotesUI(quotes);
        });
        
        const statsSubscription = this.state.subscribe('stats', (stats) => {
            this.updateStatsUI(stats);
        });
        
        this.subscriptions.push(quotesSubscription, statsSubscription);
    }
    
    async loadInitialData() {
        console.log('üìñ DiaryPage: loadInitialData –Ω–∞—á–∞—Ç–∞');
        
        try {
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ñ–¥–µ–º –≤–∞–ª–∏–¥–Ω—ã–π userId –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
            const userId = await this.waitForValidUserId();
            console.log('üìñ DiaryPage: –ò—Å–ø–æ–ª—å–∑—É–µ–º userId:', userId);
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
            if (!this.quotesLoaded && !this.quotesLoading) {
                await this.loadQuotes(false, userId);
            }
            
            if (!this.statsLoaded && !this.statsLoading) {
                await this.loadStats(userId);
            }
            
            console.log('‚úÖ DiaryPage: –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–Ω–µ–≤–Ω–∏–∫–∞:', error);
        }
    }
    
    async loadQuotes(reset = false, userId = null) {
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –≤—ã–∑–æ–≤—ã
        if (this.quotesLoading) {
            console.log('üîÑ DiaryPage: –¶–∏—Ç–∞—Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }
        
        try {
            this.quotesLoading = true;
            console.log('üìö DiaryPage: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–∏—Ç–∞—Ç—ã');
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ñ–¥–µ–º –≤–∞–ª–∏–¥–Ω—ã–π userId –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            if (!userId) {
                userId = await this.waitForValidUserId();
            }
            console.log('üìö DiaryPage: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–∏—Ç–∞—Ç—ã –¥–ª—è userId:', userId);
            
            if (reset) {
                this.currentPage = 1;
                this.hasMore = true;
            }
            
            const params = {
                page: this.currentPage,
                limit: this.itemsPerPage,
                sort: 'createdAt',
                order: 'desc'
            };
            
            if (this.currentFilter === 'favorites') {
                params.favorites = true;
            } else if (this.currentFilter === 'this-week') {
                const weekAgo = new Date();
                weekAgo.setDate(weekAgo.getDate() - 7);
                params.dateFrom = weekAgo.toISOString();
            }
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º userId –≤ API –≤—ã–∑–æ–≤
            const response = await this.api.getQuotes(params, userId);
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ü–∏—Ç–∞—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
            const quotes = response.data?.quotes || response.quotes || response.items || response || [];
            
            if (reset || this.currentPage === 1) {
                this.state.set('quotes.items', quotes);
            } else {
                const existingQuotes = this.state.get('quotes.items') || [];
                this.state.set('quotes.items', [...existingQuotes, ...quotes]);
            }
            
            this.state.update('quotes', {
                total: response.total || quotes.length,
                loading: false,
                lastUpdate: Date.now() // ‚úÖ –ù–û–í–û–ï: –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            });
            
            this.hasMore = quotes.length === this.itemsPerPage;
            this.quotesLoaded = true; // ‚úÖ –ù–û–í–û–ï: –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç:', error);
            this.state.set('quotes.loading', false);
        } finally {
            this.quotesLoading = false; // ‚úÖ –ù–û–í–û–ï: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        }
    }
    
    async loadStats(userId = null) {
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –≤—ã–∑–æ–≤—ã
        if (this.statsLoading) {
            console.log('üîÑ DiaryPage: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }
        
        try {
            this.statsLoading = true;
            console.log('üìä DiaryPage: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ñ–¥–µ–º –≤–∞–ª–∏–¥–Ω—ã–π userId –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            if (!userId) {
                userId = await this.waitForValidUserId();
            }
            console.log('üìä DiaryPage: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è userId:', userId);
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º userId –≤ API –≤—ã–∑–æ–≤
            const stats = await this.api.getStats(userId);
            this.state.set('stats', stats);
            this.state.set('stats.lastUpdate', Date.now()); // ‚úÖ –ù–û–í–û–ï: –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this.statsLoaded = true; // ‚úÖ –ù–û–í–û–ï: –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        } finally {
            this.statsLoading = false; // ‚úÖ –ù–û–í–û–ï: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        }
    }
    
    /**
     * üé® –†–ï–ù–î–ï–† –°–¢–†–ê–ù–ò–¶–´ (–¢–û–ß–ù–û –ü–û –ö–û–ù–¶–ï–ü–¢–£!) - –ë–ï–ó –®–ê–ü–ö–ò!
     */
    render() {
        return `
            <div class="content">
                ${this.renderTabs()}
                ${this.renderTabContent()}
            </div>
        `;
    }
    
    /**
     * üìë –¢–ê–ë–´ (–¢–û–ß–ù–û –ò–ó –ö–û–ù–¶–ï–ü–¢–ê)
     */
    renderTabs() {
        return `
            <div class="tabs">
                <button class="tab ${this.activeTab === 'add' ? 'active' : ''}" data-tab="add">‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å</button>
                <button class="tab ${this.activeTab === 'my-quotes' ? 'active' : ''}" data-tab="my-quotes">üìö –ú–æ–∏ —Ü–∏—Ç–∞—Ç—ã</button>
                <button class="tab ${this.activeTab === 'search' ? 'active' : ''}" data-tab="search">üîç –ü–æ–∏—Å–∫</button>
            </div>
        `;
    }
    
    renderTabContent() {
        switch (this.activeTab) {
            case 'add':
                return this.renderAddTab();
            case 'my-quotes':
                return this.renderMyQuotesTab();
            case 'search':
                return this.renderSearchTab();
            default:
                return this.renderAddTab();
        }
    }
    
    /**
     * ‚úçÔ∏è –¢–ê–ë –î–û–ë–ê–í–õ–ï–ù–ò–Ø (–¢–û–ß–ù–û –ò–ó –ö–û–ù–¶–ï–ü–¢–ê!)
     */
    renderAddTab() {
        return `
            <div class="form-section">
                <div class="form-group">
                    <label class="form-label">üí≠ –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã</label>
                    <textarea class="form-textarea" 
                              id="quoteText" 
                              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ç–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–∞...">${this.formData.text}</textarea>
                </div>
                
                <div class="form-group">
                    <label class="form-label">‚úçÔ∏è –ê–≤—Ç–æ—Ä</label>
                    <input class="form-input" 
                           id="quoteAuthor" 
                           placeholder="–ö—Ç–æ –∞–≤—Ç–æ—Ä —ç—Ç–∏—Ö —Å–ª–æ–≤?"
                           value="${this.formData.author}">
                </div>
                
                <button class="save-btn" id="saveQuoteBtn" ${this.isFormValid() ? '' : 'disabled'}>
                    üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫
                </button>
            </div>
            
            ${this.renderAIInsight()}
            ${this.renderStatsInfo()}
        `;
    }
    
    /**
     * ‚ú® AI –ê–ù–ê–õ–ò–ó –û–¢ –ê–ù–ù–´ (–¢–û–ß–ù–û –ò–ó –ö–û–ù–¶–ï–ü–¢–ê!) - üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
     */
    renderAIInsight() {
    if (this.statsLoading) {
        return `
            <div class="ai-insight">
                <div class="ai-title">
                    <span>‚ú®</span>
                    <span>–ê–Ω–∞–ª–∏–∑ –æ—Ç –ê–Ω–Ω—ã</span>
                </div>
                <div class="ai-text">‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ —Ü–∏—Ç–∞—Ç—ã...</div>
            </div>
        `;
    }
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º AI –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ç–∞—Ç—ã
    const lastQuote = this.state.get('lastAddedQuote');
    
    if (lastQuote && lastQuote.aiAnalysis && lastQuote.aiAnalysis.summary) {
        return `
            <div class="ai-insight">
                <div class="ai-title">
                    <span>‚ú®</span>
                    <span>–ê–Ω–∞–ª–∏–∑ –æ—Ç –ê–Ω–Ω—ã</span>
                </div>
                <div class="ai-text">${lastQuote.aiAnalysis.summary}</div>
            </div>
        `;
    }
    
    // Fallback —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç AI –∞–Ω–∞–ª–∏–∑–∞
    return `
        <div class="ai-insight">
            <div class="ai-title">
                <span>‚ú®</span>
                <span>–ê–Ω–∞–ª–∏–∑ –æ—Ç –ê–Ω–Ω—ã</span>
            </div>
            <div class="ai-text">–î–æ–±–∞–≤—å—Ç–µ —Ü–∏—Ç–∞—Ç—É, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è!</div>
        </div>
    `;
}
    
    /**
     * üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–¢–û–ß–ù–û –ò–ó –ö–û–ù–¶–ï–ü–¢–ê!)
     */
    renderStatsInfo() {
        const stats = this.state.get('stats') || {};
        const totalQuotes = stats.totalQuotes || 47; // –ö–∞–∫ –≤ –∫–æ–Ω—Ü–µ–ø—Ç–µ
        const activityPercent = Math.min(Math.round(totalQuotes * 2.5), 78); // –ö–∞–∫ –≤ –∫–æ–Ω—Ü–µ–ø—Ç–µ
        
        return `
            <div class="stats-summary">
                üìä –£ –≤–∞—Å —É–∂–µ ${totalQuotes} —Ü–∏—Ç–∞—Ç ‚Ä¢ –í—ã –∞–∫—Ç–∏–≤–Ω–µ–µ ${activityPercent}% —á–∏—Ç–∞—Ç–µ–ª–µ–π —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
            </div>
        `;
    }
    
    /**
     * üìö –¢–ê–ë –ú–û–ò –¶–ò–¢–ê–¢–´ (–¢–û–ß–ù–û –ò–ó –ö–û–ù–¶–ï–ü–¢–ê!)
     */
    renderMyQuotesTab() {
        const quotes = this.state.get('quotes.items') || [];
        const loading = this.state.get('quotes.loading');
        
        return `
            <div class="my-quotes-container">
                ${this.renderFilters()}
                ${this.renderQuotesStats()}
                ${this.renderQuotesList(quotes, loading)}
            </div>
        `;
    }
    
    /**
     * üîß –§–ò–õ–¨–¢–†–´ (–¢–û–ß–ù–û –ò–ó –ö–û–ù–¶–ï–ü–¢–ê!)
     */
    renderFilters() {
        return `
            <div class="filter-tabs">
                <button class="filter-tab ${this.currentFilter === 'all' ? 'active' : ''}" data-filter="all">–í—Å–µ</button>
                <button class="filter-tab ${this.currentFilter === 'favorites' ? 'active' : ''}" data-filter="favorites">–ò–∑–±—Ä–∞–Ω–Ω—ã–µ</button>
                <button class="filter-tab ${this.currentFilter === 'this-week' ? 'active' : ''}" data-filter="this-week">–≠—Ç–∞ –Ω–µ–¥–µ–ª—è</button>
                <button class="filter-tab ${this.currentFilter === 'by-author' ? 'active' : ''}" data-filter="by-author">–ü–æ –∞–≤—Ç–æ—Ä—É</button>
            </div>
        `;
    }
    
    /**
     * üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¶–ò–¢–ê–¢ (–¢–û–ß–ù–û –ò–ó –ö–û–ù–¶–ï–ü–¢–ê!)
     */
    renderQuotesStats() {
        const stats = this.state.get('stats') || {};
        
        return `
            <div class="stats-summary">
                üìä –í—Å–µ–≥–æ: ${stats.totalQuotes || 47} —Ü–∏—Ç–∞—Ç ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: ${stats.thisWeek || 7} ‚Ä¢ –õ—é–±–∏–º—ã–π –∞–≤—Ç–æ—Ä: –≠. –§—Ä–æ–º–º
            </div>
        `;
    }
    
    /**
     * üìã –°–ü–ò–°–û–ö –¶–ò–¢–ê–¢ (–¢–û–ß–ù–û –ò–ó –ö–û–ù–¶–ï–ü–¢–ê!)
     */
    renderQuotesList(quotes, loading) {
        if (loading && quotes.length === 0) {
            return `<div class="loading-state">‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ —Ü–∏—Ç–∞—Ç—ã...</div>`;
        }
        
        if (quotes.length === 0) {
            return this.renderEmptyQuotes();
        }
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const displayQuotes = quotes;
        
        return displayQuotes.map(quote => this.renderQuoteItem(quote)).join('');
    }
    
    /**
     * üìù –ö–ê–†–¢–û–ß–ö–ê –¶–ò–¢–ê–¢–´ (–û–ë–ù–û–í–õ–ï–ù–û: —Å kebab –º–µ–Ω—é –∏ –Ω–æ–≤—ã–º–∏ —Å—Ç–∏–ª—è–º–∏!)
     */
    renderQuoteItem(quote) {
        const isFavorite = quote.isFavorite || false;
        const author = quote.author ? `‚Äî ${quote.author}` : '';
        const heartIcon = isFavorite ? '‚ù§Ô∏è' : 'ü§ç';
        
        return `
            <div class="quote-card my-quotes" data-id="${quote._id || quote.id}" data-quote-id="${quote._id || quote.id}">
                <button class="quote-kebab" aria-label="menu" title="–î–µ–π—Å—Ç–≤–∏—è">‚Ä¶</button>
                <div class="quote-text">${quote.text}</div>
                ${author ? `<div class="quote-author">${author}</div>` : ''}
                <div class="quote-actions-inline">
                    <button class="action-btn" data-action="edit" aria-label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—É" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button class="action-btn" data-action="favorite" aria-label="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" title="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ">${heartIcon}</button>
                    <button class="action-btn action-delete" data-action="delete" aria-label="–£–¥–∞–ª–∏—Ç—å —Ü–∏—Ç–∞—Ç—É" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                </div>
            </div>
        `;
    }
    
    /**
     * üîç –¢–ê–ë –ü–û–ò–°–ö–ê (–ò–ó –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ì–û –ö–û–ù–¶–ï–ü–¢–ê!)
     */
    renderSearchTab() {
        return `
            <div class="search-section">
                <input class="search-input" 
                       id="searchInput"
                       placeholder="–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É, –∞–≤—Ç–æ—Ä—É –∏–ª–∏ —Ç–µ–º–µ..." 
                       value="${this.searchQuery}">
                <div class="search-filters">
                    ${this.searchFilters.map(filter => `
                        <button class="search-filter ${this.activeSearchFilter === filter ? 'active' : ''}" 
                                data-search-filter="${filter}">
                            ${this.getFilterLabel(filter)}
                        </button>
                    `).join('')}
                </div>
            </div>
            
            ${this.renderSearchStats()}
            ${this.renderSearchResults()}
        `;
    }
    
    /**
     * üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–ò–°–ö–ê (–ò–ó –ö–û–ù–¶–ï–ü–¢–ê!) - –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    renderSearchStats() {
        const searchResults = this.state.get('searchResults') || [];
        const searchResultsCount = searchResults.length;
        const totalQuotes = this.state.get('stats.totalQuotes') || 0;
        
        return `
            <div class="search-stats">
                ${this.searchQuery ? 
                    `üîç –ù–∞–π–¥–µ–Ω–æ ${searchResultsCount} ${this.getQuoteWord(searchResultsCount)} –ø–æ –∑–∞–ø—Ä–æ—Å—É "${this.searchQuery}" ‚Ä¢ –í—Å–µ–≥–æ —É –≤–∞—Å: ${totalQuotes} ${this.getQuoteWord(totalQuotes)}` :
                    'üîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤–∞—à–∏–º —Ü–∏—Ç–∞—Ç–∞–º'
                }
            </div>
        `;
    }
    
    /**
     * üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê (–ò–ó –ö–û–ù–¶–ï–ü–¢–ê!) - –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    renderSearchResults() {
        if (!this.searchQuery) {
            return `
                <div class="search-tips">
                    <strong>üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–∏—Å–∫—É:</strong><br>
                    ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ü–∏—Ç–∞—Ç<br>
                    ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–∫–∞—Ç—å –ø–æ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞<br>
                    ‚Ä¢ –§–∏–ª—å—Ç—Ä—ã –ø–æ–º–æ–≥–∞—é—Ç —É—Ç–æ—á–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                </div>
            `;
        }
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–∑ state
        const searchResults = this.state.get('searchResults') || [];
        
        if (searchResults.length === 0) {
            return `
                <div class="empty-search-results">
                    <div class="empty-icon">üîç</div>
                    <div class="empty-title">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>
                    <div class="empty-text">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ü–∏—Ç–∞—Ç—ã</div>
                </div>
            `;
        }
        
        return searchResults.map(quote => this.renderSearchQuoteItem(quote)).join('');
    }
    
    /**
     * üîç –ö–ê–†–¢–û–ß–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ü–û–ò–°–ö–ê (–ò–ó –ö–û–ù–¶–ï–ü–¢–ê!) - –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    renderSearchQuoteItem(quote) {
        const highlightedText = this.highlightSearchTerm(quote.text, this.searchQuery);
        const isFavorite = quote.isFavorite || false;
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        const date = quote.createdAt ? this.formatQuoteDate(quote.createdAt) : '–ù–µ–¥–∞–≤–Ω–æ';
        
        return `
            <div class="quote-item" data-quote-id="${quote.id || quote._id}">
                <div class="quote-text">"${highlightedText}"</div>
                <div class="quote-meta">
                    <div>
                        <div class="quote-author">${quote.author}</div>
                        <div class="quote-date">${date}</div>
                    </div>
                    <div class="quote-actions">
                        <button class="quote-action" 
                                data-action="favorite" 
                                style="color: ${isFavorite ? 'var(--primary-color)' : 'var(--text-muted)'};" 
                                title="${isFavorite ? '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}">
                            ${isFavorite ? '‚≠ê' : '‚òÜ'}
                        </button>
                        <button class="quote-action" data-action="edit" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                        <button class="quote-action" data-action="more" title="–ï—â–µ">‚ãØ</button>
                    </div>
                </div>
            </div>
        `;
    }
    
    /**
     * üì≠ –ü–£–°–¢–û–ï –°–û–°–¢–û–Ø–ù–ò–ï
     */
    renderEmptyQuotes() {
        return `
            <div class="empty-state">
                <div class="empty-icon">üìù</div>
                <div class="empty-title">–ü–æ–∫–∞ –Ω–µ—Ç —Ü–∏—Ç–∞—Ç</div>
                <div class="empty-text">–ù–∞—á–Ω–∏—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –º—ã—Å–ª–∏!</div>
                <button class="empty-action" onclick="diaryPage.switchTab('add')">
                    ‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É
                </button>
            </div>
        `;
    }
    
    /**
     * üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
     */
    attachEventListeners() {
        this.attachTabListeners();
        this.attachFormListeners();
        this.attachFilterListeners();
        this.attachQuoteActionListeners();
        this.attachSearchListeners();
        
        // Note: MyQuotesView mounting removed for reliability - kebab functionality is now self-contained
    }
    
    attachTabListeners() {
        const tabs = document.querySelectorAll('.tab[data-tab]');
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const tabName = tab.dataset.tab;
                this.switchTab(tabName);
            });
        });
    }
    
    attachFormListeners() {
        const quoteText = document.getElementById('quoteText');
        const quoteAuthor = document.getElementById('quoteAuthor');
        const saveBtn = document.getElementById('saveQuoteBtn');
        
        if (quoteText) {
            quoteText.addEventListener('input', (e) => {
                this.formData.text = e.target.value;
                this.updateSaveButtonState();
            });
        }
        
        if (quoteAuthor) {
            quoteAuthor.addEventListener('input', (e) => {
                this.formData.author = e.target.value;
                this.updateSaveButtonState();
            });
        }
        
        if (saveBtn) {
            saveBtn.addEventListener('click', () => this.handleSaveQuote());
        }
    }
    
    attachFilterListeners() {
        const filterTabs = document.querySelectorAll('.filter-tab[data-filter]');
        filterTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const filter = tab.dataset.filter;
                this.applyFilter(filter);
            });
        });
        
        const searchFilters = document.querySelectorAll('.search-filter[data-search-filter]');
        searchFilters.forEach(filter => {
            filter.addEventListener('click', () => {
                const filterType = filter.dataset.searchFilter;
                this.applySearchFilter(filterType);
            });
        });
    }
    
    attachQuoteActionListeners() {
        // Keep existing logic for search tab only
        const quoteActions = document.querySelectorAll('.quote-action[data-action]');
        quoteActions.forEach(action => {
            action.addEventListener('click', (e) => {
                e.stopPropagation();
                const actionType = action.dataset.action;
                const quoteItem = action.closest('.quote-item');
                const quoteId = quoteItem?.dataset.quoteId;
                
                if (quoteId) {
                    this.handleQuoteAction(actionType, quoteId);
                }
            });
        });

        // ‚úÖ RESTORED: Container-level delegation for my-quotes (reverted from PR #82)
        const myQuotesContainer = document.querySelector('.my-quotes-container');
        if (myQuotesContainer) {
            // Remove any existing listeners to avoid duplicates
            myQuotesContainer.removeEventListener('click', this._handleMyQuotesClick);
            
            // Bind and add the click handler
            this._handleMyQuotesClick = this._handleMyQuotesClick.bind(this);
            myQuotesContainer.addEventListener('click', this._handleMyQuotesClick, false);
        }
    }
    
    attachSearchListeners() {
        const searchInput = document.getElementById('searchInput');
        
        if (searchInput) {
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: Debounced search –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            let searchTimeout;
            
            searchInput.addEventListener('input', (e) => {
                this.searchQuery = e.target.value;
                
                // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π timeout
                if (searchTimeout) {
                    clearTimeout(searchTimeout);
                }
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                searchTimeout = setTimeout(() => {
                    this.performSearch();
                }, 300); // 300ms –∑–∞–¥–µ—Ä–∂–∫–∞
            });
            
            searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter
                    if (searchTimeout) {
                        clearTimeout(searchTimeout);
                    }
                    this.performSearch();
                }
            });
        }
    }
    
    /**
     * üîß –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ï–ô–°–¢–í–ò–ô
     */
    switchTab(tabName) {
        this.activeTab = tabName;
        this.telegram.hapticFeedback('light');
        this.rerender();
        
        // Note: MyQuotesView management removed for reliability - kebab functionality is now self-contained
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–º–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ç–∞–±–æ–≤ —Å userId
        if (tabName === 'my-quotes' && !this.quotesLoaded) {
            this.waitForValidUserId().then(userId => {
                this.loadQuotes(true, userId);
            }).catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ç–∞–±–∞:', error);
            });
        }
    }

    /**
     * Mount MyQuotesView on the current my-quotes container
     */
    mountMyQuotesView() {
        // Only mount if MyQuotesView is available and not already mounted
        if (typeof window.MyQuotesView === 'undefined' || this._myQuotesView) {
            return;
        }
        
        // Find the my-quotes container
        const container = document.querySelector('.my-quotes-container');
        if (container) {
            this._myQuotesView = new window.MyQuotesView(container);
            this._myQuotesView.mount();
            console.log('‚úÖ MyQuotesView mounted on container');
        } else {
            console.warn('‚ö†Ô∏è .my-quotes-container not found for MyQuotesView');
        }
    }
    
    /**
     * Unmount MyQuotesView
     */
    unmountMyQuotesView() {
        if (this._myQuotesView) {
            this._myQuotesView.unmount();
            this._myQuotesView = null;
            console.log('‚úÖ MyQuotesView unmounted');
        }
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ MyQuotesView –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ç–∞–±–æ–≤
     */
    handleMyQuotesViewForTab(currentTab, previousTab) {
        // –†–∞–∑–º–æ–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–∏ —É—Ö–æ–¥–µ —Å my-quotes
        if (previousTab === 'my-quotes') {
            this.unmountMyQuotesView();
        }
        
        // –ú–æ–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ my-quotes
        if (currentTab === 'my-quotes') {
            // –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ —Ä–µ–Ω–¥–µ—Ä, –∑–∞—Ç–µ–º –º–æ–Ω—Ç–∏—Ä—É–µ–º
            setTimeout(() => {
                this.mountMyQuotesView();
            }, 50);
        }
    }
    
    async handleSaveQuote() {
        if (!this.isFormValid()) return;
        
        try {
            this.telegram.hapticFeedback('medium');
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ñ–¥–µ–º –≤–∞–ª–∏–¥–Ω—ã–π userId –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            const userId = await this.waitForValidUserId();
            console.log('üíæ DiaryPage: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–∏—Ç–∞—Ç—É –¥–ª—è userId:', userId);
            
            const quoteData = {
                text: this.formData.text.trim(),
                author: this.formData.author.trim(),
                source: this.formData.source?.trim() || 'mini_app'
            };
            
            const saveBtn = document.getElementById('saveQuoteBtn');
            if (saveBtn) {
                saveBtn.disabled = true;
                saveBtn.textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º...';
            }
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º userId –≤ API –≤—ã–∑–æ–≤
            const savedQuote = await this.api.addQuote(quoteData, userId);
            this.log('‚úÖ –¶–∏—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', savedQuote);
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º AI –∞–Ω–∞–ª–∏–∑ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            const data = savedQuote?.data || savedQuote;
            const aiAnalysis = data?.aiAnalysis;
            
            if (aiAnalysis) {
                this.state.set('lastAddedQuote', {
                    ...data,
                    aiAnalysis: aiAnalysis
                });
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ê–Ω–Ω—ã –≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ
                if (aiAnalysis.summary && typeof window !== 'undefined' && typeof window.showNotification === 'function') {
                    window.showNotification(aiAnalysis.summary, 'success', 5000);
                }
            } else if (data?.insights) {
                // Fallback: –µ—Å–ª–∏ AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –µ—Å—Ç—å insights
                this.state.set('lastAddedQuote', {
                    ...data,
                    aiAnalysis: {
                        summary: data.insights
                    }
                });
                
                if (typeof window !== 'undefined' && typeof window.showNotification === 'function') {
                    window.showNotification(data.insights, 'success', 5000);
                }
            } else {
                // Fallback –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                this.state.set('lastAddedQuote', data);
                if (typeof window !== 'undefined' && typeof window.showNotification === 'function') {
                    window.showNotification('‚ú® –¶–∏—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫!', 'success');
                }
            }
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º state –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            const existingQuotes = this.state.get('quotes.items') || [];
            this.state.set('quotes.items', [savedQuote.data, ...existingQuotes]);
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const currentStats = this.state.get('stats') || {};
            const updatedStats = {
                ...currentStats,
                totalQuotes: (currentStats.totalQuotes || 0) + 1,
                thisWeek: (currentStats.thisWeek || 0) + 1
            };
            this.state.set('stats', updatedStats);
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            this.clearForm();
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
            this.rerender();
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ"
            if (saveBtn) {
                saveBtn.textContent = '‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!';
                saveBtn.style.backgroundColor = 'var(--success-color, #22c55e)';
                saveBtn.style.color = 'white';
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    saveBtn.disabled = true; // –û—Å—Ç–∞–µ—Ç—Å—è disabled –ø–æ–∫–∞ —Ñ–æ—Ä–º–∞ –ø—É—Å—Ç–∞
                    saveBtn.textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫';
                    saveBtn.style.backgroundColor = '';
                    saveBtn.style.color = '';
                }, 2000);
            }
            
            this.telegram.hapticFeedback('success');
            this.log('‚úÖ UI –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', error);
            this.telegram.hapticFeedback('error');
            
            const saveBtn = document.getElementById('saveQuoteBtn');
            if (saveBtn) {
                saveBtn.textContent = '‚ùå –û—à–∏–±–∫–∞';
                saveBtn.style.backgroundColor = 'var(--error-color, #ef4444)';
                saveBtn.style.color = 'white';
                
                setTimeout(() => {
                    saveBtn.disabled = false;
                    saveBtn.textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫';
                    saveBtn.style.backgroundColor = '';
                    saveBtn.style.color = '';
                }, 2000);
            }
        }
    }
    
    async applyFilter(filter) {
        this.currentFilter = filter;
        this.telegram.hapticFeedback('light');
        this.updateFilterUI();
        
        try {
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ñ–¥–µ–º –≤–∞–ª–∏–¥–Ω—ã–π userId –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
            const userId = await this.waitForValidUserId();
            await this.loadQuotes(true, userId);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞:', error);
        }
        
        this.rerender();
    }
    
    applySearchFilter(filter) {
        this.activeSearchFilter = filter;
        this.telegram.hapticFeedback('light');
        this.updateSearchResults();
    }
    
    async handleQuoteAction(actionType, quoteId) {
        this.telegram.hapticFeedback('light');
        
        switch (actionType) {
            case 'favorite':
                await this.toggleFavorite(quoteId);
                break;
            case 'edit':
                this.editQuote(quoteId);
                break;
            case 'more':
                this.showQuoteMenu(quoteId);
                break;
        }
    }
    
    async toggleFavorite(quoteId, card = null, btn = null) {
        try {
            const quotes = this.state.get('quotes.items') || [];
            const quote = quotes.find(q => q._id === quoteId || q.id === quoteId);
            
            if (!quote) return;
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∏ —á–µ—Ä–µ–∑ API
            const newFavoriteState = !quote.isFavorite;
            quote.isFavorite = newFavoriteState;
            this.state.set('quotes.items', [...this.state.get('quotes.items')]);
            
            // Immediately update UI if card and button are provided
            if (card && btn) {
                card.classList.toggle('liked', newFavoriteState);
                btn.textContent = newFavoriteState ? '‚ù§Ô∏è' : 'ü§ç';
            }
            
            // ‚úÖ –ù–û–í–û–ï: –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
            try {
                await this.api.post(`/quotes/${quoteId}/favorite`, { 
                    isFavorite: newFavoriteState 
                });
                console.log('‚úÖ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
            } catch (apiError) {
                console.log('‚ö†Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ (API endpoint –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω):', apiError.message);
                // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            }
            
            this.telegram.hapticFeedback('success');
            
            // Only rerender if immediate UI update wasn't done
            if (!card || !btn) {
                this.rerender();
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
            this.telegram.hapticFeedback('error');
            
            // Rollback UI changes if they were made
            if (card && btn) {
                const quotes = this.state.get('quotes.items') || [];
                const quote = quotes.find(q => q._id === quoteId || q.id === quoteId);
                if (quote) {
                    card.classList.toggle('liked', quote.isFavorite);
                    btn.textContent = quote.isFavorite ? '‚ù§Ô∏è' : 'ü§ç';
                }
            }
        }
    }
    
    async performSearch() {
        if (!this.searchQuery.trim()) {
            this.updateSearchResults();
            return;
        }
        
        try {
            this.log('üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫:', this.searchQuery);
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ñ–¥–µ–º –≤–∞–ª–∏–¥–Ω—ã–π userId –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º
            const userId = await this.waitForValidUserId();
            console.log('üîç DiaryPage: –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –¥–ª—è userId:', userId);
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º userId –≤ API –≤—ã–∑–æ–≤
            const searchResults = await this.api.getQuotes({
                search: this.searchQuery.trim(),
                limit: 50
            }, userId);
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ state
            this.state.set('searchResults', searchResults.data?.quotes || searchResults.quotes || searchResults.items || []);
            this.updateSearchResults();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
            this.state.set('searchResults', []);
            this.updateSearchResults();
        }
    }
    
    updateSearchResults() {
        this.rerender();
    }
    
    /**
     * üßπ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
     */
    
    isFormValid() {
        return this.formData.text.trim().length > 0 && 
               this.formData.author.trim().length > 0;
    }
    
    updateSaveButtonState() {
        const saveBtn = document.getElementById('saveQuoteBtn');
        if (saveBtn) {
            saveBtn.disabled = !this.isFormValid();
        }
    }
    
    clearForm() {
        this.formData = { text: '', author: '', source: '' };
        
        const quoteText = document.getElementById('quoteText');
        const quoteAuthor = document.getElementById('quoteAuthor');
        
        if (quoteText) quoteText.value = '';
        if (quoteAuthor) quoteAuthor.value = '';
    }
    
    getLastAddedQuote() {
        const quotes = this.state.get('quotes.items') || [];
        return quotes[0];
    }
    
    updateFilterUI() {
        const filterTabs = document.querySelectorAll('.filter-tab');
        filterTabs.forEach(tab => {
            const filter = tab.dataset.filter;
            tab.classList.toggle('active', filter === this.currentFilter);
        });
    }
    
    updateQuotesUI(_quotes) {
        if (this.activeTab === 'my-quotes') {
            this.rerender();
        }
    }

    updateStatsUI(_stats) {
        if (this.activeTab === 'add') {
            this.rerender();
        }
    }
    
    getFilterLabel(filter) {
        const labels = {
            'all': '–í—Å–µ',
            'favorites': '–õ—é–±–∏–º—ã–µ', 
            'this-week': '–≠—Ç–∞ –Ω–µ–¥–µ–ª—è',
            'month': '–ú–µ—Å—è—Ü',
            'classics': '–ö–ª–∞—Å—Å–∏–∫–∏'
        };
        return labels[filter] || filter;
    }
    
    getQuoteWord(count) {
        if (count % 10 === 1 && count % 100 !== 11) return '—Ü–∏—Ç–∞—Ç–∞';
        if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '—Ü–∏—Ç–∞—Ç—ã';
        return '—Ü–∏—Ç–∞—Ç';
    }
    
    formatQuoteDate(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diffMs = now - date;
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
        
        if (diffHours < 1) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
        if (diffHours < 24) return `${diffHours} —á. –Ω–∞–∑–∞–¥`;
        if (diffDays === 1) return '–í—á–µ—Ä–∞';
        if (diffDays < 7) return `${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
        if (diffDays < 30) return `${Math.floor(diffDays / 7)} –Ω–µ–¥. –Ω–∞–∑–∞–¥`;
        
        return date.toLocaleDateString('ru-RU', { 
            day: 'numeric', 
            month: 'short' 
        });
    }
    
    log(message, data = null) {
        console.log(`[DiaryPage] ${message}`, data || '');
    }
    
    highlightSearchTerm(text, searchTerm) {
        if (!searchTerm) return text;
        
        const regex = new RegExp(`(${searchTerm})`, 'gi');
        return text.replace(regex, '<span class="highlight-match">$1</span>');
    }
    
    /**
     * üìö –ü–†–ò–ú–ï–†–´ –î–ê–ù–ù–´–• –ò–ó –ö–û–ù–¶–ï–ü–¢–û–í
     */
    getExampleQuotes() {
        return [
            {
                id: '1',
                text: '–í –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ ‚Äî —Ü–µ–ª–∞—è –∂–∏–∑–Ω—å. –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å–ø–æ—Å–æ–±–Ω–æ –Ω–∞ –ø–æ–¥–≤–∏–≥ –∏ –Ω–∞ –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ.',
                author: '–ú–∞—Ä–∏–Ω–∞ –¶–≤–µ—Ç–∞–µ–≤–∞',
                isFavorite: false
            },
            {
                id: '2', 
                text: '–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ª—é–±–∏—Ç—å, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —á—É–≤—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏ —É—Ö–æ–¥–∏—Ç.',
                author: '–≠—Ä–∏—Ö –§—Ä–æ–º–º',
                isFavorite: true
            },
            {
                id: '3',
                text: '–•–æ—Ä–æ—à–∞—è –∂–∏–∑–Ω—å —Å—Ç—Ä–æ–∏—Ç—Å—è, –∞ –Ω–µ –¥–∞—ë—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.',
                author: '–ê–Ω–Ω–∞ –ë—É—Å–µ–ª',
                isFavorite: false
            }
        ];
    }
    
    getExampleSearchResults() {
        return [
            {
                id: '1',
                text: '–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ª—é–±–∏—Ç—å, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —á—É–≤—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏ —É—Ö–æ–¥–∏—Ç.',
                author: '–≠—Ä–∏—Ö –§—Ä–æ–º–º',
                date: '3 –¥–Ω—è –Ω–∞–∑–∞–¥',
                isFavorite: true
            },
            {
                id: '2',
                text: '–ò—Å—Ç–∏–Ω–Ω–∞—è –ª—é–±–æ–≤—å –Ω–µ –∑–Ω–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.',
                author: '–ú–æ—è –º—ã—Å–ª—å',
                date: '5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥', 
                isFavorite: false
            },
            {
                id: '3',
                text: '–õ—é–±–æ–≤—å –∫ —Å–µ–±–µ ‚Äî –æ—Å–Ω–æ–≤–∞ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –≤–∏–¥–æ–≤ –ª—é–±–≤–∏.',
                author: '–ê–Ω–Ω–∞ –ë—É—Å–µ–ª',
                date: '1 –Ω–µ–¥–µ–ª—è –Ω–∞–∑–∞–¥',
                isFavorite: false
            }
        ];
    }
    
    rerender() {
        const container = document.getElementById('page-content');
        if (container) {
            container.innerHTML = this.render();
            this.attachEventListeners();
        }
    }
    
    /**
     * üì± LIFECYCLE –ú–ï–¢–û–î–´ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–ï–ó –®–ê–ü–ö–ò!
     */
    onShow() {
        console.log('üìñ DiaryPage: onShow - –ë–ï–ó –®–ê–ü–ö–ò!');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this._initEditFromQuery();
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–º–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –≤ HomePage
        if (!this.quotesLoaded && !this.statsLoaded) {
            console.log('üîÑ DiaryPage: –ü–µ—Ä–≤—ã–π –ø–æ–∫–∞–∑, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ');
            this.loadInitialData();
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 10 –º–∏–Ω—É—Ç)
            const lastUpdate = this.state.get('stats.lastUpdate');
            const now = Date.now();
            const tenMinutes = 10 * 60 * 1000;
            
            if (!lastUpdate || (now - lastUpdate) > tenMinutes) {
                console.log('üîÑ DiaryPage: –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –æ–±–Ω–æ–≤–ª—è–µ–º');
                this.loadInitialData();
            } else {
                console.log('‚úÖ DiaryPage: –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
            }
        }
    }
    
    onHide() {
        console.log('üìñ DiaryPage: onHide');
        // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º - Router —É–ø—Ä–∞–≤–ª—è–µ—Ç —à–∞–ø–∫–∞–º–∏
    }
    
    destroy() {
        this.subscriptions.forEach(unsubscribe => {
            if (typeof unsubscribe === 'function') {
                unsubscribe();
            }
        });
        this.subscriptions = [];
        
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–∏—Ç–∞—Ç
        document.removeEventListener('quotes:edit', this._onQuoteEdit, false);
        
        // Remove container-level delegation if it exists
        const myQuotesContainer = document.querySelector('.my-quotes-container');
        if (myQuotesContainer && this._handleMyQuotesClick) {
            myQuotesContainer.removeEventListener('click', this._handleMyQuotesClick, false);
        }
        
        // Unmount MyQuotesView if mounted
        this.unmountMyQuotesView();
        
        // Reset loading flags
        this.quotesLoaded = false;
        this.quotesLoading = false;
        this.statsLoaded = false;
        this.statsLoading = false;
    }

    /**
     * üîó Container-level click handler for my-quotes (restored from pre-PR #82)
     */
    _handleMyQuotesClick(e) {
        // Handle kebab button clicks
        const kebabBtn = e.target.closest('.quote-kebab');
        if (kebabBtn) {
            e.preventDefault();
            e.stopPropagation();
            
            const card = kebabBtn.closest('.quote-card, .quote-item, [data-quote-id]');
            if (card) {
                card.classList.toggle('expanded');
                this.telegram.hapticFeedback('light');
                this._ensureActionsInline(card);
            }
            return;
        }

        // Handle action button clicks
        const actionBtn = e.target.closest('.action-btn[data-action]');
        if (actionBtn) {
            e.preventDefault();
            e.stopPropagation();
            
            const card = actionBtn.closest('.quote-card, .quote-item, [data-quote-id]');
            if (card) {
                const quoteId = card.dataset.id || card.dataset.quoteId || card.getAttribute('data-quote-id');
                const action = actionBtn.dataset.action;
                
                if (quoteId && action) {
                    if (action === 'edit') {
                        this.editQuote(quoteId);
                    } else if (action === 'delete') {
                        this.deleteQuote(quoteId);
                    } else if (action === 'favorite') {
                        this.toggleFavorite(quoteId, card, actionBtn);
                    }
                }
            }
            return;
        }
    }

    /**
     * Ensure action buttons are present inline (helper method for container-level delegation)
     */
    _ensureActionsInline(card) {
        let actions = card.querySelector('.quote-actions-inline');
        if (!actions) {
            actions = document.createElement('div');
            actions.className = 'quote-actions-inline';

            const isLiked = card.classList.contains('liked');
            const heartIcon = isLiked ? '‚ù§Ô∏è' : 'ü§ç';

            actions.innerHTML = `
                <button class="action-btn" data-action="edit" aria-label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—É" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                <button class="action-btn" data-action="favorite" aria-label="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" title="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ">${heartIcon}</button>
                <button class="action-btn action-delete" data-action="delete" aria-label="–£–¥–∞–ª–∏—Ç—å —Ü–∏—Ç–∞—Ç—É" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
            `;
            card.appendChild(actions);
        } else {
            const likeBtn = actions.querySelector('[data-action="favorite"]');
            if (likeBtn) {
                const isLiked = card.classList.contains('liked');
                likeBtn.textContent = isLiked ? '‚ù§Ô∏è' : 'ü§ç';
            }
        }
    }

    /**
     * üîó –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–∏—Ç–∞—Ç –∏–∑ MyQuotesView
     */
    _onQuoteEdit(e) {
        try {
            const id = e?.detail?.id;
            if (id) {
                this.editQuote(id);
            }
        } catch (err) {
            console.debug('quotes:edit handler error:', err);
        }
    }

    /**
     * üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    _initEditFromQuery() {
        try {
            const params = new URLSearchParams(location.search);
            const quoteId = params.get('quote');
            const action = params.get('action');
            if (quoteId && action === 'edit') {
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã —É—Å–ø–µ–ª —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è UI
                setTimeout(() => this.editQuote(quoteId), 50);
            }
        } catch (e) {
            console.debug('init edit from query failed:', e);
        }
    }

    /**
  * ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
 */
async editQuote(quoteId) {  // ‚úÖ –û–î–ù–ê async —Ñ—É–Ω–∫—Ü–∏—è
    try {
        this.log('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã:', quoteId);
        
        const quotes = this.state.get('quotes.items') || [];
        const quote = quotes.find(q => q._id === quoteId || q.id === quoteId);
        
        if (!quote) {
            console.error('‚ùå –¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', quoteId);
            return;
        }

        // ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ prompt (–¥–ª—è MVP)
        // TODO: –í –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const newText = prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã:', quote.text);
        if (newText === null || newText.trim() === '') return; // –û—Ç–º–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        
        const newAuthor = prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∞:', quote.author || '');
        if (newAuthor === null) return; // –û—Ç–º–µ–Ω–∞
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É –ª–æ–∫–∞–ª—å–Ω–æ
        quote.text = newText.trim();
        quote.author = newAuthor.trim();
        quote.isEdited = true;
        quote.editedAt = new Date().toISOString();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º state
        this.state.set('quotes.items', [...quotes]);
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ñ–¥–µ–º –≤–∞–ª–∏–¥–Ω—ã–π userId –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        const validUserId = await this.waitForValidUserId();
        console.log('‚úèÔ∏è DiaryPage: –û–±–Ω–æ–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É –¥–ª—è userId:', validUserId);
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º userId –≤ API –≤—ã–∑–æ–≤
        await this.api.updateQuote(quoteId, {
            text: newText.trim(),
            author: newAuthor.trim()
        }, validUserId);
        console.log('‚úÖ –¶–∏—Ç–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.rerender();
        this.telegram.hapticFeedback('success');
        this.log('‚úÖ –¶–∏—Ç–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
        this.rerender();
        this.log('‚ö†Ô∏è –¶–∏—Ç–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ');
    }
}

    /**
     * üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
     */
    async deleteQuote(quoteId) {
        try {
            this.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã:', quoteId);
            
            const quotes = this.state.get('quotes.items') || [];
            const quote = quotes.find(q => q._id === quoteId || q.id === quoteId);
            
            if (!quote) {
                console.error('‚ùå –¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', quoteId);
                return;
            }

            // ‚úÖ –ù–û–í–û–ï: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            const truncatedText = quote.text.substring(0, 100) + (quote.text.length > 100 ? '...' : '');
            const confirmText = `–£–¥–∞–ª–∏—Ç—å —Ü–∏—Ç–∞—Ç—É?\n\n"${truncatedText}"\n\n‚Äî ${quote.author}`;
            
            if (!confirm(confirmText)) {
                return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ
            }
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ state
            const updatedQuotes = quotes.filter(q => q._id !== quoteId && q.id !== quoteId);
            this.state.set('quotes.items', updatedQuotes);
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const currentStats = this.state.get('stats') || {};
            const updatedStats = {
                ...currentStats,
                totalQuotes: Math.max((currentStats.totalQuotes || 0) - 1, 0)
            };
            this.state.set('stats', updatedStats);
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ñ–¥–µ–º –≤–∞–ª–∏–¥–Ω—ã–π userId –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            const validUserId = await this.waitForValidUserId();
            console.log('üóëÔ∏è DiaryPage: –£–¥–∞–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É –¥–ª—è userId:', validUserId);
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º userId –≤ API –≤—ã–∑–æ–≤
            try {
                await this.api.deleteQuote(quoteId);
                console.log('‚úÖ –¶–∏—Ç–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–∏—Ç–∞—Ç—É –æ–±—Ä–∞—Ç–Ω–æ (–æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
                this.state.set('quotes.items', quotes);
                this.state.set('stats', currentStats);
                this.rerender();
                return;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.rerender();
            this.telegram.hapticFeedback('success');
            this.log('‚úÖ –¶–∏—Ç–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', error);
            this.telegram.hapticFeedback('error');
        }
    }

    /**
     * ‚ãØ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å —Ü–∏—Ç–∞—Ç–æ–π
     */
    showQuoteMenu(quoteId) {
        try {
            this.log('‚ãØ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–ª—è —Ü–∏—Ç–∞—Ç—ã:', quoteId);
            
            const quotes = this.state.get('quotes.items') || [];
            const quote = quotes.find(q => q._id === quoteId || q.id === quoteId);
            
            if (!quote) {
                console.error('‚ùå –¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', quoteId);
                return;
            }

            // ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ confirm/prompt (–¥–ª—è MVP)
            // TODO: –í –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫—Ä–∞—Å–∏–≤–æ–µ –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é
            
            const truncatedText = quote.text.substring(0, 100) + (quote.text.length > 100 ? '...' : '');
            const choice = prompt(
                `–î–µ–π—Å—Ç–≤–∏—è —Å —Ü–∏—Ç–∞—Ç–æ–π:\n\n"${truncatedText}"\n\n‚Äî ${quote.author}\n\n` +
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n' +
                '1 - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n' +
                '2 - –£–¥–∞–ª–∏—Ç—å\n' +
                '3 - –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å\n' +
                '0 - –û—Ç–º–µ–Ω–∞',
                '0'
            );
            
            switch (choice) {
                case '1':
                    this.editQuote(quoteId);
                    break;
                case '2':
                    this.deleteQuote(quoteId);
                    break;
                case '3':
                    this.copyQuoteToClipboard(quote);
                    break;
                default:
                    // –û—Ç–º–µ–Ω–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä
                    break;
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Ü–∏—Ç–∞—Ç—ã:', error);
            this.telegram.hapticFeedback('error');
        }
    }

    /**
     * üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
     */
    copyQuoteToClipboard(quote) {
        try {
            const textToCopy = `"${quote.text}"\n\n‚Äî ${quote.author}`;
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Clipboard API
            if (navigator.clipboard && navigator.clipboard.writeText) {
                navigator.clipboard.writeText(textToCopy).then(() => {
                    this.telegram.hapticFeedback('success');
                    // TODO: –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
                    console.log('‚úÖ –¶–∏—Ç–∞—Ç–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
                }).catch(error => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
                    this.fallbackCopyToClipboard(textToCopy);
                });
            } else {
                // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                this.fallbackCopyToClipboard(textToCopy);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', error);
            this.telegram.hapticFeedback('error');
        }
    }

    /**
     * üìã Fallback –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
     */
    fallbackCopyToClipboard(text) {
        try {
            const textArea = document.createElement('textarea');
            textArea.value = text;
            textArea.style.position = 'fixed';
            textArea.style.left = '-999999px';
            textArea.style.top = '-999999px';
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            
            const successful = document.execCommand('copy');
            document.body.removeChild(textArea);
            
            if (successful) {
                this.telegram.hapticFeedback('success');
                console.log('‚úÖ –¶–∏—Ç–∞—Ç–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (fallback)');
            } else {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—É');
                this.telegram.hapticFeedback('error');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ fallback –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            this.telegram.hapticFeedback('error');
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
window.diaryPage = null;

// üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.DiaryPage = DiaryPage;

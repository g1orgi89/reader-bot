/**
 * üìñ –î–ù–ï–í–ù–ò–ö –¶–ò–¢–ê–¢ - DiaryPage.js (üîß –ò–°–ü–†–ê–í–õ–ï–ù–´ API –í–´–ó–û–í–´)
 * 
 * ‚úÖ –ü–û–õ–ù–û–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –ö–û–ù–¶–ï–ü–¢–ê–ú:
 * - HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑ "–∫–æ–Ω—Ü–µ–ø—Ç 5 —Å—Ç—Ä–∞–Ω–∏—Ü app.txt"
 * - CSS –∫–ª–∞—Å—Å—ã –∏–∑ –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤
 * - –ü–æ–∏—Å–∫ –∏–∑ "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ü–µ–ø—Ç —Å—Ç—Ä–∞–Ω–∏—Ü app.txt"
 * - –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–∞–∫ –≤ –∫–æ–Ω—Ü–µ–ø—Ç–µ
 * 
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–ï–ó –®–ê–ü–ö–ò –°–í–ï–†–•–£ - –ß–ò–°–¢–´–ô –î–ò–ó–ê–ô–ù!
 * üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è API –≤—ã–∑–æ–≤—ã - –Ω–µ—Ç "–º–æ—Ä–≥–∞–Ω–∏—è" –∞–Ω–∞–ª–∏–∑–∞
 */
class DiaryPage {
    constructor(app) {
        this.app = app;
        this.api = app.api;
        this.state = app.state;
        this.telegram = app.telegram;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –∫–æ–Ω—Ü–µ–ø—Ç–µ)
        this.activeTab = 'add'; // add, my-quotes
        this.currentFilter = 'all'; // all, favorites, this-week, by-author
        this.searchQuery = '';
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
        this.formData = {
            text: '',
            author: '',
            source: ''
        };
        
        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏ –¥–∞–Ω–Ω—ã–µ
        this.currentPage = 1;
        this.itemsPerPage = 20;
        this.hasMore = true;
        this.subscriptions = [];
        
        // ‚úÖ –ù–û–í–û–ï: –§–ª–∞–≥–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–≥—Ä—É–∑–æ–∫
        this.quotesLoaded = false;
        this.quotesLoading = false;
        this.statsLoaded = false;
        this.statsLoading = false;
        
        // ‚úÖ –ù–û–í–û–ï: Debug —Ä–µ–∂–∏–º (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å API)
        this.debug = this.api?.debug || false;
        
        // ‚úÖ –ù–û–í–û–ï: Add tab keyboard handling (minimal, custom for Add tab only)
        this.addTabKeyboardHandler = null;
        
        // ‚úÖ –ù–û–í–û–ï: Analysis timer for Anna's insights
        this.analysisTimer = null;
        this.analysisStartTime = null;
        this.analysisVisible = false;
        
        // Removed global quote delegation flag
        
        this.init();
    }
    
    init() {
        this.setupSubscriptions();
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–∏—Ç–∞—Ç
        this._onQuoteEdit = this._onQuoteEdit.bind(this);
        document.addEventListener('quotes:edit', this._onQuoteEdit, false);
        
        // Removed global quote click delegation - using container-level delegation instead
    }

    /**
     * üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ userId –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–æ–Ω–∫–∏ —É—Å–ª–æ–≤–∏–π
     * @param {number} timeout - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     * @returns {Promise<string>} - –í–∞–ª–∏–¥–Ω—ã–π userId
     */
    async waitForValidUserId(timeout = 10000) {
        const startTime = Date.now();
        
        while (Date.now() - startTime < timeout) {
            const userId = this.state.getCurrentUserId();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ userId –≤–∞–ª–∏–¥–Ω—ã–π –∏ –Ω–µ —Ä–∞–≤–µ–Ω demo-user
            if (userId && userId !== 'demo-user' && typeof userId === 'number') {
                console.log('‚úÖ DiaryPage: –ü–æ–ª—É—á–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π userId:', userId);
                return userId;
            }
            
            // –¢–∞–∫–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º demo-user —Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ
            if (userId === 'demo-user' && this.state.get('debugMode')) {
                console.log('üß™ DiaryPage: –ò—Å–ø–æ–ª—å–∑—É–µ–º demo-user –≤ debug —Ä–µ–∂–∏–º–µ');
                return userId;
            }
            
            // –ñ–¥–µ–º 100ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        throw new Error('Timeout: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π userId');
    }
    
    setupSubscriptions() {
        const quotesSubscription = this.state.subscribe('quotes.items', (quotes) => {
            this.updateQuotesUI(quotes);
        });
        
        const statsSubscription = this.state.subscribe('stats', (stats) => {
            this.updateStatsUI(stats);
        });

        const diaryStatsSubscription = this.state.subscribe('diaryStats', (diaryStats) => {
            this.updateDiaryStatsUI(diaryStats);
        });
        
        this.subscriptions.push(quotesSubscription, statsSubscription, diaryStatsSubscription);

        // Listen for real-time statistics updates
        document.addEventListener('stats:updated', (e) => {
            console.log('üìñ DiaryPage: Received stats:updated event', e.detail);
            if (e.detail) {
                this.updateStatsUI(e.detail);
            }
        });

        document.addEventListener('diary-stats:updated', (e) => {
            console.log('üìñ DiaryPage: Received diary-stats:updated event', e.detail);
            if (e.detail) {
                this.updateDiaryStatsUI(e.detail);
            }
        });
    }
    
    /**
     * PRODUCTION REFACTOR: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ StatisticsService
     */
    async loadInitialData() {
        console.log('üìñ DiaryPage: loadInitialData –Ω–∞—á–∞—Ç–∞');

        try {
            // ‚úÖ –ñ–¥–µ–º –≤–∞–ª–∏–¥–Ω—ã–π userId –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
            const userId = await this.waitForValidUserId();
            console.log('üìñ DiaryPage: –ò—Å–ø–æ–ª—å–∑—É–µ–º userId:', userId);

            // PRODUCTION REFACTOR: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ StatisticsService –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if (this.app?.statistics) {
                await Promise.all([
                    this.app.statistics.refreshDiaryStatsSilent(),
                    this.app.statistics.refreshMainStatsSilent()
                ]);
            }

            // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
            if (!this.quotesLoaded && !this.quotesLoading) {
                await this.loadQuotes(false, userId);
            }
    
            this.statsLoaded = true; // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    
            console.log('‚úÖ DiaryPage: –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–Ω–µ–≤–Ω–∏–∫–∞:', error);
        }
    }
        
   async loadQuotes(reset = false, userId = null) {
        if (this.quotesLoading) {
            console.log('üîÑ DiaryPage: –¶–∏—Ç–∞—Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }

        try {
            this.quotesLoading = true;
            if (!userId) {
                userId = await this.waitForValidUserId();
            }

            if (reset) {
                this.hasMore = true;
            }

            const params = {
                offset: (this.currentPage - 1) * this.itemsPerPage,
                limit: this.itemsPerPage,
                sort: 'createdAt',
                order: 'desc'
            };

            if (this.currentFilter === 'favorites') {
                params.favorites = true;
            } else if (this.currentFilter === 'this-week') {
                const now = new Date();
                const weekAgo = new Date(now);
                weekAgo.setDate(now.getDate() - 7);
                params.dateFrom = weekAgo.toISOString();
                params.dateTo = now.toISOString();
            } else if (this.currentFilter === 'this-month') {
                const now = new Date();
                const firstDay = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), 1, 0, 0, 0, 0));
                const lastDay = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth() + 1, 0, 23, 59, 59, 999));
                params.dateFrom = firstDay.toISOString();
                params.dateTo = lastDay.toISOString();
            }

            // –ì–∞—Ä–∞–Ω—Ç–∏—è –æ—á–∏—Å—Ç–∫–∏ –ª–∏—à–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è 'all'
            if (this.currentFilter === 'all') {
                delete params.dateFrom;
                delete params.dateTo;
                delete params.favorites;
            }

            console.log('DEBUG: currentFilter=', this.currentFilter, params);

            const response = await this.api.getQuotes(params, userId);

            const root = response.data || response;
            const quotes = root.quotes || root.items || [];
            const pagination = root.pagination || {};
            const total = pagination.totalCount || pagination.total || quotes.length;

            if (reset || this.currentPage === 1) {
                this.state.set('quotes.items', quotes);
            } else {
                const existingQuotes = this.state.get('quotes.items') || [];
                this.state.set('quotes.items', [...existingQuotes, ...quotes]);
            }

            this.state.update('quotes', {
                total,
                loading: false,
                lastUpdate: Date.now()
            });

            this.hasMore = (this.currentPage * this.itemsPerPage) < total;
            
            // –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ quotes:
            if (window.QuoteUtils) {
                window.QuoteUtils.rebuildDuplicateIndex(quotes);
            }
            
            this.quotesLoaded = true;

         } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç:', error);
            this.state.set('quotes.loading', false);
        } finally {
            this.quotesLoading = false;
        }
    }
    
    /**
     * PRODUCTION REFACTOR: –£–±—Ä–∞–Ω–∞ –ø—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ StatisticsService
     */
    // –£–î–ê–õ–ï–ù–û: loadStats() - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ StatisticsService —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
    
    /**
     * üé® –†–ï–ù–î–ï–† –°–¢–†–ê–ù–ò–¶–´ (–¢–û–ß–ù–û –ü–û –ö–û–ù–¶–ï–ü–¢–£!) - –ë–ï–ó –®–ê–ü–ö–ò!
     */
    render() {
        return `
            <div class="content">
                ${this.renderTabs()}
                ${this.renderTabContent()}
            </div>
        `;
    }
    
    /**
     * üìë –¢–ê–ë–´ (–¢–û–ß–ù–û –ò–ó –ö–û–ù–¶–ï–ü–¢–ê)
     */
    renderTabs() {
        return `
            <div class="tabs">
                <button class="tab ${this.activeTab === 'add' ? 'active' : ''}" data-tab="add">‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å</button>
                <button class="tab ${this.activeTab === 'my-quotes' ? 'active' : ''}" data-tab="my-quotes">üìö –ú–æ–∏ —Ü–∏—Ç–∞—Ç—ã</button>
            </div>
        `;
    }
    
    renderTabContent() {
        switch (this.activeTab) {
            case 'add':
                return this.renderAddTab();
            case 'my-quotes':
                return this.renderMyQuotesTab();
            default:
                return this.renderAddTab();
        }
    }
    
    /**
     * ‚úçÔ∏è –¢–ê–ë –î–û–ë–ê–í–õ–ï–ù–ò–Ø (–¢–û–ß–ù–û –ò–ó –ö–û–ù–¶–ï–ü–¢–ê!)
     */
    renderAddTab() {
        return `
            <div class="form-section">
                <div class="form-group">
                    <label class="form-label">üí≠ –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã</label>
                    <textarea class="form-textarea" 
                              id="quoteText" 
                              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ç–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–∞...">${this.formData.text}</textarea>
                </div>
                
                <div class="form-group">
                    <label class="form-label">‚úçÔ∏è –ê–≤—Ç–æ—Ä</label>
                    <input class="form-input" 
                           id="quoteAuthor" 
                           placeholder="–ö—Ç–æ –∞–≤—Ç–æ—Ä —ç—Ç–∏—Ö —Å–ª–æ–≤?"
                           value="${this.formData.author}">
                </div>
                
                <button class="save-btn" id="saveQuoteBtn" ${this.isFormValid() ? '' : 'disabled'}>
                    üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫
                </button>
            </div>
            
            ${this.renderAIInsight()}
            ${this.renderStatsInfo()}
        `;
    }
    
    /**
     * ‚ú® AI –ê–ù–ê–õ–ò–ó –û–¢ –ê–ù–ù–´ (–¢–û–ß–ù–û –ò–ó –ö–û–ù–¶–ï–ü–¢–ê!) - üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
     */
    renderAIInsight() {
        // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–æ–∞–¥–µ—Ä, –µ—Å–ª–∏ stats –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
        if (this.statsLoading) {
            return `
                <div class="ai-insight">
                    <div class="ai-title">
                        <span>‚ú®</span>
                        <span>–ê–Ω–∞–ª–∏–∑ –æ—Ç –ê–Ω–Ω—ã</span>
                    </div>
                    <div class="ai-text">‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ —Ü–∏—Ç–∞—Ç—ã...</div>
                </div>
            `;
        }

        // –ù–æ–≤—ã–π: –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ analysisVisible –∏ lastAddedQuote –µ—Å—Ç—å
        if (this.analysisVisible) {
            const lastQuote = this.state.get('lastAddedQuote');
            console.log('DEBUG: renderAIInsight lastQuote', lastQuote);
            const summary = lastQuote?.aiAnalysis?.summary || lastQuote?.summary || '';
            const insights = lastQuote?.insights || lastQuote?.aiAnalysis?.insights || '';

            if (lastQuote && (summary || insights)) {
                return `
                    <div class="ai-insight">
                        <div class="ai-title">
                            <span>‚ú®</span>
                            <span>–ê–Ω–∞–ª–∏–∑ –æ—Ç –ê–Ω–Ω—ã</span>
                        </div>
                        ${summary ? `<div class="ai-text"><b>–û—Ç–≤–µ—Ç –ê–Ω–Ω—ã:</b> ${summary}</div>` : ''}
                        ${insights ? `<div class="ai-text"><b>–ò–Ω—Å–∞–π—Ç:</b> ${insights}</div>` : ''}
                    </div>
                `;
            }
        }

        // –î–µ—Ñ–æ–ª—Ç: –µ—Å–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–π—á–∞—Å –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ placeholder
        return `
            <div class="ai-insight">
                <div class="ai-title">
                    <span>‚ú®</span>
                    <span>–ê–Ω–∞–ª–∏–∑ –æ—Ç –ê–Ω–Ω—ã</span>
                </div>
                <div class="ai-text">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ —Ü–∏—Ç–∞—Ç—ã...</div>
            </div>
        `;
    }

    /**
     * üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–¢–û–ß–ù–û –ò–ó –ö–û–ù–¶–ï–ü–¢–ê!)
     */
    renderStatsInfo() {
        const stats = this.state.get('stats') || {};
        const diaryStats = this.state.get('diaryStats') || {};
        
        // Check loading state correctly - from state loading properties
        const statsLoading = this.state.get('stats.loading') || false;
        const diaryStatsLoading = this.state.get('diaryStats.loading') || false;
        const isLoading = statsLoading || diaryStatsLoading || this.statsLoading;
        
        if (isLoading) {
            return `
                <div class="stats-summary skeleton-stat-block">
                    <div class="skeleton-line" style="width: 85%; height: 16px;"></div>
                </div>
            `;
        }
        
        const totalQuotes = stats.totalQuotes ?? diaryStats.totalQuotes ?? 0;
        // Always get activityPercent from API data (never calculate locally)
        const activityPercent = diaryStats.activityPercent ?? stats.activityPercent ?? 1;

        return `
            <div class="stats-summary" id="diaryStatsInfo">
                üìä –£ –≤–∞—Å —É–∂–µ ${totalQuotes} —Ü–∏—Ç–∞—Ç ‚Ä¢ –í—ã –∞–∫—Ç–∏–≤–Ω–µ–µ ${activityPercent}% —á–∏—Ç–∞—Ç–µ–ª–µ–π —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
            </div>
        `;
    }
        
    /**
     * üìö –¢–ê–ë –ú–û–ò –¶–ò–¢–ê–¢–´ (–¢–û–ß–ù–û –ò–ó –ö–û–ù–¶–ï–ü–¢–ê!)
     */
    renderMyQuotesTab() {
        const quotes = this.state.get('quotes.items') || [];
        const loading = this.state.get('quotes.loading');
        
        return `
            <div class="my-quotes-container">
                ${this.renderFilters()}
                ${this.renderQuotesStats()}
                ${this.renderQuotesList(quotes, loading)}
                ${this.renderPagination()}
            </div>
        `;
    }
    
    /**
     * üîß –§–ò–õ–¨–¢–†–´ (–¢–û–ß–ù–û –ò–ó –ö–û–ù–¶–ï–ü–¢–ê!)
     */
    renderFilters() {
        return `
            <div class="search-and-filters">
                <div class="search-section">
                    <input class="search-input" 
                           id="quotesSearchInput"
                           placeholder="–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –∏–ª–∏ –∞–≤—Ç–æ—Ä—É..." 
                           value="${this.searchQuery}">
                </div>
                <div class="filter-tabs">
                    <button class="filter-tab ${this.currentFilter === 'all' ? 'active' : ''}" data-filter="all">–í—Å–µ</button>
                    <button class="filter-tab ${this.currentFilter === 'favorites' ? 'active' : ''}" data-filter="favorites">–ò–∑–±—Ä–∞–Ω–Ω—ã–µ</button>
                    <button class="filter-tab ${this.currentFilter === 'this-week' ? 'active' : ''}" data-filter="this-week">–≠—Ç–∞ –Ω–µ–¥–µ–ª—è</button>
                    <button class="filter-tab ${this.currentFilter === 'this-month' ? 'active' : ''}" data-filter="this-month">–≠—Ç–æ—Ç –º–µ—Å—è—Ü</button>
                </div>
            </div>
        `;
    }
    
    /**
     * üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¶–ò–¢–ê–¢ (–¢–û–ß–ù–û –ò–ó –ö–û–ù–¶–ï–ü–¢–ê!)
     */
    renderQuotesStats() {
        const stats = this.state.get('stats') || {};
        const diaryStats = this.state.get('diaryStats') || {};
        const loading = this.state.get('stats.loading') || this.state.get('diaryStats.loading') || this.statsLoading;
        
        if (loading) {
            return `
                <div class="stats-summary skeleton-stat-block">
                    <div class="skeleton-line" style="width: 90%; height: 16px;"></div>
                </div>
            `;
        }
        
        const totalQuotes = stats.totalQuotes ?? diaryStats.totalQuotes ?? 0;
        const weeklyQuotes = stats.weeklyQuotes ?? diaryStats.weeklyQuotes ?? 0;
        const monthlyQuotes = diaryStats.monthlyQuotes ?? 0;
        const favoritesCount = diaryStats.favoritesCount ?? 0;

        return `
            <div class="stats-summary" id="myQuotesStats">
                üìä –í—Å–µ–≥–æ: ${totalQuotes} ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: ${weeklyQuotes} ‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: ${monthlyQuotes} ‚Ä¢ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ: ${favoritesCount}
            </div>
        `;
    }
    
    /**
     * üìã –°–ü–ò–°–û–ö –¶–ò–¢–ê–¢ (–¢–û–ß–ù–û –ò–ó –ö–û–ù–¶–ï–ü–¢–ê!)
     */
    renderQuotesList(quotes, loading) {
        if (loading && quotes.length === 0) {
            return `<div class="loading-state">‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ —Ü–∏—Ç–∞—Ç—ã...</div>`;
        }
        
        // Apply search filtering
        let filteredQuotes = quotes;
        if (this.searchQuery && this.searchQuery.trim()) {
            const searchTerm = this.searchQuery.toLowerCase();
            filteredQuotes = quotes.filter(quote => 
                (quote.text && quote.text.toLowerCase().includes(searchTerm)) ||
                (quote.author && quote.author.toLowerCase().includes(searchTerm))
            );
        }
        
        if (filteredQuotes.length === 0) {
            if (this.searchQuery && this.searchQuery.trim()) {
                return `
                    <div class="empty-search-results">
                        <div class="empty-icon">üîç</div>
                        <div class="empty-title">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>
                        <div class="empty-text">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ü–∏—Ç–∞—Ç—ã</div>
                    </div>
                `;
            } else {
                return this.renderEmptyQuotes(this.currentFilter);
            }
        }
        
        // –í—ã–∑—ã–≤–∞–µ–º renderQuoteItem —Å showAnalysis = false (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        return filteredQuotes.map(quote => this.renderQuoteItem(quote, false)).join('');
    }

    renderPagination() {
        const total = this.state.get('quotes.total') || 0;
        if (total <= this.itemsPerPage) return '';

        const totalPages = Math.max(1, Math.ceil(total / this.itemsPerPage));
        const start = (this.currentPage - 1) * this.itemsPerPage + 1;
        const end = Math.min(this.currentPage * this.itemsPerPage, total);

        const canGoPrev = this.currentPage > 1;
        const canGoNext = this.currentPage < totalPages;

        return `
            <div class="quotes-pagination">
                <div class="pagination-info">
                    –ü–æ–∫–∞–∑–∞–Ω–æ ${start}-${end} –∏–∑ ${total} —Ü–∏—Ç–∞—Ç
                </div>
                <div class="pagination-controls">
                    <button class="pagination-btn ${!canGoPrev ? 'disabled' : ''}" id="prevPageBtn" ${!canGoPrev ? 'disabled' : ''}>
                        <span class="pagination-arrow">‚Üê</span>
                        <span class="pagination-text">–ü—Ä–µ–¥—ã–¥—É—â–∞—è</span>
                    </button>
                    <span class="pagination-current">
                        –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${this.currentPage} –∏–∑ ${totalPages}
                    </span>
                    <button class="pagination-btn ${!canGoNext ? 'disabled' : ''}" id="nextPageBtn" ${!canGoNext ? 'disabled' : ''}>
                        <span class="pagination-text">–°–ª–µ–¥—É—é—â–∞—è</span>
                        <span class="pagination-arrow">‚Üí</span>
                    </button>
                </div>
            </div>
        `;
    }
    
    /**
     * üìù –ö–ê–†–¢–û–ß–ö–ê –¶–ò–¢–ê–¢–´ (–û–ë–ù–û–í–õ–ï–ù–û: —Å kebab –º–µ–Ω—é –∏ –Ω–æ–≤—ã–º–∏ —Å—Ç–∏–ª—è–º–∏!)
     */
    renderQuoteItem(quote, showAnalysis = false) {
        const isFavorite = quote.isFavorite || false;
        const author = quote.author ? `‚Äî ${quote.author}` : '';
        const heartIcon = isFavorite ? '‚ù§Ô∏è' : 'ü§ç';
        const likedClass = isFavorite ? ' liked' : '';

        // Ensure aiAnalysis is present
        const aiAnalysis = quote.aiAnalysis || {
            category: quote.category,
            themes: quote.themes,
            sentiment: quote.sentiment,
            insights: quote.insights,
            summary: quote.summary
        };
        
        // Highlight search terms if search query exists
        const displayText = this.searchQuery && this.searchQuery.trim() 
            ? this.highlightSearchTerm(quote.text, this.searchQuery) 
            : quote.text;
        const displayAuthor = author && this.searchQuery && this.searchQuery.trim()
            ? this.highlightSearchTerm(author, this.searchQuery)
            : author;

        // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –±–µ—Ä–µ–º summary –∏ insights –∏–∑ –Ω–æ–≤—ã—Ö –∏ —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        const summary = showAnalysis ? (aiAnalysis.summary || '') : '';
        const insights = showAnalysis ? (aiAnalysis.insights || '') : '';

        return `
            <div class="quote-card my-quotes${likedClass}" data-id="${quote._id || quote.id}" data-quote-id="${quote._id || quote.id}">
                <button class="quote-kebab" aria-label="menu" title="–î–µ–π—Å—Ç–≤–∏—è">‚Ä¶</button>
                <div class="quote-text">${displayText}</div>
                ${displayAuthor ? `<div class="quote-author">${displayAuthor}</div>` : ''}
                ${summary ? `<div class="quote-summary" style="margin-top:8px;color:var(--text-primary)"><b>–û—Ç–≤–µ—Ç –ê–Ω–Ω—ã:</b> ${summary}</div>` : ''}
                ${insights ? `<div class="quote-insight" style="margin-top:6px;"><b>–ò–Ω—Å–∞–π—Ç:</b> ${insights}</div>` : ''}
                <div class="quote-actions-inline">
                    <button class="action-btn" data-action="edit" aria-label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—É" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button class="action-btn" data-action="favorite" aria-label="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" title="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ">${heartIcon}</button>
                    <button class="action-btn action-delete" data-action="delete" aria-label="–£–¥–∞–ª–∏—Ç—å —Ü–∏—Ç–∞—Ç—É" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                </div>
             </div>
        `;
    }
    
    /**
     * üì≠ –ü–£–°–¢–û–ï –°–û–°–¢–û–Ø–ù–ò–ï
     */
    renderEmptyQuotes(filter = 'all') {
        if (filter === 'favorites') {
            return `
                <div class="empty-state">
                    <div class="empty-icon">ü§ç</div>
                    <div class="empty-title">–ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç</div>
                    <div class="empty-text">–î–æ–±–∞–≤—å—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ü–∏—Ç–∞—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Å –ø–æ–º–æ—â—å—é —Å–µ—Ä–¥–µ—á–∫–∞.</div>
                </div>
            `;
        }
        // –û–±—ã—á–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        return `
            <div class="empty-state">
                <div class="empty-icon">üìù</div>
                <div class="empty-title">–ü–æ–∫–∞ –Ω–µ—Ç —Ü–∏—Ç–∞—Ç</div>
                <div class="empty-text">–ù–∞—á–Ω–∏—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –º—ã—Å–ª–∏!</div>
                <button class="empty-action" id="emptyAddBtn">
                    ‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É
                </button>
            </div>
        `;
    }
    
    /**
     * üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
     */
    attachEventListeners() {
        this.attachTabListeners();
        this.attachFormListeners();
        this.attachFilterListeners();
        this.attachQuoteActionListeners();
        this.attachSearchListeners();
        this.attachAddTabKeyboardHandler();

        const prevPageBtn = document.getElementById('prevPageBtn');
        const nextPageBtn = document.getElementById('nextPageBtn');
        if (prevPageBtn) prevPageBtn.addEventListener('click', () => this.changePage(this.currentPage - 1));
        if (nextPageBtn) nextPageBtn.addEventListener('click', () => this.changePage(this.currentPage + 1));

        // NEW: –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const emptyAddBtn = document.getElementById('emptyAddBtn');
        if (emptyAddBtn) {
            emptyAddBtn.addEventListener('click', () => this.switchTab('add'));
        }
    }
    
    attachTabListeners() {
        const tabs = document.querySelectorAll('.tab[data-tab]');
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const tabName = tab.dataset.tab;
                this.switchTab(tabName);
            });
        });
    }

    attachFilterListeners() {
        const filterTabs = document.querySelectorAll('.filter-tab[data-filter]');
        filterTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const filter = tab.dataset.filter;
                this.applyFilter(filter);
            });
        });
    }

    attachFormListeners() {
        const quoteText = document.getElementById('quoteText');
        const quoteAuthor = document.getElementById('quoteAuthor');
        const saveBtn = document.getElementById('saveQuoteBtn');
        
        // Clear any existing blur timer
        if (this.blurTimer) {
            clearTimeout(this.blurTimer);
            this.blurTimer = null;
        }
        
        const onFocus = () => {
            // Clear any pending blur timer to prevent premature keyboard-open removal
            if (this.blurTimer) {
                clearTimeout(this.blurTimer);
                this.blurTimer = null;
            }
            
            // Keyboard Lock: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π scroll –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            if (!this._scrollLockActive) {
                const scroller = document.querySelector('.content');
                if (scroller) {
                    this._savedScrollTop = scroller.scrollTop;
                    scroller.classList.add('keyboard-lock');
                }
                this._scrollLockActive = true;
            }
            
            document.body.classList.add('keyboard-open');
            if (window.viewportCalculator && window.viewportCalculator.updateViewportHeight) {
                window.viewportCalculator.updateViewportHeight();
            }
        };
        
        const onBlur = () => {
            // Add stabilization delay to handle focus switching between form fields
            // This ensures the bottom navigation doesn't flicker when moving from quote text to author
            if (this.blurTimer) {
                clearTimeout(this.blurTimer);
            }
            
            this.blurTimer = setTimeout(() => {
                // Double-check if no form field is currently focused before removing keyboard-open
                const quoteTextElement = document.getElementById('quoteText');
                const quoteAuthorElement = document.getElementById('quoteAuthor');
                const activeElement = document.activeElement;
                
                const isFormFieldFocused = activeElement === quoteTextElement || activeElement === quoteAuthorElement;
                
                if (!isFormFieldFocused) {
                    const scroller = document.querySelector('.content');
                    if (scroller && this._scrollLockActive) {
                        // –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é (visualViewport –µ—Å–ª–∏ –µ—Å—Ç—å)
                        const finalize = () => {
                            scroller.classList.remove('keyboard-lock');
                            if (typeof this._savedScrollTop === 'number') {
                                scroller.scrollTop = Math.min(this._savedScrollTop, scroller.scrollHeight - scroller.clientHeight);
                            }
                            this._scrollLockActive = false;
                            this._savedScrollTop = null;
                        };
                        if (window.visualViewport) {
                            let checks = 0;
                            const baseHeight = window.visualViewport.height;
                            const watcher = () => {
                                checks++;
                                // –µ—Å–ª–∏ –≤—ã—Å–æ—Ç–∞ –ø–æ—á—Ç–∏ –≤–µ—Ä–Ω—É–ª–∞—Å—å
                                if (Math.abs(window.visualViewport.height - baseHeight) < 4 || checks > 10) {
                                    finalize();
                                } else {
                                    requestAnimationFrame(watcher);
                                }
                            };
                            requestAnimationFrame(watcher);
                        } else {
                            // Fallback
                            setTimeout(finalize, 120);
                        }
                    }
                    
                    document.body.classList.remove('keyboard-open');
                    if (window.viewportCalculator && window.viewportCalculator.updateViewportHeight) {
                        // Additional delay for viewport calculator to ensure bottom nav returns properly
                        setTimeout(() => {
                            window.viewportCalculator.updateViewportHeight();
                        }, 50);
                    }
                }
                this.blurTimer = null;
            }, 150); // 150ms stabilization delay
        };
        
        if (quoteText) {
            quoteText.addEventListener('input', (e) => {
                this.formData.text = e.target.value;
                this.updateSaveButtonState();
            });
            quoteText.addEventListener('focus', onFocus);
            quoteText.addEventListener('blur', onBlur);
        }
        
        if (quoteAuthor) {
            quoteAuthor.addEventListener('input', (e) => {
                this.formData.author = e.target.value;
                this.updateSaveButtonState();
            });
            quoteAuthor.addEventListener('focus', onFocus);
            quoteAuthor.addEventListener('blur', onBlur);
            
            // üîß FIX 1: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ "—É–µ–∑–∂–∞–Ω–∏—è" –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            // –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∏–∑ textarea –≤ input –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ blur
            const handleAuthorMouseDown = (e) => {
                const quoteTextElement = document.getElementById('quoteText');
                
                // –ï—Å–ª–∏ —Ñ–æ–∫—É—Å —Å–µ–π—á–∞—Å –≤ textarea, —Å–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å —Å –Ω–µ–≥–æ
                if (quoteTextElement && quoteTextElement === document.activeElement) {
                    quoteTextElement.blur();
                    
                    // –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∞
                    setTimeout(() => {
                        quoteAuthor.focus();
                        // –§–æ—Ä—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç viewport –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è "–∑–∞–≤–∏—Å–∞–Ω–∏—è" –ø–∞–Ω–µ–ª–∏
                        if (window.viewportCalculator && window.viewportCalculator.updateViewportHeight) {
                            window.viewportCalculator.updateViewportHeight();
                        }
                    }, 50);
                    
                    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∞
                    e.preventDefault();
                }
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º—ã—à–∏ –∏ —Ç–∞—á-—Å–æ–±—ã—Ç–∏–π
            quoteAuthor.addEventListener('mousedown', handleAuthorMouseDown);
            quoteAuthor.addEventListener('touchstart', handleAuthorMouseDown, { passive: false });
        }
        
        if (saveBtn) {
            saveBtn.addEventListener('click', () => this.handleSaveQuote());
        }
    }
     
    attachQuoteActionListeners() {
        // Keep existing logic for search tab only
        const quoteActions = document.querySelectorAll('.quote-action[data-action]');
        quoteActions.forEach(action => {
            action.addEventListener('click', (e) => {
                e.stopPropagation();
                const actionType = action.dataset.action;
                const quoteItem = action.closest('.quote-item');
                const quoteId = quoteItem?.dataset.quoteId;
                
                if (quoteId) {
                    this.handleQuoteAction(actionType, quoteId);
                }
            });
        });

        // ‚úÖ RESTORED: Container-level delegation for my-quotes (reverted from PR #82)
        const myQuotesContainer = document.querySelector('.my-quotes-container');
        if (myQuotesContainer) {
            // Remove any existing listeners to avoid duplicates
            myQuotesContainer.removeEventListener('click', this._handleMyQuotesClick);
            
            // Bind and add the click handler
            this._handleMyQuotesClick = this._handleMyQuotesClick.bind(this);
            myQuotesContainer.addEventListener('click', this._handleMyQuotesClick, false);
        }
    }
    
    attachSearchListeners() {
        // Handle search input in my-quotes tab
        const quotesSearchInput = document.getElementById('quotesSearchInput');
        
        if (quotesSearchInput) {
            // Debounced search for better UX
            let searchTimeout;
            
            quotesSearchInput.addEventListener('input', (e) => {
                this.searchQuery = e.target.value;
                
                // Clear previous timeout
                if (searchTimeout) {
                    clearTimeout(searchTimeout);
                }
                
                // Update display with delay
                searchTimeout = setTimeout(() => {
                    this.rerender();
                }, 300); // 300ms delay
            });
            
            quotesSearchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    // Immediate update when Enter is pressed
                    if (searchTimeout) {
                        clearTimeout(searchTimeout);
                    }
                    this.rerender();
                }
            });
        }
    }
    
    /**
     * üçé iOS ADD TAB HANDLER - Custom tap-outside handler for Add tab only
     */
    attachAddTabKeyboardHandler() {
        // Only for iOS/touch devices and when on "add" tab
        if (!window.isTouchDevice || !window.isTouchDevice()) {
            return;
        }
        
        // Remove any existing handler
        this.removeAddTabKeyboardHandler();
        
        this.addTabKeyboardHandler = (e) => {
            // Only handle on "add" tab
            if (this.activeTab !== 'add') {
                return;
            }
            
            const target = e.target;
            
            // Check if tap is outside form inputs
            const isFormInput = target.matches('#quoteText, #quoteAuthor') || 
                               target.closest('#quoteText, #quoteAuthor');
            
            if (!isFormInput) {
                // Find focused form elements and blur them
                const quoteText = document.getElementById('quoteText');
                const quoteAuthor = document.getElementById('quoteAuthor');
                
                let didBlur = false;
                
                if (quoteText && quoteText === document.activeElement) {
                    quoteText.blur();
                    didBlur = true;
                }
                if (quoteAuthor && quoteAuthor === document.activeElement) {
                    quoteAuthor.blur();
                    didBlur = true;
                }
                
                // Immediately update viewport height after blur for instant bottom-nav return
                if (didBlur && window.viewportCalculator && window.viewportCalculator.updateViewportHeight) {
                    window.viewportCalculator.updateViewportHeight();
                }
            }
        };
        
        // Add touch handler to document
        document.addEventListener('touchstart', this.addTabKeyboardHandler, { passive: true });
    }
    
    /**
     * Remove Add tab keyboard handler
     */
    removeAddTabKeyboardHandler() {
        if (this.addTabKeyboardHandler) {
            document.removeEventListener('touchstart', this.addTabKeyboardHandler);
            this.addTabKeyboardHandler = null;
        }
    }
    
    /**
     * üîß –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ï–ô–°–¢–í–ò–ô
     */
    switchTab(tabName) {
        const previousTab = this.activeTab;
        this.activeTab = tabName;
        this.telegram.hapticFeedback('light');
        
        // Clear any pending blur timer when switching tabs
        if (this.blurTimer) {
            clearTimeout(this.blurTimer);
            this.blurTimer = null;
        }
        
        // Handle analysis timer for Anna's insights
        this.handleAnalysisTimerOnTabSwitch(previousTab, tabName);
        
        this.rerender();
        
        // Note: MyQuotesView management removed for reliability - kebab functionality is now self-contained
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–º–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ç–∞–±–æ–≤ —Å userId
        if (tabName === 'my-quotes') {
            this.waitForValidUserId().then(userId => {
                this.loadQuotes(true, userId);
            }).catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ç–∞–±–∞:', error);
            });
        }
    }
    
    /**
     * ‚è±Ô∏è ANALYSIS TIMER HANDLERS - Manage Anna's analysis display time
     */
    handleAnalysisTimerOnTabSwitch(previousTab, currentTab) {
        // Reset analysis if returning to "add" tab after some time or if analysis timer expired
        if (currentTab === 'add' && previousTab !== 'add') {
            this.checkAnalysisTimerExpiry();
        }
    }
    
    /**
     * Start analysis timer (20 seconds)
     */
    startAnalysisTimer() {
        this.clearAnalysisTimer();
        this.analysisStartTime = Date.now();
        this.analysisVisible = true;
        
        this.analysisTimer = setTimeout(() => {
            this.resetAnalysisToDefault();
        }, 20000); // 20 seconds
    }
    
    /**
     * Clear analysis timer
     */
    clearAnalysisTimer() {
        if (this.analysisTimer) {
            clearTimeout(this.analysisTimer);
            this.analysisTimer = null;
        }
    }
    
    /**
     * Check if analysis timer has expired
     */
    checkAnalysisTimerExpiry() {
        if (this.analysisStartTime) {
            const elapsed = Date.now() - this.analysisStartTime;
            const twentySeconds = 20000;
            
            if (elapsed >= twentySeconds) {
                this.resetAnalysisToDefault();
            }
        }
    }
    
    /**
     * Reset analysis to default state
     */
    resetAnalysisToDefault() {
        this.clearAnalysisTimer();
        this.analysisStartTime = null;
        this.analysisVisible = false;
        
        // Clear the lastAddedQuote analysis data
        this.state.set('lastAddedQuote', null);
        
        // Re-render to show default text
        if (this.activeTab === 'add') {
            this.rerender();
        }
    }

    /**
     * Mount MyQuotesView on the current my-quotes container
     */
    mountMyQuotesView() {
        // Only mount if MyQuotesView is available and not already mounted
        if (typeof window.MyQuotesView === 'undefined' || this._myQuotesView) {
            return;
        }
        
        // Find the my-quotes container
        const container = document.querySelector('.my-quotes-container');
        if (container) {
            this._myQuotesView = new window.MyQuotesView(container);
            this._myQuotesView.mount();
            console.log('‚úÖ MyQuotesView mounted on container');
        } else {
            console.warn('‚ö†Ô∏è .my-quotes-container not found for MyQuotesView');
        }
    }
    
    /**
     * Unmount MyQuotesView
     */
    unmountMyQuotesView() {
        if (this._myQuotesView) {
            this._myQuotesView.unmount();
            this._myQuotesView = null;
            console.log('‚úÖ MyQuotesView unmounted');
        }
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ MyQuotesView –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ç–∞–±–æ–≤
     */
    handleMyQuotesViewForTab(currentTab, previousTab) {
        // –†–∞–∑–º–æ–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–∏ —É—Ö–æ–¥–µ —Å my-quotes
        if (previousTab === 'my-quotes') {
            this.unmountMyQuotesView();
        }
        
        // –ú–æ–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ my-quotes
        if (currentTab === 'my-quotes') {
            // –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ —Ä–µ–Ω–¥–µ—Ä, –∑–∞—Ç–µ–º –º–æ–Ω—Ç–∏—Ä—É–µ–º
            setTimeout(() => {
                this.mountMyQuotesView();
            }, 50);
        }
    }

    /**
     * PRODUCTION REFACTOR: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
     */
    async handleSaveQuote() {
        console.log('LOG: DiaryPage.handleSaveQuote –≤—ã–∑–≤–∞–Ω');
        if (!this.isFormValid()) {
            console.log('LOG: DiaryPage.handleSaveQuote - —Ñ–æ—Ä–º–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞');
            return;
        }

        const saveBtn = document.getElementById('saveQuoteBtn');
        if (saveBtn && saveBtn.disabled) {
            console.log('LOG: DiaryPage.handleSaveQuote - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
            return;
        }

        try {
            this.telegram.hapticFeedback('medium');
            const userId = await this.waitForValidUserId();
            const quoteData = {
                text: this.formData.text.trim(),
                author: this.formData.author.trim(),
                source: this.formData.source?.trim() || 'mini_app'
            };

            // üîß GLOBAL DUP CHECK (–ù–ï —Ç–æ–ª—å–∫–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è)
            const existingQuotes = this.state.get('quotes.items') || [];
            if (window.QuoteUtils && window.QuoteUtils.isDuplicateQuote(existingQuotes, quoteData.text, quoteData.author)) {
                if (typeof window.showNotification === 'function') {
                    window.showNotification('–≠—Ç–∞ —Ü–∏—Ç–∞—Ç–∞ —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º –¥–Ω–µ–≤–Ω–∏–∫–µ.', 'info', 5000);
                }
                if (saveBtn) {
                    saveBtn.disabled = !this.isFormValid();
                    saveBtn.textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫';
                }
                this.telegram.hapticFeedback('light');
                return;
            }

            if (saveBtn) {
                saveBtn.disabled = true;
                saveBtn.textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º...';
            }

            const savedQuote = await this.api.addQuote(quoteData, userId);
            const data = savedQuote?.data || savedQuote;

            // –ë–µ—Ä—ë–º —Ü–∏—Ç–∞—Ç—É –∏–∑ data.quote (–∏–ª–∏ data, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–º–µ–Ω—è–µ—Ç—Å—è)
            const quote = data.quote || data;

            // –ë–µ—Ä—ë–º –∞–Ω–∞–ª–∏–∑ –∏–∑ quote.aiAnalysis, –∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ‚Äî –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π quote
            const aiAnalysis = quote.aiAnalysis || {};
            const insights = aiAnalysis.insights || quote.insights || '';
            const themes = aiAnalysis.themes || quote.themes || [];
            const category = aiAnalysis.category || quote.category || '';
            const sentiment = aiAnalysis.sentiment || quote.sentiment || '';
            const summary = aiAnalysis.summary || '';

            // –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
            const completeQuote = {
                ...quote,
                id: quote.id || quote._id,
                insights,
                themes,
                category,
                sentiment,
                aiAnalysis: { category, themes, sentiment, summary, insights }
            };

            if (window.QuoteUtils) {
                window.QuoteUtils.addQuoteToDuplicateIndex(completeQuote);
            }

            // –ö–ª–∞–¥—ë–º –∞–Ω–∞–ª–∏–∑ –≤ state –¥–ª—è renderAIInsight
            this.state.set('lastAddedQuote', completeQuote);

            // –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ analysisVisible=true, —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º —Ä–µ–Ω–¥–µ—Ä!
            if (insights || summary) {
                this.startAnalysisTimer();
            }

            this.clearForm();
            this.rerender();

            if (insights && typeof window !== 'undefined' && typeof window.showNotification === 'function') {
                window.showNotification(insights, 'success', 5000);
            } else if (typeof window !== 'undefined' && typeof window.showNotification === 'function') {
                window.showNotification('‚ú® –¶–∏—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫!', 'success');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç
            const currentQuotes = this.state.get('quotes.items') || [];
            const newQuotes = [completeQuote, ...currentQuotes];
            this.state.set('quotes.items', newQuotes);

            // PRODUCTION REFACTOR: –¢–æ–ª—å–∫–æ dispatch —Å–æ–±—ã—Ç–∏–π, StatisticsService —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            document.dispatchEvent(new CustomEvent('quotes:changed', { 
            detail: { type: 'added', id: completeQuote.id, quote: completeQuote } 
            }));

            // PRODUCTION REFACTOR: –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø—Ä—è–º—É—é - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç StatisticsService

            if (saveBtn) {
                saveBtn.textContent = '‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!';
                saveBtn.style.backgroundColor = 'var(--success-color, #22c55e)';
                saveBtn.style.color = 'white';
                setTimeout(() => {
                    saveBtn.disabled = !this.isFormValid();
                    saveBtn.textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫';
                    saveBtn.style.backgroundColor = '';
                    saveBtn.style.color = '';
                }, 2000);
            }

            this.telegram.hapticFeedback('success');
            
            // Clear any pending blur timer to ensure clean state after save
            if (this.blurTimer) {
                clearTimeout(this.blurTimer);
                this.blurTimer = null;
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á—ë—Ç viewport –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è "–ø–æ–¥—Å–∫–æ–∫–∞" –ø–∞–Ω–µ–ª–∏
            if (window.viewportCalculator && window.viewportCalculator.updateViewportHeight) {
                // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º viewport
                document.body.classList.remove('keyboard-open');
                setTimeout(() => {
                    window.viewportCalculator.updateViewportHeight();
                }, 100);
            }
            } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', error);
            
            // üîß FIX 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Ü–∏—Ç–∞—Ç (—É–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ HTTP 429)
            const isQuotaLimitError = error.code === 'QUOTE_LIMIT_EXCEEDED' || 
                                     error.status === 429 ||
                                     (error.response?.status === 429) ||
                                     (error.message && /limit|quota|exceed/i.test(error.message)) ||
                                     (error.response?.data?.message && /limit|quota|exceed/i.test(error.response.data.message)) ||
                                     (error.response?.data?.error && /Daily limit of 10 quotes exceeded/i.test(error.response.data.error));
            
            if (isQuotaLimitError) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ
                if (typeof window.showNotification === 'function') {
                    window.showNotification('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–æ 10 —Ü–∏—Ç–∞—Ç –≤ —Å—É—Ç–∫–∏.', 'info', 6000);
                }
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–±–µ–∑ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞)
                if (saveBtn) {
                    saveBtn.disabled = !this.isFormValid();
                    saveBtn.textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫';
                    saveBtn.style.backgroundColor = '';
                    saveBtn.style.color = '';
                }
                
                this.telegram.hapticFeedback('light'); // –ú—è–≥–∫–æ–µ –≤–∏–±—Ä–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            } else {
                // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
                this.telegram.hapticFeedback('error');
                if (saveBtn) {
                    saveBtn.textContent = '‚ùå –û—à–∏–±–∫–∞';
                    saveBtn.style.backgroundColor = 'var(--error-color, #ef4444)';
                    saveBtn.style.color = 'white';
                    setTimeout(() => {
                        saveBtn.disabled = !this.isFormValid();
                        saveBtn.textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫';
                        saveBtn.style.backgroundColor = '';
                        saveBtn.style.color = '';
                    }, 2000);
                }
            }
        }
    }
    
    async applyFilter(filter) {
        this.currentFilter = filter;
        this.currentPage = 1;

        // –Ø–≤–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        if (filter === 'all') {
            this.dateFrom = undefined;
            this.dateTo = undefined;
        }
        
        // –ù–ï –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º stats!
        this.telegram.hapticFeedback('light');
        this.updateFilterUI();
        try {
            const userId = await this.waitForValidUserId();
            await this.loadQuotes(true, userId); // quotes.items –æ–±–Ω–æ–≤—è—Ç—Å—è, –Ω–æ stats –Ω–µ —Ç—Ä–æ–≥–∞–µ–º!
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞:', error);
        }
        this.rerender();
    }
    
    async changePage(newPage) {
        if (newPage < 1) return;

        const maxPage = Math.max(1, Math.ceil(this.state.get('quotes.total') / this.itemsPerPage));
        if (newPage > maxPage) return;

        // ‚úÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –í –ù–ê–ß–ê–õ–ï
        this.state.set('quotes.loading', true);
        this.rerender();

        this.currentPage = newPage;

        try {
            const userId = await this.waitForValidUserId();
            await this.loadQuotes(true, userId); // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: true –≤–º–µ—Å—Ç–æ false 
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
        } finally {
            // ‚úÖ –£–ë–ò–†–ê–ï–ú –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –í –ö–û–ù–¶–ï (–≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ)
            this.state.set('quotes.loading', false);
            this.rerender(); // ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        }
    }
    
    async handleQuoteAction(actionType, quoteId) {
        this.telegram.hapticFeedback('light');
        
        switch (actionType) {
            case 'favorite':
                await this.toggleFavorite(quoteId);
                break;
            case 'edit':
                this.editQuote(quoteId);
                break;
            case 'more':
                this.showQuoteMenu(quoteId);
                break;
        }
    }
    
    /**
     * PRODUCTION REFACTOR: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
     */
    async toggleFavorite(quoteId, card = null, btn = null) {
        try {
            const quotes = this.state.get('quotes.items') || [];
            const quote = quotes.find(q => q._id === quoteId || q.id === quoteId);
            if (!quote) return;

            const newFavoriteState = !quote.isFavorite;

            // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º state
            quote.isFavorite = newFavoriteState;
            quote.favorite = newFavoriteState;
            this.state.set('quotes.items', [...quotes]);
            
            // PRODUCTION REFACTOR: –¢–æ–ª—å–∫–æ dispatch —Å–æ–±—ã—Ç–∏–π, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ StatisticsService
            document.dispatchEvent(new CustomEvent('quotes:changed', { 
                detail: { type: 'edited', quoteId, updates: { isFavorite: newFavoriteState } } 
            }));
            
            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–µ–∫–µ–Ω–¥ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É
            const userId = await this.waitForValidUserId().catch(() => null);
            await this.api.updateQuote(quoteId, {
                text: quote.text,
                author: quote.author,
                isFavorite: newFavoriteState,
                source: quote.source
            }, userId || undefined);

            // –û–±–Ω–æ–≤–ª—è–µ–º UI –∫–∞—Ä—Ç–æ—á–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            if (card && btn) {
                card.classList.toggle('liked', newFavoriteState);
                btn.textContent = newFavoriteState ? '‚ù§Ô∏è' : 'ü§ç';
            }

            this.telegram.hapticFeedback('success');
            if (!card || !btn) this.rerender();
        } catch (error) {
            console.error('‚úñ –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
            this.telegram.hapticFeedback('error');

            // –û—Ç–∫–∞—Ç state –ø—Ä–∏ –æ—à–∏–±–∫–µ
            const quotes = this.state.get('quotes.items') || [];
            const quote = quotes.find(q => q._id === quoteId || q.id === quoteId);
            if (quote) {
                quote.isFavorite = !quote.isFavorite;
                this.state.set('quotes.items', [...quotes]);
            }

            // –û—Ç–∫–∞—Ç UI
            if (card && btn) {
                const isLiked = card.classList.contains('liked');
                card.classList.toggle('liked', !isLiked);
                btn.textContent = !isLiked ? '‚ù§Ô∏è' : 'ü§ç';
            }
        }
    }
    
    /**
     * üßπ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
     */
    
    isFormValid() {
        return this.formData.text.trim().length > 0 && 
               this.formData.author.trim().length > 0;
    }
    
    updateSaveButtonState() {
        const saveBtn = document.getElementById('saveQuoteBtn');
        if (saveBtn) {
            saveBtn.disabled = !this.isFormValid();
        }
    }
    
    clearForm() {
        this.formData = { text: '', author: '', source: '' };
        
        const quoteText = document.getElementById('quoteText');
        const quoteAuthor = document.getElementById('quoteAuthor');
        
        if (quoteText) quoteText.value = '';
        if (quoteAuthor) quoteAuthor.value = '';
    }
    
    getLastAddedQuote() {
        const quotes = this.state.get('quotes.items') || [];
        return quotes[0];
    }
    
    updateFilterUI() {
        const filterTabs = document.querySelectorAll('.filter-tab');
        filterTabs.forEach(tab => {
            const filter = tab.dataset.filter;
            tab.classList.toggle('active', filter === this.currentFilter);
        });
    }
    
    updateQuotesUI(_quotes) {
        if (this.activeTab === 'my-quotes') {
            this.rerender();
        }
    }

    updateStatsUI(stats) {
        // Update Add tab stats display
        const diaryStatsInfo = document.getElementById('diaryStatsInfo');
        if (diaryStatsInfo && this.activeTab === 'add') {
            // Remove skeleton class if it exists
            diaryStatsInfo.classList.remove('skeleton-stat-block');
            
            const totalQuotes = stats.totalQuotes ?? 0;
            // Always get activityPercent from API data (not local calculation)
            const activityPercent = stats.activityPercent ?? this.state.get('diaryStats.activityPercent') ?? 1;
            
            const newContent = `üìä –£ –≤–∞—Å —É–∂–µ ${totalQuotes} —Ü–∏—Ç–∞—Ç ‚Ä¢ –í—ã –∞–∫—Ç–∏–≤–Ω–µ–µ ${activityPercent}% —á–∏—Ç–∞—Ç–µ–ª–µ–π —Å–æ–æ–±—â–µ—Å—Ç–≤–∞`;
            if (diaryStatsInfo.textContent !== newContent) {
                diaryStatsInfo.textContent = newContent;
                diaryStatsInfo.classList.add('fade-in');
                setTimeout(() => diaryStatsInfo.classList.remove('fade-in'), 300);
            }
        }
        
        // Update My Quotes tab stats display  
        const myQuotesStats = document.getElementById('myQuotesStats');
        if (myQuotesStats && this.activeTab === 'my-quotes') {
            // Remove skeleton class if it exists
            myQuotesStats.classList.remove('skeleton-stat-block');
            
            const diaryStats = this.state.get('diaryStats') || {};
            const totalQuotes = stats.totalQuotes ?? diaryStats.totalQuotes ?? 0;
            const weeklyQuotes = stats.weeklyQuotes ?? diaryStats.weeklyQuotes ?? 0;
            const monthlyQuotes = diaryStats.monthlyQuotes ?? 0;
            const favoritesCount = diaryStats.favoritesCount ?? 0;
            
            const newContent = `üìä –í—Å–µ–≥–æ: ${totalQuotes} ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: ${weeklyQuotes} ‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: ${monthlyQuotes} ‚Ä¢ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ: ${favoritesCount}`;
            if (myQuotesStats.textContent !== newContent) {
                myQuotesStats.textContent = newContent;
                myQuotesStats.classList.add('fade-in');
                setTimeout(() => myQuotesStats.classList.remove('fade-in'), 300);
            }
        }
    }

    updateDiaryStatsUI(diaryStats) {
        // Update Add tab stats display
        const diaryStatsInfo = document.getElementById('diaryStatsInfo');
        if (diaryStatsInfo && this.activeTab === 'add') {
            // Remove skeleton class if it exists
            diaryStatsInfo.classList.remove('skeleton-stat-block');
            
            const stats = this.state.get('stats') || {};
            const totalQuotes = stats.totalQuotes ?? diaryStats.totalQuotes ?? 0;
            // Always use activityPercent from API data
            const activityPercent = diaryStats.activityPercent ?? stats.activityPercent ?? 1;
            
            const newContent = `üìä –£ –≤–∞—Å —É–∂–µ ${totalQuotes} —Ü–∏—Ç–∞—Ç ‚Ä¢ –í—ã –∞–∫—Ç–∏–≤–Ω–µ–µ ${activityPercent}% —á–∏—Ç–∞—Ç–µ–ª–µ–π —Å–æ–æ–±—â–µ—Å—Ç–≤–∞`;
            if (diaryStatsInfo.textContent !== newContent) {
                diaryStatsInfo.textContent = newContent;
                diaryStatsInfo.classList.add('fade-in');
                setTimeout(() => diaryStatsInfo.classList.remove('fade-in'), 300);
            }
        }
        
        // Update My Quotes tab stats display
        const myQuotesStats = document.getElementById('myQuotesStats');
        if (myQuotesStats && this.activeTab === 'my-quotes') {
            // Remove skeleton class if it exists
            myQuotesStats.classList.remove('skeleton-stat-block');
            
            const stats = this.state.get('stats') || {};
            const totalQuotes = stats.totalQuotes ?? diaryStats.totalQuotes ?? 0;
            const weeklyQuotes = stats.weeklyQuotes ?? diaryStats.weeklyQuotes ?? 0;
            const monthlyQuotes = diaryStats.monthlyQuotes ?? 0;
            const favoritesCount = diaryStats.favoritesCount ?? 0;
            
            const newContent = `üìä –í—Å–µ–≥–æ: ${totalQuotes} ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: ${weeklyQuotes} ‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: ${monthlyQuotes} ‚Ä¢ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ: ${favoritesCount}`;
            if (myQuotesStats.textContent !== newContent) {
                myQuotesStats.textContent = newContent;
                myQuotesStats.classList.add('fade-in');
                setTimeout(() => myQuotesStats.classList.remove('fade-in'), 300);
            }
        }
    }
    
    formatQuoteDate(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diffMs = now - date;
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
        
        if (diffHours < 1) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
        if (diffHours < 24) return `${diffHours} —á. –Ω–∞–∑–∞–¥`;
        if (diffDays === 1) return '–í—á–µ—Ä–∞';
        if (diffDays < 7) return `${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
        if (diffDays < 30) return `${Math.floor(diffDays / 7)} –Ω–µ–¥. –Ω–∞–∑–∞–¥`;
        
        return date.toLocaleDateString('ru-RU', { 
            day: 'numeric', 
            month: 'short' 
        });
    }
    
    log(message, data = null) {
        console.log(`[DiaryPage] ${message}`, data || '');
    }
    
    highlightSearchTerm(text, searchTerm) {
        if (!searchTerm) return text;
        
        const regex = new RegExp(`(${searchTerm})`, 'gi');
        return text.replace(regex, '<span class="quote-highlight">$1</span>');
    }
    
    /**
     * üìö –ü–†–ò–ú–ï–†–´ –î–ê–ù–ù–´–• –ò–ó –ö–û–ù–¶–ï–ü–¢–û–í
     */
    getExampleQuotes() {
        return [
            {
                id: '1',
                text: '–í –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ ‚Äî —Ü–µ–ª–∞—è –∂–∏–∑–Ω—å. –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å–ø–æ—Å–æ–±–Ω–æ –Ω–∞ –ø–æ–¥–≤–∏–≥ –∏ –Ω–∞ –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ.',
                author: '–ú–∞—Ä–∏–Ω–∞ –¶–≤–µ—Ç–∞–µ–≤–∞',
                isFavorite: false
            },
            {
                id: '2', 
                text: '–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ª—é–±–∏—Ç—å, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —á—É–≤—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏ —É—Ö–æ–¥–∏—Ç.',
                author: '–≠—Ä–∏—Ö –§—Ä–æ–º–º',
                isFavorite: true
            },
            {
                id: '3',
                text: '–•–æ—Ä–æ—à–∞—è –∂–∏–∑–Ω—å —Å—Ç—Ä–æ–∏—Ç—Å—è, –∞ –Ω–µ –¥–∞—ë—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.',
                author: '–ê–Ω–Ω–∞ –ë—É—Å–µ–ª',
                isFavorite: false
            }
        ];
    }
    
    getExampleSearchResults() {
        return [
            {
                id: '1',
                text: '–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ª—é–±–∏—Ç—å, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —á—É–≤—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏ —É—Ö–æ–¥–∏—Ç.',
                author: '–≠—Ä–∏—Ö –§—Ä–æ–º–º',
                date: '3 –¥–Ω—è –Ω–∞–∑–∞–¥',
                isFavorite: true
            },
            {
                id: '2',
                text: '–ò—Å—Ç–∏–Ω–Ω–∞—è –ª—é–±–æ–≤—å –Ω–µ –∑–Ω–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.',
                author: '–ú–æ—è –º—ã—Å–ª—å',
                date: '5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥', 
                isFavorite: false
            },
            {
                id: '3',
                text: '–õ—é–±–æ–≤—å –∫ —Å–µ–±–µ ‚Äî –æ—Å–Ω–æ–≤–∞ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –≤–∏–¥–æ–≤ –ª—é–±–≤–∏.',
                author: '–ê–Ω–Ω–∞ –ë—É—Å–µ–ª',
                date: '1 –Ω–µ–¥–µ–ª—è –Ω–∞–∑–∞–¥',
                isFavorite: false
            }
        ];
    }
    
    rerender() {
        const container = document.getElementById('page-content');
        if (container) {
            container.innerHTML = this.render();
            this.attachEventListeners();
        }
    }
    
    /**
     * PRODUCTION REFACTOR: Lifecycle –º–µ—Ç–æ–¥—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–æ–ª—å–∫–æ StatisticsService
     */
    onShow() {
        console.log('üìñ DiaryPage: onShow - PRODUCTION –≤–µ—Ä—Å–∏—è —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this._initEditFromQuery();
        
        // PRODUCTION REFACTOR: –£–º–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ StatisticsService
        if (!this.quotesLoaded && !this.statsLoaded) {
            console.log('üîÑ DiaryPage: –ü–µ—Ä–≤—ã–π –ø–æ–∫–∞–∑, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ');
            this.loadInitialData();
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 10 –º–∏–Ω—É—Ç)
            const lastUpdate = this.state.get('stats.lastUpdate');
            const now = Date.now();
            const tenMinutes = 10 * 60 * 1000;
            
            if (!lastUpdate || (now - lastUpdate) > tenMinutes) {
                console.log('üîÑ DiaryPage: –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ StatisticsService');
                if (this.app?.statistics) {
                    Promise.all([
                        this.app.statistics.refreshMainStatsSilent(),
                        this.app.statistics.refreshDiaryStatsSilent()
                    ]).catch(e => console.debug('Stats refresh failed:', e));
                }
            } else {
                console.log('‚úÖ DiaryPage: –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
            }
        }
    }
    
    onHide() {
        console.log('üìñ DiaryPage: onHide');
        // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º - Router —É–ø—Ä–∞–≤–ª—è–µ—Ç —à–∞–ø–∫–∞–º–∏
    }
    
    destroy() {
        this.subscriptions.forEach(unsubscribe => {
            if (typeof unsubscribe === 'function') {
                unsubscribe();
            }
        });
        this.subscriptions = [];
        
        // Clean up Add tab keyboard handler
        this.removeAddTabKeyboardHandler();
        
        // Clean up analysis timer
        this.clearAnalysisTimer();
        
        // Clean up blur timer
        if (this.blurTimer) {
            clearTimeout(this.blurTimer);
            this.blurTimer = null;
        }
        
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–∏—Ç–∞—Ç
        document.removeEventListener('quotes:edit', this._onQuoteEdit, false);
        
        // Remove container-level delegation if it exists
        const myQuotesContainer = document.querySelector('.my-quotes-container');
        if (myQuotesContainer && this._handleMyQuotesClick) {
            myQuotesContainer.removeEventListener('click', this._handleMyQuotesClick, false);
        }
        
        // Unmount MyQuotesView if mounted
        this.unmountMyQuotesView();
        
        // Reset loading flags
        this.quotesLoaded = false;
        this.quotesLoading = false;
        this.statsLoaded = false;
        this.statsLoading = false;
    }

    /**
     * üîó Container-level click handler for my-quotes (restored from pre-PR #82)
     */
    _handleMyQuotesClick(e) {
        // Handle kebab button clicks
        const kebabBtn = e.target.closest('.quote-kebab');
        if (kebabBtn) {
            e.preventDefault();
            e.stopPropagation();
            
            const card = kebabBtn.closest('.quote-card, .quote-item, [data-quote-id]');
            if (card) {
                card.classList.toggle('expanded');
                this.telegram.hapticFeedback('light');
                this._ensureActionsInline(card);
            }
            return;
        }

        // Handle action button clicks
        const actionBtn = e.target.closest('.action-btn[data-action]');
        if (actionBtn) {
            e.preventDefault();
            e.stopPropagation();
            
            const card = actionBtn.closest('.quote-card, .quote-item, [data-quote-id]');
            if (card) {
                const quoteId = card.dataset.id || card.dataset.quoteId || card.getAttribute('data-quote-id');
                const action = actionBtn.dataset.action;
                
                if (quoteId && action) {
                    if (action === 'edit') {
                        this.editQuote(quoteId);
                    } else if (action === 'delete') {
                        this.deleteQuote(quoteId);
                    } else if (action === 'favorite') {
                        this.toggleFavorite(quoteId, card, actionBtn);
                    }
                }
            }
            return;
        }

        // Handle card selection (tap on card itself, not on action buttons)
        const cardTap = e.target.closest('.quote-card, .quote-item, [data-quote-id]');
        if (cardTap && !e.target.closest('.action-btn, .quote-kebab')) {
            const scope = cardTap.closest('.my-quotes-container') || cardTap.parentElement;
            if (scope) scope.querySelectorAll('.active').forEach(el => el.classList.remove('active'));
            cardTap.classList.add('active');
            this.telegram?.hapticFeedback?.('light');
        }
    }

    /**
     * Ensure action buttons are present inline (helper method for container-level delegation)
     */
    _ensureActionsInline(card) {
        let actions = card.querySelector('.quote-actions-inline');
        if (!actions) {
            actions = document.createElement('div');
            actions.className = 'quote-actions-inline';

            const isLiked = card.classList.contains('liked');
            const heartIcon = isLiked ? '‚ù§Ô∏è' : 'ü§ç';

            actions.innerHTML = `
                <button class="action-btn" data-action="edit" aria-label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—É" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                <button class="action-btn" data-action="favorite" aria-label="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" title="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ">${heartIcon}</button>
                <button class="action-btn action-delete" data-action="delete" aria-label="–£–¥–∞–ª–∏—Ç—å —Ü–∏—Ç–∞—Ç—É" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
            `;
            card.appendChild(actions);
        } else {
            const likeBtn = actions.querySelector('[data-action="favorite"]');
            if (likeBtn) {
                const isLiked = card.classList.contains('liked');
                likeBtn.textContent = isLiked ? '‚ù§Ô∏è' : 'ü§ç';
            }
        }
    }

    /**
     * üîó –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–∏—Ç–∞—Ç –∏–∑ MyQuotesView
     */
    _onQuoteEdit(e) {
        try {
            const id = e?.detail?.id;
            if (id) {
                this.editQuote(id);
            }
        } catch (err) {
            console.debug('quotes:edit handler error:', err);
        }
    }

    /**
     * üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    _initEditFromQuery() {
        try {
            const params = new URLSearchParams(location.search);
            const quoteId = params.get('quote');
            const action = params.get('action');
            if (quoteId && action === 'edit') {
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã —É—Å–ø–µ–ª —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è UI
                setTimeout(() => this.editQuote(quoteId), 50);
            }
        } catch (e) {
            console.debug('init edit from query failed:', e);
        }
    }

    /**
     * PRODUCTION REFACTOR: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
     */
async editQuote(quoteId) {  // ‚úÖ –û–î–ù–ê async —Ñ—É–Ω–∫—Ü–∏—è
    try {
        this.log('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã:', quoteId);
        
        const quotes = this.state.get('quotes.items') || [];
        const quote = quotes.find(q => q._id === quoteId || q.id === quoteId);
        
        if (!quote) {
            console.error('‚ùå –¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', quoteId);
            return;
        }

        // ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ prompt (–¥–ª—è MVP)
        // TODO: –í –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const newText = prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã:', quote.text);
        if (newText === null || newText.trim() === '') return; // –û—Ç–º–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        
        const newAuthor = prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∞:', quote.author || '');
        if (newAuthor === null) return; // –û—Ç–º–µ–Ω–∞
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É –ª–æ–∫–∞–ª—å–Ω–æ
        quote.text = newText.trim();
        quote.author = newAuthor.trim();
        quote.isEdited = true;
        quote.editedAt = new Date().toISOString();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º state
        this.state.set('quotes.items', [...quotes]);
        
        // PRODUCTION REFACTOR: –¢–æ–ª—å–∫–æ dispatch —Å–æ–±—ã—Ç–∏–π, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ StatisticsService
        document.dispatchEvent(new CustomEvent('quotes:changed', { 
            detail: { type: 'edited', quoteId, updates: { text: newText.trim(), author: newAuthor.trim() } } 
        }));
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ñ–¥–µ–º –≤–∞–ª–∏–¥–Ω—ã–π userId –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        const validUserId = await this.waitForValidUserId();
        console.log('‚úèÔ∏è DiaryPage: –û–±–Ω–æ–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É –¥–ª—è userId:', validUserId);
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º userId –≤ API –≤—ã–∑–æ–≤
        await this.api.updateQuote(quoteId, {
            text: newText.trim(),
            author: newAuthor.trim()
        }, validUserId);
        console.log('‚úÖ –¶–∏—Ç–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.rerender();
        this.telegram.hapticFeedback('success');
        this.log('‚úÖ –¶–∏—Ç–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
        this.rerender();
        this.log('‚ö†Ô∏è –¶–∏—Ç–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ');
    }
}

    /**
     * PRODUCTION REFACTOR: –£–¥–∞–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
     */
    async deleteQuote(quoteId) {
        try {
            this.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã:', quoteId);

            const quotes = this.state.get('quotes.items') || [];
            const quote = quotes.find(q => q._id === quoteId || q.id === quoteId);

            if (!quote) {
                console.error('‚ùå –¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', quoteId);
                return;
            }

            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            const truncatedText = quote.text.substring(0, 100) + (quote.text.length > 100 ? '...' : '');
            const confirmText = `–£–¥–∞–ª–∏—Ç—å —Ü–∏—Ç–∞—Ç—É?\n\n"${truncatedText}"\n\n‚Äî ${quote.author}`;

            if (!confirm(confirmText)) {
                return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ
            }

            // Reset analysis when deleting a quote
            this.resetAnalysisToDefault();

            // Send optimistic delete event for instant -1 in counter
            if (typeof document !== 'undefined') {
                document.dispatchEvent(new CustomEvent('quotes:changed', {
                    detail: { type: 'deleted', quoteId, optimistic: true }
                }));
            }

            try {
                await this.api.deleteQuote(quoteId);

                // --- –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
                // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ state –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
                this.state.removeQuote(quoteId);

                this.rerender();
                this.telegram.hapticFeedback('success');
                this.log('‚úÖ –¶–∏—Ç–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);

                // Send revert event to undo optimistic -1
                if (typeof document !== 'undefined') {
                    document.dispatchEvent(new CustomEvent('quotes:changed', {
                        detail: { type: 'deleted', quoteId, reverted: true }
                    }));
                }

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ 404 (404 –∑–Ω–∞—á–∏—Ç —É–∂–µ —É–¥–∞–ª–µ–Ω–∞)
                if (error.status !== 404 && error.status !== 200) {
                    alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã: ' + (error.message || error.status));
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', error);
            this.telegram.hapticFeedback('error');
        }
    }
    
    /**
     * ‚ãØ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å —Ü–∏—Ç–∞—Ç–æ–π
     */
    showQuoteMenu(quoteId) {
        try {
            this.log('‚ãØ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–ª—è —Ü–∏—Ç–∞—Ç—ã:', quoteId);
            
            const quotes = this.state.get('quotes.items') || [];
            const quote = quotes.find(q => q._id === quoteId || q.id === quoteId);
            
            if (!quote) {
                console.error('‚ùå –¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', quoteId);
                return;
            }

            // ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ confirm/prompt (–¥–ª—è MVP)
            // TODO: –í –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫—Ä–∞—Å–∏–≤–æ–µ –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é
            
            const truncatedText = quote.text.substring(0, 100) + (quote.text.length > 100 ? '...' : '');
            const choice = prompt(
                `–î–µ–π—Å—Ç–≤–∏—è —Å —Ü–∏—Ç–∞—Ç–æ–π:\n\n"${truncatedText}"\n\n‚Äî ${quote.author}\n\n` +
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n' +
                '1 - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n' +
                '2 - –£–¥–∞–ª–∏—Ç—å\n' +
                '3 - –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å\n' +
                '0 - –û—Ç–º–µ–Ω–∞',
                '0'
            );
            
            switch (choice) {
                case '1':
                    this.editQuote(quoteId);
                    break;
                case '2':
                    this.deleteQuote(quoteId);
                    break;
                case '3':
                    this.copyQuoteToClipboard(quote);
                    break;
                default:
                    // –û—Ç–º–µ–Ω–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä
                    break;
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Ü–∏—Ç–∞—Ç—ã:', error);
            this.telegram.hapticFeedback('error');
        }
    }

    /**
     * üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
     */
    copyQuoteToClipboard(quote) {
        try {
            const textToCopy = `"${quote.text}"\n\n‚Äî ${quote.author}`;
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Clipboard API
            if (navigator.clipboard && navigator.clipboard.writeText) {
                navigator.clipboard.writeText(textToCopy).then(() => {
                    this.telegram.hapticFeedback('success');
                    // TODO: –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
                    console.log('‚úÖ –¶–∏—Ç–∞—Ç–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
                }).catch(error => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
                    this.fallbackCopyToClipboard(textToCopy);
                });
            } else {
                // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                this.fallbackCopyToClipboard(textToCopy);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', error);
            this.telegram.hapticFeedback('error');
        }
    }

    /**
     * üìã Fallback –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
     */
    fallbackCopyToClipboard(text) {
        try {
            const textArea = document.createElement('textarea');
            textArea.value = text;
            textArea.style.position = 'fixed';
            textArea.style.left = '-999999px';
            textArea.style.top = '-999999px';
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            
            const successful = document.execCommand('copy');
            document.body.removeChild(textArea);
            
            if (successful) {
                this.telegram.hapticFeedback('success');
                console.log('‚úÖ –¶–∏—Ç–∞—Ç–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (fallback)');
            } else {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—É');
                this.telegram.hapticFeedback('error');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ fallback –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            this.telegram.hapticFeedback('error');
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
window.diaryPage = null;

// üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.DiaryPage = DiaryPage;

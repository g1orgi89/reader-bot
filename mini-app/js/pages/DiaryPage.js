/**
 * üìñ –î–ù–ï–í–ù–ò–ö –¶–ò–¢–ê–¢ - DiaryPage.js
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - 3 —Ç–∞–±–∞: ‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å, üìö –ú–æ–∏ —Ü–∏—Ç–∞—Ç—ã, üîç –ü–æ–∏—Å–∫
 * - –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã —Å AI –∞–Ω–∞–ª–∏–∑–æ–º
 * - –°–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
 * - –ü–æ–∏—Å–∫ –ø–æ —Ü–∏—Ç–∞—Ç–∞–º —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
 * - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –∏ —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
 */

class DiaryPage {
    constructor(app) {
        this.app = app;
        this.api = app.api;
        this.state = app.state;
        this.telegram = app.telegram;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.activeTab = 'add'; // add, my-quotes, search
        this.currentFilter = 'all'; // all, favorites, this-week, by-author
        this.searchQuery = '';
        this.searchFilters = {
            author: '',
            category: '',
            dateFrom: '',
            dateTo: ''
        };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
        this.formData = {
            text: '',
            author: '',
            source: '',
            tags: []
        };
        
        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        this.currentPage = 1;
        this.itemsPerPage = 20;
        this.hasMore = true;
        
        // –ü–æ–¥–ø–∏—Å–∫–∏
        this.subscriptions = [];
        
        this.init();
    }
    
    /**
     * üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    init() {
        this.setupSubscriptions();
        this.loadInitialData();
    }
    
    /**
     * üì° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
     */
    setupSubscriptions() {
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç
        const quotesSubscription = this.state.subscribe('quotes', (quotes) => {
            this.updateQuotesUI(quotes);
        });
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const statsSubscription = this.state.subscribe('stats', (stats) => {
            this.updateStatsUI(stats);
        });
        
        this.subscriptions.push(quotesSubscription, statsSubscription);
    }
    
    /**
     * üìä –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async loadInitialData() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã –¥–ª—è —Ç–∞–±–∞ "–ú–æ–∏ —Ü–∏—Ç–∞—Ç—ã"
            await this.loadQuotes();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await this.loadStats();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–Ω–µ–≤–Ω–∏–∫–∞:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
        }
    }
    
    /**
     * üìù –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–∏—Ç–∞—Ç
     */
    async loadQuotes(reset = false) {
        try {
            if (reset) {
                this.currentPage = 1;
                this.hasMore = true;
            }
            
            const params = {
                page: this.currentPage,
                limit: this.itemsPerPage,
                sort: 'createdAt',
                order: 'desc'
            };
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if (this.currentFilter === 'favorites') {
                params.favorites = true;
            } else if (this.currentFilter === 'this-week') {
                const weekAgo = new Date();
                weekAgo.setDate(weekAgo.getDate() - 7);
                params.dateFrom = weekAgo.toISOString();
            }
            
            const response = await this.api.getQuotes(params);
            const quotes = response.items || response || [];
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (reset || this.currentPage === 1) {
                this.state.set('quotes.items', quotes);
            } else {
                const existingQuotes = this.state.get('quotes.items') || [];
                this.state.set('quotes.items', [...existingQuotes, ...quotes]);
            }
            
            this.state.update('quotes', {
                total: response.total || quotes.length,
                loading: false,
                lastUpdate: Date.now()
            });
            
            this.hasMore = quotes.length === this.itemsPerPage;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç:', error);
            this.state.set('quotes.loading', false);
        }
    }
    
    /**
     * üìà –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    async loadStats() {
        try {
            const stats = await this.api.getStats();
            this.state.set('stats', stats);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    }
    
    /**
     * üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —Ä–∞–∑–º–µ—Ç–∫–∏
     */
    render() {
        return `
            <div class="diary-page">
                <div class="page-header">üìñ –î–Ω–µ–≤–Ω–∏–∫ —Ü–∏—Ç–∞—Ç</div>
                <div class="content">
                    ${this.renderTabs()}
                    ${this.renderTabContent()}
                </div>
            </div>
        `;
    }
    
    /**
     * üìë –†–µ–Ω–¥–µ—Ä —Ç–∞–±–æ–≤
     */
    renderTabs() {
        return `
            <div class="tabs">
                <button class="tab ${this.activeTab === 'add' ? 'active' : ''}" 
                        data-tab="add">‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å</button>
                <button class="tab ${this.activeTab === 'my-quotes' ? 'active' : ''}" 
                        data-tab="my-quotes">üìö –ú–æ–∏ —Ü–∏—Ç–∞—Ç—ã</button>
                <button class="tab ${this.activeTab === 'search' ? 'active' : ''}" 
                        data-tab="search">üîç –ü–æ–∏—Å–∫</button>
            </div>
        `;
    }
    
    /**
     * üìÑ –†–µ–Ω–¥–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–±–∞
     */
    renderTabContent() {
        switch (this.activeTab) {
            case 'add':
                return this.renderAddTab();
            case 'my-quotes':
                return this.renderMyQuotesTab();
            case 'search':
                return this.renderSearchTab();
            default:
                return this.renderAddTab();
        }
    }
    
    /**
     * ‚úçÔ∏è –†–µ–Ω–¥–µ—Ä —Ç–∞–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã
     */
    renderAddTab() {
        return `
            <div class="tab-content add-tab">
                ${this.renderAddForm()}
                ${this.renderAIInsight()}
                ${this.renderStatsInfo()}
            </div>
        `;
    }
    
    /**
     * üìù –†–µ–Ω–¥–µ—Ä —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
     */
    renderAddForm() {
        return `
            <div class="form-section">
                <div class="form-group">
                    <label class="form-label">üí≠ –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã</label>
                    <textarea class="form-textarea" 
                              id="quoteText" 
                              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ç–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–∞..."
                              maxlength="1000">${this.formData.text}</textarea>
                    <div class="char-count">
                        <span id="charCount">${this.formData.text.length}</span>/1000
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="form-label">‚úçÔ∏è –ê–≤—Ç–æ—Ä</label>
                    <input class="form-input" 
                           id="quoteAuthor" 
                           placeholder="–ö—Ç–æ –∞–≤—Ç–æ—Ä —ç—Ç–∏—Ö —Å–ª–æ–≤?"
                           value="${this.formData.author}"
                           maxlength="100">
                </div>
                
                <div class="form-group">
                    <label class="form-label">üìñ –ò—Å—Ç–æ—á–Ω–∏–∫ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                    <input class="form-input" 
                           id="quoteSource" 
                           placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏, —Å—Ç–∞—Ç—å–∏ –∏–ª–∏ —Ñ–∏–ª—å–º–∞"
                           value="${this.formData.source}"
                           maxlength="200">
                </div>
                
                <button class="save-btn" id="saveQuoteBtn" ${this.isFormValid() ? '' : 'disabled'}>
                    üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫
                </button>
            </div>
        `;
    }
    
    /**
     * ‚ú® –†–µ–Ω–¥–µ—Ä AI –∞–Ω–∞–ª–∏–∑–∞
     */
    renderAIInsight() {
        const lastQuote = this.getLastAddedQuote();
        
        if (!lastQuote || !lastQuote.aiAnalysis) {
            return '';
        }
        
        return `
            <div class="ai-insight">
                <div class="ai-title">
                    <span>‚ú®</span>
                    <span>–ê–Ω–∞–ª–∏–∑ –æ—Ç –ê–Ω–Ω—ã</span>
                </div>
                <div class="ai-text">${lastQuote.aiAnalysis.summary || '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à—É —Ü–∏—Ç–∞—Ç—É...'}</div>
            </div>
        `;
    }
    
    /**
     * üìä –†–µ–Ω–¥–µ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
     */
    renderStatsInfo() {
        const stats = this.state.get('stats') || {};
        const quotes = this.state.get('quotes') || {};
        
        return `
            <div class="stats-summary">
                üìä –£ –≤–∞—Å —É–∂–µ ${stats.totalQuotes || 0} —Ü–∏—Ç–∞—Ç ‚Ä¢ 
                –í—ã –∞–∫—Ç–∏–≤–Ω–µ–µ ${this.getActivityComparison()}% —á–∏—Ç–∞—Ç–µ–ª–µ–π —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
            </div>
        `;
    }
    
    /**
     * üìö –†–µ–Ω–¥–µ—Ä —Ç–∞–±–∞ "–ú–æ–∏ —Ü–∏—Ç–∞—Ç—ã"
     */
    renderMyQuotesTab() {
        const quotes = this.state.get('quotes.items') || [];
        const loading = this.state.get('quotes.loading');
        
        return `
            <div class="tab-content my-quotes-tab">
                ${this.renderFilters()}
                ${this.renderQuotesList(quotes, loading)}
                ${this.hasMore ? this.renderLoadMoreButton() : ''}
            </div>
        `;
    }
    
    /**
     * üîß –†–µ–Ω–¥–µ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    renderFilters() {
        return `
            <div class="filter-tabs">
                <button class="filter-tab ${this.currentFilter === 'all' ? 'active' : ''}" 
                        data-filter="all">–í—Å–µ</button>
                <button class="filter-tab ${this.currentFilter === 'favorites' ? 'active' : ''}" 
                        data-filter="favorites">–ò–∑–±—Ä–∞–Ω–Ω—ã–µ</button>
                <button class="filter-tab ${this.currentFilter === 'this-week' ? 'active' : ''}" 
                        data-filter="this-week">–≠—Ç–∞ –Ω–µ–¥–µ–ª—è</button>
                <button class="filter-tab ${this.currentFilter === 'by-author' ? 'active' : ''}" 
                        data-filter="by-author">–ü–æ –∞–≤—Ç–æ—Ä—É</button>
            </div>
        `;
    }
    
    /**
     * üìã –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ —Ü–∏—Ç–∞—Ç
     */
    renderQuotesList(quotes, loading) {
        if (loading && quotes.length === 0) {
            return `<div class="loading-state">‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ —Ü–∏—Ç–∞—Ç—ã...</div>`;
        }
        
        if (quotes.length === 0) {
            return this.renderEmptyQuotes();
        }
        
        return `
            <div class="quotes-list" id="quotesList">
                ${quotes.map(quote => this.renderQuoteItem(quote)).join('')}
            </div>
        `;
    }
    
    /**
     * üìù –†–µ–Ω–¥–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ —Ü–∏—Ç–∞—Ç—ã
     */
    renderQuoteItem(quote) {
        const createdAt = new Date(quote.createdAt).toLocaleDateString('ru-RU');
        const isFavorite = quote.isFavorite || false;
        
        return `
            <div class="quote-item" data-quote-id="${quote._id}">
                <div class="quote-text">"${quote.text}"</div>
                <div class="quote-meta">
                    <span class="quote-author">${quote.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'}</span>
                    <div class="quote-actions">
                        <button class="quote-action favorite-btn ${isFavorite ? 'active' : ''}" 
                                data-action="favorite" 
                                title="${isFavorite ? '–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}">
                            ${isFavorite ? '‚ù§Ô∏è' : 'ü§ç'}
                        </button>
                        <button class="quote-action" data-action="edit" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                        <button class="quote-action" data-action="more" title="–ï—â–µ">‚ãØ</button>
                    </div>
                </div>
                <div class="quote-date">${createdAt}</div>
                ${quote.source ? `<div class="quote-source">üìñ ${quote.source}</div>` : ''}
            </div>
        `;
    }
    
    /**
     * üì≠ –†–µ–Ω–¥–µ—Ä –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    renderEmptyQuotes() {
        return `
            <div class="empty-state">
                <div class="empty-icon">üìù</div>
                <div class="empty-title">–ü–æ–∫–∞ –Ω–µ—Ç —Ü–∏—Ç–∞—Ç</div>
                <div class="empty-text">–ù–∞—á–Ω–∏—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –º—ã—Å–ª–∏!</div>
                <button class="empty-action" onclick="this.switchTab('add')">
                    ‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É
                </button>
            </div>
        `;
    }
    
    /**
     * ‚¨áÔ∏è –†–µ–Ω–¥–µ—Ä –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ"
     */
    renderLoadMoreButton() {
        return `
            <button class="load-more-btn" id="loadMoreBtn">
                üìö –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ü–∏—Ç–∞—Ç—ã
            </button>
        `;
    }
    
    /**
     * üîç –†–µ–Ω–¥–µ—Ä —Ç–∞–±–∞ –ø–æ–∏—Å–∫–∞
     */
    renderSearchTab() {
        return `
            <div class="tab-content search-tab">
                ${this.renderSearchForm()}
                ${this.renderSearchResults()}
            </div>
        `;
    }
    
    /**
     * üîé –†–µ–Ω–¥–µ—Ä —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞
     */
    renderSearchForm() {
        return `
            <div class="search-form">
                <div class="search-input-group">
                    <input class="search-input" 
                           id="searchInput"
                           placeholder="–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É —Ü–∏—Ç–∞—Ç—ã..."
                           value="${this.searchQuery}">
                    <button class="search-btn" id="searchBtn">üîç</button>
                </div>
                
                <div class="advanced-filters" id="advancedFilters">
                    <div class="filter-row">
                        <input class="filter-input" 
                               id="authorFilter"
                               placeholder="–ê–≤—Ç–æ—Ä"
                               value="${this.searchFilters.author}">
                        <input class="filter-input" 
                               id="categoryFilter"
                               placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
                               value="${this.searchFilters.category}">
                    </div>
                    <div class="filter-row">
                        <input class="filter-input" 
                               type="date" 
                               id="dateFromFilter"
                               value="${this.searchFilters.dateFrom}">
                        <input class="filter-input" 
                               type="date" 
                               id="dateToFilter"
                               value="${this.searchFilters.dateTo}">
                    </div>
                </div>
                
                <button class="toggle-filters-btn" id="toggleFiltersBtn">
                    üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                </button>
            </div>
        `;
    }
    
    /**
     * üìã –†–µ–Ω–¥–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
     */
    renderSearchResults() {
        // –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ renderQuotesList, –Ω–æ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        return `
            <div class="search-results" id="searchResults">
                <div class="search-placeholder">
                    üîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤–∞—à–∏–º —Ü–∏—Ç–∞—Ç–∞–º
                </div>
            </div>
        `;
    }
    
    /**
     * üéØ –ù–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
        this.attachTabListeners();
        
        // –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        this.attachFormListeners();
        
        // –§–∏–ª—å—Ç—Ä—ã —Ü–∏—Ç–∞—Ç
        this.attachFilterListeners();
        
        // –î–µ–π—Å—Ç–≤–∏—è —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
        this.attachQuoteActionListeners();
        
        // –ü–æ–∏—Å–∫
        this.attachSearchListeners();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –µ—â–µ
        this.attachLoadMoreListener();
    }
    
    /**
     * üìë –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∞–±–æ–≤
     */
    attachTabListeners() {
        const tabs = document.querySelectorAll('.tab[data-tab]');
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const tabName = tab.dataset.tab;
                this.switchTab(tabName);
            });
        });
    }
    
    /**
     * üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º—ã
     */
    attachFormListeners() {
        const quoteText = document.getElementById('quoteText');
        const quoteAuthor = document.getElementById('quoteAuthor');
        const quoteSource = document.getElementById('quoteSource');
        const saveBtn = document.getElementById('saveQuoteBtn');
        const charCount = document.getElementById('charCount');
        
        if (quoteText) {
            quoteText.addEventListener('input', (e) => {
                this.formData.text = e.target.value;
                if (charCount) {
                    charCount.textContent = e.target.value.length;
                }
                this.updateSaveButtonState();
            });
        }
        
        if (quoteAuthor) {
            quoteAuthor.addEventListener('input', (e) => {
                this.formData.author = e.target.value;
                this.updateSaveButtonState();
            });
        }
        
        if (quoteSource) {
            quoteSource.addEventListener('input', (e) => {
                this.formData.source = e.target.value;
            });
        }
        
        if (saveBtn) {
            saveBtn.addEventListener('click', () => this.handleSaveQuote());
        }
    }
    
    /**
     * üîß –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    attachFilterListeners() {
        const filterTabs = document.querySelectorAll('.filter-tab[data-filter]');
        filterTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const filter = tab.dataset.filter;
                this.applyFilter(filter);
            });
        });
    }
    
    /**
     * üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
     */
    attachQuoteActionListeners() {
        const quoteActions = document.querySelectorAll('.quote-action[data-action]');
        quoteActions.forEach(action => {
            action.addEventListener('click', (e) => {
                e.stopPropagation();
                const actionType = action.dataset.action;
                const quoteItem = action.closest('.quote-item');
                const quoteId = quoteItem?.dataset.quoteId;
                
                if (quoteId) {
                    this.handleQuoteAction(actionType, quoteId);
                }
            });
        });
    }
    
    /**
     * üîç –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞
     */
    attachSearchListeners() {
        const searchInput = document.getElementById('searchInput');
        const searchBtn = document.getElementById('searchBtn');
        const toggleFiltersBtn = document.getElementById('toggleFiltersBtn');
        
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                this.searchQuery = e.target.value;
            });
            
            searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.performSearch();
                }
            });
        }
        
        if (searchBtn) {
            searchBtn.addEventListener('click', () => this.performSearch());
        }
        
        if (toggleFiltersBtn) {
            toggleFiltersBtn.addEventListener('click', () => this.toggleAdvancedFilters());
        }
    }
    
    /**
     * ‚¨áÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –µ—â–µ
     */
    attachLoadMoreListener() {
        const loadMoreBtn = document.getElementById('loadMoreBtn');
        if (loadMoreBtn) {
            loadMoreBtn.addEventListener('click', () => this.loadMoreQuotes());
        }
    }
    
    /**
     * üìë –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–∞
     */
    switchTab(tabName) {
        this.activeTab = tabName;
        this.telegram.hapticFeedback('light');
        
        // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.rerender();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∞–±–∞
        if (tabName === 'my-quotes') {
            this.loadQuotes(true);
        }
    }
    
    /**
     * üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
     */
    async handleSaveQuote() {
        if (!this.isFormValid()) return;
        
        try {
            this.telegram.hapticFeedback('medium');
            
            const quoteData = {
                text: this.formData.text.trim(),
                author: this.formData.author.trim(),
                source: this.formData.source.trim() || undefined,
                tags: this.formData.tags
            };
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            const saveBtn = document.getElementById('saveQuoteBtn');
            if (saveBtn) {
                saveBtn.disabled = true;
                saveBtn.textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º...';
            }
            
            const savedQuote = await this.api.addQuote(quoteData);
            
            // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const existingQuotes = this.state.get('quotes.items') || [];
            this.state.set('quotes.items', [savedQuote, ...existingQuotes]);
            
            // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const stats = this.state.get('stats') || {};
            this.state.update('stats', {
                totalQuotes: (stats.totalQuotes || 0) + 1,
                thisWeek: (stats.thisWeek || 0) + 1
            });
            
            // –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
            this.clearForm();
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—Ö
            this.showSuccess('‚úÖ –¶–∏—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫!');
            
            // Haptic feedback —É—Å–ø–µ—Ö–∞
            this.telegram.hapticFeedback('success');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É');
            this.telegram.hapticFeedback('error');
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É
            const saveBtn = document.getElementById('saveQuoteBtn');
            if (saveBtn) {
                saveBtn.disabled = false;
                saveBtn.textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫';
            }
        }
    }
    
    /**
     * üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    async applyFilter(filter) {
        this.currentFilter = filter;
        this.telegram.hapticFeedback('light');
        
        // –û–±–Ω–æ–≤–∏—Ç—å UI —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.updateFilterUI();
        
        // –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
        await this.loadQuotes(true);
    }
    
    /**
     * üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
     */
    async handleQuoteAction(actionType, quoteId) {
        this.telegram.hapticFeedback('light');
        
        switch (actionType) {
            case 'favorite':
                await this.toggleFavorite(quoteId);
                break;
            case 'edit':
                this.editQuote(quoteId);
                break;
            case 'more':
                this.showQuoteMenu(quoteId);
                break;
        }
    }
    
    /**
     * ‚ù§Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
     */
    async toggleFavorite(quoteId) {
        try {
            const quotes = this.state.get('quotes.items') || [];
            const quote = quotes.find(q => q._id === quoteId);
            
            if (!quote) return;
            
            const newFavoriteStatus = !quote.isFavorite;
            
            // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            await this.api.updateQuote(quoteId, { isFavorite: newFavoriteStatus });
            
            // –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            quote.isFavorite = newFavoriteStatus;
            this.state.set('quotes.items', [...quotes]);
            
            this.telegram.hapticFeedback('success');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
        }
    }
    
    /**
     * üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
     */
    async performSearch() {
        if (!this.searchQuery.trim()) return;
        
        try {
            this.telegram.hapticFeedback('light');
            
            const searchParams = {
                query: this.searchQuery,
                ...this.searchFilters
            };
            
            const results = await this.api.searchQuotes(searchParams);
            this.updateSearchResults(results);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞');
        }
    }
    
    /**
     * ‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–∏—Ç–∞—Ç
     */
    async loadMoreQuotes() {
        if (!this.hasMore) return;
        
        this.currentPage++;
        await this.loadQuotes();
    }
    
    /**
     * üßπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
     */
    
    isFormValid() {
        return this.formData.text.trim().length > 0 && 
               this.formData.author.trim().length > 0;
    }
    
    updateSaveButtonState() {
        const saveBtn = document.getElementById('saveQuoteBtn');
        if (saveBtn) {
            saveBtn.disabled = !this.isFormValid();
        }
    }
    
    clearForm() {
        this.formData = { text: '', author: '', source: '', tags: [] };
        
        const quoteText = document.getElementById('quoteText');
        const quoteAuthor = document.getElementById('quoteAuthor');
        const quoteSource = document.getElementById('quoteSource');
        const charCount = document.getElementById('charCount');
        
        if (quoteText) quoteText.value = '';
        if (quoteAuthor) quoteAuthor.value = '';
        if (quoteSource) quoteSource.value = '';
        if (charCount) charCount.textContent = '0';
    }
    
    getLastAddedQuote() {
        const quotes = this.state.get('quotes.items') || [];
        return quotes[0];
    }
    
    getActivityComparison() {
        // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const totalQuotes = this.state.get('stats.totalQuotes') || 0;
        return Math.min(Math.round(totalQuotes * 2.5), 95);
    }
    
    updateFilterUI() {
        const filterTabs = document.querySelectorAll('.filter-tab');
        filterTabs.forEach(tab => {
            const filter = tab.dataset.filter;
            tab.classList.toggle('active', filter === this.currentFilter);
        });
    }
    
    updateQuotesUI(quotes) {
        const quotesList = document.getElementById('quotesList');
        if (quotesList && quotes.items) {
            quotesList.innerHTML = quotes.items
                .map(quote => this.renderQuoteItem(quote))
                .join('');
            this.attachQuoteActionListeners();
        }
    }
    
    updateStatsUI(stats) {
        const statsElement = document.querySelector('.stats-summary');
        if (statsElement && stats) {
            statsElement.innerHTML = `
                üìä –£ –≤–∞—Å —É–∂–µ ${stats.totalQuotes || 0} —Ü–∏—Ç–∞—Ç ‚Ä¢ 
                –í—ã –∞–∫—Ç–∏–≤–Ω–µ–µ ${this.getActivityComparison()}% —á–∏—Ç–∞—Ç–µ–ª–µ–π —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
            `;
        }
    }
    
    updateSearchResults(results) {
        const searchResults = document.getElementById('searchResults');
        if (!searchResults) return;
        
        if (results.length === 0) {
            searchResults.innerHTML = `
                <div class="no-results">
                    üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É "${this.searchQuery}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                </div>
            `;
        } else {
            searchResults.innerHTML = results
                .map(quote => this.renderQuoteItem(quote))
                .join('');
            this.attachQuoteActionListeners();
        }
    }
    
    toggleAdvancedFilters() {
        const filters = document.getElementById('advancedFilters');
        if (filters) {
            filters.classList.toggle('visible');
        }
    }
    
    showSuccess(message) {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (this.telegram) {
            this.telegram.showAlert(message);
        }
    }
    
    showError(message) {
        if (this.telegram) {
            this.telegram.showAlert(message);
        }
    }
    
    rerender() {
        const container = document.querySelector('.diary-page .content');
        if (container) {
            container.innerHTML = `
                ${this.renderTabs()}
                ${this.renderTabContent()}
            `;
            this.attachEventListeners();
        }
    }
    
    /**
     * üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
     */
    destroy() {
        this.subscriptions.forEach(unsubscribe => {
            if (typeof unsubscribe === 'function') {
                unsubscribe();
            }
        });
        this.subscriptions = [];
    }
}

// üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.DiaryPage = DiaryPage;
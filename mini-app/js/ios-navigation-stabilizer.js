/**
 * üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô iOS NAVIGATION STABILIZER
 * 
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞ iOS —á–µ—Ä–µ–∑ inline —Å—Ç–∏–ª–∏
 * –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã, –µ—Å–ª–∏ CSS –Ω–µ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
 */

class IOSNavigationStabilizer {
    constructor() {
        this.isIOS = this.detectIOS();
        this.stabilizationInterval = null;
        this.isActive = false;
        this.bottomNav = null;
        
        if (this.isIOS) {
            this.init();
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
     */
    detectIOS() {
        return /iPad|iPhone|iPod/.test(navigator.userAgent) || 
               (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä–∞
     */
    init() {
        console.log('üçé iOS Navigation Stabilizer: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        
        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∫–ª–∞—Å—Å
        document.documentElement.classList.add('ios-device');
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.start());
        } else {
            this.start();
        }
        
        // –¢–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
        window.addEventListener('resize', () => this.stabilize());
        window.addEventListener('orientationchange', () => {
            setTimeout(() => this.stabilize(), 300);
        });
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
     */
    start() {
        this.bottomNav = document.querySelector('.bottom-nav');
        
        if (!this.bottomNav) {
            console.warn('üçé Bottom navigation –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫...');
            setTimeout(() => this.start(), 1000);
            return;
        }

        console.log('üçé iOS Navigation Stabilizer: –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ–∏–∫—Å–æ–≤...');
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è
        this.stabilize();
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º Telegram API —Ñ–∏–∫—Å—ã
        this.applyTelegramFixes();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é
        this.startContinuousStabilization();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventHandlers();
        
        this.isActive = true;
        console.log('‚úÖ iOS Navigation Stabilizer: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
     */
    stabilize() {
        if (!this.bottomNav) return;

        // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï INLINE –°–¢–ò–õ–ò - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        const criticalStyles = {
            'position': 'fixed',
            'bottom': '0',
            'left': '0',
            'right': '0',
            'width': '100vw',
            'z-index': '999999',
            'transform': 'translateZ(0)',
            '-webkit-transform': 'translateZ(0)',
            'will-change': 'auto',
            'transition': 'none',
            '-webkit-transition': 'none',
            'animation': 'none',
            '-webkit-animation': 'none',
            'height': '64px',
            'min-height': '64px',
            'max-height': '64px',
            '-webkit-backface-visibility': 'hidden',
            'backface-visibility': 'hidden',
            'contain': 'layout style paint',
            'isolation': 'isolate',
            'padding-bottom': 'env(safe-area-inset-bottom, 0px)',
            'box-sizing': 'border-box',
            'overscroll-behavior': 'none',
            '-webkit-overscroll-behavior': 'none',
            '-webkit-overflow-scrolling': 'auto'
        };

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∏–ª–∏ –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        Object.entries(criticalStyles).forEach(([property, value]) => {
            this.bottomNav.style.setProperty(property, value, 'important');
        });

        // üîß –°–¢–ê–ë–ò–õ–ò–ó–ê–¶–ò–Ø –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–• –≠–õ–ï–ú–ï–ù–¢–û–í
        const navItems = this.bottomNav.querySelectorAll('.nav-item');
        navItems.forEach((item, index) => {
            const itemStyles = {
                'position': 'relative',
                'transform': 'none',
                '-webkit-transform': 'none',
                'transition': 'none',
                'width': 'calc(20% - 4px)',
                'height': '56px',
                'flex': 'none',
                'display': 'flex',
                'flex-direction': 'column',
                'align-items': 'center',
                'justify-content': 'center',
                'gap': '4px',
                'padding': '4px',
                'box-sizing': 'border-box'
            };

            Object.entries(itemStyles).forEach(([property, value]) => {
                item.style.setProperty(property, value, 'important');
            });

            // –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫
            const icon = item.querySelector('.nav-icon');
            if (icon) {
                const iconStyles = {
                    'width': '24px',
                    'height': '24px',
                    'transform': 'none',
                    '-webkit-transform': 'none',
                    'transition': 'none',
                    'flex-shrink': '0',
                    'display': 'block',
                    'margin': '0 auto'
                };

                Object.entries(iconStyles).forEach(([property, value]) => {
                    icon.style.setProperty(property, value, 'important');
                });
            }

            // –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
            const label = item.querySelector('.nav-label');
            if (label) {
                const labelStyles = {
                    'font-size': '10px',
                    'line-height': '12px',
                    'height': '12px',
                    'transform': 'none',
                    '-webkit-transform': 'none',
                    'transition': 'none',
                    'text-align': 'center',
                    'white-space': 'nowrap',
                    'overflow': 'hidden',
                    'margin': '0',
                    'padding': '0'
                };

                Object.entries(labelStyles).forEach(([property, value]) => {
                    label.style.setProperty(property, value, 'important');
                });
            }
        });

        console.log('üîß iOS Navigation: –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞');
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Telegram API —Ñ–∏–∫—Å–æ–≤
     */
    applyTelegramFixes() {
        if (!window.Telegram?.WebApp) return;

        const tg = window.Telegram.WebApp;

        try {
            // –û—Ç–∫–ª—é—á–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Å–≤–∞–π–ø—ã (Bot API 7.7+)
            if (tg.disableVerticalSwipes && typeof tg.disableVerticalSwipes === 'function') {
                tg.disableVerticalSwipes();
                console.log('üîß Telegram: –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Å–≤–∞–π–ø—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã');
            }

            // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if (tg.expand && typeof tg.expand === 'function') {
                tg.expand();
                console.log('üîß Telegram: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ');
            }

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Safe Area
            if (tg.safeAreaInset) {
                const safeArea = tg.safeAreaInset;
                document.documentElement.style.setProperty('--tg-safe-area-top', `${safeArea.top}px`);
                document.documentElement.style.setProperty('--tg-safe-area-bottom', `${safeArea.bottom}px`);
                document.documentElement.style.setProperty('--tg-safe-area-left', `${safeArea.left}px`);
                document.documentElement.style.setProperty('--tg-safe-area-right', `${safeArea.right}px`);
                console.log('üîß Telegram: Safe Area –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞', safeArea);
            }

            // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞
            this.ensureScrollable();

        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è Telegram API —Ñ–∏–∫—Å–æ–≤:', error);
        }
    }

    /**
     * –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
     */
    ensureScrollable() {
        const isScrollable = document.documentElement.scrollHeight > window.innerHeight;
        
        if (!isScrollable) {
            document.documentElement.style.height = 'calc(100vh + 1px)';
            document.body.style.minHeight = 'calc(100vh + 1px)';
            console.log('üîß iOS: –î–æ–∫—É–º–µ–Ω—Ç —Å–¥–µ–ª–∞–Ω –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–º');
        }

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        window.setTimeout(() => {
            window.scrollTo(0, 1);
            window.setTimeout(() => window.scrollTo(0, 0), 10);
        }, 100);
    }

    /**
     * –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
     */
    startContinuousStabilization() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–µ 500ms
        this.stabilizationInterval = setInterval(() => {
            this.checkAndRestabilize();
        }, 500);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
     */
    checkAndRestabilize() {
        if (!this.bottomNav) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å—Ç–∏–ª–∏
        const currentPosition = getComputedStyle(this.bottomNav).position;
        const currentBottom = getComputedStyle(this.bottomNav).bottom;
        const currentZIndex = getComputedStyle(this.bottomNav).zIndex;

        if (currentPosition !== 'fixed' || currentBottom !== '0px' || parseInt(currentZIndex) < 999999) {
            console.log('‚ö†Ô∏è iOS Navigation: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–∞—Ä—É—à–µ–Ω–∏—è, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è...');
            this.stabilize();
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ bounce —ç—Ñ—Ñ–µ–∫—Ç–∞
        document.body.addEventListener('touchmove', (e) => {
            const scrollableParent = e.target.closest('.scrollable, .modal-content, .page-content');
            if (!scrollableParent) {
                e.preventDefault();
            }
        }, { passive: false });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–æ–ª–ª–∞
        let scrollTimeout;
        window.addEventListener('scroll', () => {
            clearTimeout(scrollTimeout);
            scrollTimeout = setTimeout(() => {
                this.stabilize();
            }, 100);
        }, { passive: true });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è DOM
        if (window.MutationObserver) {
            const observer = new MutationObserver((mutations) => {
                let needsRestabilization = false;
                
                mutations.forEach((mutation) => {
                    if (mutation.target === this.bottomNav || 
                        (mutation.target.contains && mutation.target.contains(this.bottomNav))) {
                        needsRestabilization = true;
                    }
                });
                
                if (needsRestabilization) {
                    setTimeout(() => this.stabilize(), 50);
                }
            });

            observer.observe(document.body, {
                childList: true,
                subtree: true,
                attributes: true,
                attributeFilter: ['style', 'class']
            });
        }
    }

    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ debug —Ä–µ–∂–∏–º–∞
     */
    enableDebug() {
        document.documentElement.classList.add('debug-navigation');
        console.log('üîç iOS Navigation Debug: –í–∫–ª—é—á–µ–Ω');
    }

    /**
     * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ debug —Ä–µ–∂–∏–º–∞
     */
    disableDebug() {
        document.documentElement.classList.remove('debug-navigation');
        console.log('üîç iOS Navigation Debug: –û—Ç–∫–ª—é—á–µ–Ω');
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
     */
    stop() {
        if (this.stabilizationInterval) {
            clearInterval(this.stabilizationInterval);
            this.stabilizationInterval = null;
        }
        this.isActive = false;
        console.log('‚èπÔ∏è iOS Navigation Stabilizer: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
     */
    getStatus() {
        return {
            isIOS: this.isIOS,
            isActive: this.isActive,
            hasBottomNav: !!this.bottomNav,
            telegramAPIAvailable: !!window.Telegram?.WebApp,
            verticalSwipesDisabled: window.Telegram?.WebApp?.isVerticalSwipesEnabled === false,
            documentScrollable: document.documentElement.scrollHeight > window.innerHeight
        };
    }
}

// üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
let iosNavigationStabilizer = null;

function initIOSNavigationStabilizer() {
    if (!iosNavigationStabilizer) {
        iosNavigationStabilizer = new IOSNavigationStabilizer();
        
        // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        window.iosNavigationStabilizer = iosNavigationStabilizer;
        
        // Debug –∫–æ–º–∞–Ω–¥—ã
        window.debugNavigation = {
            stabilize: () => iosNavigationStabilizer.stabilize(),
            status: () => iosNavigationStabilizer.getStatus(),
            enableDebug: () => iosNavigationStabilizer.enableDebug(),
            disableDebug: () => iosNavigationStabilizer.disableDebug(),
            restart: () => {
                iosNavigationStabilizer.stop();
                setTimeout(() => {
                    iosNavigationStabilizer = new IOSNavigationStabilizer();
                    window.iosNavigationStabilizer = iosNavigationStabilizer;
                }, 100);
            }
        };
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initIOSNavigationStabilizer);
} else {
    initIOSNavigationStabilizer();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.IOSNavigationStabilizer = IOSNavigationStabilizer;
window.initIOSNavigationStabilizer = initIOSNavigationStabilizer;

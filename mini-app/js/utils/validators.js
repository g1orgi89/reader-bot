/**
 * ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –§–û–†–ú –ò –î–ê–ù–ù–´–•
 * –†–∞–∑–º–µ—Ä: ~2 KB - —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è Mini App
 * 
 * –°–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –¥–ª—è:
 * - –§–æ—Ä–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
 * - –¶–∏—Ç–∞—Ç –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * - Email, –∏–º–µ–Ω –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –ª–∏–º–∏—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * 
 * üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏–∑ constants.js)
 */

// üìù –ë–ê–ó–û–í–´–ï –í–ê–õ–ò–î–ê–¢–û–†–´

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
 * @param {string} value - –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {{isValid: boolean, message: string}} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function validateRequired(value) {
    const isValid = value && value.toString().trim().length > 0;
    return {
        isValid,
        message: isValid ? '' : window.VALIDATION_MESSAGES?.required || '–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
    };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
 * @param {string} value - –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param {number} minLength - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
 * @returns {{isValid: boolean, message: string}} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function validateMinLength(value, minLength) {
    const str = value ? value.toString().trim() : '';
    const isValid = str.length >= minLength;
    return {
        isValid,
        message: isValid ? '' : (window.VALIDATION_MESSAGES?.minLength?.(minLength) || `–ú–∏–Ω–∏–º—É–º ${minLength} —Å–∏–º–≤–æ–ª–æ–≤`)
    };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
 * @param {string} value - –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param {number} maxLength - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
 * @returns {{isValid: boolean, message: string}} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function validateMaxLength(value, maxLength) {
    const str = value ? value.toString().trim() : '';
    const isValid = str.length <= maxLength;
    return {
        isValid,
        message: isValid ? '' : (window.VALIDATION_MESSAGES?.maxLength?.(maxLength) || `–ú–∞–∫—Å–∏–º—É–º ${maxLength} —Å–∏–º–≤–æ–ª–æ–≤`)
    };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
 * @param {string} value - –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param {RegExp} pattern - –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @returns {{isValid: boolean, message: string}} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function validatePattern(value, pattern, message) {
    const str = value ? value.toString().trim() : '';
    const isValid = !str || pattern.test(str); // –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º
    return {
        isValid,
        message: isValid ? '' : message
    };
}

// üìß –í–ê–õ–ò–î–ê–¢–û–†–´ –ö–û–ù–¢–ê–ö–¢–ù–´–• –î–ê–ù–ù–´–•

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç email –∞–¥—Ä–µ—Å
 * @param {string} email - Email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param {boolean} required - –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ª–∏ –ø–æ–ª–µ
 * @returns {{isValid: boolean, message: string}} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function validateEmail(email, required = false) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if (required) {
        const requiredCheck = validateRequired(email);
        if (!requiredCheck.isValid) return requiredCheck;
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ - –≤–∞–ª–∏–¥–Ω–æ
    if (!email || !email.trim()) {
        return { isValid: true, message: '' };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç email
    const emailPattern = window.VALIDATION_PATTERNS?.email || /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const emailMessage = window.VALIDATION_MESSAGES?.email || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å';
    return validatePattern(email, emailPattern, emailMessage);
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} name - –ò–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param {boolean} required - –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ª–∏ –ø–æ–ª–µ
 * @returns {{isValid: boolean, message: string}} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function validateName(name, required = true) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if (required) {
        const requiredCheck = validateRequired(name);
        if (!requiredCheck.isValid) return requiredCheck;
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ - –≤–∞–ª–∏–¥–Ω–æ
    if (!name || !name.trim()) {
        return { isValid: true, message: '' };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
    const nameMaxLength = window.LIMITS?.nameMaxLength || 100;
    const lengthCheck = validateMaxLength(name, nameMaxLength);
    if (!lengthCheck.isValid) return lengthCheck;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏
    const namePattern = window.VALIDATION_PATTERNS?.name || /^[–∞-—è—ë–ê-–Ø–Åa-zA-Z\s-]+$/;
    const nameMessage = window.VALIDATION_MESSAGES?.name || '–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã';
    return validatePattern(name, namePattern, nameMessage);
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 * @param {string} phone - –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param {boolean} required - –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ª–∏ –ø–æ–ª–µ
 * @returns {{isValid: boolean, message: string}} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function validatePhone(phone, required = false) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if (required) {
        const requiredCheck = validateRequired(phone);
        if (!requiredCheck.isValid) return requiredCheck;
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ - –≤–∞–ª–∏–¥–Ω–æ
    if (!phone || !phone.trim()) {
        return { isValid: true, message: '' };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phonePattern = window.VALIDATION_PATTERNS?.phone || /^\+?[1-9]\d{1,14}$/;
    const phoneMessage = window.VALIDATION_MESSAGES?.phone || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    return validatePattern(phone, phonePattern, phoneMessage);
}

// üìö –í–ê–õ–ò–î–ê–¢–û–†–´ –î–õ–Ø –¶–ò–¢–ê–¢

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
 * @param {string} quoteText - –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
 * @returns {{isValid: boolean, message: string}} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function validateQuoteText(quoteText) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const requiredCheck = validateRequired(quoteText);
    if (!requiredCheck.isValid) return requiredCheck;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    const minLengthCheck = validateMinLength(quoteText, 5);
    if (!minLengthCheck.isValid) {
        return {
            isValid: false,
            message: '–¶–∏—Ç–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.'
        };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    const quoteMaxLength = window.LIMITS?.quoteMaxLength || 1000;
    const maxLengthCheck = validateMaxLength(quoteText, quoteMaxLength);
    if (!maxLengthCheck.isValid) {
        return {
            isValid: false,
            message: window.ERROR_MESSAGES?.quoteTooLong || `–¶–∏—Ç–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º ${quoteMaxLength} —Å–∏–º–≤–æ–ª–æ–≤.`
        };
    }
    
    return { isValid: true, message: '' };
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏–º—è –∞–≤—Ç–æ—Ä–∞ —Ü–∏—Ç–∞—Ç—ã
 * @param {string} author - –ò–º—è –∞–≤—Ç–æ—Ä–∞
 * @returns {{isValid: boolean, message: string}} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function validateQuoteAuthor(author) {
    // –ê–≤—Ç–æ—Ä –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –º—ã—Å–ª—å)
    if (!author || !author.trim()) {
        return { isValid: true, message: '' };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    const authorMaxLength = window.LIMITS?.authorMaxLength || 100;
    const maxLengthCheck = validateMaxLength(author, authorMaxLength);
    if (!maxLengthCheck.isValid) {
        return {
            isValid: false,
            message: `–ò–º—è –∞–≤—Ç–æ—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º ${authorMaxLength} —Å–∏–º–≤–æ–ª–æ–≤.`
        };
    }
    
    return { isValid: true, message: '' };
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é
 * @param {Object} quoteData - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Ü–∏—Ç–∞—Ç—ã
 * @param {string} quoteData.text - –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
 * @param {string} quoteData.author - –ê–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã
 * @returns {{isValid: boolean, errors: Object}} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function validateQuote(quoteData) {
    const errors = {};
    let isValid = true;
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
    const textValidation = validateQuoteText(quoteData.text);
    if (!textValidation.isValid) {
        errors.text = textValidation.message;
        isValid = false;
    }
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∞
    const authorValidation = validateQuoteAuthor(quoteData.author);
    if (!authorValidation.isValid) {
        errors.author = authorValidation.message;
        isValid = false;
    }
    
    return { isValid, errors };
}

// üë§ –í–ê–õ–ò–î–ê–¢–û–†–´ –ü–†–û–§–ò–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ "–û —Å–µ–±–µ"
 * @param {string} bio - –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {{isValid: boolean, message: string}} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function validateBio(bio) {
    // –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    if (!bio || !bio.trim()) {
        return { isValid: true, message: '' };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    const bioMaxLength = window.LIMITS?.bioMaxLength || 500;
    return validateMaxLength(bio, bioMaxLength);
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} profileData - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
 * @param {string} profileData.name - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} profileData.email - Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} profileData.bio - –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {{isValid: boolean, errors: Object}} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function validateProfile(profileData) {
    const errors = {};
    let isValid = true;
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–º—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
    const nameValidation = validateName(profileData.name, true);
    if (!nameValidation.isValid) {
        errors.name = nameValidation.message;
        isValid = false;
    }
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º email (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
    const emailValidation = validateEmail(profileData.email, true);
    if (!emailValidation.isValid) {
        errors.email = emailValidation.message;
        isValid = false;
    }
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
    const bioValidation = validateBio(profileData.bio);
    if (!bioValidation.isValid) {
        errors.bio = bioValidation.message;
        isValid = false;
    }
    
    return { isValid, errors };
}

// üîç –í–ê–õ–ò–î–ê–¢–û–†–´ –ü–û–ò–°–ö–ê

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @returns {{isValid: boolean, message: string}} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function validateSearchQuery(query) {
    // –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–µ–Ω (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ)
    if (!query || !query.trim()) {
        return { isValid: true, message: '' };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    const searchMinLength = window.LIMITS?.searchMinLength || 2;
    const minLengthCheck = validateMinLength(query, searchMinLength);
    if (!minLengthCheck.isValid) {
        return {
            isValid: false,
            message: `–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º ${searchMinLength} —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞`
        };
    }
    
    return { isValid: true, message: '' };
}

// üìä –í–ê–õ–ò–î–ê–¢–û–†–´ –õ–ò–ú–ò–¢–û–í

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç —Ü–∏—Ç–∞—Ç –≤ –¥–µ–Ω—å
 * @param {number} currentCount - –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç –∑–∞ –¥–µ–Ω—å
 * @returns {{isValid: boolean, message: string}} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
function validateDailyQuotesLimit(currentCount) {
    const quotesPerDay = window.LIMITS?.quotesPerDay || 10;
    const isValid = currentCount < quotesPerDay;
    return {
        isValid,
        message: isValid ? '' : (window.ERROR_MESSAGES?.quotesLimit || `–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ü–∏—Ç–∞—Ç –≤ –¥–µ–Ω—å (${quotesPerDay})`)
    };
}

// üõ†Ô∏è –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò

/**
 * –û—á–∏—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –æ—Ç –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @param {Object} obj - –û–±—ä–µ–∫—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
 * @returns {Object} - –û—á–∏—â–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
 */
function sanitizeForValidation(obj) {
    const sanitized = {};
    
    for (const [key, value] of Object.entries(obj)) {
        if (value !== null && value !== undefined) {
            // –û–±—Ä–µ–∑–∞–µ–º —Å—Ç—Ä–æ–∫–∏
            if (typeof value === 'string') {
                sanitized[key] = value.trim();
            } else {
                sanitized[key] = value;
            }
        }
    }
    
    return sanitized;
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
 * @param {Object} formData - –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
 * @param {Object} validationRules - –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @returns {{isValid: boolean, errors: Object}} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function validateForm(formData, validationRules) {
    const errors = {};
    let isValid = true;
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const cleanData = sanitizeForValidation(formData);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    for (const [field, rules] of Object.entries(validationRules)) {
        const value = cleanData[field];
        
        for (const rule of rules) {
            const validation = rule.validator(value, ...rule.params || []);
            if (!validation.isValid) {
                errors[field] = validation.message;
                isValid = false;
                break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–ª—è –Ω–∞ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ
            }
        }
    }
    
    return { isValid, errors };
}

// üåê –ì–õ–û–ë–ê–õ–¨–ù–´–ô –î–û–°–¢–£–ü
window.validateRequired = validateRequired;
window.validateMinLength = validateMinLength;
window.validateMaxLength = validateMaxLength;
window.validatePattern = validatePattern;
window.validateEmail = validateEmail;
window.validateName = validateName;
window.validatePhone = validatePhone;
window.validateQuoteText = validateQuoteText;
window.validateQuoteAuthor = validateQuoteAuthor;
window.validateQuote = validateQuote;
window.validateBio = validateBio;
window.validateProfile = validateProfile;
window.validateSearchQuery = validateSearchQuery;
window.validateDailyQuotesLimit = validateDailyQuotesLimit;
window.sanitizeForValidation = sanitizeForValidation;
window.validateForm = validateForm;

// –ì–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
window.Validators = {
    // –ë–∞–∑–æ–≤—ã–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
    validateRequired,
    validateMinLength,
    validateMaxLength,
    validatePattern,
    
    // –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    validateEmail,
    validateName,
    validatePhone,
    
    // –¶–∏—Ç–∞—Ç—ã
    validateQuoteText,
    validateQuoteAuthor,
    validateQuote,
    
    // –ü—Ä–æ—Ñ–∏–ª—å
    validateBio,
    validateProfile,
    
    // –ü–æ–∏—Å–∫
    validateSearchQuery,
    
    // –õ–∏–º–∏—Ç—ã
    validateDailyQuotesLimit,
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
    sanitizeForValidation,
    validateForm
};
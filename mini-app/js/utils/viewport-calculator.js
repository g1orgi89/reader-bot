/**
 * üîß VIEWPORT HEIGHT CALCULATOR (–ò–°–ü–†–ê–í–õ–ï–ù)
 * 
 * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ 
 * –†–ï–ê–õ–¨–ù–´–• —Ä–∞–∑–º–µ—Ä–æ–≤ header –∏ navigation —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 * 
 * üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ—Ç –û–°–ù–û–í–ù–´–ï CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ö–µ–¥–µ—Ä–æ–≤
 * 
 * @version 1.1.0
 */

class ViewportHeightCalculator {
    constructor() {
        this.isActive = false;
        this.lastUpdateTime = 0; // üîß FIX: Add debounce tracking
        this.minUpdateInterval = 150; // üîß FIX: Minimum 150ms between updates
        this._pageContentWarningLogged = false; // üîß FIX: Track if warning was logged
        this._lastZeroHeightWarning = 0; // üîß FIX: Track last zero height warning
        this._lastLogTime = 0; // üîß FIX: Track last full log time
        this._lastDuplicateNavWarning = 0; // üîß FIX: Track last duplicate nav warning
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        this.updateViewportHeight = this.updateViewportHeight.bind(this);
        this.handleResize = this.handleResize.bind(this);
        
        console.log('üîß ViewportHeightCalculator initialized v1.2.0 with debounce');
    }

    /**
     * üöÄ –ó–∞–ø—É—Å–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
     */
    start() {
        if (this.isActive) return;
        
        this.isActive = true;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–∞–∑—É
        this.updateViewportHeight();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
        window.addEventListener('resize', this.handleResize);
        window.addEventListener('orientationchange', this.handleResize);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö DOM (–ø–æ—è–≤–ª–µ–Ω–∏–µ/–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ header)
        if (window.MutationObserver) {
            this.observer = new MutationObserver(() => {
                setTimeout(this.updateViewportHeight, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è DOM
            });
            
            this.observer.observe(document.body, {
                childList: true,
                subtree: true,
                attributes: true,
                attributeFilter: ['style', 'class']
            });
        }
        
        // Telegram —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        if (window.Telegram?.WebApp) {
            window.Telegram.WebApp.onEvent('viewportChanged', this.handleResize);
        }
        
        console.log('‚úÖ ViewportHeightCalculator started');
    }

    /**
     * ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
     */
    stop() {
        if (!this.isActive) return;
        
        this.isActive = false;
        
        window.removeEventListener('resize', this.handleResize);
        window.removeEventListener('orientationchange', this.handleResize);
        
        if (this.observer) {
            this.observer.disconnect();
            this.observer = null;
        }
        
        console.log('‚èπÔ∏è ViewportHeightCalculator stopped');
    }

    /**
     * üìè –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ viewport –≤—ã—Å–æ—Ç—ã
     */
    updateViewportHeight() {
        try {
            // üîß FIX: Check for page-content first
            const pageContent = document.getElementById('page-content');
            if (!pageContent) {
                // Only log once if not found
                if (!this._pageContentWarningLogged) {
                    console.warn('[viewport] ‚ö†Ô∏è No scroll container (#page-content) detected - using fallback');
                    this._pageContentWarningLogged = true;
                }
            } else if (pageContent.clientHeight <= 0) {
                // Only log occasionally if height is 0 (not every time)
                const now = Date.now();
                if (!this._lastZeroHeightWarning || (now - this._lastZeroHeightWarning) > 5000) {
                    console.warn('[viewport] ‚ö†Ô∏è page-content has no height (clientHeight=0)');
                    this._lastZeroHeightWarning = now;
                }
            }
            
            // üîß FIX: Skip updates when keyboard is open to prevent layout jumps
            const isKeyboardOpen = document.body.classList.contains('keyboard-open');
            if (isKeyboardOpen) {
                return;
            }
            
            // üîß FIX: Debounce - skip if updated too recently
            const now = Date.now();
            if (now - this.lastUpdateTime < this.minUpdateInterval) {
                return;
            }
            this.lastUpdateTime = now;
            
            const realSizes = this.measureRealElementSizes();

            const tg = window.Telegram?.WebApp;
            const baseHeight = tg?.viewportHeight || window.innerHeight;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –≤–æ –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            let telegramHeight = baseHeight;
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –≤—ã—Å–æ—Ç—É –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            const availableHeight = telegramHeight - realSizes.headerHeight - realSizes.bottomNavHeight;
            
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –û–°–ù–û–í–ù–´–ï CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            // –≠—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ base.css –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—ã—Å–æ—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            document.documentElement.style.setProperty('--header-height', `${realSizes.headerHeight}px`);
            document.documentElement.style.setProperty('--bottom-nav-height', `${realSizes.bottomNavHeight}px`);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            document.documentElement.style.setProperty('--real-header-height', `${realSizes.headerHeight}px`);
            document.documentElement.style.setProperty('--real-bottom-nav-height', `${realSizes.bottomNavHeight}px`);
            document.documentElement.style.setProperty('--real-available-height', `${availableHeight}px`);
            document.documentElement.style.setProperty('--real-viewport-height', `${telegramHeight}px`);
            
            // Only log occasionally (every 5 seconds max)
            if (!this._lastLogTime || (now - this._lastLogTime) > 5000) {
                console.log('üîß Viewport heights updated:', {
                    viewport: telegramHeight,
                    realNav: realSizes.bottomNavHeight,
                    available: availableHeight,
                    pageContentExists: !!pageContent,
                    pageContentHeight: pageContent ? pageContent.clientHeight : 0
                });
                this._lastLogTime = now;
            }
            
        } catch (error) {
            console.error('‚ùå ViewportHeightCalculator error:', error);
        }
    }

    /**
     * üìè –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    measureRealElementSizes() {
        let headerHeight = 0;
        let bottomNavHeight = 0;

        // üîß –ù–û–í–û–ï: –ü–æ–∏—Å–∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const inlineHeaderSelectors = ['.user-header-inline', '.home-header-inline'];
        for (const selector of inlineHeaderSelectors) {
            const element = document.querySelector(selector);
            if (element && this.isElementVisible(element)) {
                headerHeight = element.getBoundingClientRect().height;
                break;
            }
        }

        // –ò—â–µ–º –æ–±—ã—á–Ω—ã–µ header —ç–ª–µ–º–µ–Ω—Ç—ã (–Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ö–µ–¥–µ—Ä–æ–≤!)
        if (headerHeight === 0) {
            const headerSelectors = ['.header', '#header', 'header', '.top-nav', '.app-header', '.page-header'];
            for (const selector of headerSelectors) {
                const element = document.querySelector(selector);
                if (element && this.isElementVisible(element)) {
                    headerHeight = element.getBoundingClientRect().height;
                    break;
                }
            }
        }

        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—â–µ–º bottom navigation —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        const navSelectors = ['.bottom-nav', '#bottom-nav', '.navigation', '.nav-bottom', '.footer-nav'];
        const allNavElements = [];
        
        for (const selector of navSelectors) {
            const elements = document.querySelectorAll(selector);
            elements.forEach(element => {
                if (element && this.isElementVisible(element)) {
                    allNavElements.push({
                        element,
                        selector,
                        height: element.getBoundingClientRect().height
                    });
                }
            });
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π
        const visibleNavElements = allNavElements.filter(item => item.height > 0);
        
        if (visibleNavElements.length > 1) {
            // Only log warning occasionally (every 10 seconds)
            const now = Date.now();
            if (!this._lastDuplicateNavWarning || (now - this._lastDuplicateNavWarning) > 10000) {
                console.warn(`‚ö†Ô∏è Found ${visibleNavElements.length} visible bottom navigation elements!`);
                this._lastDuplicateNavWarning = now;
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
            const maxHeightNav = visibleNavElements.reduce((prev, current) => 
                current.height > prev.height ? current : prev
            );
            bottomNavHeight = maxHeightNav.height;
        } else if (visibleNavElements.length === 1) {
            bottomNavHeight = visibleNavElements[0].height;
        }

        return {
            headerHeight,
            bottomNavHeight
        };
    }

    /**
     * üëÅÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    isElementVisible(element) {
        if (!element) return false;
        
        const style = window.getComputedStyle(element);
        const rect = element.getBoundingClientRect();
        
        return (
            style.display !== 'none' &&
            style.visibility !== 'hidden' &&
            style.opacity !== '0' &&
            rect.height > 0 &&
            rect.width > 0
        );
    }

    /**
     * üì± –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    getCurrentPage() {
        const activeNav = document.querySelector('.nav-item.active');
        if (activeNav) {
            return activeNav.getAttribute('data-page') || 'unknown';
        }
        return 'unknown';
    }

    /**
     * üì° –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
     */
    handleResize() {
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ resize
        setTimeout(() => {
            if (this.isActive) {
                this.updateViewportHeight();
            }
        }, 300);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∏ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
window.ViewportHeightCalculator = ViewportHeightCalculator;

// üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫
if (typeof window !== 'undefined') {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(() => {
                window.viewportCalculator = new ViewportHeightCalculator();
                window.viewportCalculator.start();
                console.log('üîß ViewportCalculator auto-started after DOMContentLoaded');
            }, 1000); // –î–∞–µ–º –≤—Ä–µ–º—è –¥—Ä—É–≥–∏–º —Å–∫—Ä–∏–ø—Ç–∞–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
        });
    } else {
        setTimeout(() => {
            window.viewportCalculator = new ViewportHeightCalculator();
            window.viewportCalculator.start();
            console.log('üîß ViewportCalculator auto-started immediately');
        }, 1000);
    }
}

console.log('üîß ViewportHeightCalculator module loaded v1.2.0');
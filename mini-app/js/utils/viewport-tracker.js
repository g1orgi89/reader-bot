/**
 * üì± VIEWPORT TRACKER –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º Mini App
 * 
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç viewport –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
 * –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 * 
 * @filesize ~6KB
 * @version 1.0.0
 */

/**
 * @typedef {Object} ViewportData
 * @property {number} innerHeight
 * @property {number} innerWidth
 * @property {number} telegramHeight
 * @property {number} calculatedContentHeight
 * @property {number} actualContentHeight
 * @property {number} difference
 */

class ViewportTracker {
    /**
     * @type {string} - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
     */
    sessionId = null;

    /**
     * @type {boolean} - –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ç—Ä–µ–∫–µ—Ä
     */
    isActive = false;

    /**
     * @type {number} - –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö (ms)
     */
    reportInterval = 10000; // 10 —Å–µ–∫—É–Ω–¥

    /**
     * @type {number} - ID –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
     */
    intervalId = null;

    /**
     * @type {Array} - –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    dataCache = [];

    /**
     * @type {Object} - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    lastMeasurement = null;

    /**
     * @type {boolean} - –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
     */
    debugMode = false;

    constructor() {
        this.sessionId = this.generateSessionId();
        this.debugMode = window.location.hostname === 'localhost' || 
                         window.location.search.includes('debug=true');
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        this.measureViewport = this.measureViewport.bind(this);
        this.handleResize = this.handleResize.bind(this);
        this.handleVisibilityChange = this.handleVisibilityChange.bind(this);
        
        console.log('üì± ViewportTracker initialized:', {
            sessionId: this.sessionId.substring(0, 8),
            debugMode: this.debugMode
        });
    }

    /**
     * üöÄ –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–∫–µ—Ä–∞
     */
    start() {
        if (this.isActive) {
            console.warn('‚ö†Ô∏è ViewportTracker already active');
            return;
        }

        this.isActive = true;
        
        // –ü–µ—Ä–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Å—Ä–∞–∑—É
        setTimeout(() => this.measureAndReport(), 1000);
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        this.intervalId = setInterval(() => {
            this.measureAndReport();
        }, this.reportInterval);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        window.addEventListener('resize', this.handleResize);
        window.addEventListener('orientationchange', this.handleResize);
        document.addEventListener('visibilitychange', this.handleVisibilityChange);
        
        // Telegram specific events
        if (window.Telegram?.WebApp) {
            window.Telegram.WebApp.onEvent('viewportChanged', this.handleResize);
        }
        
        console.log('‚úÖ ViewportTracker started');
    }

    /**
     * ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞
     */
    stop() {
        if (!this.isActive) return;

        this.isActive = false;
        
        if (this.intervalId) {
            clearInterval(this.intervalId);
            this.intervalId = null;
        }
        
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        window.removeEventListener('resize', this.handleResize);
        window.removeEventListener('orientationchange', this.handleResize);
        document.removeEventListener('visibilitychange', this.handleVisibilityChange);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ
        if (this.dataCache.length > 0) {
            this.sendCachedData();
        }
        
        console.log('‚èπÔ∏è ViewportTracker stopped');
    }

    /**
     * üìè –ò–∑–º–µ—Ä–µ–Ω–∏–µ viewport –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    measureViewport() {
        try {
            // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã viewport
            const innerHeight = window.innerHeight;
            const innerWidth = window.innerWidth;
            
            // Telegram —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            const telegramHeight = window.Telegram?.WebApp?.viewportHeight || null;
            const telegramStableHeight = window.Telegram?.WebApp?.viewportStableHeight || null;
            const telegramExpanded = window.Telegram?.WebApp?.isExpanded || null;
            
            // CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            const cssVars = this.getCSSVariables();
            const bottomNavHeight = parseInt(cssVars.bottomNavHeight) || 64;
            const headerHeight = parseInt(cssVars.headerHeight) || 56;
            
            // –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ø–æ CSS —Ñ–æ—Ä–º—É–ª–µ)
            const calculatedContentHeight = innerHeight - bottomNavHeight - headerHeight - 40;
            
            // –†–µ–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            const contentElement = document.querySelector('.content') || 
                                 document.querySelector('#page-content') ||
                                 document.querySelector('.page-content');
            
            const actualContentHeight = contentElement ? 
                contentElement.getBoundingClientRect().height : 0;
            
            // –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –æ–∂–∏–¥–∞–µ–º—ã–º –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º
            const difference = calculatedContentHeight - actualContentHeight;
            
            // Safe area insets (–¥–ª—è iOS)
            const safeBounds = this.getSafeAreaInsets();
            
            // Scroll –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            const scrollData = this.getScrollData(contentElement);
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            const deviceInfo = this.getDeviceInfo();
            
            // Telegram –∫–æ–Ω—Ç–µ–∫—Å—Ç
            const telegramInfo = this.getTelegramInfo();
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            const currentPage = this.getCurrentPage();
            
            const measurement = {
                timestamp: new Date().toISOString(),
                sessionId: this.sessionId,
                page: currentPage,
                url: window.location.href,
                
                viewport: {
                    innerHeight,
                    innerWidth,
                    telegramHeight,
                    telegramStableHeight,
                    telegramExpanded,
                    calculatedContentHeight,
                    actualContentHeight,
                    difference,
                    bottomNavHeight,
                    headerHeight,
                    safeBounds
                },
                
                device: deviceInfo,
                telegram: telegramInfo,
                
                problem: this.analyzeProblem(difference, scrollData),
                
                debugMode: this.debugMode,
                cssVariables: cssVars,
                
                scrollData
            };
            
            // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –≤ debug —Ä–µ–∂–∏–º–µ
            if (this.debugMode) {
                console.log('üìè Viewport measurement:', {
                    page: currentPage,
                    innerHeight,
                    telegramHeight,
                    calculatedHeight: calculatedContentHeight,
                    actualHeight: actualContentHeight,
                    difference,
                    problem: measurement.problem.type
                });
            }
            
            this.lastMeasurement = measurement;
            return measurement;
            
        } catch (error) {
            console.error('‚ùå ViewportTracker measurement error:', error);
            return null;
        }
    }

    /**
     * üìä –ò–∑–º–µ—Ä–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
     */
    async measureAndReport() {
        const measurement = this.measureViewport();
        if (!measurement) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º–∞
        const hasProblem = Math.abs(measurement.viewport.difference) > 5;
        
        if (hasProblem || this.debugMode) {
            this.dataCache.push(measurement);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –∫—ç—à –∑–∞–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è
            if (this.dataCache.length >= 3 || Math.abs(measurement.viewport.difference) > 30) {
                await this.sendCachedData();
            }
        }
    }

    /**
     * üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
     */
    async sendCachedData() {
        if (this.dataCache.length === 0) return;

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ (—Å–∞–º–æ–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ)
            const latestData = this.dataCache[this.dataCache.length - 1];
            
            const response = await fetch('/api/debug/viewport', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(latestData)
            });

            if (response.ok) {
                const result = await response.json();
                
                if (this.debugMode) {
                    console.log('‚úÖ Viewport data sent successfully:', {
                        logId: result.logId,
                        analysis: result.analysis
                    });
                }
                
                // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                this.dataCache = [];
                
            } else {
                console.warn('‚ö†Ô∏è Failed to send viewport data:', response.status);
            }
            
        } catch (error) {
            console.error('‚ùå Error sending viewport data:', error);
        }
    }

    /**
     * üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã viewport
     */
    analyzeProblem(difference, scrollData) {
        const abs = Math.abs(difference);
        
        let type, severity, description;
        
        if (difference > 10) {
            type = 'empty_space_bottom';
            description = `${difference}px empty space at bottom`;
        } else if (difference < -10) {
            type = 'content_overflow';
            description = `${Math.abs(difference)}px content overflow`;
        } else if (abs > 5) {
            type = 'height_mismatch';
            description = `${difference}px height calculation mismatch`;
        } else {
            type = 'scroll_issue';
            description = 'Minor viewport inconsistency';
        }
        
        if (abs < 10) severity = 'minor';
        else if (abs < 50) severity = 'moderate';
        else severity = 'severe';
        
        return {
            type,
            severity,
            description,
            ...scrollData
        };
    }

    // ===========================================
    // üõ†Ô∏è –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    // ===========================================

    /**
     * –ü–æ–ª—É—á–∏—Ç—å CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
     */
    getCSSVariables() {
        const root = document.documentElement;
        const computedStyle = getComputedStyle(root);
        
        return {
            bottomNavHeight: computedStyle.getPropertyValue('--bottom-nav-height').trim(),
            headerHeight: computedStyle.getPropertyValue('--header-height').trim(),
            tgViewportHeight: computedStyle.getPropertyValue('--tg-viewport-height').trim()
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å Safe Area Insets (iOS)
     */
    getSafeAreaInsets() {
        const root = document.documentElement;
        const computedStyle = getComputedStyle(root);
        
        return {
            top: parseInt(computedStyle.getPropertyValue('--safe-area-top')) || 0,
            bottom: parseInt(computedStyle.getPropertyValue('--safe-area-bottom')) || 0,
            left: parseInt(computedStyle.getPropertyValue('--safe-area-left')) || 0,
            right: parseInt(computedStyle.getPropertyValue('--safe-area-right')) || 0
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–∫—Ä–æ–ª–ª–µ
     */
    getScrollData(element) {
        if (!element) return { scrollTop: 0, scrollHeight: 0, clientHeight: 0 };
        
        return {
            scrollTop: element.scrollTop || window.pageYOffset,
            scrollHeight: element.scrollHeight || document.body.scrollHeight,
            clientHeight: element.clientHeight || window.innerHeight
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
     */
    getDeviceInfo() {
        return {
            userAgent: navigator.userAgent,
            platform: this.detectPlatform(),
            browser: this.detectBrowser(),
            devicePixelRatio: window.devicePixelRatio || 1,
            orientation: window.innerHeight > window.innerWidth ? 'portrait' : 'landscape',
            screen: {
                width: screen.width,
                height: screen.height,
                availWidth: screen.availWidth,
                availHeight: screen.availHeight
            }
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Telegram
     */
    getTelegramInfo() {
        const tg = window.Telegram?.WebApp;
        if (!tg) return { isAvailable: false };
        
        return {
            isAvailable: true,
            version: tg.version,
            platform: tg.platform,
            colorScheme: tg.colorScheme,
            isVerticalSwipesEnabled: tg.isVerticalSwipesEnabled,
            headerColor: tg.headerColor,
            backgroundColor: tg.backgroundColor
        };
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
     */
    getCurrentPage() {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const activeNav = document.querySelector('.nav-item.active');
        if (activeNav) {
            const page = activeNav.getAttribute('data-page');
            if (page) return page;
        }
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ URL
        const path = window.location.pathname;
        if (path.includes('diary')) return 'diary';
        if (path.includes('reports')) return 'reports';
        if (path.includes('catalog')) return 'catalog';
        if (path.includes('community')) return 'community';
        if (path.includes('onboarding')) return 'onboarding';
        
        return 'home';
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
     */
    detectPlatform() {
        const ua = navigator.userAgent;
        if (/iPhone|iPad|iPod/i.test(ua)) return 'iOS';
        if (/Android/i.test(ua)) return 'Android';
        return 'Desktop';
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä
     */
    detectBrowser() {
        const ua = navigator.userAgent;
        if (window.Telegram?.WebApp) return 'Telegram';
        if (/Chrome/i.test(ua)) return 'Chrome';
        if (/Safari/i.test(ua)) return 'Safari';
        if (/Firefox/i.test(ua)) return 'Firefox';
        return 'Unknown';
    }

    /**
     * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ID —Å–µ—Å—Å–∏–∏
     */
    generateSessionId() {
        return 'vp_' + Date.now().toString(36) + '_' + Math.random().toString(36).substr(2, 9);
    }

    // ===========================================
    // üì° –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
    // ===========================================

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
     */
    handleResize() {
        // –ò–∑–º–µ—Ä—è–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        setTimeout(() => {
            if (this.isActive) {
                this.measureAndReport();
            }
        }, 300);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
     */
    handleVisibilityChange() {
        if (document.hidden) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–∫—Ä—ã—Ç–∏–µ–º
            if (this.dataCache.length > 0) {
                this.sendCachedData();
            }
        } else {
            // –ò–∑–º–µ—Ä—è–µ–º –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏
            setTimeout(() => {
                if (this.isActive) {
                    this.measureAndReport();
                }
            }, 500);
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∏ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
window.ViewportTracker = ViewportTracker;

// üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –¥–ª—è Mini App
if (typeof window !== 'undefined' && window.location.pathname.includes('mini-app')) {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫–µ—Ä –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(() => {
                window.viewportTracker = new ViewportTracker();
                window.viewportTracker.start();
            }, 2000); // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        });
    } else {
        setTimeout(() => {
            window.viewportTracker = new ViewportTracker();
            window.viewportTracker.start();
        }, 2000);
    }
}

console.log('üì± ViewportTracker module loaded');
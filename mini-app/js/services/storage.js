/**
 * üíæ STORAGE SERVICE - –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
 * 
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ:
 * - localStorage –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
 * - sessionStorage –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ API –æ—Ç–≤–µ—Ç–æ–≤
 * - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏
 * - –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 * 
 * –†–∞–∑–º–µ—Ä: ~2KB —Å–æ–≥–ª–∞—Å–Ω–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
 */

class StorageService {
    constructor() {
        // üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        this.config = {
            // üéØ –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è –∫–ª—é—á–µ–π
            prefix: 'reader-app',
            userPrefix: 'user',
            cachePrefix: 'cache',
            tempPrefix: 'temp',

            // ‚è±Ô∏è –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
            cacheTTL: {
                quotes: 10 * 60 * 1000,      // 10 –º–∏–Ω—É—Ç
                stats: 5 * 60 * 1000,        // 5 –º–∏–Ω—É—Ç
                reports: 30 * 60 * 1000,     // 30 –º–∏–Ω—É—Ç
                catalog: 60 * 60 * 1000,     // 1 —á–∞—Å
                profile: 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞
            },

            // üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            maxCacheSize: 50, // –ú–∞–∫—Å–∏–º—É–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            maxStorageSize: 10 * 1024 * 1024 // 10MB –≤ –±–∞–π—Ç–∞—Ö
        };

        // üîç Debug —Ä–µ–∂–∏–º
        this.debug = window.location.hostname === 'localhost';

        // üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        this.stats = {
            reads: 0,
            writes: 0,
            hits: 0,
            misses: 0
        };

        // üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.init();
    }

    /**
     * üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
     */
    init() {
        // üßπ –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        this.cleanupExpiredData();

        // üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.log('üöÄ Storage Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
            localStorage: this.isAvailable('localStorage'),
            sessionStorage: this.isAvailable('sessionStorage'),
            totalSize: this.getTotalStorageSize()
        });
    }

    // ===========================================
    // üîß –ë–ê–ó–û–í–´–ï –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –•–†–ê–ù–ò–õ–ò–©–ï–ú
    // ===========================================

    /**
     * üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     */
    isAvailable(storageType) {
        try {
            const storage = window[storageType];
            const testKey = '__storage_test__';
            storage.setItem(testKey, 'test');
            storage.removeItem(testKey);
            return true;
        } catch (e) {
            return false;
        }
    }

    /**
     * üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
     */
    generateKey(type, key, userId = null) {
        const parts = [this.config.prefix];
        
        if (userId && type === 'user') {
            parts.push(this.config.userPrefix, userId);
        } else {
            parts.push(this.config[`${type}Prefix`] || type);
        }
        
        parts.push(key);
        return parts.join('_');
    }

    /**
     * üíæ –ë–∞–∑–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    setItem(storageType, key, value, ttl = null) {
        if (!this.isAvailable(storageType)) {
            this.log(`‚ùå ${storageType} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
            return false;
        }

        try {
            const data = {
                value,
                timestamp: Date.now(),
                ttl: ttl ? Date.now() + ttl : null
            };

            const storage = window[storageType];
            storage.setItem(key, JSON.stringify(data));
            
            this.stats.writes++;
            this.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ ${storageType}:`, { key, size: JSON.stringify(data).length });
            
            return true;
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ ${storageType}:`, error);
            
            // üßπ –ï—Å–ª–∏ –º–µ—Å—Ç–∞ –Ω–µ—Ç - –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (error.name === 'QuotaExceededError') {
                this.cleanupOldData(storageType);
                // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
                try {
                    window[storageType].setItem(key, JSON.stringify({ value, timestamp: Date.now(), ttl }));
                    return true;
                } catch (retryError) {
                    return false;
                }
            }
            
            return false;
        }
    }

    /**
     * üìñ –ë–∞–∑–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    getItem(storageType, key) {
        if (!this.isAvailable(storageType)) {
            return null;
        }

        try {
            const storage = window[storageType];
            const item = storage.getItem(key);
            
            if (!item) {
                this.stats.misses++;
                return null;
            }

            const data = JSON.parse(item);
            
            // ‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
            if (data.ttl && Date.now() > data.ttl) {
                storage.removeItem(key);
                this.stats.misses++;
                this.log(`‚è∞ –î–∞–Ω–Ω—ã–µ –∏—Å—Ç–µ–∫–ª–∏: ${key}`);
                return null;
            }

            this.stats.reads++;
            this.stats.hits++;
            return data.value;
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ ${storageType}:`, error);
            this.stats.misses++;
            return null;
        }
    }

    /**
     * üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    removeItem(storageType, key) {
        if (!this.isAvailable(storageType)) {
            return false;
        }

        try {
            window[storageType].removeItem(key);
            this.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏–∑ ${storageType}: ${key}`);
            return true;
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ ${storageType}:`, error);
            return false;
        }
    }

    // ===========================================
    // üíæ –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–°–¢–û–Ø–ù–ù–û–ì–û –•–†–ê–ù–ï–ù–ò–Ø
    // ===========================================

    /**
     * üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage
     */
    setLocal(key, value, ttl = null) {
        const storageKey = this.generateKey('local', key);
        return this.setItem('localStorage', storageKey, value, ttl);
    }

    /**
     * üìñ –ü–æ–ª—É—á–∏—Ç—å –∏–∑ localStorage
     */
    getLocal(key) {
        const storageKey = this.generateKey('local', key);
        return this.getItem('localStorage', storageKey);
    }

    /**
     * üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ localStorage
     */
    removeLocal(key) {
        const storageKey = this.generateKey('local', key);
        return this.removeItem('localStorage', storageKey);
    }

    // ===========================================
    // üïê –ú–ï–¢–û–î–´ –î–õ–Ø –í–†–ï–ú–ï–ù–ù–û–ì–û –•–†–ê–ù–ï–ù–ò–Ø
    // ===========================================

    /**
     * üïê –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ sessionStorage
     */
    setSession(key, value) {
        const storageKey = this.generateKey('temp', key);
        return this.setItem('sessionStorage', storageKey, value);
    }

    /**
     * üìñ –ü–æ–ª—É—á–∏—Ç—å –∏–∑ sessionStorage
     */
    getSession(key) {
        const storageKey = this.generateKey('temp', key);
        return this.getItem('sessionStorage', storageKey);
    }

    /**
     * üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ sessionStorage
     */
    removeSession(key) {
        const storageKey = this.generateKey('temp', key);
        return this.removeItem('sessionStorage', storageKey);
    }

    // ===========================================
    // üìä –ö–≠–®–ò–†–û–í–ê–ù–ò–ï API –ó–ê–ü–†–û–°–û–í
    // ===========================================

    /**
     * üíæ –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å API –æ—Ç–≤–µ—Ç
     */
    cacheApiResponse(endpoint, method, params, response, customTTL = null) {
        const cacheKey = this.generateCacheKey(endpoint, method, params);
        
        // üïí –û–ø—Ä–µ–¥–µ–ª—è–µ–º TTL –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        let ttl = customTTL;
        if (!ttl) {
            if (endpoint.includes('quotes')) ttl = this.config.cacheTTL.quotes;
            else if (endpoint.includes('stats')) ttl = this.config.cacheTTL.stats;
            else if (endpoint.includes('reports')) ttl = this.config.cacheTTL.reports;
            else if (endpoint.includes('catalog')) ttl = this.config.cacheTTL.catalog;
            else if (endpoint.includes('profile')) ttl = this.config.cacheTTL.profile;
            else ttl = this.config.cacheTTL.quotes; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }

        const storageKey = this.generateKey('cache', cacheKey);
        return this.setItem('localStorage', storageKey, {
            endpoint,
            method,
            params,
            response,
            cachedAt: Date.now()
        }, ttl);
    }

    /**
     * üìñ –ü–æ–ª—É—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –æ—Ç–≤–µ—Ç
     */
    getCachedApiResponse(endpoint, method, params) {
        const cacheKey = this.generateCacheKey(endpoint, method, params);
        const storageKey = this.generateKey('cache', cacheKey);
        return this.getItem('localStorage', storageKey);
    }

    /**
     * üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞
     */
    generateCacheKey(endpoint, method, params) {
        const keyData = { endpoint, method, params };
        return btoa(JSON.stringify(keyData)).replace(/[+/=]/g, '');
    }

    /**
     * üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ endpoint
     */
    clearApiCache(endpointPattern = null) {
        if (!this.isAvailable('localStorage')) return;

        const storage = localStorage;
        const cachePrefix = this.generateKey('cache', '');
        const keysToRemove = [];

        // üîç –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–ª—é—á–∏ –∫—ç—à–∞
        for (let i = 0; i < storage.length; i++) {
            const key = storage.key(i);
            if (key && key.startsWith(cachePrefix)) {
                if (!endpointPattern) {
                    keysToRemove.push(key);
                } else {
                    try {
                        const data = JSON.parse(storage.getItem(key));
                        if (data.value && data.value.endpoint && data.value.endpoint.includes(endpointPattern)) {
                            keysToRemove.push(key);
                        }
                    } catch (error) {
                        keysToRemove.push(key); // –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                    }
                }
            }
        }

        // üóëÔ∏è –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
        keysToRemove.forEach(key => storage.removeItem(key));
        
        this.log(`üßπ –û—á–∏—â–µ–Ω –∫—ç—à`, { pattern: endpointPattern, removed: keysToRemove.length });
    }

    // ===========================================
    // üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –î–ê–ù–ù–´–ï
    // ===========================================

    /**
     * üë§ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    setUserData(userId, key, value, permanent = true) {
        const storageKey = this.generateKey('user', key, userId);
        const storageType = permanent ? 'localStorage' : 'sessionStorage';
        const ttl = permanent ? this.config.cacheTTL.profile : null;
        return this.setItem(storageType, storageKey, value, ttl);
    }

    /**
     * üë§ –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUserData(userId, key, checkSession = true) {
        const storageKey = this.generateKey('user', key, userId);
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
        let data = this.getItem('localStorage', storageKey);
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ - –ø—Ä–æ–≤–µ—Ä—è–µ–º sessionStorage
        if (!data && checkSession) {
            data = this.getItem('sessionStorage', storageKey);
        }
        
        return data;
    }

    /**
     * üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    removeUserData(userId, key = null) {
        if (key) {
            // –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
            const storageKey = this.generateKey('user', key, userId);
            this.removeItem('localStorage', storageKey);
            this.removeItem('sessionStorage', storageKey);
        } else {
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.clearUserData(userId);
        }
    }

    /**
     * üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    clearUserData(userId) {
        const userPrefix = this.generateKey('user', '', userId);
        
        ['localStorage', 'sessionStorage'].forEach(storageType => {
            if (!this.isAvailable(storageType)) return;
            
            const storage = window[storageType];
            const keysToRemove = [];
            
            for (let i = 0; i < storage.length; i++) {
                const key = storage.key(i);
                if (key && key.startsWith(userPrefix)) {
                    keysToRemove.push(key);
                }
            }
            
            keysToRemove.forEach(key => storage.removeItem(key));
        });
        
        this.log(`üßπ –û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    }

    // ===========================================
    // üßπ –û–ß–ò–°–¢–ö–ê –ò –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï
    // ===========================================

    /**
     * üßπ –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    cleanupExpiredData() {
        ['localStorage', 'sessionStorage'].forEach(storageType => {
            if (!this.isAvailable(storageType)) return;
            
            const storage = window[storageType];
            const keysToRemove = [];
            
            for (let i = 0; i < storage.length; i++) {
                const key = storage.key(i);
                if (key && key.startsWith(this.config.prefix)) {
                    try {
                        const data = JSON.parse(storage.getItem(key));
                        if (data.ttl && Date.now() > data.ttl) {
                            keysToRemove.push(key);
                        }
                    } catch (error) {
                        // –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                        keysToRemove.push(key);
                    }
                }
            }
            
            keysToRemove.forEach(key => storage.removeItem(key));
            
            if (keysToRemove.length > 0) {
                this.log(`üßπ –û—á–∏—â–µ–Ω–æ ${keysToRemove.length} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ ${storageType}`);
            }
        });
    }

    /**
     * üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –º–µ—Å—Ç–∞
     */
    cleanupOldData(storageType) {
        if (!this.isAvailable(storageType)) return;
        
        const storage = window[storageType];
        const items = [];
        
        // üìä –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞—à–∏ –∑–∞–ø–∏—Å–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        for (let i = 0; i < storage.length; i++) {
            const key = storage.key(i);
            if (key && key.startsWith(this.config.prefix)) {
                try {
                    const data = JSON.parse(storage.getItem(key));
                    items.push({
                        key,
                        timestamp: data.timestamp || 0,
                        size: storage.getItem(key).length
                    });
                } catch (error) {
                    items.push({ key, timestamp: 0, size: 0 });
                }
            }
        }
        
        // üóëÔ∏è –£–¥–∞–ª—è–µ–º 25% —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        items.sort((a, b) => a.timestamp - b.timestamp);
        const toRemove = Math.ceil(items.length * 0.25);
        
        for (let i = 0; i < toRemove; i++) {
            storage.removeItem(items[i].key);
        }
        
        this.log(`üßπ –û—á–∏—â–µ–Ω–æ ${toRemove} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞`);
    }

    /**
     * üìä –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     */
    getTotalStorageSize() {
        let totalSize = 0;
        
        ['localStorage', 'sessionStorage'].forEach(storageType => {
            if (!this.isAvailable(storageType)) return;
            
            const storage = window[storageType];
            for (let i = 0; i < storage.length; i++) {
                const key = storage.key(i);
                if (key && key.startsWith(this.config.prefix)) {
                    const item = storage.getItem(key);
                    if (item) {
                        totalSize += item.length;
                    }
                }
            }
        });
        
        return totalSize;
    }

    /**
     * üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     */
    getStorageStats() {
        const stats = {
            totalSize: this.getTotalStorageSize(),
            items: { localStorage: 0, sessionStorage: 0 },
            cacheItems: 0,
            userItems: 0,
            ...this.stats
        };
        
        ['localStorage', 'sessionStorage'].forEach(storageType => {
            if (!this.isAvailable(storageType)) return;
            
            const storage = window[storageType];
            for (let i = 0; i < storage.length; i++) {
                const key = storage.key(i);
                if (key && key.startsWith(this.config.prefix)) {
                    stats.items[storageType]++;
                    
                    if (key.includes(this.config.cachePrefix)) {
                        stats.cacheItems++;
                    } else if (key.includes(this.config.userPrefix)) {
                        stats.userItems++;
                    }
                }
            }
        });
        
        return stats;
    }

    /**
     * üóëÔ∏è –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    clearAll() {
        ['localStorage', 'sessionStorage'].forEach(storageType => {
            if (!this.isAvailable(storageType)) return;
            
            const storage = window[storageType];
            const keysToRemove = [];
            
            for (let i = 0; i < storage.length; i++) {
                const key = storage.key(i);
                if (key && key.startsWith(this.config.prefix)) {
                    keysToRemove.push(key);
                }
            }
            
            keysToRemove.forEach(key => storage.removeItem(key));
        });
        
        this.log('üßπ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã');
    }

    /**
     * üîç –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ)
     */
    log(message, data = null) {
        if (this.debug) {
            console.log(`[Storage] ${message}`, data || '');
        }
    }
}

// üåç –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const storageService = new StorageService();

// üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
window.StorageService = StorageService;
window.storageService = storageService;

// üì± –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
if (typeof module !== 'undefined' && module.exports) {
    module.exports = StorageService;
}

/**
 * üì° API SERVICE - HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è Reader Bot backend
 * 
 * –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ –≤—Å–µ–º–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ API endpoints:
 * - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç–∞–º–∏
 * - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏ –º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
 * - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 * - –ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
 * 
 * Backend endpoints –≥–æ—Ç–æ–≤—ã –Ω–∞ 100% ‚úÖ
 * –†–∞–∑–º–µ—Ä: ~8KB —Å–æ–≥–ª–∞—Å–Ω–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
 * –í–ï–†–°–ò–Ø: 1.0.1 - –î–û–ë–ê–í–õ–ï–ù–´ –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ú–ï–¢–û–î–´
 */

class ApiService {
    constructor() {
        // üåê Base URL –¥–ª—è –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
        this.baseURL = this.getBaseURL();
        
        // üîê –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        this.authToken = null;
        
        // ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        this.config = {
            timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥
            retries: 3,
            retryDelay: 1000
        };

        // üìä –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        this.cache = new Map();
        this.cacheTimeout = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

        // üîç Debug —Ä–µ–∂–∏–º
        this.debug = window.location.hostname === 'localhost';
        
        this.log('üöÄ API Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', { baseURL: this.baseURL });
    }

    /**
     * üåê –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–π URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
     */
    getBaseURL() {
        const hostname = window.location.hostname;
        
        if (hostname === 'localhost' || hostname === '127.0.0.1') {
            return 'http://localhost:3000/api/reader';
        }
        
        // –ü—Ä–æ–¥–∞–∫—à–Ω URL (–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏ –¥–µ–ø–ª–æ–µ)
        return 'https://your-domain.com/api/reader';
    }

    /**
     * üîê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    setAuthToken(token) {
        this.authToken = token;
        this.log('üîë –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    /**
     * üîó –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    getHeaders() {
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        };

        if (this.authToken) {
            headers['Authorization'] = `Bearer ${this.authToken}`;
        }

        return headers;
    }

    /**
     * üì° –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
     */
    async request(method, endpoint, data = null, options = {}) {
        const url = `${this.baseURL}${endpoint}`;
        const cacheKey = `${method}:${endpoint}:${JSON.stringify(data)}`;

        // üíæ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
        if (method === 'GET' && this.cache.has(cacheKey)) {
            const cached = this.cache.get(cacheKey);
            if (Date.now() - cached.timestamp < this.cacheTimeout) {
                this.log('üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫—ç—à–∞', { endpoint });
                return cached.data;
            }
        }

        // üîÑ Retry –ª–æ–≥–∏–∫–∞
        let lastError;
        for (let attempt = 1; attempt <= this.config.retries; attempt++) {
            try {
                this.log(`üì§ ${method} ${endpoint}`, { data, attempt });

                // üåê –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
                const requestOptions = {
                    method,
                    headers: this.getHeaders(),
                    ...options
                };

                if (data && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {
                    requestOptions.body = JSON.stringify(data);
                }

                // ‚è±Ô∏è –î–æ–±–∞–≤–ª—è–µ–º timeout
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), this.config.timeout);
                requestOptions.signal = controller.signal;

                // üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                const response = await fetch(url, requestOptions);
                clearTimeout(timeoutId);

                // ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                const result = await this.handleResponse(response, endpoint);

                // üíæ –ö—ç—à–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å—ã
                if (method === 'GET') {
                    this.cache.set(cacheKey, {
                        data: result,
                        timestamp: Date.now()
                    });
                }

                this.log(`üì• ${method} ${endpoint} —É—Å–ø–µ—à–Ω–æ`, { result });
                return result;

            } catch (error) {
                lastError = error;
                this.log(`‚ùå ${method} ${endpoint} –æ—à–∏–±–∫–∞`, { error: error.message, attempt });

                // üîÑ –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                if (attempt < this.config.retries) {
                    await this.delay(this.config.retryDelay * attempt);
                }
            }
        }

        // üí• –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
        throw lastError;
    }

    /**
     * üì® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP –æ—Ç–≤–µ—Ç
     */
    async handleResponse(response, endpoint) {
        const contentType = response.headers.get('content-type');

        // üìÑ –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
        let responseData;
        if (contentType && contentType.includes('application/json')) {
            responseData = await response.json();
        } else {
            responseData = await response.text();
        }

        // ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        if (response.ok) {
            return responseData;
        }

        // ‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        const error = new Error(responseData.message || `HTTP ${response.status}: ${response.statusText}`);
        error.status = response.status;
        error.endpoint = endpoint;
        error.data = responseData;

        throw error;
    }

    /**
     * ‚è±Ô∏è –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // ===========================================
    // üîê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
    // ===========================================

    /**
     * üîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
     */
    async authenticateWithTelegram(telegramData, user) {
        try {
            const response = await this.request('POST', '/auth/telegram', {
                telegramData,
                user
            });

            if (response.token) {
                this.setAuthToken(response.token);
            }

            return response;
        } catch (error) {
            this.log('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', { error: error.message });
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram');
        }
    }

    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
     */
    async refreshToken() {
        try {
            const response = await this.request('POST', '/auth/refresh');
            if (response.token) {
                this.setAuthToken(response.token);
            }
            return response;
        } catch (error) {
            this.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞', { error: error.message });
            throw error;
        }
    }

    // ===========================================
    // üë§ –ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    // ===========================================

    /**
     * üìã –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getProfile() {
        return this.request('GET', '/profile');
    }

    /**
     * ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async updateProfile(profileData) {
        return this.request('PUT', '/profile', profileData);
    }

    /**
     * üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getStats() {
        return this.request('GET', '/stats');
    }

    /**
     * üèÜ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getAchievements() {
        return this.request('GET', '/achievements');
    }

    // ===========================================
    // üìù –£–ü–†–ê–í–õ–ï–ù–ò–ï –¶–ò–¢–ê–¢–ê–ú–ò
    // ===========================================

    /**
     * ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É
     */
    async addQuote(quoteData) {
        // –û—á–∏—â–∞–µ–º –∫—ç—à —Ü–∏—Ç–∞—Ç –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        this.clearQuotesCache();
        return this.request('POST', '/quotes', quoteData);
    }

    /**
     * üìñ –ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getQuotes(options = {}) {
        const params = new URLSearchParams();
        
        if (options.limit) params.append('limit', options.limit);
        if (options.offset) params.append('offset', options.offset);
        if (options.author) params.append('author', options.author);
        if (options.search) params.append('search', options.search);
        if (options.dateFrom) params.append('dateFrom', options.dateFrom);
        if (options.dateTo) params.append('dateTo', options.dateTo);

        const queryString = params.toString();
        const endpoint = queryString ? `/quotes?${queryString}` : '/quotes';
        
        return this.request('GET', endpoint);
    }

    /**
     * üïê –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
     */
    async getRecentQuotes(limit = 10) {
        return this.request('GET', `/quotes/recent?limit=${limit}`);
    }

    /**
     * ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É
     */
    async updateQuote(quoteId, updateData) {
        this.clearQuotesCache();
        return this.request('PUT', `/quotes/${quoteId}`, updateData);
    }

    /**
     * üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ü–∏—Ç–∞—Ç—É
     */
    async deleteQuote(quoteId) {
        this.clearQuotesCache();
        return this.request('DELETE', `/quotes/${quoteId}`);
    }

    /**
     * üîç –ü–æ–∏—Å–∫ —Ü–∏—Ç–∞—Ç
     */
    async searchQuotes(query, options = {}) {
        const params = new URLSearchParams({ q: query });
        
        if (options.limit) params.append('limit', options.limit);
        if (options.author) params.append('author', options.author);

        return this.request('GET', `/quotes/search?${params.toString()}`);
    }

    // ===========================================
    // üìä –û–¢–ß–ï–¢–´
    // ===========================================

    /**
     * üìÖ –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
     */
    async getWeeklyReports(options = {}) {
        const params = new URLSearchParams();
        
        if (options.limit) params.append('limit', options.limit);
        if (options.offset) params.append('offset', options.offset);

        const queryString = params.toString();
        const endpoint = queryString ? `/reports/weekly?${queryString}` : '/reports/weekly';
        
        return this.request('GET', endpoint);
    }

    /**
     * üìà –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
     */
    async getWeeklyReport(reportId) {
        return this.request('GET', `/reports/weekly/${reportId}`);
    }

    /**
     * üìÖ –ü–æ–ª—É—á–∏—Ç—å –º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
     */
    async getMonthlyReports(options = {}) {
        const params = new URLSearchParams();
        
        if (options.limit) params.append('limit', options.limit);
        if (options.offset) params.append('offset', options.offset);

        const queryString = params.toString();
        const endpoint = queryString ? `/reports/monthly?${queryString}` : '/reports/monthly';
        
        return this.request('GET', endpoint);
    }

    /**
     * üìä –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç
     */
    async getMonthlyReport(reportId) {
        return this.request('GET', `/reports/monthly/${reportId}`);
    }

    /**
     * üîÑ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
     */
    async generateReport(type = 'weekly') {
        return this.request('POST', `/reports/${type}/generate`);
    }

    // ===========================================
    // üìö –ö–ê–¢–ê–õ–û–ì –ö–ù–ò–ì
    // ===========================================

    /**
     * üìñ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω alias getCatalog –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å CatalogPage
     */
    async getBookCatalog(options = {}) {
        const params = new URLSearchParams();
        
        if (options.category) params.append('category', options.category);
        if (options.limit) params.append('limit', options.limit);
        if (options.offset) params.append('offset', options.offset);

        const queryString = params.toString();
        const endpoint = queryString ? `/catalog?${queryString}` : '/catalog';
        
        return this.request('GET', endpoint);
    }

    /**
     * üìñ Alias –¥–ª—è getCatalog (–¥–ª—è CatalogPage.js)
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –º–µ—Ç–æ–¥
     */
    async getCatalog(options = {}) {
        return this.getBookCatalog(options);
    }

    /**
     * üìë –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–Ω–∏–≥
     */
    async getCategories() {
        return this.request('GET', '/categories');
    }

    /**
     * üéØ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
     */
    async getRecommendations() {
        return this.request('GET', '/recommendations');
    }

    /**
     * üè∑Ô∏è –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã
     */
    async getPromoCodes() {
        return this.request('GET', '/promo-codes');
    }

    /**
     * üìö –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–Ω–∏–≥–∏
     * –ù–û–í–´–ô: –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ
     */
    async getBookDetails(bookId) {
        return this.request('GET', `/catalog/${bookId}`);
    }

    // ===========================================
    // üë• –°–û–û–ë–©–ï–°–¢–í–û (MVP)
    // ===========================================

    /**
     * üó®Ô∏è –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
     */
    async getCommunityMessages(options = {}) {
        const params = new URLSearchParams();
        
        if (options.limit) params.append('limit', options.limit);
        if (options.offset) params.append('offset', options.offset);

        const queryString = params.toString();
        const endpoint = queryString ? `/community?${queryString}` : '/community';
        
        return this.request('GET', endpoint);
    }

    /**
     * üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
     */
    async postCommunityMessage(messageData) {
        return this.request('POST', '/community', messageData);
    }

    /**
     * üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
     * –ù–û–í–´–ô: –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è CommunityPage
     */
    async getCommunityStats() {
        try {
            return await this.request('GET', '/community/stats');
        } catch (error) {
            this.log('‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É');
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return {
                totalMembers: 1250,
                activeToday: 89,
                totalQuotes: 15420,
                topAuthors: ['–≠—Ä–∏—Ö –§—Ä–æ–º–º', '–í–∏–∫—Ç–æ—Ä –§—Ä–∞–Ω–∫–ª', '–ö–∞—Ä–ª –Æ–Ω–≥']
            };
        }
    }

    /**
     * üèÜ –ü–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
     * –ù–û–í–´–ô: –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è CommunityPage
     */
    async getLeaderboard(type = 'monthly') {
        try {
            return await this.request('GET', `/community/leaderboard?type=${type}`);
        } catch (error) {
            this.log('‚ö†Ô∏è –†–µ–π—Ç–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É');
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return [
                { name: '–ê–Ω–Ω–∞', quotes: 127, position: 1 },
                { name: '–ú–∞—Ä–∏—è', quotes: 98, position: 2 },
                { name: '–ï–ª–µ–Ω–∞', quotes: 76, position: 3 },
                { name: '–í—ã', quotes: 45, position: 8 }
            ];
        }
    }

    /**
     * üî• –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
     * –ù–û–í–´–ô: –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è CommunityPage
     */
    async getPopularQuotes(options = {}) {
        try {
            const params = new URLSearchParams();
            if (options.limit) params.append('limit', options.limit);
            if (options.period) params.append('period', options.period);

            const queryString = params.toString();
            const endpoint = queryString ? `/community/popular?${queryString}` : '/community/popular';
            
            return await this.request('GET', endpoint);
        } catch (error) {
            this.log('‚ö†Ô∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É');
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return [
                {
                    text: "–°–º—ã—Å–ª –∂–∏–∑–Ω–∏ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–≤–æ–π –¥–∞—Ä. –¶–µ–ª—å –∂–∏–∑–Ω–∏ ‚Äî –æ—Ç–¥–∞—Ç—å –µ–≥–æ.",
                    author: "–ü–∞–±–ª–æ –ü–∏–∫–∞—Å—Å–æ",
                    likes: 42,
                    user: "–ê–Ω–Ω–∞"
                },
                {
                    text: "–ë—É–¥—É—â–µ–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–º, –∫—Ç–æ –≤–µ—Ä–∏—Ç –≤ –∫—Ä–∞—Å–æ—Ç—É —Å–≤–æ–∏—Ö –º–µ—á—Ç.",
                    author: "–≠–ª–µ–æ–Ω–æ—Ä–∞ –†—É–∑–≤–µ–ª—å—Ç", 
                    likes: 38,
                    user: "–ú–∞—Ä–∏—è"
                }
            ];
        }
    }

    // ===========================================
    // üõ†Ô∏è –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    // ===========================================

    /**
     * üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ü–∏—Ç–∞—Ç
     */
    clearQuotesCache() {
        for (const key of this.cache.keys()) {
            if (key.includes('/quotes')) {
                this.cache.delete(key);
            }
        }
    }

    /**
     * üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
     */
    clearCache() {
        this.cache.clear();
        this.log('üßπ –ö—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω');
    }

    /**
     * üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
     */
    getCacheStats() {
        return {
            size: this.cache.size,
            keys: Array.from(this.cache.keys())
        };
    }

    /**
     * üîç –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ)
     */
    log(message, data = null) {
        if (this.debug) {
            console.log(`[API] ${message}`, data || '');
        }
    }

    /**
     * üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API
     */
    async healthCheck() {
        try {
            const response = await this.request('GET', '/health');
            this.log('‚úÖ API –∑–¥–æ—Ä–æ–≤', { response });
            return response;
        } catch (error) {
            this.log('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', { error: error.message });
            throw error;
        }
    }

    // ===========================================
    // üì° POST –º–µ—Ç–æ–¥—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π 
    // ===========================================

    /**
     * üìù POST –∑–∞–ø—Ä–æ—Å (–∞–ª–∏–∞—Å –¥–ª—è request)
     */
    async post(endpoint, data) {
        return this.request('POST', endpoint, data);
    }

    /**
     * üìñ GET –∑–∞–ø—Ä–æ—Å (–∞–ª–∏–∞—Å –¥–ª—è request)
     */
    async get(endpoint) {
        return this.request('GET', endpoint);
    }

    /**
     * ‚úèÔ∏è PUT –∑–∞–ø—Ä–æ—Å (–∞–ª–∏–∞—Å –¥–ª—è request)
     */
    async put(endpoint, data) {
        return this.request('PUT', endpoint, data);
    }

    /**
     * üóëÔ∏è DELETE –∑–∞–ø—Ä–æ—Å (–∞–ª–∏–∞—Å –¥–ª—è request)
     */
    async delete(endpoint) {
        return this.request('DELETE', endpoint);
    }
}

// üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
window.ApiService = ApiService;

// üì± –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ApiService;
}
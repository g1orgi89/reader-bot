/**
 * üì° API SERVICE - HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è Reader Bot backend
 * 
 * –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ –≤—Å–µ–º–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ API endpoints:
 * - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç–∞–º–∏
 * - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏ –º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
 * - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 * - –ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
 * 
 * Backend endpoints –≥–æ—Ç–æ–≤—ã –Ω–∞ 100% ‚úÖ
 * –†–∞–∑–º–µ—Ä: ~8KB —Å–æ–≥–ª–∞—Å–Ω–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
 * –í–ï–†–°–ò–Ø: 1.0.5 - –û–¢–ö–õ–Æ–ß–ï–ù DEBUG –†–ï–ñ–ò–ú - –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ô API
 */

class ApiService {
    constructor() {
        // üåê Base URL –¥–ª—è –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
        this.baseURL = '/api/reader';
        
        // ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        this.config = {
            timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥
            retries: 3,
            retryDelay: 1000
        };

        // üìä –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        this.cache = new Map();
        this.cacheTimeout = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
        
        console.log('üöÄ API Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', { 
            baseURL: this.baseURL
        });
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–∫ –ø–æ –∫–Ω–∏–≥–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
     * @param {Object} params
     * @param {string} [params.bookSlug]
     * @param {string} [params.bookId]
     * @param {string} [params.userId]
     * @returns {Promise<any>}
     */
    async trackCatalogClick({ bookSlug, bookId, userId }) {
      const payload = {
        bookSlug: bookSlug || null,
        bookId: bookId || null,
        userId: userId || this.resolveUserId()
      };
      return this.request('POST', `/catalog/track-click`, payload);
    }

    /**
     * üìö –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫–Ω–∏–≥ –ø–æ –∫–ª–∏–∫–∞–º/–ø—Ä–æ–¥–∞–∂–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥
     * –û–ë–ù–û–í–õ–ï–ù–û: –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º API: GET /api/reader/top-books?period=7d
     * @param {Object} [options]
     * @param {string} [options.period] - –Ω–∞–ø—Ä. "7d"
     * @param {number} [options.limit] - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥
     * @returns {Promise<any>}
     */
    async getTopBooks(options = {}) {
        const params = new URLSearchParams();
        if (options.period) params.append('period', options.period);
        if (options.limit) params.append('limit', options.limit);

        const queryString = params.toString();
        const endpoint = queryString ? `/top-books?${queryString}` : '/top-books';
        
        return this.request('GET', endpoint);
    }
   
    /**
     * üîó –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
     */
    getHeaders(endpoint = '') {
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        };

        // üîë –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const userId = this.resolveUserId();
        const initData = this.resolveTelegramInitData();

        // Extract userId from endpoint query string if present for consistency
        let finalUserId = userId;
        if (endpoint) {
            const urlParams = new URLSearchParams(endpoint.split('?')[1] || '');
            const endpointUserId = urlParams.get('userId');
            if (endpointUserId) {
                finalUserId = endpointUserId;
            }
        }

        if (finalUserId) {
            headers['X-User-Id'] = finalUserId;
        }

        if (initData) {
            headers['Authorization'] = `tma ${initData}`;
            // Include X-Telegram-Init-Data alongside Authorization
            headers['X-Telegram-Init-Data'] = initData;
        }

        return headers;
    }

    /**
     * üÜî –†–∞–∑—Ä–µ—à–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: App state ‚Üí Telegram initDataUnsafe ‚Üí localStorage
     */
    resolveUserId() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å window
            if (typeof window === 'undefined') {
                return 'demo-user';
            }

            // 1. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ App state
            if (window.appState) {
                const userId = window.appState.getCurrentUserId();
                if (userId) {
                    return String(userId);
                }
            }

            // 2. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Telegram initDataUnsafe
            if (window.Telegram?.WebApp?.initDataUnsafe?.user?.id) {
                return String(window.Telegram.WebApp.initDataUnsafe.user.id);
            }

            // 3. Fallback –Ω–∞ localStorage (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
            if (typeof localStorage !== 'undefined') {
                const storedUserId = localStorage.getItem('reader-user-id');
                if (storedUserId) {
                    return storedUserId;
                }
            }

            // 4. –§–∏–Ω–∞–ª—å–Ω—ã–π fallback
            return 'demo-user';
        } catch (error) {
            console.warn('‚ö†Ô∏è ApiService: –û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è userId:', error);
            return 'demo-user';
        }
    }
    
    // --------- NEW: –∂—ë—Å—Ç–∫–∞—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ ----------
    sanitizeHeaderValue(str) {
        if (!str) return '';
        // —É–¥–∞–ª—è–µ–º –ª—é–±—ã–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã (0x00-0x1F –∏ 0x7F), –≤ —Ç.—á. —Å–∫—Ä—ã—Ç—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        return String(str).replace(/[\u0000-\u001F\u007F]/g, '').trim();
    }
    
    /**
     * üì± –†–∞–∑—Ä–µ—à–∞–µ—Ç Telegram initData –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     * –û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤ HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
     */
    resolveTelegramInitData() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å window
            if (typeof window === 'undefined') {
                return null;
            }

            let rawInitData = null;

            // –ü–æ–ª—É—á–∞–µ–º initData –∏–∑ Telegram WebApp
            if (window.Telegram?.WebApp?.initData) {
                rawInitData = window.Telegram.WebApp.initData;
            }

            // Fallback –Ω–∞ localStorage (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
            if (!rawInitData && typeof localStorage !== 'undefined') {
                const storedInitData = localStorage.getItem('reader-telegram-initdata');
                if (storedInitData) {
                    rawInitData = storedInitData;
                }
            }

            // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è: —É–¥–∞–ª—è–µ–º CR/LF –∏ –∫–æ–¥–∏—Ä—É–µ–º –¥–ª—è HTTP –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            if (rawInitData) {
                // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–∞—Ä–µ—Ç–∫–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏
                const sanitized = rawInitData.replace(/[\r\n]/g, '').trim();
                // –ö–æ–¥–∏—Ä—É–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤ HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
                return encodeURIComponent(sanitized);
            }

            return null;
        } catch (error) {
            console.warn('‚ö†Ô∏è ApiService: –û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è initData:', error);
            return null;
        }
    }

    // --------- NEW: RAW initData –±–µ–∑ encodeURIComponent –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ ----------
    resolveTelegramInitDataRaw() {
        try {
            if (typeof window === 'undefined') return null;
            let raw = null;
            if (window.Telegram?.WebApp?.initData) raw = window.Telegram.WebApp.initData;
            if (!raw && typeof localStorage !== 'undefined') {
                const stored = localStorage.getItem('reader-telegram-initdata');
                if (stored) raw = stored;
            }
            if (!raw) return null;
            // —É–¥–∞–ª—è–µ–º –≤—Å–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã, –≤ —Ç.—á. –ª—é–±—ã–µ —Å–∫—Ä—ã—Ç—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
            return this.sanitizeHeaderValue(raw);
        } catch (e) {
            console.warn('‚ö†Ô∏è ApiService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RAW initData:', e);
            return null;
        }
    }

    getHeaders(endpoint = '') {
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        };
        const userId = this.resolveUserId();
        const initData = this.resolveTelegramInitData();

        let finalUserId = userId;
        if (endpoint) {
            const urlParams = new URLSearchParams(endpoint.split('?')[1] || '');
            const endpointUserId = urlParams.get('userId');
            if (endpointUserId) finalUserId = endpointUserId;
        }

        if (finalUserId) headers['X-User-Id'] = finalUserId;
        if (initData) {
            headers['Authorization'] = `tma ${initData}`;
            headers['X-Telegram-Init-Data'] = initData;
        }
        return headers;
    }
    
    /**
     * üì° –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω—ã –≤—Å–µ debug –∑–∞–≥–ª—É—à–∫–∏ - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–π API
     */
    async request(method, endpoint, data = null, options = {}) {
        // Add cache-busting for quotes endpoints on GET requests
        let finalUrl = `${this.baseURL}${endpoint}`;
        if (method === 'GET' && endpoint.includes('/quotes')) {
            const separator = endpoint.includes('?') ? '&' : '?';
            finalUrl += `${separator}_t=${Date.now()}`;
        }
        
        const cacheKey = `${method}:${endpoint}:${JSON.stringify(data)}`;

        // üíæ Skip cache for quotes endpoints to prevent stale data
        if (method === 'GET' && !endpoint.includes('/quotes') && this.cache.has(cacheKey)) {
            const cached = this.cache.get(cacheKey);
            if (Date.now() - cached.timestamp < this.cacheTimeout) {
                console.log('üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫—ç—à–∞', { endpoint });
                return cached.data;
            }
        }

        // üîÑ Retry –ª–æ–≥–∏–∫–∞
        let lastError;
        for (let attempt = 1; attempt <= this.config.retries; attempt++) {
            try {
                console.log(`üì§ ${method} ${endpoint}`, { data, attempt });

                // üåê –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ª–∏—è–Ω–∏–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                const authHeaders = this.getHeaders(endpoint);
                const customHeaders = options.headers || {};
                
                const requestOptions = {
                    method,
                    // Merge headers correctly: auth headers take precedence
                    headers: { ...customHeaders, ...authHeaders },
                    ...options
                };
                
                // Remove headers from options to avoid duplication
                delete requestOptions.headers;
                requestOptions.headers = { ...customHeaders, ...authHeaders };
                
                // Add no-cache headers for quotes GET requests
                if (method === 'GET' && endpoint.includes('/quotes')) {
                    requestOptions.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate';
                    requestOptions.headers['Pragma'] = 'no-cache';
                    requestOptions.headers['Expires'] = '0';
                }

                if (data && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {
                    requestOptions.body = JSON.stringify(data);
                }

                // ‚è±Ô∏è –î–æ–±–∞–≤–ª—è–µ–º timeout
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), this.config.timeout);
                requestOptions.signal = controller.signal;

                // üëá –í–°–¢–ê–í–¨ –°–Æ–î–ê
                requestOptions.credentials = 'include';

                // üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                const response = await fetch(finalUrl, requestOptions);
                clearTimeout(timeoutId);
                
                console.log(`üì° ${method} ${endpoint} - —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:`, response.status, response.statusText);

                // ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                const result = await this.handleResponse(response, endpoint);

                // üíæ –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ-quotes GET –∑–∞–ø—Ä–æ—Å—ã
                if (method === 'GET' && !endpoint.includes('/quotes')) {
                    this.cache.set(cacheKey, {
                        data: result,
                        timestamp: Date.now()
                    });
                }

                console.log(`üì• ${method} ${endpoint} —É—Å–ø–µ—à–Ω–æ`, { result });
                return result;

            } catch (error) {
                lastError = error;
                console.log(`‚ùå ${method} ${endpoint} –æ—à–∏–±–∫–∞`, { error: error.message, attempt });

                // üîÑ –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                if (attempt < this.config.retries) {
                    await this.delay(this.config.retryDelay * attempt);
                }
            }
        }

        // üí• –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
        throw lastError;
    }

    /**
     * üì® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP –æ—Ç–≤–µ—Ç
     */
    async handleResponse(response, endpoint) {
        const contentType = response.headers.get('content-type');
        console.log(`üì® handleResponse - ${endpoint} - —Å—Ç–∞—Ç—É—Å: ${response.status}, content-type: ${contentType}`);

        // üìÑ –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
        let responseData;
        if (contentType && contentType.includes('application/json')) {
            responseData = await response.json();
        } else {
            responseData = await response.text();
        }
        
        console.log(`üìÑ handleResponse - ${endpoint} - –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:`, responseData);

        // ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        if (response.ok) {
            console.log(`‚úÖ handleResponse - ${endpoint} - —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç`);
            return responseData;
        }

        // ‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        console.error(`‚ùå handleResponse - ${endpoint} - –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:`, response.status, response.statusText);
        const error = new Error(responseData.message || `HTTP ${response.status}: ${response.statusText}`);
        error.status = response.status;
        error.endpoint = endpoint;
        error.data = responseData;

        throw error;
    }

    /**
     * ‚è±Ô∏è –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // ===========================================
    // üîê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
    // ===========================================

    /**
     * üîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
     */
    async authenticateWithTelegram(telegramData, user) {
        try {
            console.log('üîê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ /auth/telegram:', {
                hasInitData: !!telegramData,
                userId: user?.id,
                userFirstName: user?.first_name
            });

            const response = await this.request('POST', '/auth/telegram', {
                telegramData,
                user
            });

            return response;
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', { error: error.message });
            
            if (error.status === 401) {
                throw new Error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram');
            } else if (error.status === 500) {
                throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é');
            } else {
                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è: ${error.message}`);
            }
        }
    }

    /**
     * üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
     */
    async checkOnboardingStatus(userId = 'demo-user') {
        try {
            const response = await this.request('GET', `/auth/onboarding-status?userId=${userId}`);
            
            // Backward compatibility: provide fallback to old keys during deploy
            if (response && response.success) {
                return {
                    ...response,
                    // New unified field
                    isOnboardingComplete: response.isOnboardingComplete,
                    // Backward-safe fallbacks (for cached clients that might still expect them)
                    completed: response.isOnboardingComplete,
                    isCompleted: response.isOnboardingComplete,
                    isOnboardingCompleted: response.isOnboardingComplete
                };
            }
            
            return response;
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞', { error: error.message });
            // Fallback: —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω
            return { 
                success: false,
                isOnboardingComplete: false,
                completed: false,
                isCompleted: false,
                isOnboardingCompleted: false
            };
        }
    }

    /**
     * ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
     */
    async completeOnboarding(onboardingData) {
        try {
            const response = await this.request('POST', '/auth/complete-onboarding', onboardingData);
            
            // Handle both successful completion and already completed cases
            if (response && response.success) {
                return response;
            }
            
            throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞');
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞', { error: error.message });
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞');
        }
    }

    // ===========================================
    // üë§ –ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    // ===========================================

    /**
     * üìã –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getProfile(userId = 'demo-user') {
        return this.request('GET', `/profile?userId=${userId}`);
    }

    /**
     * ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async updateProfile(profileData, userId = 'demo-user') {
        return this.request('PATCH', `/profile?userId=${userId}`, profileData);
    }

    /**
     * üñºÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async uploadAvatar(fileOrBlob, userId = 'demo-user') {
        try {
            console.log('üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

            // Demo user: return base64 locally without network call
            if (userId === 'demo-user') {
                let base64Data;
                if (fileOrBlob instanceof Blob || fileOrBlob instanceof File) {
                    base64Data = await this.fileToBase64(fileOrBlob);
                } else if (typeof fileOrBlob === 'string' && fileOrBlob.startsWith('data:')) {
                    base64Data = fileOrBlob;
                } else {
                    throw new Error('Unsupported file format');
                }
                console.log('‚úÖ Demo-user: Avatar preview (local, no upload)');
                return {
                    success: true,
                    avatarUrl: base64Data,
                    message: 'Demo avatar (not uploaded)'
                };
            }

            // Real users: multipart upload
            if (!(fileOrBlob instanceof Blob || fileOrBlob instanceof File)) {
                throw new Error('Expected File or Blob for upload');
            }

            const formData = new FormData();
            formData.append('avatar', fileOrBlob);

            const initData = this.resolveTelegramInitData();
            if (!initData) {
                throw new Error('Telegram authentication required');
            }

            const response = await fetch(`${this.baseURL}/auth/upload-avatar`, {
                method: 'POST',
                headers: {
                    'Authorization': `tma ${initData}`
                },
                body: formData
            });

            const result = await response.json();
            
            if (!response.ok || !result.success) {
                throw new Error(result.error || `HTTP ${response.status}`);
            }
            
            console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ:', result);
            return result;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
            
            if (error.status === 413 || error.message.includes('413')) {
                throw new Error('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB');
            } else if (error.status === 415 || error.message.includes('415')) {
                throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPG, PNG –∏–ª–∏ WebP');
            } else {
                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä: ${error.message}`);
            }
        }
    }

    /**
     * üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async resetTest(userId = 'demo-user') {
        try {
            console.log('üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
            
            const result = await this.request('POST', `/profile/reset-test?userId=${userId}`);
            
            console.log('‚úÖ –¢–µ—Å—Ç —Å–±—Ä–æ—à–µ–Ω —É—Å–ø–µ—à–Ω–æ:', result);
            return result;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞:', error);
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ—Å—Ç: ${error.message}`);
        }
    }

    /**
     * üîÑ –°–±—Ä–æ—Å–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ (–Ω–æ–≤—ã–π —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
     */
    async resetOnboarding(userId = 'demo-user') {
        try {
            console.log('üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π endpoint
            try {
                const result = await this.request('POST', `/auth/reset-onboarding?userId=${userId}`);
                console.log('‚úÖ –û–Ω–±–æ—Ä–¥–∏–Ω–≥ —Å–±—Ä–æ—à–µ–Ω —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π endpoint:', result);
                return result;
            } catch (newEndpointError) {
                console.warn('‚ö†Ô∏è –ù–æ–≤—ã–π endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π:', newEndpointError.message);
                
                // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π endpoint –µ—Å–ª–∏ –Ω–æ–≤—ã–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                const fallbackResult = await this.resetTest(userId);
                console.log('‚úÖ –û–Ω–±–æ—Ä–¥–∏–Ω–≥ —Å–±—Ä–æ—à–µ–Ω —á–µ—Ä–µ–∑ fallback endpoint:', fallbackResult);
                return fallbackResult;
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞:', error);
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥: ${error.message}`);
        }
    }

    /**
     * üîß –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –≤ base64
     */
    async fileToBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);
            reader.onerror = reject;
            reader.readAsDataURL(file);
        });
    }

    /**
     * üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    /**
     * üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ISO –Ω–µ–¥–µ–ª—å
     */
    async getStats(userId = 'demo-user', options = {}) {
        try {
            const { 
                scope = 'week', 
                weekNumber, 
                year, 
                monthNumber, 
                includeWeekMeta = false 
            } = options;

            const params = new URLSearchParams({ userId });
            
            // Add scope and related parameters
            if (scope) params.append('scope', scope);
            if (weekNumber) params.append('weekNumber', weekNumber.toString());
            if (year) params.append('year', year.toString());
            if (monthNumber) params.append('monthNumber', monthNumber.toString());
            if (includeWeekMeta) params.append('includeWeekMeta', 'true');

            const result = await this.request('GET', `/stats?${params.toString()}`);
            
            // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined –∑–Ω–∞—á–µ–Ω–∏–π –≤ –æ—Ç–≤–µ—Ç–µ API
            const safeStats = {
                totalQuotes: result?.stats?.totalQuotes || 0,
                currentStreak: result?.stats?.currentStreak || 0,
                longestStreak: result?.stats?.longestStreak || 0,
                favoriteAuthors: result?.stats?.favoriteAuthors || [],
                monthlyQuotes: result?.stats?.monthlyQuotes || 0,
                todayQuotes: result?.stats?.todayQuotes || 0,
                daysSinceRegistration: result?.stats?.daysSinceRegistration || 0,
                weeksSinceRegistration: result?.stats?.weeksSinceRegistration || 0,
                // New scoped fields
                scope: result?.stats?.scope || scope,
                quotes: result?.stats?.quotes || 0, // Scoped quote count
                weekMeta: result?.stats?.weekMeta || null, // Week metadata if requested
                // Surface scope-specific aliases
                weeklyQuotes: result?.stats?.weeklyQuotes || (scope === 'week' ? result?.stats?.quotes : undefined),
                globalQuotes: result?.stats?.globalQuotes || (scope === 'global' ? result?.stats?.quotes : undefined),
                monthScopedQuotes: result?.stats?.monthScopedQuotes || (scope === 'month' ? result?.stats?.quotes : undefined)
            };
            
            return { ...result, stats: safeStats };
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ defaults:', error);
            
            return {
                success: true,
                stats: {
                    totalQuotes: 0,
                    currentStreak: 0,
                    longestStreak: 0,
                    favoriteAuthors: [],
                    monthlyQuotes: 0,
                    todayQuotes: 0,
                    daysSinceRegistration: 0,
                    weeksSinceRegistration: 0,
                    scope: options.scope || 'week',
                    quotes: 0,
                    weekMeta: null
                },
                warning: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
            };
        }
    }

    /**
     * üìä –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö (activityPercent)
     */
    async getActivityPercent() {
        // –ù–ï –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å userId —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!
        const endpoint = `/activity-percent`;
        const result = await this.request('GET', endpoint);
        return result && typeof result.activityPercent === 'number'
            ? result.activityPercent
            : 1; // fallback
    }
    
    /**
     * üèÜ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getAchievements() {
        return this.request('GET', '/achievements');
    }

    // ===========================================
    // üìù –£–ü–†–ê–í–õ–ï–ù–ò–ï –¶–ò–¢–ê–¢–ê–ú–ò
    // ===========================================

    /**
     * ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É
     */
    async addQuote(quoteData, userId = 'demo-user') {
        this.clearQuotesCache();
        console.log('LOG: ApiService.addQuote - –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã:', quoteData);
        console.log('LOG: ApiService.addQuote - userId:', userId);
        
        try {
            const result = await this.request('POST', '/quotes', { ...quoteData, userId });
            console.log('LOG: ApiService.addQuote - —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:', result);
            return result;
        } catch (error) {
            console.error('LOG: ApiService.addQuote - –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —É—Å–ø–µ—à–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º —Å –∫–æ–¥–æ–º 201
            if (error.status === 201 && error.data && error.data.success) {
                console.log('LOG: ApiService.addQuote - –ø–æ–ª—É—á–µ–Ω –∫–æ–¥ 201 —Å success=true, —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º');
                return error.data;
            }
            
            throw error;
        }
    }
    
    /**
     * üìñ –ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getQuotes(options = {}, userId) {
        const params = new URLSearchParams();

        const uid = userId || this.resolveUserId();
        if (uid && uid !== 'demo-user') {
            params.append('userId', uid);
        }

        if (options.limit) params.append('limit', options.limit);
        if (typeof options.offset !== 'undefined') params.append('offset', options.offset);
        if (options.author) params.append('author', options.author);
        if (options.search) params.append('search', options.search);
        if (options.dateFrom) params.append('dateFrom', options.dateFrom);
        if (options.dateTo) params.append('dateTo', options.dateTo);
        
        // Add ISO week parameters for filtering
        if (options.weekNumber) params.append('weekNumber', options.weekNumber);
        if (options.year) params.append('year', options.year);
        if (options.monthNumber) params.append('monthNumber', options.monthNumber);

        if (typeof options.favorites !== 'undefined') {
            params.append('favorites', String(!!options.favorites));
        }
        if (options.sort) params.append('sort', options.sort);
        if (options.order) params.append('order', options.order);

        const endpoint = `/quotes?${params.toString()}`;
        return this.request('GET', endpoint);
    }
    
    /**
     * ü§ñ –ê–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ AI
     */
    async analyzeQuote(textOrOptions, author = null) {
        // Support both signatures: analyzeQuote(text, author) and analyzeQuote({ text, author })
        let requestData;
        
        if (typeof textOrOptions === 'string') {
            // analyzeQuote(text, author) format
            requestData = {
                text: textOrOptions,
                author: author
            };
        } else if (typeof textOrOptions === 'object' && textOrOptions.text) {
            // analyzeQuote({ text, author, source }) format
            requestData = {
                text: textOrOptions.text,
                author: textOrOptions.author || null
            };
        } else {
            throw new Error('Invalid arguments: expected (text, author) or ({ text, author })');
        }

        return this.request('POST', '/quotes/analyze', requestData);
    }

    /**
     * ü§ñ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ü–∏—Ç–∞—Ç—ã
     */
    async reanalyzeQuote(quoteId) {
        return this.request('POST', `/quotes/${quoteId}/reanalyze`);
    }
    
    /**
     * üïê –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
     */
    async getRecentQuotes(limit = 10, userId = 'demo-user') {
        return this.request('GET', `/quotes/recent?limit=${limit}&userId=${userId}`);
    }

    /**
     * ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É
     */
    async updateQuote(quoteId, updateData, userId = 'demo-user') {
        this.clearQuotesCache();
        return this.request('PUT', `/quotes/${quoteId}`, { ...updateData, userId });
    }

    /**
     * üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ü–∏—Ç–∞—Ç—É
     */
    async deleteQuote(quoteId, userId) {
        this.clearQuotesCache();

        // –ë–µ—Ä—ë–º userId –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const uid = userId || this.resolveUserId();

        // –í–ê–ñ–ù–û: –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º demo-user ‚Äî –ª—É—á—à–µ –≤–æ–≤—Å–µ –±–µ–∑ userId, –ø—É—Å—Ç—å –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç Telegram auth
        const qs = uid && uid !== 'demo-user' ? `?userId=${encodeURIComponent(String(uid))}` : '';

        return this.request('DELETE', `/quotes/${quoteId}${qs}`);
    }

    /**
     * üîç –ü–æ–∏—Å–∫ —Ü–∏—Ç–∞—Ç
     */
    async searchQuotes(query, options = {}, userId = 'demo-user') {
        const params = new URLSearchParams({ q: query, userId });
        
        if (options.limit) params.append('limit', options.limit);
        if (options.author) params.append('author', options.author);

        return this.request('GET', `/quotes/search?${params.toString()}`);
    }

    // ===========================================
    // üìä –û–¢–ß–ï–¢–´
    // ===========================================

    /**
     * üìÖ –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û –î–õ–Ø –ü–û–°–õ–ï–î–ù–ï–ì–û –û–¢–ß–ï–¢–ê)
     */
    async getWeeklyReports(options = {}, userId = 'demo-user') {
        const params = new URLSearchParams();
        // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç
        const limit = options.limit || 1;
        if (limit) params.append('limit', limit);
        if (options.offset) params.append('offset', options.offset);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º path-–ø–∞—Ä–∞–º–µ—Ç—Ä, —Ç.–∫. /reports/weekly?userId=... –Ω–∞ –ø—Ä–æ–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        const qs = params.toString();
        const endpoint = `/reports/weekly/${encodeURIComponent(String(userId))}${qs ? `?${qs}` : ''}`;
        
        console.log(`üìä API: –ó–∞–≥—Ä—É–∂–∞–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (limit: ${limit})`);
        return this.request('GET', endpoint);
    }

    /**
     * üìà –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ ID
     * –ë—ç–∫–µ–Ω–¥ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç GET /reports/weekly/:reportId,
     * –ø–æ—ç—Ç–æ–º—É —ç–º–∏—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –∑–∞–≥—Ä—É–∑–∫—É —Å–ø–∏—Å–∫–∞ –∏ –ø–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–≥–æ id.
     */
    async getWeeklyReport(reportId, userId = 'demo-user') {
        const resp = await this.getWeeklyReports({ limit: 10 }, userId);
        const reports = resp?.reports || resp?.data?.reports || [];
        return reports.find(r => r.id === reportId) || null;
    }

    /**
     * üìÖ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–µ–ª–∏ (NEW)
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<Object>} –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–µ–ª–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–π/–ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–µ
     */
    async getWeekContext(userId) {
        const resolvedUserId = userId || this.resolveUserId();
        if (!resolvedUserId) {
            throw new Error('UserId is required for week context');
        }
        
        const params = new URLSearchParams({ userId: resolvedUserId });
        console.log(`üìÖ API: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${resolvedUserId}`);
        return this.request('GET', `/week-context?${params.toString()}`);
    }
    
    /**
     * üìÖ –ü–æ–ª—É—á–∏—Ç—å –º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
     */
    async getMonthlyReports(options = {}, userId = 'demo-user') {
        const params = new URLSearchParams({ userId });
        
        if (options.limit) params.append('limit', options.limit);
        if (options.offset) params.append('offset', options.offset);

        const endpoint = `/reports/monthly?${params.toString()}`;
        return this.request('GET', endpoint);
    }

    /**
     * üìä –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç
     */
    async getMonthlyReport(reportId, userId = 'demo-user') {
        return this.request('GET', `/reports/monthly/${reportId}?userId=${userId}`);
    }

    /**
     * üîÑ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
     */
    async generateReport(type = 'weekly') {
        return this.request('POST', `/reports/${type}/generate`);
    }

    /**
     * üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * –ù–û–í–´–ô: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
     */
    async getWeeklyStats(userId = 'demo-user') {
        try {
            const endpoint = `/reports/weekly/${encodeURIComponent(String(userId))}/stats`;
            const result = await this.request('GET', endpoint);
            
            if (result && result.success && result.data) {
                return result;
            }
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –µ—Å–ª–∏ API –Ω–µ –≤–µ—Ä–Ω—É–ª –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            console.warn('‚ö†Ô∏è API getWeeklyStats: –ø–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
            return this._getWeeklyStatsFallback();
        } catch (error) {
            console.warn('‚ö†Ô∏è API getWeeklyStats: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error);
            return this._getWeeklyStatsFallback();
        }
    }

    /**
     * üìä Fallback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è getWeeklyStats
     * @private
     */
    _getWeeklyStatsFallback() {
        return {
            success: true,
            data: {
                quotes: 7,
                uniqueAuthors: 5,
                activeDays: 6,
                streakDays: 3,
                targetQuotes: 30,
                progressQuotesPct: 50,
                targetDays: 7,
                progressDaysPct: 86,
                dominantThemes: ['—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è'],
                prevWeek: {
                    quotes: 5,
                    uniqueAuthors: 4,
                    activeDays: 4
                },
                latestQuoteAt: new Date().toISOString()
            },
            warning: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã fallback –¥–∞–Ω–Ω—ã–µ'
        };
    }

    // ===========================================
    // üÜï –ù–û–í–ê–Ø –°–ï–ö–¶–ò–Ø: –ê–õ–ò–ê–°–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
    // ===========================================

    /**
     * üìä –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ (–∞–ª–∏–∞—Å)
     * –û–ë–ù–û–í–õ–ï–ù–û: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
     */
    async getReport(type = 'weekly', reportId = 'current') {
        if (reportId === 'current') {
            // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç
            console.log(`üìä API: –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ ${type} –æ—Ç—á–µ—Ç–∞`);
            const reports = await this.getReports(type, { limit: 1 });
            return reports && reports.length > 0 ? reports[0] : null;
        } else {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç—á–µ—Ç
            return type === 'weekly' ? 
                this.getWeeklyReport(reportId) : 
                this.getMonthlyReport(reportId);
        }
    }

    /**
     * üìÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ (–∞–ª–∏–∞—Å)
     * –ù–û–í–´–ô: –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ReportsPage.js
     */
    async getReports(type = 'weekly', options = {}) {
        return type === 'weekly' ? 
            this.getWeeklyReports(options) : 
            this.getMonthlyReports(options);
    }

    /**
     * üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ ID (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)
     * –ù–û–í–´–ô: –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ReportsPage.js
     */
    async getReportById(reportId) {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö, –ø–æ—Ç–æ–º –≤ –º–µ—Å—è—á–Ω—ã—Ö
        try {
            return await this.getWeeklyReport(reportId);
        } catch (error) {
            return await this.getMonthlyReport(reportId);
        }
    }

    // ===========================================
    // üìö –ö–ê–¢–ê–õ–û–ì –ö–ù–ò–ì
    // ===========================================

    /**
     * üìñ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω alias getCatalog –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å CatalogPage
     */
    async getBookCatalog(options = {}) {
        const params = new URLSearchParams();
        
        if (options.category) params.append('category', options.category);
        if (options.limit) params.append('limit', options.limit);
        if (options.offset) params.append('offset', options.offset);

        const queryString = params.toString();
        const endpoint = queryString ? `/catalog?${queryString}` : '/catalog';
        
        return this.request('GET', endpoint);
    }

    /**
     * üìñ Alias –¥–ª—è getCatalog (–¥–ª—è CatalogPage.js)
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –º–µ—Ç–æ–¥
     */
    async getCatalog(options = {}) {
        return this.getBookCatalog(options);
    }

    /**
     * üìë –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–Ω–∏–≥
     */
    async getCategories() {
        return this.request('GET', '/categories');
    }

    /**
     * üéØ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
     */
    async getRecommendations() {
        return this.request('GET', '/recommendations');
    }

    /**
     * üè∑Ô∏è –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã
     */
    async getPromoCodes() {
        return this.request('GET', '/promo-codes');
    }

    /**
     * üìö –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–Ω–∏–≥–∏
     * –ù–û–í–´–ô: –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ
     */
    async getBookDetails(bookId) {
        return this.request('GET', `/catalog/${bookId}`);
    }

    // ===========================================
    // üë• –°–û–û–ë–©–ï–°–¢–í–û (MVP)
    // ===========================================

    /**
     * üó®Ô∏è –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
     */
    async getCommunityMessages(options = {}) {
        const params = new URLSearchParams();
        
        if (options.limit) params.append('limit', options.limit);
        if (options.offset) params.append('offset', options.offset);

        const queryString = params.toString();
        const endpoint = queryString ? `/community?${queryString}` : '/community';
        
        return this.request('GET', endpoint);
    }

    /**
     * üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
     */
    async postCommunityMessage(messageData) {
        return this.request('POST', '/community', messageData);
    }

    /**
     * üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
     * –ù–û–í–´–ô: –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è CommunityPage
     * @param {{scope?: 'week'}} options
     */
    async getCommunityStats(options = {}) {
        const params = new URLSearchParams();
        if (options.scope) params.append('scope', options.scope);
        const qs = params.toString();
        return this.request('GET', qs ? `/community/stats?${qs}` : '/community/stats');
    }

    /**
     * üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –∑–∞ –ø–µ—Ä–∏–æ–¥
     * –û–ë–ù–û–í–õ–ï–ù–û: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç scope=week –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤
     * @param {{limit?: number}} options
     */
    async getLeaderboard(options = {}) {
        const params = new URLSearchParams();
        // Always use scope=week for weekly community blocks
        params.append('scope', 'week');
        if (options.limit) params.append('limit', options.limit);
        
        const queryString = params.toString();
        return this.request('GET', `/community/leaderboard?${queryString}`);
    }

    /**
     * üî• –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
     * –ù–û–í–´–ô: –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è CommunityPage
     */
    async getPopularQuotes(options = {}) {
        const params = new URLSearchParams();
        if (options.limit) params.append('limit', options.limit);
        if (options.period) params.append('period', options.period);

        const queryString = params.toString();
        const endpoint = queryString ? `/community/popular?${queryString}` : '/community/popular';
        
        return this.request('GET', endpoint);
    }

    /**
     * üìö –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–Ω–∏–≥–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
     * –ù–û–í–´–ô: –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è CommunityPage
     */
    async getPopularBooks(options = {}) {
        const params = new URLSearchParams();
        if (options.limit) params.append('limit', options.limit);
        if (options.period) params.append('period', options.period);

        const queryString = params.toString();
        const endpoint = queryString ? `/community/popular-books?${queryString}` : '/community/popular-books';
        
        return this.request('GET', endpoint);
    }

    /**
     * üì∞ –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
     * –ù–û–í–´–ô: –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è CommunityPage (PR-3)
     */
    async getCommunityLatestQuotes(options = {}) {
        const params = new URLSearchParams();
        if (options.limit) params.append('limit', options.limit);

        const queryString = params.toString();
        const endpoint = queryString ? `/community/quotes/latest?${queryString}` : '/community/quotes/latest';
        
        return this.request('GET', endpoint);
    }

    /**
     * üî• –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     * –û–ë–ù–û–í–õ–ï–ù–û: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç scope=week –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤
     * @param {{limit?: number}} options
     */
    async getCommunityPopularQuotes(options = {}) {
        const params = new URLSearchParams();
        if (options.limit) params.append('limit', options.limit);
        // Always use scope=week for weekly community blocks
        params.append('scope', 'week');

        const queryString = params.toString();
        const endpoint = `/community/popular?${queryString}`;
        
        return this.request('GET', endpoint);
    }

    /**
     * üìö –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–Ω–∏–≥–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     * –û–ë–ù–û–í–õ–ï–ù–û: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç scope=week –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤
     * @param {{limit?: number}} options
     */
    async getCommunityPopularFavorites(options = {}) {
        const params = new URLSearchParams();
        // –î–æ–±–∞–≤–ª—è–µ–º limit —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
        if (typeof options.limit === 'number' && options.limit > 0) {
            params.append('limit', options.limit);
        }
        // –í—Å–µ–≥–¥–∞ scope=week
        params.append('scope', 'week');
        const queryString = params.toString();
        const endpoint = `/community/popular-favorites?${queryString}`;
        return this.request('GET', endpoint);
    }

    /**
     * ‚ù§Ô∏è –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ª–∞–π–∫–Ω—É—Ç—ã–µ —Ü–∏—Ç–∞—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
     * –û–ë–ù–û–í–õ–ï–ù–û: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç scope=week –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤
     * @param {{limit?: number}} options
     */
    async getCommunityPopularFavorites(options = {}) {
        const params = new URLSearchParams();
        if (options.limit) params.append('limit', options.limit);
        // Always use scope=week for weekly community blocks
        params.append('scope', 'week');
        
        const queryString = params.toString();
        const endpoint = `/community/popular-favorites?${queryString}`;
        return this.request('GET', endpoint);
    }

    /**
     * ‚ú® –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
     * –ù–û–í–´–ô: –î–ª—è spotlight —Å–µ–∫—Ü–∏–∏ - –Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Ü–∏—Ç–∞—Ç—ã
     */
    async getCommunityRecentFavorites(options = {}) {
        const params = new URLSearchParams();
        if (options.hours) params.append('hours', options.hours);
        if (options.limit) params.append('limit', options.limit);
        const qs = params.toString();
        
        const endpoint = qs ? `/community/favorites/recent?${qs}` : '/community/favorites/recent';
        return this.request('GET', endpoint);
    }

    /**
     * üëÜ –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–ª–∏–∫–∏ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É
     * –û–ë–ù–û–í–õ–ï–ù–û: –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º API: GET /api/reader/catalog/clicks/recent?limit=3
     */
    async getCatalogRecentClicks(options = {}) {
        const params = new URLSearchParams();
        if (options.limit) params.append('limit', options.limit);

        const queryString = params.toString();
        const endpoint = queryString ? `/catalog/clicks/recent?${queryString}` : '/catalog/clicks/recent';
        
        return this.request('GET', endpoint);
    }

    /**
     * üí¨ –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–Ω–Ω—ã
     * –ù–û–í–´–ô: API –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ê–Ω–Ω—ã: GET /api/reader/community/message
     */
    async getCommunityMessage() {
        return this.request('GET', '/community/message');
    }

    /**
     * üìà –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–¥ –Ω–µ–¥–µ–ª–∏
     * –ù–û–í–´–ô: API –¥–ª—è —Ç—Ä–µ–Ω–¥–∞ –Ω–µ–¥–µ–ª–∏: GET /api/reader/community/trend
     */
    async getCommunityTrend() {
        return this.request('GET', '/community/trend');
    }

    /**
     * üìä –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å–∞–π—Ç—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
     * –û–ë–ù–û–í–õ–ï–ù–û: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç scope=week –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤
     * @param {{}} options
     */
    async getCommunityInsights(options = {}) {
        const params = new URLSearchParams();
        // Always use scope=week for weekly community blocks
        params.append('scope', 'week');
        
        const queryString = params.toString();
        const endpoint = `/community/insights?${queryString}`;
        return this.request('GET', endpoint);
    }

    /**
     * üéâ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –Ω–µ–¥–µ–ª–∏
     * –û–ë–ù–û–í–õ–ï–ù–û: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç scope=week –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤
     * @param {{}} options
     */
    async getCommunityFunFact(options = {}) {
        const params = new URLSearchParams();
        // Always use scope=week for weekly community blocks
        params.append('scope', 'week');
        
        const queryString = params.toString();
        const endpoint = `/community/fun-fact?${queryString}`;
        return this.request('GET', endpoint);
    }

    // ===========================================
    // üõ†Ô∏è –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    // ===========================================

    /**
     * üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ü–∏—Ç–∞—Ç
     */
    clearQuotesCache() {
        // Clear in-memory cache
        for (const key of this.cache.keys()) {
            if (key.includes('/quotes')) {
                this.cache.delete(key);
            }
        }
        
        // Clear localStorage cache for quotes endpoints
        if (typeof window !== 'undefined' && window.StorageService) {
            try {
                const storageService = new window.StorageService();
                storageService.clearApiCache('/quotes');
                console.log('üßπ Cleared both in-memory and localStorage cache for quotes');
            } catch (error) {
                console.warn('‚ö†Ô∏è Could not clear localStorage cache:', error);
            }
        }
    }

    /**
     * üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
     */
    clearCache() {
        this.cache.clear();
        console.log('üßπ –ö—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω');
    }

    /**
     * üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
     */
    getCacheStats() {
        return {
            size: this.cache.size,
            keys: Array.from(this.cache.keys())
        };
    }

    /**
     * üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API
     */
    async healthCheck() {
        try {
            const response = await this.request('GET', '/health');
            console.log('‚úÖ API –∑–¥–æ—Ä–æ–≤', { response });
            return response;
        } catch (error) {
            console.log('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', { error: error.message });
            throw error;
        }
    }

    // ===========================================
    // üì° POST –º–µ—Ç–æ–¥—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π 
    // ===========================================

    /**
     * üìù POST –∑–∞–ø—Ä–æ—Å (–∞–ª–∏–∞—Å –¥–ª—è request)
     */
    async post(endpoint, data) {
        return this.request('POST', endpoint, data);
    }

    /**
     * üìñ GET –∑–∞–ø—Ä–æ—Å (–∞–ª–∏–∞—Å –¥–ª—è request)
     */
    async get(endpoint) {
        return this.request('GET', endpoint);
    }

    /**
     * ‚úèÔ∏è PUT –∑–∞–ø—Ä–æ—Å (–∞–ª–∏–∞—Å –¥–ª—è request)
     */
    async put(endpoint, data) {
        return this.request('PUT', endpoint, data);
    }

    /**
     * üóëÔ∏è DELETE –∑–∞–ø—Ä–æ—Å (–∞–ª–∏–∞—Å –¥–ª—è request)
     */
    async delete(endpoint) {
        return this.request('DELETE', endpoint);
    }

    /**
     * ‚öôÔ∏è –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<Object>} –ù–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    async getSettings(userId) {
        return this.request('GET', '/settings');
    }

    /**
     * ‚öôÔ∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    async saveSettings(userId, settings) {
        return this.request('PATCH', '/settings', { settings });
    }

    /**
     * ‚öôÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–ª–∏–∞—Å –¥–ª—è saveSettings)
     * @param {Object} settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    async updateSettings(settings) {
        return this.request('PATCH', '/settings', { settings });
    }
}

// üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ window –¥–æ—Å—Ç—É–ø–µ–Ω)
if (typeof window !== 'undefined') {
    window.ApiService = ApiService;
}

// üì± –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ApiService;
}

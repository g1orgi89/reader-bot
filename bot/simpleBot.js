/**
 * Simple Telegram Bot for Reader App - Entry point and notifications
 * @file bot/simpleBot.js
 * @author Reader Bot Team
 */

const { Telegraf, Markup } = require('telegraf');
const logger = require('../server/utils/logger');

/**
 * Simple Telegram Bot Class
 * Provides basic entry point functionality and notifications
 */
class SimpleTelegramBot {
  constructor(config) {
    this.config = {
      token: config.token,
      environment: config.environment || 'production',
      appWebAppUrl: config.appWebAppUrl || process.env.APP_WEBAPP_URL || 'https://app.unibotz.com/mini-app/',
      ...config
    };

    if (!this.config.token) {
      throw new Error('TELEGRAM_BOT_TOKEN is required');
    }

    this.bot = new Telegraf(this.config.token);
    this.isInitialized = false;
    
    logger.info('ü§ñ SimpleTelegramBot initialized');
  }

  /**
   * Initialize the bot with handlers
   */
  async initialize() {
    try {
      logger.info('ü§ñ Initializing SimpleTelegramBot...');
      
      this._setupCommands();
      this._setupMessageHandlers();
      this._setupErrorHandling();
      
      this.isInitialized = true;
      logger.info('‚úÖ SimpleTelegramBot initialized successfully');
      
    } catch (error) {
      logger.error(`‚ùå Failed to initialize SimpleTelegramBot: ${error.message}`);
      throw error;
    }
  }

  /**
   * Setup bot commands
   * @private
   */
  _setupCommands() {
    // /start command - welcome with inline button to Mini App
    this.bot.start(async (ctx) => {
      try {
        const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ê–Ω–Ω–∞ –ë—É—Å–µ–ª, –≤–∞—à –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –∞–≤—Ç–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Reader.

–í —ç—Ç–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã, –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å! –ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É Telegram.

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äî –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help !`;

        await ctx.reply(welcomeMessage,);
        
        logger.info(`ü§ñ /start command handled for user ${ctx.from.id}`);
        
      } catch (error) {
        logger.error(`‚ùå Error in /start command: ${error.message}`);
        await ctx.reply('ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Reader Bot! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
      }
    });

    // /help command - brief help
    this.bot.help(async (ctx) => {
      try {
        const helpMessage = `üìñ *Reader Bot - –ü–æ–º–æ—â—å*

–≠—Ç–æ—Ç –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Reader.

*–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –û—Ç–∫—Ä—ã—Ç–∏–µ Mini App –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ".`;

        await ctx.reply(helpMessage, { parse_mode: 'Markdown' });
        
        logger.info(`ü§ñ /help command handled for user ${ctx.from.id}`);
        
      } catch (error) {
        logger.error(`‚ùå Error in /help command: ${error.message}`);
        await ctx.reply('üìñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
      }
    });
  }

  /**
   * Setup message handlers
   * @private
   */
  _setupMessageHandlers() {
    // Handle all text messages
    this.bot.on('text', async (ctx) => {
      try {
        // Skip if it's a command
        if (ctx.message.text.startsWith('/')) {
          return;
        }

        const responseMessage = `ü§ñ –≠—Ç–æ—Ç –±–æ—Ç —Å–ª—É–∂–∏—Ç —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Reader.

–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–∏—Ç–∞—Ç–∞–º–∏, –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.

–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.`;

        const keyboard = Markup.inlineKeyboard([
          Markup.button.webApp('üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', this.config.appWebAppUrl)
        ]);

        await ctx.reply(responseMessage, keyboard);
        
        logger.info(`ü§ñ Text message handled for user ${ctx.from.id}`);
        
      } catch (error) {
        logger.error(`‚ùå Error handling text message: ${error.message}`);
        await ctx.reply('ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
      }
    });
  }

  /**
   * Setup error handling
   * @private
   */
  _setupErrorHandling() {
    this.bot.catch((err, ctx) => {
      logger.error(`‚ùå SimpleTelegramBot error for user ${ctx?.from?.id}:`, err);
      
      if (ctx && ctx.reply) {
        ctx.reply('ü§ñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.')
          .catch(replyErr => {
            logger.error('‚ùå Failed to send error message:', replyErr);
          });
      }
    });
  }

  /**
   * Start the bot in polling mode (deprecated - use webhook in production)
   */
  async start() {
    if (!this.isInitialized) {
      await this.initialize();
    }

    try {
      await this.bot.launch();
      logger.info('‚úÖ SimpleTelegramBot started successfully (polling mode)');
      
      // Graceful shutdown handlers
      process.once('SIGINT', () => this.stop('SIGINT'));
      process.once('SIGTERM', () => this.stop('SIGTERM'));
      
    } catch (error) {
      logger.error(`‚ùå Failed to start SimpleTelegramBot: ${error.message}`);
      throw error;
    }
  }

  /**
   * Get webhook callback for Express integration
   * @param {string} webhookPath - Path for webhook endpoint (e.g., '/api/telegram/webhook')
   * @returns {Function} Express middleware function
   */
  webhookCallback(webhookPath) {
    if (!this.isInitialized) {
      throw new Error('Bot must be initialized before creating webhook callback');
    }

    logger.info(`üîó Creating webhook callback for path: ${webhookPath}`);
    return this.bot.webhookCallback(webhookPath);
  }

  /**
   * Set webhook URL for Telegram Bot API
   * @param {string} webhookUrl - Full webhook URL (e.g., 'https://yourdomain.com/api/telegram/webhook')
   * @returns {Promise<boolean>} Success status
   */
  async setWebhook(webhookUrl) {
    if (!this.isInitialized) {
      throw new Error('Bot must be initialized before setting webhook');
    }

    try {
      logger.info(`üîó Setting webhook URL: ${webhookUrl}`);
      await this.bot.telegram.setWebhook(webhookUrl);
      logger.info('‚úÖ Webhook set successfully');
      return true;
    } catch (error) {
      logger.error(`‚ùå Failed to set webhook: ${error.message}`);
      throw error;
    }
  }

  /**
   * Get webhook info from Telegram
   * @returns {Promise<Object>} Webhook info
   */
  async getWebhookInfo() {
    try {
      const info = await this.bot.telegram.getWebhookInfo();
      return info;
    } catch (error) {
      logger.error(`‚ùå Failed to get webhook info: ${error.message}`);
      throw error;
    }
  }

  /**
   * Delete webhook (switch back to polling mode)
   * @returns {Promise<boolean>} Success status
   */
  async deleteWebhook() {
    try {
      logger.info('üîó Deleting webhook...');
      await this.bot.telegram.deleteWebhook();
      logger.info('‚úÖ Webhook deleted successfully');
      return true;
    } catch (error) {
      logger.error(`‚ùå Failed to delete webhook: ${error.message}`);
      throw error;
    }
  }

  /**
   * Stop the bot
   * @param {string} signal - Stop signal
   */
  async stop(signal = 'manual') {
    try {
      logger.info(`üîÑ Stopping SimpleTelegramBot (${signal})...`);
      
      await this.bot.stop(signal);
      logger.info('‚úÖ SimpleTelegramBot stopped successfully');
      
    } catch (error) {
      logger.error(`‚ùå Error stopping SimpleTelegramBot: ${error.message}`);
    }
  }

  /**
   * Send notification to user
   * @param {string|number} userId - Telegram user ID
   * @param {string} message - Message text
   * @param {Object} options - Additional options
   * @param {string} options.parseMode - Parse mode (Markdown, HTML)
   * @returns {Promise<Object>} Send result
   */
  async sendNotification(userId, message, options = {}) {
    try {
      if (!this.isInitialized) {
        throw new Error('Bot is not initialized');
      }

      const sendOptions = {};
      
      if (options.parseMode) {
        sendOptions.parse_mode = options.parseMode;
      }

      const result = await this.bot.telegram.sendMessage(userId, message, sendOptions);
      
      logger.info(`‚úÖ Notification sent to user ${userId}`);
      return { success: true, messageId: result.message_id };
      
    } catch (error) {
      logger.error(`‚ùå Failed to send notification to user ${userId}: ${error.message}`);
      return { success: false, error: error.message };
    }
  }

  /**
   * Health check
   * @returns {Promise<Object>}
   */
  async healthCheck() {
    try {
      const me = await this.bot.telegram.getMe();
      
      return {
        status: 'healthy',
        initialized: this.isInitialized,
        botInfo: {
          id: me.id,
          username: me.username,
          firstName: me.first_name
        },
        config: {
          environment: this.config.environment,
          appWebAppUrl: this.config.appWebAppUrl
        },
        timestamp: new Date().toISOString()
      };
      
    } catch (error) {
      logger.error(`‚ùå Health check failed: ${error.message}`);
      return {
        status: 'unhealthy',
        error: error.message,
        initialized: this.isInitialized,
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * Get bot info
   * @returns {Object}
   */
  getBotInfo() {
    return {
      initialized: this.isInitialized,
      environment: this.config.environment,
      appWebAppUrl: this.config.appWebAppUrl,
      hasToken: !!this.config.token
    };
  }
}

module.exports = SimpleTelegramBot;

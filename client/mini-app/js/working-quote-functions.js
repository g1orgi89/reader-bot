/**
 * ‚ú® –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–ß–ò–ï —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç–∞–º–∏ v2.0
 * –§–∞–π–ª –¥–ª—è –∑–∞–º–µ–Ω—ã –≤ app.js - —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
 * –í–∫–ª—é—á–∞–µ—Ç: —Ä–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã, —É–ª—É—á—à–µ–Ω–Ω—ã–π UX, –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
 * 
 * @version 2.0
 * @author Reader Bot Team
 */

/**
 * ‚ú® –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è renderQuotesList —Å –†–ê–ë–û–ß–ò–ú–ò –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
 * –î–æ–±–∞–≤–ª–µ–Ω—ã: –∫–Ω–æ–ø–∫–∞ 3 —Ç–æ—á–∫–∏, —Ä–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã, —É–ª—É—á—à–µ–Ω–Ω—ã–π UX
 */
function renderQuotesList(quotes) {
    const container = document.getElementById('quotesList');
    if (!container) return;

    if (!quotes || quotes.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üìù</div>
                <div class="empty-state-title">–î–Ω–µ–≤–Ω–∏–∫ –ø—É—Å—Ç</div>
                <div class="empty-state-text">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å –º—É–¥—Ä–æ—Å—Ç—å</div>
            </div>
        `;
        return;
    }

    container.innerHTML = quotes.map(quote => {
        const quoteId = quote._id || quote.id;
        return `
            <div class="quote-card" data-quote-id="${quoteId}">
                
                <!-- –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π (3 —Ç–æ—á–∫–∏) -->
                <button class="quote-menu-btn" 
                        onclick="event.stopPropagation(); app.toggleQuoteActions('${quoteId}')" 
                        title="–î–µ–π—Å—Ç–≤–∏—è —Å —Ü–∏—Ç–∞—Ç–æ–π">
                    ‚ãÆ
                </button>
                
                <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Ü–∏—Ç–∞—Ç—ã -->
                <div class="quote-content" onclick="app.toggleQuoteActions('${quoteId}')">
                    <div class="quote-full-text">${this.escapeHtml(quote.text)}</div>
                    <div class="quote-author">‚Äî ${this.escapeHtml(quote.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')}</div>
                    <div class="quote-meta">
                        <span>${this.formatDate(quote.createdAt)}</span>
                        ${quote.isFavorite ? '<span>‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ</span>' : ''}
                    </div>
                    ${quote.analysis ? `
                        <div class="quote-analysis">
                            <div class="analysis-tags">
                                <span class="mood-tag">${quote.analysis.mood}</span>
                                <span class="category-tag">${quote.analysis.category}</span>
                            </div>
                        </div>
                    ` : ''}
                </div>
                
                <!-- ‚ú® –†–ê–ë–û–ß–ò–ï inline –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π -->
                <div class="quote-actions-inline" id="actions-${quoteId}" style="display: none;">
                    <button class="action-btn edit-btn" 
                            onclick="event.stopPropagation(); app.editQuote('${quoteId}')" 
                            title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—É">
                        <span class="btn-icon">‚úèÔ∏è</span>
                        <span class="btn-text">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</span>
                    </button>
                    <button class="action-btn favorite-btn ${quote.isFavorite ? 'active' : ''}" 
                            onclick="event.stopPropagation(); app.toggleFavorite('${quoteId}')" 
                            title="${quote.isFavorite ? '–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}">
                        <span class="btn-icon">${quote.isFavorite ? '‚ù§Ô∏è' : 'ü§ç'}</span>
                        <span class="btn-text">${quote.isFavorite ? '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ' : '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}</span>
                    </button>
                    <button class="action-btn delete-btn" 
                            onclick="event.stopPropagation(); app.deleteQuote('${quoteId}')" 
                            title="–£–¥–∞–ª–∏—Ç—å —Ü–∏—Ç–∞—Ç—É">
                        <span class="btn-icon">üóëÔ∏è</span>
                        <span class="btn-text">–£–¥–∞–ª–∏—Ç—å</span>
                    </button>
                </div>
            </div>
        `;
    }).join('');
}

/**
 * ‚ú® –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –ó–ê–ú–ï–ù–´ –í app.js:
 * 
 * 1. –ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é renderQuotesList() –≤ –∫–ª–∞—Å—Å–µ ReaderApp
 * 2. –ó–∞–º–µ–Ω–∏—Ç—å –µ—ë –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –≤—ã—à–µ (–±–µ–∑ "function", –∫–∞–∫ –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞)
 * 3. –ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã toggleQuoteActions, editQuote, toggleFavorite, deleteQuote
 * 4. –ó–∞–º–µ–Ω–∏—Ç—å –∏—Ö –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –Ω–∏–∂–µ
 * 
 * –í–ê–ñ–ù–û: –£–±—Ä–∞—Ç—å "function" –≤ –Ω–∞—á–∞–ª–µ - —ç—Ç–æ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞!
 */

/**
 * ‚ú® –£–õ–£–ß–®–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –¥–ª—è –∑–∞–º–µ–Ω—ã –≤ –∫–ª–∞—Å—Å–µ ReaderApp:
 */

// toggleQuoteActions - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
toggleQuoteActions(quoteId) {
    console.log('üì± –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ü–∏—Ç–∞—Ç—ã:', quoteId);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥—Ä—É–≥–∏—Ö —Ü–∏—Ç–∞—Ç
    this.hideAllQuoteActions();
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–µ–∫—É—â–µ–π —Ü–∏—Ç–∞—Ç—ã
    const actionsEl = document.getElementById(`actions-${quoteId}`);
    if (actionsEl) {
        const isVisible = actionsEl.style.display !== 'none';
        
        if (isVisible) {
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            actionsEl.style.transition = 'all 0.3s ease';
            actionsEl.style.opacity = '0';
            actionsEl.style.transform = 'translateY(-10px)';
            
            setTimeout(() => {
                actionsEl.style.display = 'none';
            }, 300);
            
            this.selectedQuoteId = null;
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            actionsEl.style.display = 'flex';
            actionsEl.style.opacity = '0';
            actionsEl.style.transform = 'translateY(-10px)';
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º reflow –ø–µ—Ä–µ–¥ –∞–Ω–∏–º–∞—Ü–∏–µ–π
            actionsEl.offsetHeight;
            
            setTimeout(() => {
                actionsEl.style.transition = 'all 0.3s ease';
                actionsEl.style.opacity = '1';
                actionsEl.style.transform = 'translateY(0)';
            }, 10);
            
            this.selectedQuoteId = quoteId;
            this.triggerHaptic('light');
        }
    }
}

// hideAllQuoteActions - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
hideAllQuoteActions() {
    document.querySelectorAll('.quote-actions-inline').forEach(actionsEl => {
        if (actionsEl.style.display !== 'none') {
            actionsEl.style.transition = 'all 0.3s ease';
            actionsEl.style.opacity = '0';
            actionsEl.style.transform = 'translateY(-10px)';
            
            setTimeout(() => {
                actionsEl.style.display = 'none';
            }, 300);
        }
    });
    this.selectedQuoteId = null;
}

// editQuote - –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø
async editQuote(quoteId) {
    console.log('‚úèÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã:', quoteId);
    
    // –°–∫—Ä—ã–≤–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
    this.hideAllQuoteActions();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    this.showLoading(true);
    
    try {
        // –ò—â–µ–º —Ü–∏—Ç–∞—Ç—É –≤ state –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ API
        let quote = this.state.quotes.find(q => {
            const id = q._id || q.id;
            return id === quoteId;
        });
        
        // –ï—Å–ª–∏ —Ü–∏—Ç–∞—Ç—ã –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ API
        if (!quote && this.apiClient) {
            console.log('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–∏—Ç–∞—Ç—É —á–µ—Ä–µ–∑ API...');
            const response = await this.apiClient.getQuoteById(quoteId);
            if (response && response.success) {
                quote = response.quote;
            }
        }
        
        if (!quote) {
            throw new Error('–¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        console.log('‚úÖ –¶–∏—Ç–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', quote);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–∏—Ç–∞—Ç—É –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.editingQuote = quote;
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.showPage('add');
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ —Ü–∏—Ç–∞—Ç—ã
        const textEl = document.getElementById('quoteText');
        const authorEl = document.getElementById('quoteAuthor');
        
        if (textEl) {
            textEl.value = quote.text;
            textEl.focus(); // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        }
        if (authorEl) {
            authorEl.value = quote.author || '';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤
        const counter = document.querySelector('.char-counter');
        if (counter) {
            const length = quote.text.length;
            counter.textContent = `${length}/500`;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç —Å—á–µ—Ç—á–∏–∫–∞
            if (length > 450) {
                counter.style.color = 'var(--text-danger)';
            } else if (length > 400) {
                counter.style.color = 'var(--text-accent)';
            } else {
                counter.style.color = 'var(--text-secondary)';
            }
        }
        
        // –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ "–û–±–Ω–æ–≤–∏—Ç—å"
        const saveBtn = document.getElementById('saveButton');
        if (saveBtn) {
            saveBtn.textContent = '–û–±–Ω–æ–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É';
            saveBtn.onclick = () => this.updateQuote();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            saveBtn.classList.add('edit-mode');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const pageTitle = document.querySelector('#add .page-title');
        if (pageTitle) {
            pageTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—É';
        }
        
        this.triggerHaptic('success');
        this.showSuccess('–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', error);
        this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    } finally {
        this.showLoading(false);
    }
}

// toggleFavorite - –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø
async toggleFavorite(quoteId) {
    console.log('‚ù§Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è —Ü–∏—Ç–∞—Ç—ã:', quoteId);
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    const favoriteBtn = document.querySelector(`#actions-${quoteId} .favorite-btn`);
    const originalContent = favoriteBtn ? favoriteBtn.innerHTML : '';
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∫–Ω–æ–ø–∫–µ
        if (favoriteBtn) {
            favoriteBtn.innerHTML = '<span class="btn-icon">‚è≥</span><span class="btn-text">–û–±–Ω–æ–≤–ª—è—é...</span>';
            favoriteBtn.disabled = true;
        }
        
        if (this.apiClient) {
            console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ...');
            const result = await this.apiClient.toggleQuoteFavorite(quoteId);
            
            if (result.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                const quoteIndex = this.state.quotes.findIndex(q => 
                    (q._id || q.id) === quoteId
                );
                
                if (quoteIndex !== -1) {
                    this.state.quotes[quoteIndex].isFavorite = result.isFavorite;
                }
                
                const message = result.isFavorite ? '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§Ô∏è' : '–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ üíî';
                this.showSuccess(message);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–∏—Ç–∞—Ç
                await this.loadAllQuotes();
                
                this.triggerHaptic('success');
                
            } else {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
            }
        } else {
            // –î–ï–ú–û —Ä–µ–∂–∏–º - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            console.log('üîÑ –î–µ–º–æ —Ä–µ–∂–∏–º: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ');
            
            const quoteIndex = this.state.quotes.findIndex(q => 
                (q._id || q.id) === quoteId
            );
            
            if (quoteIndex !== -1) {
                this.state.quotes[quoteIndex].isFavorite = !this.state.quotes[quoteIndex].isFavorite;
                const isFavorite = this.state.quotes[quoteIndex].isFavorite;
                
                const message = isFavorite ? '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§Ô∏è' : '–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ üíî';
                this.showSuccess(message);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                this.renderQuotesList(this.state.quotes);
                this.triggerHaptic('success');
                
            } else {
                throw new Error('–¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
        this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–Ω–æ–ø–∫–∏
        if (favoriteBtn) {
            favoriteBtn.innerHTML = originalContent;
        }
    } finally {
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        if (favoriteBtn) {
            favoriteBtn.disabled = false;
        }
    }
}

// deleteQuote - –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø
async deleteQuote(quoteId) {
    console.log('üóëÔ∏è –ó–∞–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', quoteId);
    
    // –ù–∞—Ö–æ–¥–∏–º —Ü–∏—Ç–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
    const quote = this.state.quotes.find(q => (q._id || q.id) === quoteId);
    const quotePreview = quote ? 
        `"${quote.text.substring(0, 50)}${quote.text.length > 50 ? '...' : ''}"\n\n` : 
        '';
    
    const confirmMessage = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ü–∏—Ç–∞—Ç—É?\n\n${quotePreview}–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if (this.telegramManager?.tg?.showConfirm) {
        this.telegramManager.tg.showConfirm(confirmMessage, (confirmed) => {
            if (confirmed) {
                this.performDeleteQuote(quoteId);
            }
        });
    } else {
        if (confirm(confirmMessage)) {
            this.performDeleteQuote(quoteId);
        }
    }
}

// performDeleteQuote - –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø
async performDeleteQuote(quoteId) {
    console.log('üóëÔ∏è –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã:', quoteId);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    this.hideAllQuoteActions();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    this.showLoading(true);
    
    try {
        if (this.apiClient) {
            console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API...');
            const result = await this.apiClient.deleteQuote(quoteId);
            
            if (result.success) {
                // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                this.state.quotes = this.state.quotes.filter(q => 
                    (q._id || q.id) !== quoteId
                );
                
                this.showSuccess('–¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ üóëÔ∏è');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                await Promise.all([
                    this.loadUserStats(),
                    this.loadRecentQuotes(),
                    this.loadAllQuotes()
                ]);
                
                this.triggerHaptic('success');
                
            } else {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
            }
        } else {
            // –î–ï–ú–û —Ä–µ–∂–∏–º - —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            console.log('üîÑ –î–µ–º–æ —Ä–µ–∂–∏–º: —É–¥–∞–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ');
            
            const quoteIndex = this.state.quotes.findIndex(q => 
                (q._id || q.id) === quoteId
            );
            
            if (quoteIndex !== -1) {
                // –£–¥–∞–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É
                this.state.quotes.splice(quoteIndex, 1);
                
                this.showSuccess('–¶–∏—Ç–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ üóëÔ∏è');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                this.loadRecentQuotes();
                this.renderQuotesList(this.state.quotes);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –¥–Ω–µ–≤–Ω–∏–∫–∞
                const subtitle = document.getElementById('diarySubtitle');
                if (subtitle) {
                    subtitle.textContent = `${this.state.quotes.length} –∑–∞–ø–∏—Å–µ–π –æ –º—É–¥—Ä–æ—Å—Ç–∏`;
                }
                
                this.triggerHaptic('success');
                
            } else {
                throw new Error('–¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', error);
        this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ü–∏—Ç–∞—Ç—É: ' + error.message);
    } finally {
        this.showLoading(false);
    }
}

// updateQuote - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
async updateQuote() {
    if (!this.editingQuote) {
        console.error('‚ùå –ù–µ—Ç —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        this.showError('–û—à–∏–±–∫–∞: –Ω–µ—Ç —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        return;
    }
    
    const textEl = document.getElementById('quoteText');
    const authorEl = document.getElementById('quoteAuthor');
    const saveBtn = document.getElementById('saveButton');
    
    if (!textEl || !textEl.value.trim()) {
        this.showError('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã');
        textEl?.focus();
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const newText = textEl.value.trim();
    const newAuthor = authorEl?.value.trim() || '';
    
    if (newText === this.editingQuote.text && newAuthor === (this.editingQuote.author || '')) {
        this.showError('–í–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ü–∏—Ç–∞—Ç—É –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º');
        return;
    }

    try {
        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏
        if (saveBtn) {
            saveBtn.disabled = true;
            saveBtn.textContent = '–û–±–Ω–æ–≤–ª—è—é...';
        }

        const quoteData = {
            id: this.editingQuote._id || this.editingQuote.id,
            text: newText,
            author: newAuthor
        };

        console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É:', quoteData);

        if (this.apiClient) {
            const result = await this.apiClient.updateQuote(quoteData);
            
            if (result.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                const quoteIndex = this.state.quotes.findIndex(q => 
                    (q._id || q.id) === quoteData.id
                );
                
                if (quoteIndex !== -1) {
                    this.state.quotes[quoteIndex] = {
                        ...this.state.quotes[quoteIndex],
                        text: quoteData.text,
                        author: quoteData.author
                    };
                }
                
                this.handleSuccessfulUpdate(textEl, authorEl, saveBtn);
            } else {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
            }
        } else {
            // –î–ï–ú–û —Ä–µ–∂–∏–º - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            console.log('üîÑ –î–µ–º–æ —Ä–µ–∂–∏–º: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ');
            
            const quoteIndex = this.state.quotes.findIndex(q => 
                (q._id || q.id) === (this.editingQuote._id || this.editingQuote.id)
            );
            
            if (quoteIndex !== -1) {
                this.state.quotes[quoteIndex] = {
                    ...this.state.quotes[quoteIndex],
                    text: quoteData.text,
                    author: quoteData.author
                };
                this.handleSuccessfulUpdate(textEl, authorEl, saveBtn);
            } else {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–∏—Ç–∞—Ç—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', error);
        this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É: ' + error.message);
    } finally {
        if (saveBtn) {
            saveBtn.disabled = false;
        }
    }
}

// handleSuccessfulUpdate - –ù–û–í–´–ô –ú–ï–¢–û–î
handleSuccessfulUpdate(textEl, authorEl, saveBtn) {
    // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
    textEl.value = '';
    if (authorEl) authorEl.value = '';
    
    // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
    const counter = document.querySelector('.char-counter');
    if (counter) {
        counter.textContent = '0/500';
        counter.style.color = 'var(--text-secondary)';
    }
    
    // –°–±—Ä–æ—Å –∫–Ω–æ–ø–∫–∏ –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
    if (saveBtn) {
        saveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫';
        saveBtn.onclick = () => this.saveQuote();
        saveBtn.classList.remove('edit-mode');
    }
    
    // –°–±—Ä–æ—Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const pageTitle = document.querySelector('#add .page-title');
    if (pageTitle) {
        pageTitle.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É';
    }
    
    // –°–±—Ä–æ—Å —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    this.editingQuote = null;
    
    this.showSuccess('–¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! ‚úÖ');
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤
    Promise.all([
        this.loadRecentQuotes(),
        this.loadAllQuotes()
    ]);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥–Ω–µ–≤–Ω–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã
    setTimeout(() => {
        this.showPage('diary');
    }, 1500);
    
    this.triggerHaptic('success');
}

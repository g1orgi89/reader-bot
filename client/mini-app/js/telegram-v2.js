/**
 * TELEGRAM.JS - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Web App SDK v2.0
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —á—Ç–µ–Ω–∏–µ —Ç–µ–º—ã –æ—Ç Telegram –±–µ–∑ mock —Ä–µ–∂–∏–º–∞
 * –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö themeParams –∏–∑ Telegram Mini Apps API
 */

class TelegramManager {
    constructor() {
        this.tg = null;
        this.user = null;
        this.isInitialized = false;
        this.mockMode = false;
        this.currentTheme = 'light';
        this.callbacks = {
            onUserChange: [],
            onThemeChange: [],
            onViewportChange: []
        };
        
        // –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö Telegram themeParams
        this.supportedThemeParams = [
            'accent_text_color',
            'bg_color', 
            'button_color',
            'button_text_color',
            'bottom_bar_bg_color',
            'destructive_text_color',
            'header_bg_color',
            'hint_color',
            'link_color',
            'secondary_bg_color',
            'section_bg_color',
            'section_header_text_color',
            'subtitle_text_color',
            'text_color',
            'section_separator_color'
        ];
        
        console.log('TelegramManager v2.1: Constructor initialized with auto theme detection');
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
     */
    init() {
        console.log('TelegramManager v2.1: Starting initialization...');
        
        try {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram
            if (typeof window.Telegram !== 'undefined' && window.Telegram.WebApp) {
                this.tg = window.Telegram.WebApp;
                this.mockMode = false;
                console.log('‚úÖ TelegramManager: Real Telegram Web App detected');
                this.initTelegramApp();
            } else {
                console.warn('‚ö†Ô∏è TelegramManager: Telegram Web App not available, fallback mode');
                this.mockMode = true;
                this.initFallbackMode();
            }
            
            this.setupUser();
            this.setupThemes(); // ‚Üê –ö–õ–Æ–ß–ï–í–û–ô –ú–ï–¢–û–î –î–õ–Ø –¢–ï–ú
            this.setupUI();
            this.setupEventListeners();
            
            this.isInitialized = true;
            console.log('‚úÖ TelegramManager v2.1: Initialization completed');
            
            return this.getUserData();
            
        } catch (error) {
            console.error('‚ùå TelegramManager: Initialization failed:', error);
            this.mockMode = true;
            this.initFallbackMode();
            this.isInitialized = true;
            return this.getUserData();
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ Telegram Web App
     */
    initTelegramApp() {
        try {
            // –ì–æ—Ç–æ–≤–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            this.tg.ready();
            
            // –†–∞—Å—à–∏—Ä—è–µ–º viewport
            this.tg.expand();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
            this.tg.MainButton.setText('–ì–æ—Ç–æ–≤–æ');
            this.tg.MainButton.hide();
            
            if (this.tg.BackButton) {
                this.tg.BackButton.hide();
            }
            
            // –í–∫–ª—é—á–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ —Å–≤–∞–π–ø–µ
            if (this.tg.enableClosingConfirmation) {
                this.tg.enableClosingConfirmation();
            }
            
            console.log('‚úÖ Telegram app initialized:', {
                version: this.tg.version,
                platform: this.tg.platform,
                colorScheme: this.tg.colorScheme,
                themeParams: Object.keys(this.tg.themeParams || {}).length
            });
            
        } catch (error) {
            console.error('‚ùå Failed to initialize Telegram app:', error);
        }
    }
    
    /**
     * –ù–û–í–û–ï: Fallback —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    initFallbackMode() {
        // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π mock –æ–±—ä–µ–∫—Ç
        this.tg = {
            ready: () => {},
            expand: () => {},
            close: () => console.log('Mock: App closed'),
            MainButton: {
                setText: (text) => console.log('Mock MainButton text:', text),
                show: () => {},
                hide: () => {},
                onClick: () => {},
                offClick: () => {}
            },
            BackButton: {
                show: () => {},
                hide: () => {},
                onClick: () => {},
                offClick: () => {}
            },
            HapticFeedback: {
                impactOccurred: (style) => console.log('Mock haptic:', style),
                notificationOccurred: (type) => console.log('Mock notification:', type),
                selectionChanged: () => console.log('Mock selection changed')
            },
            initData: 'fallback_mode',
            initDataUnsafe: {
                user: {
                    id: 999999,
                    first_name: '–ß–∏—Ç–∞—Ç–µ–ª—å',
                    last_name: '',
                    username: 'reader_user',
                    language_code: 'ru',
                    is_premium: false
                }
            },
            version: '6.0',
            platform: 'web',
            // –í–ê–ñ–ù–û: –ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            colorScheme: 'light', 
            themeParams: {},
            isExpanded: true,
            viewportHeight: 600,
            viewportStableHeight: 600
        };
        
        console.log('‚ö†Ô∏è Fallback mode initialized');
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    setupUser() {
        this.user = this.tg.initDataUnsafe?.user || null;
        
        if (this.user) {
            console.log('‚úÖ User data loaded:', {
                id: this.user.id,
                name: `${this.user.first_name} ${this.user.last_name || ''}`.trim(),
                username: this.user.username
            });
        } else {
            console.warn('‚ö†Ô∏è No user data available');
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        this.callbacks.onUserChange.forEach(callback => {
            try {
                callback(this.user);
            } catch (error) {
                console.error('‚ùå User callback error:', error);
            }
        });
    }
    
    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º
     */
    setupThemes() {
        console.log('üé® Setting up themes...');
        
        // –ê–í–¢–û–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ï–ú–´
        let themeParams = {};
        let colorScheme = 'light';
        
        if (!this.mockMode && this.tg.themeParams) {
            // –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
            themeParams = this.tg.themeParams;
            colorScheme = this.tg.colorScheme || 'light';
            console.log('‚úÖ Using real Telegram theme:', colorScheme, themeParams);
        } else {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –∏–∑ —Å–∏—Å—Ç–µ–º—ã –±—Ä–∞—É–∑–µ—Ä–∞
            const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
            colorScheme = prefersDark ? 'dark' : 'light';
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ü–≤–µ—Ç–∞
            themeParams = this.getDefaultThemeParams(colorScheme);
            console.log('üîß Using auto-detected theme:', colorScheme);
        }
        
        // –ü–†–ò–ú–ï–ù–Ø–ï–ú –¢–ï–ú–£
        this.applyTelegramTheme(themeParams, colorScheme);
        this.showThemeIndicator(colorScheme);
        
        console.log('‚úÖ Theme applied successfully:', colorScheme);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        this.callbacks.onThemeChange.forEach(callback => {
            try {
                callback(themeParams, colorScheme);
            } catch (error) {
                console.error('‚ùå Theme callback error:', error);
            }
        });
    }
    
    /**
     * –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–µ–º—ã
     */
    getDefaultThemeParams(colorScheme) {
        const defaultThemes = {
            light: {
                accent_text_color: '#6ab2f2',
                bg_color: '#ffffff',
                button_color: '#5288c1',
                button_text_color: '#ffffff',
                bottom_bar_bg_color: '#ffffff',
                destructive_text_color: '#ec3942',
                header_bg_color: '#ffffff',
                hint_color: '#999999',
                link_color: '#6ab3f3',
                secondary_bg_color: '#f4f4f5',
                section_bg_color: '#ffffff',
                section_header_text_color: '#6ab3f3',
                subtitle_text_color: '#999999',
                text_color: '#000000',
                section_separator_color: '#e7e8ea'
            },
            dark: {
                accent_text_color: '#6ab2f2',
                bg_color: '#17212b',
                button_color: '#5288c1',
                button_text_color: '#ffffff',
                bottom_bar_bg_color: '#17212b',
                destructive_text_color: '#ec3942',
                header_bg_color: '#17212b',
                hint_color: '#708499',
                link_color: '#6ab3f3',
                secondary_bg_color: '#232e3c',
                section_bg_color: '#17212b',
                section_header_text_color: '#6ab3f3',
                subtitle_text_color: '#708499',
                text_color: '#f5f5f5',
                section_separator_color: '#2a3441'
            }
        };
        
        return defaultThemes[colorScheme] || defaultThemes.light;
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –∫ CSS
     */
    applyTelegramTheme(themeParams, colorScheme) {
        const root = document.documentElement;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç —Ç–µ–º—ã
        root.setAttribute('data-theme', colorScheme);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ themeParams –∫–∞–∫ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        this.supportedThemeParams.forEach(param => {
            const cssVar = `--tg-${param.replace(/_/g, '-')}`;
            if (themeParams[param]) {
                root.style.setProperty(cssVar, themeParams[param]);
            }
        });
        
        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
        if (themeParams.bg_color) {
            root.style.setProperty('--bg-primary', themeParams.bg_color);
            document.body.style.backgroundColor = themeParams.bg_color;
        }
        
        if (themeParams.text_color) {
            root.style.setProperty('--text-primary', themeParams.text_color);
            document.body.style.color = themeParams.text_color;
        }
        
        if (themeParams.hint_color) {
            root.style.setProperty('--text-muted', themeParams.hint_color);
        }
        
        if (themeParams.link_color) {
            root.style.setProperty('--primary-color', themeParams.link_color);
        }
        
        if (themeParams.secondary_bg_color) {
            root.style.setProperty('--bg-secondary', themeParams.secondary_bg_color);
        }
        
        console.log('üé® CSS variables applied:', {
            bgColor: themeParams.bg_color,
            textColor: themeParams.text_color,
            colorScheme: colorScheme
        });
        
        this.animateThemeTransition();
    }
    
    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Ç–µ–º–∞–º–∏
     */
    animateThemeTransition() {
        let overlay = document.querySelector('.theme-transition-overlay');
        if (!overlay) {
            overlay = document.createElement('div');
            overlay.className = 'theme-transition-overlay';
            document.body.appendChild(overlay);
        }
        
        overlay.classList.add('active');
        setTimeout(() => overlay.classList.remove('active'), 300);
    }
    
    /**
     * –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–º–µ–Ω—ã —Ç–µ–º—ã
     */
    showThemeIndicator(colorScheme) {
        let indicator = document.querySelector('.theme-indicator');
        if (!indicator) {
            indicator = document.createElement('div');
            indicator.className = 'theme-indicator';
            document.body.appendChild(indicator);
        }
        
        const themeNames = {
            light: '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞',
            dark: 'üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞'
        };
        
        indicator.textContent = themeNames[colorScheme] || `üé® –¢–µ–º–∞: ${colorScheme}`;
        indicator.classList.add('show');
        
        setTimeout(() => indicator.classList.remove('show'), 2000);
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    setupUI() {
        this.updateViewport();
        
        if (!this.mockMode) {
            // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è viewport
            if (this.tg.onEvent) {
                this.tg.onEvent('viewportChanged', () => {
                    this.updateViewport();
                    this.callbacks.onViewportChange.forEach(callback => {
                        try {
                            callback(this.tg.viewportHeight, this.tg.viewportStableHeight);
                        } catch (error) {
                            console.error('‚ùå Viewport callback error:', error);
                        }
                    });
                });
                
                // –í–ê–ñ–ù–û: –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
                this.tg.onEvent('themeChanged', () => {
                    console.log('üé® Telegram theme change event received');
                    this.setupThemes(); // –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–º—ã
                });
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º debug –ø–∞–Ω–µ–ª—å –≤ fallback —Ä–µ–∂–∏–º–µ
        if (this.mockMode) {
            this.addDebugThemeInfo();
        }
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ debug –ø–∞–Ω–µ–ª–∏
     */
    addDebugThemeInfo() {
        let debugInfo = document.querySelector('.debug-theme-info');
        if (!debugInfo) {
            debugInfo = document.createElement('div');
            debugInfo.className = 'debug-theme-info';
            document.body.appendChild(debugInfo);
        }
        
        const colorScheme = this.getCurrentTheme().colorScheme;
        
        debugInfo.innerHTML = `
            <div>Mode: ${this.mockMode ? 'Fallback' : 'Telegram'}</div>
            <div>Theme: ${colorScheme}</div>
            <div>Auto-detect: ${window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'Dark' : 'Light'}</div>
            <div style="margin-top: 4px; font-size: 0.6rem;">
                ${this.mockMode ? 'Click to toggle theme' : 'Theme from Telegram'}
            </div>
        `;
        
        if (this.mockMode) {
            debugInfo.style.cursor = 'pointer';
            debugInfo.onclick = () => this.toggleMockTheme();
        }
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã –≤ fallback —Ä–µ–∂–∏–º–µ
     */
    toggleMockTheme() {
        if (!this.mockMode) return;
        
        const currentScheme = this.getCurrentTheme().colorScheme;
        const newScheme = currentScheme === 'light' ? 'dark' : 'light';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É
        this.tg.colorScheme = newScheme;
        this.tg.themeParams = this.getDefaultThemeParams(newScheme);
        
        console.log(`üîÑ Mock theme switched to: ${newScheme}`);
        this.setupThemes();
        this.addDebugThemeInfo();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ viewport
     */
    updateViewport() {
        const height = this.tg.viewportHeight || window.innerHeight;
        const stableHeight = this.tg.viewportStableHeight || window.innerHeight;
        
        document.documentElement.style.setProperty('--viewport-height', `${height}px`);
        document.documentElement.style.setProperty('--viewport-stable-height', `${stableHeight}px`);
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        if (this.tg.MainButton && !this.mockMode) {
            this.tg.MainButton.onClick(() => {
                this.hapticFeedback('light');
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
        if (this.tg.BackButton && !this.mockMode) {
            this.tg.BackButton.onClick(() => {
                this.hapticFeedback('light');
                if (window.app && window.app.showPage) {
                    window.app.showPage('home');
                }
            });
        }
        
        // –ù–û–í–û–ï: –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã –±—Ä–∞—É–∑–µ—Ä–∞
        if (window.matchMedia) {
            const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
            mediaQuery.addListener((e) => {
                if (this.mockMode) {
                    console.log('üîÑ System theme changed:', e.matches ? 'dark' : 'light');
                    // –í fallback —Ä–µ–∂–∏–º–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—É—é —Ç–µ–º—É
                    const newScheme = e.matches ? 'dark' : 'light';
                    this.tg.colorScheme = newScheme;
                    this.tg.themeParams = this.getDefaultThemeParams(newScheme);
                    this.setupThemes();
                }
            });
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUserData() {
        return {
            id: this.user?.id || null,
            firstName: this.user?.first_name || '–ß–∏—Ç–∞—Ç–µ–ª—å',
            lastName: this.user?.last_name || '',
            username: this.user?.username || null,
            languageCode: this.user?.language_code || 'ru',
            isPremium: this.user?.is_premium || false,
            initData: this.tg.initData || '',
            startParam: this.tg.initDataUnsafe?.start_param || null,
            colorScheme: this.tg.colorScheme || 'light',
            themeParams: this.tg.themeParams || {}
        };
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
     */
    getCurrentTheme() {
        return {
            colorScheme: this.tg.colorScheme || 'light',
            themeParams: this.tg.themeParams || {},
            isDark: this.tg.colorScheme === 'dark',
            isLight: this.tg.colorScheme === 'light'
        };
    }
    
    /**
     * Haptic feedback
     */
    hapticFeedback(style = 'light') {
        if (this.tg.HapticFeedback) {
            try {
                if (style === 'selection') {
                    this.tg.HapticFeedback.selectionChanged();
                } else if (['error', 'success', 'warning'].includes(style)) {
                    this.tg.HapticFeedback.notificationOccurred(style);
                } else {
                    this.tg.HapticFeedback.impactOccurred(style);
                }
            } catch (error) {
                console.error('‚ùå Haptic feedback error:', error);
            }
        }
    }
    
    /**
     * –í–∏–±—Ä–∞—Ü–∏—è - –∞–ª–∏–∞—Å –¥–ª—è hapticFeedback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
     */
    vibrate(style = 'light') {
        return this.hapticFeedback(style);
    }
    
    /**
     * –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
     */
    showMainButton(text, callback) {
        if (this.tg.MainButton) {
            this.tg.MainButton.setText(text);
            this.tg.MainButton.show();
            
            if (callback && !this.mockMode) {
                this.tg.MainButton.onClick(callback);
            }
        }
    }
    
    /**
     * –°–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
     */
    hideMainButton() {
        if (this.tg.MainButton) {
            this.tg.MainButton.hide();
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
     */
    showBackButton(callback) {
        if (this.tg.BackButton) {
            this.tg.BackButton.show();
            if (callback && !this.mockMode) {
                this.tg.BackButton.onClick(callback);
            }
        }
    }
    
    /**
     * –°–∫—Ä—ã—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
     */
    hideBackButton() {
        if (this.tg.BackButton) {
            this.tg.BackButton.hide();
        }
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    close() {
        if (this.tg.close) {
            this.tg.close();
        }
    }
    
    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
     */
    on(event, callback) {
        if (this.callbacks[event]) {
            this.callbacks[event].push(callback);
        }
    }
    
    /**
     * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
     */
    off(event, callback) {
        if (this.callbacks[event]) {
            const index = this.callbacks[event].indexOf(callback);
            if (index > -1) {
                this.callbacks[event].splice(index, 1);
            }
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
     */
    getPlatformInfo() {
        return {
            platform: this.tg.platform || 'unknown',
            version: this.tg.version || 'unknown',
            colorScheme: this.tg.colorScheme || 'light',
            isExpanded: this.tg.isExpanded || false,
            viewportHeight: this.tg.viewportHeight || window.innerHeight,
            isMock: this.mockMode,
            supportedThemeParams: this.supportedThemeParams,
            activeThemeParams: Object.keys(this.tg.themeParams || {})
        };
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π
     */
    hasFeature(feature) {
        const features = {
            mainButton: !!this.tg.MainButton,
            backButton: !!this.tg.BackButton,
            hapticFeedback: !!this.tg.HapticFeedback,
            themeParams: !!this.tg.themeParams,
            themeEvents: !this.mockMode && !!this.tg.onEvent
        };
        
        return features[feature] || false;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ç–µ–º—ã
     */
    getThemeParam(paramName) {
        return this.tg.themeParams?.[paramName] || null;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ç–µ–º—ã
     */
    isThemeParamSupported(paramName) {
        return this.supportedThemeParams.includes(paramName);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ç–µ–º—ã
     */
    getThemeParamCSSVar(paramName) {
        if (this.isThemeParamSupported(paramName)) {
            return `--tg-${paramName.replace(/_/g, '-')}`;
        }
        return null;
    }
    
    /**
     * –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã
     */
    forceThemeUpdate() {
        console.log('üîÑ Force theme update requested');
        this.setupThemes();
    }
    
    /**
     * –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
     */
    exportCurrentTheme() {
        return {
            colorScheme: this.tg.colorScheme,
            themeParams: { ...this.tg.themeParams },
            timestamp: Date.now(),
            version: '2.1'
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.TelegramManager = new TelegramManager();

console.log('‚úÖ TelegramManager v2.1: Module loaded with automatic theme detection');

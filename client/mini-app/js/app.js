/**
 * –ß–∏—Ç–∞—Ç–µ–ª—å Mini App - –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 * –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
 */

class ReaderApp {
    constructor() {
        this.currentUser = null;
        this.currentPage = 'home';
        this.isInitialized = false;
        this.stats = {};
        this.quotes = [];
        this.reports = [];
        this.achievements = [];
        
        console.log('üì± Reader App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...');
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async init() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Reader App...');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ—Å—Ç—ã–º –ø–æ–¥—Ö–æ–¥–æ–º
            this.setupNavigation();
            this.setupForms();
            this.updateAllPages();
            
            this.isInitialized = true;
            console.log('üéâ Reader App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - –∞–ª–∏–∞—Å –¥–ª—è setupNavigation –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
     */
    initNavigation() {
        return this.setupNavigation();
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    setupNavigation() {
        const navItems = document.querySelectorAll('.nav-item');
        
        navItems.forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                
                const page = item.dataset.page;
                if (page) {
                    this.showPage(page);
                }
            });
        });
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
     */
    showPage(pageId) {
        console.log('üìÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:', pageId);
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.querySelectorAll('.page').forEach(page => {
            page.classList.remove('active');
        });
        
        document.querySelectorAll('.nav-item').forEach(item => {
            item.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const targetPage = document.getElementById(`page-${pageId}`);
        if (targetPage) {
            targetPage.classList.add('active');
        }
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const navItem = document.querySelector(`[data-page="${pageId}"]`);
        if (navItem) {
            navItem.classList.add('active');
        }
        
        this.currentPage = pageId;
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º
     */
    setupForms() {
        // –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
        const quickAddForm = document.getElementById('quick-add-form');
        if (quickAddForm) {
            quickAddForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleQuickAddQuote();
            });
        }
        
        // –ü–æ–ª–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã
        const addQuoteForm = document.getElementById('add-quote-form');
        if (addQuoteForm) {
            addQuoteForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleAddQuote();
            });
        }
    }
    
    /**
     * –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
     */
    async handleQuickAddQuote() {
        const textInput = document.getElementById('quick-quote-text');
        const authorInput = document.getElementById('quick-quote-author');
        
        if (!textInput || !textInput.value.trim()) {
            this.showToast('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã', 'warning');
            return;
        }
        
        const quoteData = {
            text: textInput.value.trim(),
            author: authorInput ? authorInput.value.trim() : '',
            source: 'mini_app'
        };
        
        try {
            this.showToast('–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–∏—Ç–∞—Ç—É...', 'info');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π API –∑–∞–ø—Ä–æ—Å
            const response = await fetch('/api/reader/quotes', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(quoteData)
            });
            
            const result = await response.json();
            
            if (result.success) {
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                textInput.value = '';
                if (authorInput) authorInput.value = '';
                
                this.showToast('–¶–∏—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! üìö', 'success');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                this.updateStats();
                
            } else {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', error);
            this.showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã', 'error');
        }
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—É—é —Ñ–æ—Ä–º—É
     */
    async handleAddQuote() {
        const textInput = document.getElementById('quote-text');
        const authorInput = document.getElementById('quote-author');
        const sourceInput = document.getElementById('quote-source');
        
        if (!textInput || !textInput.value.trim()) {
            this.showToast('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã', 'warning');
            return;
        }
        
        const quoteData = {
            text: textInput.value.trim(),
            author: authorInput ? authorInput.value.trim() : '',
            source: sourceInput ? sourceInput.value.trim() : ''
        };
        
        try {
            this.showToast('–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–∏—Ç–∞—Ç—É...', 'info');
            
            const response = await fetch('/api/reader/quotes', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(quoteData)
            });
            
            const result = await response.json();
            
            if (result.success) {
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                textInput.value = '';
                if (authorInput) authorInput.value = '';
                if (sourceInput) sourceInput.value = '';
                
                this.showToast('–¶–∏—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! üìö', 'success');
                
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                this.showPage('home');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                this.updateStats();
                
            } else {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', error);
            this.showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã', 'error');
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    async updateStats() {
        try {
            const response = await fetch('/api/reader/quotes');
            const result = await response.json();
            
            if (result.success && result.data) {
                const totalQuotes = result.data.pagination ? result.data.pagination.totalCount : 0;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                const totalQuotesEl = document.getElementById('total-quotes');
                if (totalQuotesEl) {
                    totalQuotesEl.textContent = totalQuotes;
                }
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                this.updateRecentQuotes(result.data.quotes || []);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ç–∞—Ç
     */
    updateRecentQuotes(quotes) {
        const quotesList = document.getElementById('recent-quotes-list');
        if (!quotesList) return;
        
        if (quotes && quotes.length > 0) {
            quotesList.innerHTML = quotes.slice(0, 3).map(quote => `
                <div class="quote-item">
                    <div class="quote-text">"${this.escapeHtml(quote.text)}"</div>
                    ${quote.author ? `<div class="quote-author">‚Äî ${this.escapeHtml(quote.author)}</div>` : ''}
                    <div class="quote-date">${this.formatDate(quote.createdAt)}</div>
                </div>
            `).join('');
        } else {
            quotesList.innerHTML = `
                <div class="empty-state">
                    <p>–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç</p>
                    <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É –≤—ã—à–µ üëÜ</p>
                </div>
            `;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    updateAllPages() {
        this.updateStats();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        this.updateMockData();
    }
    
    /**
     * Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
     */
    updateMockData() {
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const weekQuotesEl = document.getElementById('week-quotes');
        const streakDaysEl = document.getElementById('streak-days');
        
        if (weekQuotesEl) weekQuotesEl.textContent = '3';
        if (streakDaysEl) streakDaysEl.textContent = '7';
        
        // –û—Ç—á–µ—Ç—ã
        const reportsLists = document.querySelectorAll('.reports-list');
        reportsLists.forEach(list => {
            list.innerHTML = `
                <div class="empty-state">
                    <p>üìà –û—Ç—á–µ—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –Ω–µ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</p>
                    <p>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ü–∏—Ç–∞—Ç—ã!</p>
                </div>
            `;
        });
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        const achievementsGrid = document.getElementById('achievements-grid');
        if (achievementsGrid) {
            achievementsGrid.innerHTML = `
                <div class="achievement-card unlocked">
                    <div class="achievement-icon">üìö</div>
                    <h3>–ü–µ—Ä–≤–∞—è —Ü–∏—Ç–∞—Ç–∞</h3>
                    <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É –≤ –¥–Ω–µ–≤–Ω–∏–∫</p>
                    <div class="unlocked-badge">‚úÖ –ü–æ–ª—É—á–µ–Ω–æ</div>
                </div>
                <div class="achievement-card locked">
                    <div class="achievement-icon">üî•</div>
                    <h3>–ù–µ–¥–µ–ª—è –ø–æ–¥—Ä—è–¥</h3>
                    <p>–î–æ–±–∞–≤–ª—è–π—Ç–µ —Ü–∏—Ç–∞—Ç—ã 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥</p>
                    <div class="progress">
                        <div class="progress-bar" style="width: 30%"></div>
                        <span class="progress-text">2/7</span>
                    </div>
                </div>
            `;
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        const userNameEl = document.getElementById('user-name');
        const userUsernameEl = document.getElementById('user-username');
        
        if (userNameEl) userNameEl.textContent = '–ß–∏—Ç–∞—Ç–µ–ª—å';
        if (userUsernameEl) userUsernameEl.textContent = '@demo_user';
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    showToast(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º toast —ç–ª–µ–º–µ–Ω—Ç
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: #333;
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            z-index: 10000;
            opacity: 0;
            transition: opacity 0.3s ease;
        `;
        
        toast.textContent = message;
        document.body.appendChild(toast);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º
        setTimeout(() => {
            toast.style.opacity = '1';
        }, 100);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º
        setTimeout(() => {
            toast.style.opacity = '0';
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);
        }, 3000);
        
        console.log(`üì¢ Toast [${type}]: ${message}`);
    }
    
    /**
     * –£—Ç–∏–ª–∏—Ç—ã
     */
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            month: 'short',
            day: 'numeric'
        });
    }
}

// –î–µ–ª–∞–µ–º –∫–ª–∞—Å—Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
window.ReaderApp = ReaderApp;

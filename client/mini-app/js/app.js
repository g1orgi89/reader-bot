/**
 * –ß–∏—Ç–∞—Ç–µ–ª—å Mini App - –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 * –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
 */

class ReaderApp {
    constructor() {
        this.currentUser = null;
        this.currentPage = 'home';
        this.isInitialized = false;
        this.stats = {};
        this.quotes = [];
        this.reports = [];
        this.achievements = [];
        
        console.log('üì± Reader App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...');
        
        // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Telegram
        if (window.telegramManager) {
            this.initApp();
        } else {
            window.addEventListener('telegram:ready', () => {
                this.initApp();
            });
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async initApp() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Reader App...');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loading
            this.showLoading(true);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
            const user = window.telegramManager.getUser();
            const initData = window.telegramManager.getInitData();
            
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram:', user);
            
            // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ API
            const authResult = await window.apiManager.authenticateWithTelegram(initData, user);
            
            if (authResult.success) {
                this.currentUser = authResult.user;
                console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', this.currentUser);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await this.loadUserData();
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                this.setupUI();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                this.showMainApp();
                
                this.isInitialized = true;
                console.log('üéâ Reader App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
                
            } else {
                throw new Error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å.');
        } finally {
            this.showLoading(false);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async loadUserData() {
        try {
            console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const statsResponse = await window.apiManager.getStats();
            if (statsResponse.success) {
                this.stats = statsResponse.data;
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
            const quotesResponse = await window.apiManager.getQuotes({ limit: 5, sort: 'newest' });
            if (quotesResponse.success) {
                this.quotes = quotesResponse.data;
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç—ã
            const reportsResponse = await window.apiManager.getReports();
            if (reportsResponse.success) {
                this.reports = reportsResponse.data;
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            const achievementsResponse = await window.apiManager.getAchievements();
            if (achievementsResponse.success) {
                this.achievements = achievementsResponse.data;
            }
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    setupUI() {
        console.log('üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        this.updateUserInfo();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        this.setupNavigation();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º
        this.setupForms();
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
        this.updateAllPages();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram –∫–Ω–æ–ø–∫–∏
        this.setupTelegramButtons();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
     */
    updateUserInfo() {
        const userInfoElement = document.getElementById('user-info');
        if (userInfoElement && this.currentUser) {
            const userName = this.currentUser.name || 
                           `${this.currentUser.first_name || ''} ${this.currentUser.last_name || ''}`.trim() ||
                           this.currentUser.username ||
                           '–ß–∏—Ç–∞—Ç–µ–ª—å';
                           
            userInfoElement.innerHTML = `
                <span class="user-name">${this.escapeHtml(userName)}</span>
            `;
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    setupNavigation() {
        const navItems = document.querySelectorAll('.nav-item');
        
        navItems.forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                
                const page = item.dataset.page;
                if (page) {
                    this.navigateToPage(page);
                    
                    // Haptic feedback
                    window.telegramManager.hapticFeedback('selection');
                }
            });
        });
    }
    
    /**
     * –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
     */
    navigateToPage(pageId) {
        console.log('üìÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:', pageId);
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.querySelectorAll('.page').forEach(page => {
            page.classList.remove('active');
        });
        
        document.querySelectorAll('.nav-item').forEach(item => {
            item.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const targetPage = document.getElementById(`page-${pageId}`);
        if (targetPage) {
            targetPage.classList.add('active');
        }
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const navItem = document.querySelector(`[data-page="${pageId}"]`);
        if (navItem) {
            navItem.classList.add('active');
        }
        
        this.currentPage = pageId;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ
        this.updatePage(pageId);
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º
     */
    setupForms() {
        // –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const quickAddBtn = document.getElementById('quick-add-btn');
        if (quickAddBtn) {
            quickAddBtn.addEventListener('click', () => {
                this.handleQuickAddQuote();
            });
        }
        
        // –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã
        const quoteForm = document.getElementById('quote-form');
        if (quoteForm) {
            quoteForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleAddQuote();
            });
        }
        
        // –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏—Ç–∞—Ç—ã
        const analyzeBtn = document.getElementById('analyze-btn');
        if (analyzeBtn) {
            analyzeBtn.addEventListener('click', () => {
                this.handleAnalyzeQuote();
            });
        }
    }
    
    /**
     * –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
     */
    async handleQuickAddQuote() {
        const textInput = document.getElementById('quick-quote-text');
        const authorInput = document.getElementById('quick-quote-author');
        
        if (!textInput || !textInput.value.trim()) {
            this.showToast('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã', 'warning');
            return;
        }
        
        const quoteData = {
            text: textInput.value.trim(),
            author: authorInput.value.trim() || '',
            source: 'mini_app'
        };
        
        try {
            this.showToast('–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–∏—Ç–∞—Ç—É...', 'info');
            
            const response = await window.apiManager.addQuote(quoteData);
            
            if (response.success) {
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                textInput.value = '';
                authorInput.value = '';
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                await this.loadUserData();
                this.updateAllPages();
                
                this.showToast('–¶–∏—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! üìö', 'success');
                
                // Haptic feedback
                window.telegramManager.hapticFeedback('success');
                
            } else {
                throw new Error(response.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', error);
            this.showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã', 'error');
            
            // Haptic feedback
            window.telegramManager.hapticFeedback('error');
        }
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—É—é —Ñ–æ—Ä–º—É
     */
    async handleAddQuote() {
        const textInput = document.getElementById('quote-text');
        const authorInput = document.getElementById('quote-author');
        const sourceInput = document.getElementById('quote-book');
        
        if (!textInput || !textInput.value.trim()) {
            this.showToast('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã', 'warning');
            return;
        }
        
        const quoteData = {
            text: textInput.value.trim(),
            author: authorInput.value.trim() || '',
            source: sourceInput.value.trim() || '',
            fromApp: 'mini_app'
        };
        
        try {
            this.showToast('–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–∏—Ç–∞—Ç—É...', 'info');
            
            const response = await window.apiManager.addQuote(quoteData);
            
            if (response.success) {
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                textInput.value = '';
                authorInput.value = '';
                sourceInput.value = '';
                
                // –°–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑
                const analysisBlock = document.getElementById('ai-analysis');
                if (analysisBlock) {
                    analysisBlock.style.display = 'none';
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                await this.loadUserData();
                this.updateAllPages();
                
                this.showToast('–¶–∏—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! üìö', 'success');
                
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                this.navigateToPage('home');
                
                // Haptic feedback
                window.telegramManager.hapticFeedback('success');
                
            } else {
                throw new Error(response.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', error);
            this.showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã', 'error');
            
            // Haptic feedback
            window.telegramManager.hapticFeedback('error');
        }
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ AI
     */
    async handleAnalyzeQuote() {
        const textInput = document.getElementById('quote-text');
        const authorInput = document.getElementById('quote-author');
        
        if (!textInput || !textInput.value.trim()) {
            this.showToast('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞', 'warning');
            return;
        }
        
        try {
            this.showToast('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–∏—Ç–∞—Ç—É...', 'info');
            
            const response = await window.apiManager.analyzeQuote(
                textInput.value.trim(),
                authorInput.value.trim()
            );
            
            if (response.success && response.data) {
                const analysisBlock = document.getElementById('ai-analysis');
                const analysisContent = document.getElementById('analysis-content');
                
                if (analysisBlock && analysisContent) {
                    analysisContent.innerHTML = this.formatAnalysis(response.data);
                    analysisBlock.style.display = 'block';
                    analysisBlock.scrollIntoView({ behavior: 'smooth' });
                }
                
                this.showToast('–ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤! ü§ñ', 'success');
                
            } else {
                throw new Error(response.message || '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏—Ç–∞—Ç—ã:', error);
            this.showToast('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏—Ç–∞—Ç—ã', 'error');
        }
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
     */
    formatAnalysis(analysis) {
        let html = '';
        
        if (analysis.category) {
            html += `<p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${this.escapeHtml(analysis.category)}</p>`;
        }
        
        if (analysis.mood) {
            html += `<p><strong>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</strong> ${this.escapeHtml(analysis.mood)}</p>`;
        }
        
        if (analysis.themes && analysis.themes.length > 0) {
            html += `<p><strong>–¢–µ–º—ã:</strong> ${analysis.themes.map(theme => this.escapeHtml(theme)).join(', ')}</p>`;
        }
        
        if (analysis.explanation) {
            html += `<p><strong>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</strong> ${this.escapeHtml(analysis.explanation)}</p>`;
        }
        
        return html || '<p>–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω</p>';
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    updateAllPages() {
        this.updateHomePage();
        this.updateReportsPage();
        this.updateAchievementsPage();
        this.updateSettingsPage();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    updateHomePage() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (this.stats) {
            this.updateElement('total-quotes', this.stats.totalQuotes || 0);
            this.updateElement('week-quotes', this.stats.weekQuotes || 0);
            this.updateElement('current-streak', this.stats.currentStreak || 0);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ç–∞—Ç
        this.updateRecentQuotes();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ç–∞—Ç
     */
    updateRecentQuotes() {
        const quotesList = document.getElementById('recent-quotes-list');
        if (!quotesList) return;
        
        if (this.quotes && this.quotes.length > 0) {
            quotesList.innerHTML = this.quotes.map(quote => `
                <div class="quote-item fade-in">
                    <div class="quote-text">"${this.escapeHtml(quote.text)}"</div>
                    ${quote.author ? `<div class="quote-author">‚Äî ${this.escapeHtml(quote.author)}</div>` : ''}
                </div>
            `).join('');
        } else {
            quotesList.innerHTML = `
                <div class="empty-state">
                    <p>–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç</p>
                    <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É –≤—ã—à–µ üëÜ</p>
                </div>
            `;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç—á–µ—Ç–æ–≤
     */
    updateReportsPage() {
        const reportsList = document.getElementById('reports-list');
        if (!reportsList) return;
        
        if (this.reports && this.reports.length > 0) {
            reportsList.innerHTML = this.reports.map(report => `
                <div class="card fade-in">
                    <h3>üìä ${report.type === 'weekly' ? '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π' : '–ú–µ—Å—è—á–Ω—ã–π'} –æ—Ç—á–µ—Ç</h3>
                    <p class="text-secondary">${this.formatDate(report.createdAt)}</p>
                    <p>${this.escapeHtml(report.analysis)}</p>
                    ${report.recommendations && report.recommendations.length > 0 ? `
                        <div class="recommendations">
                            <h4>üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h4>
                            ${report.recommendations.map(book => `
                                <div class="recommendation">
                                    <strong>${this.escapeHtml(book.title)}</strong>
                                    ${book.author ? ` ‚Äî ${this.escapeHtml(book.author)}` : ''}
                                </div>
                            `).join('')}
                        </div>
                    ` : ''}
                </div>
            `).join('');
        } else {
            reportsList.innerHTML = `
                <div class="empty-state">
                    <p>üìà –û—Ç—á–µ—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –Ω–µ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</p>
                    <p>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ü–∏—Ç–∞—Ç—ã!</p>
                </div>
            `;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    updateAchievementsPage() {
        const achievementsGrid = document.getElementById('achievements-grid');
        if (!achievementsGrid) return;
        
        if (this.achievements && this.achievements.length > 0) {
            achievementsGrid.innerHTML = this.achievements.map(achievement => `
                <div class="achievement-card ${achievement.isUnlocked ? 'unlocked' : 'locked'} fade-in">
                    <div class="achievement-icon">${achievement.icon}</div>
                    <h3>${this.escapeHtml(achievement.title)}</h3>
                    <p>${this.escapeHtml(achievement.description)}</p>
                    ${!achievement.isUnlocked && achievement.progress !== undefined ? `
                        <div class="progress">
                            <div class="progress-bar" style="width: ${(achievement.progress / achievement.target) * 100}%"></div>
                            <span class="progress-text">${achievement.progress}/${achievement.target}</span>
                        </div>
                    ` : ''}
                    ${achievement.isUnlocked ? `<div class="unlocked-badge">‚úÖ –ü–æ–ª—É—á–µ–Ω–æ</div>` : ''}
                </div>
            `).join('');
        } else {
            achievementsGrid.innerHTML = `
                <div class="empty-state">
                    <p>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...</p>
                </div>
            `;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    updateSettingsPage() {
        const settingsList = document.getElementById('settings-list');
        if (!settingsList) return;
        
        settingsList.innerHTML = `
            <div class="card">
                <h3>üë§ –ü—Ä–æ—Ñ–∏–ª—å</h3>
                <p>–ò–º—è: ${this.escapeHtml(this.currentUser?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</p>
                <p>Telegram: @${this.escapeHtml(this.currentUser?.username || '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</p>
            </div>
            
            <div class="card">
                <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                <p>–í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç: ${this.stats.totalQuotes || 0}</p>
                <p>–î–Ω–µ–π –ø–æ–¥—Ä—è–¥: ${this.stats.currentStreak || 0}</p>
                <p>–õ—É—á—à–∞—è —Å–µ—Ä–∏—è: ${this.stats.longestStreak || 0}</p>
            </div>
            
            <div class="card">
                <h3>‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</h3>
                <p>–ß–∏—Ç–∞—Ç–µ–ª—å ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ —Ü–∏—Ç–∞—Ç –æ—Ç –ê–Ω–Ω—ã –ë—É—Å–µ–ª</p>
                <p>–í–µ—Ä—Å–∏—è: 1.0.0</p>
            </div>
        `;
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –∫–Ω–æ–ø–æ–∫
     */
    setupTelegramButtons() {
        // –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        window.telegramManager.hideMainButton();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
        window.addEventListener('telegram:backButtonClicked', () => {
            if (this.currentPage !== 'home') {
                this.navigateToPage('home');
            }
        });
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoading(show = true) {
        const loadingScreen = document.getElementById('loading');
        if (loadingScreen) {
            loadingScreen.style.display = show ? 'flex' : 'none';
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
     */
    showMainApp() {
        const mainApp = document.getElementById('main-app');
        if (mainApp) {
            mainApp.style.display = 'flex';
        }
        
        this.showLoading(false);
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    showToast(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç toast –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        let toastContainer = document.getElementById('toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.id = 'toast-container';
            toastContainer.style.cssText = `
                position: fixed;
                top: 20px;
                left: 50%;
                transform: translateX(-50%);
                z-index: 10000;
                pointer-events: none;
            `;
            document.body.appendChild(toastContainer);
        }
        
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        toast.style.cssText = `
            background: var(--app-surface);
            color: var(--app-text);
            padding: 12px 20px;
            border-radius: 8px;
            box-shadow: var(--shadow-lg);
            margin-bottom: 10px;
            transform: translateY(-100px);
            opacity: 0;
            transition: all 0.3s ease;
            pointer-events: all;
            border-left: 4px solid ${this.getToastColor(type)};
        `;
        
        toast.textContent = message;
        toastContainer.appendChild(toast);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            toast.style.transform = 'translateY(0)';
            toast.style.opacity = '1';
        }, 100);
        
        // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ
        setTimeout(() => {
            toast.style.transform = 'translateY(-100px)';
            toast.style.opacity = '0';
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);
        }, 3000);
        
        console.log(`üì¢ Toast [${type}]: ${message}`);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è toast
     */
    getToastColor(type) {
        const colors = {
            success: '#4CAF50',
            error: '#F44336',
            warning: '#FF9800',
            info: '#2196F3'
        };
        return colors[type] || colors.info;
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
     */
    showError(message) {
        console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', message);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        window.telegramManager.showPopup({
            title: '–û—à–∏–±–∫–∞',
            message: message,
            buttons: [
                { type: 'ok', text: 'OK' }
            ]
        });
    }
    
    /**
     * –£—Ç–∏–ª–∏—Ç—ã
     */
    updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    }
    
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    updatePage(pageId) {
        switch (pageId) {
            case 'home':
                this.updateHomePage();
                break;
            case 'reports':
                this.updateReportsPage();
                break;
            case 'achievements':
                this.updateAchievementsPage();
                break;
            case 'settings':
                this.updateSettingsPage();
                break;
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–≥–¥–∞ DOM –≥–æ—Ç–æ–≤
document.addEventListener('DOMContentLoaded', () => {
    console.log('üì± DOM –≥–æ—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º Reader App...');
    window.readerApp = new ReaderApp();
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è ES6 –º–æ–¥—É–ª–µ–π
export default ReaderApp;
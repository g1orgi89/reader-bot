/**
 * Reader Bot Mini App - –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è v2.1
 * –û–ë–ù–û–í–õ–ï–ù–û: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ReaderAPI —á–µ—Ä–µ–∑ api-integration.js
 * 
 * @version 2.1
 * @author Reader Bot Team
 */

class ReaderApp {
    constructor() {
        this.currentPage = 'home';
        this.currentUser = null;
        this.apiClient = null;
        this.telegramManager = null;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.state = {
            quotes: [],
            stats: { totalQuotes: 0, streakDays: 0 },
            loading: false,
            searchQuery: '',
            activeFilter: 'all',
            activeCategory: 'all'
        };

        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Reader Bot Mini App v2.1');
        
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
            await this.initTelegram();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞ (–∂–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏)
            await this.initAPI();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            this.setupEventListeners();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
            this.setupCharCounter();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await this.loadInitialData();
            
            console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
     */
    async initTelegram() {
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ TelegramManager
        await this.waitForTelegramManager();
        
        if (window.TelegramManager) {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TelegramManager
            const userData = window.TelegramManager.init();
            this.telegramManager = window.TelegramManager;
            this.currentUser = userData;
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π Telegram
            this.telegramManager.on('userChange', (user) => {
                this.currentUser = user;
                this.updateUserInfo(user);
                console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram –æ–±–Ω–æ–≤–ª–µ–Ω:', user);
            });

            this.telegramManager.on('themeChange', (themeParams, colorScheme) => {
                console.log('üé® –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞:', colorScheme);
            });

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
            this.setupMainButton();
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.updateUserInfo(userData);
        }
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ TelegramManager
     */
    async waitForTelegramManager() {
        return new Promise((resolve) => {
            if (window.TelegramManager) {
                resolve();
                return;
            }
            
            // –ñ–¥–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
            const checkTelegram = () => {
                if (window.TelegramManager) {
                    resolve();
                } else {
                    setTimeout(checkTelegram, 100);
                }
            };
            
            checkTelegram();
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞ - –û–ë–ù–û–í–õ–ï–ù–û
     */
    async initAPI() {
        console.log('üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞...');
        
        return new Promise((resolve, reject) => {
            const initWithReaderAPI = () => {
                if (window.readerAPI) {
                    this.apiClient = window.readerAPI;
                    console.log('‚úÖ ReaderAPI –ø–æ–¥–∫–ª—é—á–µ–Ω:', this.apiClient.getConnectionInfo());
                    resolve();
                } else if (window.ReaderAPI) {
                    // Fallback - —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≤—Ä—É—á–Ω—É—é
                    try {
                        this.apiClient = new window.ReaderAPI();
                        console.log('‚úÖ ReaderAPI —Å–æ–∑–¥–∞–Ω –≤—Ä—É—á–Ω—É—é');
                        resolve();
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ReaderAPI:', error);
                        reject(error);
                    }
                } else {
                    console.warn('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ReaderAPI...');
                    setTimeout(initWithReaderAPI, 100);
                }
            };
            
            // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API
            window.addEventListener('readerAPIReady', (event) => {
                this.apiClient = event.detail.readerAPI;
                console.log('‚úÖ ReaderAPI –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ');
                resolve();
            });
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            initWithReaderAPI();
            
            // –¢–∞–π–º–∞—É—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            setTimeout(() => {
                if (!this.apiClient) {
                    console.warn('‚ö†Ô∏è API –∫–ª–∏–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ');
                    resolve();
                }
            }, 3000);
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–Ω–µ–≤–Ω–∏–∫–∞
        document.querySelectorAll('.filter-tab').forEach(tab => {
            tab.addEventListener('click', (e) => {
                const filter = e.target.dataset.filter;
                this.setActiveFilter(filter);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–∞—Ç–∞–ª–æ–≥–∞
        document.querySelectorAll('.category-tab').forEach(tab => {
            tab.addEventListener('click', (e) => {
                const category = e.target.dataset.category;
                this.setActiveCategory(category);
            });
        });

        // –ü–æ–∏—Å–∫ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                this.handleSearch(e.target.value);
            });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º
        const quoteText = document.getElementById('quoteText');
        if (quoteText) {
            quoteText.addEventListener('input', () => {
                this.handleQuoteInput();
            });
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
        document.addEventListener('click', (e) => {
            const menuOverlay = document.getElementById('menuOverlay');
            if (e.target === menuOverlay) {
                this.closeMenu();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeMenu();
            }
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
     */
    setupCharCounter() {
        const textarea = document.getElementById('quoteText');
        const counter = document.querySelector('.char-counter');
        
        if (textarea && counter) {
            textarea.addEventListener('input', function() {
                const length = this.value.length;
                counter.textContent = `${length}/500`;
                
                // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É
                if (length > 450) {
                    counter.style.color = 'var(--text-danger)';
                } else if (length > 400) {
                    counter.style.color = 'var(--text-accent)';
                } else {
                    counter.style.color = 'var(--text-secondary)';
                }
            });
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ Telegram
     */
    setupMainButton() {
        if (this.telegramManager && this.telegramManager.tg.MainButton) {
            const mainButton = this.telegramManager.tg.MainButton;
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            mainButton.hide();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã
            this.on('pageChanged', (page) => {
                if (page === 'add') {
                    mainButton.setText('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É');
                    mainButton.show();
                    mainButton.onClick(() => this.saveQuote());
                } else {
                    mainButton.hide();
                }
            });
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async loadInitialData() {
        this.showLoading(true);

        try {
            // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å Telegram (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
            if (this.apiClient && this.currentUser) {
                try {
                    await this.apiClient.authenticateWithTelegram(
                        this.telegramManager?.tg?.initData || '',
                        this.currentUser
                    );
                    console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
                } catch (authError) {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–µ:', authError);
                }
            }

            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            await Promise.allSettled([
                this.loadUserStats(),
                this.loadRecentQuotes(),
                this.loadBookCatalog()
            ]);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        } finally {
            this.showLoading(false);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async loadUserStats() {
        try {
            if (!this.apiClient) return;

            console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
            const stats = await this.apiClient.getUserStats();
            this.state.stats = stats;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
            const totalQuotesEl = document.getElementById('totalQuotes');
            const streakDaysEl = document.getElementById('streakDays');
            const weekQuotesEl = document.getElementById('weekQuotes');
            
            if (totalQuotesEl) totalQuotesEl.textContent = stats.totalQuotes || 0;
            if (streakDaysEl) streakDaysEl.textContent = stats.streakDays || 0;
            if (weekQuotesEl) weekQuotesEl.textContent = stats.weekQuotes || 0;
            
            console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', stats);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ç–∞—Ç
     */
    async loadRecentQuotes() {
        try {
            if (!this.apiClient) return;

            console.log('üìù –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ü–∏—Ç–∞—Ç...');
            const quotes = await this.apiClient.getRecentQuotes(3);
            this.renderRecentQuotes(quotes);
            
            console.log('‚úÖ –ù–µ–¥–∞–≤–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', quotes.length);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–Ω–∏–≥
     */
    async loadBookCatalog() {
        try {
            if (!this.apiClient) return;

            console.log('üìö –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...');
            const books = await this.apiClient.getBookCatalog();
            this.renderBooks(books);
            
            console.log('‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω:', books.length);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ü–∏—Ç–∞—Ç
     */
    renderRecentQuotes(quotes) {
        const container = document.getElementById('recentQuotes');
        if (!container) return;

        if (!quotes || quotes.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üìñ</div>
                    <div class="empty-state-title">–ü–æ–∫–∞ –Ω–µ—Ç —Ü–∏—Ç–∞—Ç</div>
                    <div class="empty-state-text">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –º—É–¥—Ä–æ—Å—Ç–∏</div>
                </div>
            `;
            return;
        }

        container.innerHTML = quotes.map(quote => `
            <div class="quote-preview" onclick="showPage('diary')">
                <div class="quote-text-short">${this.escapeHtml(quote.text)}</div>
                <div class="quote-meta-short">
                    <span class="quote-author-short">${this.escapeHtml(quote.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')}</span>
                    <span class="quote-date-short">${this.formatDate(quote.createdAt)}</span>
                </div>
            </div>
        `).join('');
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–Ω–∏–≥
     */
    renderBooks(books) {
        const container = document.getElementById('booksGrid');
        if (!container) return;

        if (!books || books.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üìö</div>
                    <div class="empty-state-title">–ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è</div>
                    <div class="empty-state-text">–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ê–Ω–Ω—ã</div>
                </div>
            `;
            return;
        }

        container.innerHTML = books.map(book => `
            <div class="book-card" onclick="this.openBookLink('${book.link}')">
                <div class="book-header">
                    <div class="book-cover ${book.category}">
                        ${this.getBookIcon(book.category)}
                    </div>
                    <div class="book-info">
                        <h3 class="book-title">${this.escapeHtml(book.title)}</h3>
                        <p class="book-author">${this.escapeHtml(book.author)}</p>
                        <div class="book-rating">
                            ${book.rating ? `‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê ${book.rating}` : ''}
                        </div>
                    </div>
                </div>
                <p class="book-description">
                    ${this.escapeHtml(book.description || '')}
                </p>
                ${book.recommendation ? `
                    <div class="book-recommendation">
                        üí° ${this.escapeHtml(book.recommendation)}
                    </div>
                ` : ''}
                <div class="book-footer">
                    <div class="book-price">${book.price || '–¶–µ–Ω–∞ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è'}</div>
                    <button class="buy-btn" onclick="event.stopPropagation(); this.trackBookClick('${book.id}', '${book.title}')">
                        –ö—É–ø–∏—Ç—å
                    </button>
                </div>
            </div>
        `).join('');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–Ω–∏–≥–∏
     */
    getBookIcon(category) {
        const icons = {
            psychology: 'üß†',
            philosophy: 'ü§î',
            selfdevelopment: 'üöÄ',
            classic: 'üìñ',
            relationship: '‚ù§Ô∏è'
        };
        return icons[category] || 'üìö';
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–∏–≥—É
     */
    openBookLink(link) {
        if (this.telegramManager?.tg?.openLink) {
            this.telegramManager.tg.openLink(link);
        } else {
            window.open(link, '_blank');
        }
        
        // Haptic feedback
        this.triggerHaptic('light');
    }

    /**
     * –¢—Ä–µ–∫–∏–Ω–≥ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–∏–≥–µ
     */
    async trackBookClick(bookId, bookTitle) {
        try {
            if (this.apiClient && this.apiClient.trackEvent) {
                await this.apiClient.trackEvent('book_click', {
                    bookId: bookId,
                    bookTitle: bookTitle,
                    source: 'mini_app_catalog',
                    userId: this.currentUser?.id
                });
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∫–ª–∏–∫:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    updateUserInfo(user) {
        const avatarEl = document.getElementById('userAvatar');
        const nameEl = document.getElementById('userName');
        
        if (avatarEl && user.firstName) {
            avatarEl.textContent = user.firstName.charAt(0).toUpperCase();
        }
        
        if (nameEl) {
            const fullName = `${user.firstName || ''} ${user.lastName || ''}`.trim() || '–ß–∏—Ç–∞—Ç–µ–ª—å';
            nameEl.textContent = fullName;
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    showPage(pageId) {
        // –°–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        document.querySelectorAll('.page').forEach(page => {
            page.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const targetPage = document.getElementById(pageId);
        if (targetPage) {
            targetPage.classList.add('active');
            this.currentPage = pageId;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            this.updateNavigation(pageId);
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            this.loadPageData(pageId);
            
            // Haptic feedback
            this.triggerHaptic('light');
            
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            this.emit('pageChanged', pageId);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    updateNavigation(pageId) {
        document.querySelectorAll('.nav-item').forEach(item => {
            item.classList.remove('active');
        });
        
        const activeNav = document.querySelector(`[data-page=\"${pageId}\"]`);
        if (activeNav) {
            activeNav.classList.add('active');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async loadPageData(pageId) {
        switch (pageId) {
            case 'diary':
                await this.loadAllQuotes();
                break;
            case 'reports':
                await this.loadReports();
                break;
            case 'catalog':
                await this.loadBookCatalog();
                break;
            case 'achievements':
                await this.loadAchievements();
                break;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ü–∏—Ç–∞—Ç –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞
     */
    async loadAllQuotes() {
        try {
            if (!this.apiClient) return;

            console.log('üìñ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ü–∏—Ç–∞—Ç...');
            const quotes = await this.apiClient.getAllQuotes();
            this.state.quotes = quotes;
            this.renderQuotesList(quotes);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
            const subtitle = document.getElementById('diarySubtitle');
            if (subtitle) {
                subtitle.textContent = `${quotes.length} –∑–∞–ø–∏—Å–µ–π –æ –º—É–¥—Ä–æ—Å—Ç–∏`;
            }
            
            console.log('‚úÖ –í—Å–µ —Ü–∏—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', quotes.length);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
     */
    async loadReports() {
        try {
            if (!this.apiClient) return;

            console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–æ–≤...');
            const reports = await this.apiClient.getReports();
            this.renderReports(reports);
            
            console.log('‚úÖ –û—Ç—á–µ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', reports.length);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–æ–≤:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    async loadAchievements() {
        try {
            if (!this.apiClient) return;

            console.log('üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...');
            const achievements = await this.apiClient.getAchievements();
            this.renderAchievements(achievements);
            
            console.log('‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', achievements.length);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–∏—Ç–∞—Ç
     */
    renderQuotesList(quotes) {
        const container = document.getElementById('quotesList');
        if (!container) return;

        if (!quotes || quotes.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üìù</div>
                    <div class="empty-state-title">–î–Ω–µ–≤–Ω–∏–∫ –ø—É—Å—Ç</div>
                    <div class="empty-state-text">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å –º—É–¥—Ä–æ—Å—Ç—å</div>
                </div>
            `;
            return;
        }

        container.innerHTML = quotes.map(quote => `
            <div class="quote-card">
                <div class="quote-actions">
                    <button class="action-btn" onclick="event.stopPropagation(); app.showQuoteActions('${quote._id || quote.id}')">‚ãØ</button>
                </div>
                <div class="quote-full-text">${this.escapeHtml(quote.text)}</div>
                <div class="quote-author">‚Äî ${this.escapeHtml(quote.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')}</div>
                <div class="quote-meta">
                    <span>${this.formatDate(quote.createdAt)}</span>
                    <span>${quote.isFavorite ? '‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ' : ''}</span>
                </div>
                ${quote.analysis ? `
                    <div class="quote-analysis">
                        <div class="analysis-tags">
                            <span class="mood-tag">${quote.analysis.mood}</span>
                            <span class="category-tag">${quote.analysis.category}</span>
                        </div>
                    </div>
                ` : ''}
            </div>
        `).join('');
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã - –û–ë–ù–û–í–õ–ï–ù–û
     */
    async saveQuote() {
        const textEl = document.getElementById('quoteText');
        const authorEl = document.getElementById('quoteAuthor');
        const sourceEl = document.getElementById('quoteSource');
        const saveBtn = document.getElementById('saveButton');
        
        if (!textEl || !textEl.value.trim()) {
            this.showError('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã');
            return;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ API
        if (this.apiClient?.validateQuote) {
            const validation = this.apiClient.validateQuote({
                text: textEl.value,
                author: authorEl?.value || ''
            });
            
            if (!validation.isValid) {
                this.showError(validation.errors.join('\n'));
                return;
            }
        }

        try {
            // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏
            if (saveBtn) {
                saveBtn.disabled = true;
                saveBtn.textContent = '–ê–Ω–∞–ª–∏–∑ AI...';
            }

            const quoteData = {
                text: textEl.value.trim(),
                author: authorEl?.value.trim() || '',
                source: sourceEl?.value.trim() || ''
            };

            if (this.apiClient) {
                console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã:', quoteData);
                
                const result = await this.apiClient.saveQuote(quoteData);
                
                if (result.success) {
                    // –ü–æ–∫–∞–∑ AI –∞–Ω–∞–ª–∏–∑–∞
                    if (result.aiAnalysis) {
                        this.showAIInsight(result.aiAnalysis);
                    }
                    
                    // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
                    textEl.value = '';
                    if (authorEl) authorEl.value = '';
                    if (sourceEl) sourceEl.value = '';
                    
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
                    const counter = document.querySelector('.char-counter');
                    if (counter) {
                        counter.textContent = '0/500';
                        counter.style.color = 'var(--text-secondary)';
                    }
                    
                    this.showSuccess('–¶–∏—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
                    
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    await this.loadUserStats();
                    
                    // Haptic feedback
                    this.triggerHaptic('success');
                    
                    // –¢—Ä–µ–∫–∏–Ω–≥ —Å–æ–±—ã—Ç–∏—è
                    if (this.apiClient.trackEvent) {
                        await this.apiClient.trackEvent('quote_added', {
                            hasAuthor: !!quoteData.author,
                            textLength: quoteData.text.length,
                            source: 'mini_app'
                        });
                    }
                    
                    console.log('‚úÖ –¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
                    
                } else {
                    throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
                }
                
            } else {
                // Fallback –¥–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º–∞
                this.showAIInsight('–î–µ–º–æ —Ä–µ–∂–∏–º: —Ü–∏—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ');
                console.log('‚ö†Ô∏è –î–µ–º–æ —Ä–µ–∂–∏–º - —Ü–∏—Ç–∞—Ç–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É: ' + error.message);
        } finally {
            // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏
            if (saveBtn) {
                saveBtn.disabled = false;
                saveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫';
            }
        }
    }

    /**
     * –ü–æ–∫–∞–∑ AI –∞–Ω–∞–ª–∏–∑–∞
     */
    showAIInsight(analysis) {
        const aiInsight = document.getElementById('aiInsight');
        const aiAnalysis = document.getElementById('aiAnalysis');
        
        if (aiInsight && aiAnalysis) {
            aiAnalysis.innerHTML = this.escapeHtml(analysis).replace(/\n/g, '<br>');
            aiInsight.style.display = 'block';
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
            aiInsight.style.opacity = '0';
            aiInsight.style.transform = 'translateY(10px)';
            
            setTimeout(() => {
                aiInsight.style.transition = 'all 0.3s ease';
                aiInsight.style.opacity = '1';
                aiInsight.style.transform = 'translateY(0)';
            }, 100);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –ø–æ–ª–µ —Ü–∏—Ç–∞—Ç—ã - –û–ë–ù–û–í–õ–ï–ù–û
     */
    async handleQuoteInput() {
        const textEl = document.getElementById('quoteText');
        const authorEl = document.getElementById('quoteAuthor');
        
        if (!textEl || !this.apiClient?.getLiveAnalysis) return;
        
        const text = textEl.value.trim();
        const author = authorEl?.value.trim() || '';
        
        // –î–µ–±–∞—É–Ω—Å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        clearTimeout(this.inputTimeout);
        this.inputTimeout = setTimeout(async () => {
            try {
                const liveAnalysis = await this.apiClient.getLiveAnalysis(text, author);
                
                if (liveAnalysis) {
                    this.showLivePreview(liveAnalysis);
                }
            } catch (error) {
                console.warn('Live analysis failed:', error);
            }
        }, 1000);
    }

    /**
     * –ü–æ–∫–∞–∑ –ø—Ä–µ–≤—å—é –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
     */
    showLivePreview(analysis) {
        let preview = document.getElementById('livePreview');
        if (!preview) {
            preview = document.createElement('div');
            preview.id = 'livePreview';
            preview.className = 'live-preview';
            
            const quoteForm = document.querySelector('.quote-form');
            if (quoteForm) {
                quoteForm.appendChild(preview);
            }
        }
        
        preview.innerHTML = `
            <div class="preview-hint">
                ${analysis.mood} ‚Ä¢ ${analysis.category}
                <br><small>${analysis.hint}</small>
            </div>
        `;
        
        preview.style.opacity = '1';
        
        // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        clearTimeout(this.previewTimeout);
        this.previewTimeout = setTimeout(() => {
            preview.style.opacity = '0';
        }, 5000);
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ —Ü–∏—Ç–∞—Ç–∞–º - –û–ë–ù–û–í–õ–ï–ù–û
     */
    async handleSearch(query) {
        this.state.searchQuery = query.toLowerCase();
        
        if (this.apiClient?.searchQuotes && query.length > 2) {
            try {
                const searchResults = await this.apiClient.searchQuotes(query);
                this.renderQuotesList(searchResults);
                return;
            } catch (error) {
                console.warn('Search API failed, using local filter:', error);
            }
        }
        
        // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        this.filterQuotes();
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    setActiveFilter(filter) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        document.querySelectorAll('.filter-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        const activeTab = document.querySelector(`[data-filter=\"${filter}\"]`);
        if (activeTab) {
            activeTab.classList.add('active');
        }
        
        this.state.activeFilter = filter;
        this.filterQuotes();
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ü–∏—Ç–∞—Ç
     */
    filterQuotes() {
        let filteredQuotes = [...this.state.quotes];
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
        if (this.state.searchQuery) {
            filteredQuotes = filteredQuotes.filter(quote => 
                quote.text.toLowerCase().includes(this.state.searchQuery) ||
                (quote.author && quote.author.toLowerCase().includes(this.state.searchQuery))
            );
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        switch (this.state.activeFilter) {
            case 'favorites':
                filteredQuotes = filteredQuotes.filter(quote => quote.isFavorite);
                break;
            case 'week':
                const weekAgo = new Date();
                weekAgo.setDate(weekAgo.getDate() - 7);
                filteredQuotes = filteredQuotes.filter(quote => 
                    new Date(quote.createdAt) >= weekAgo
                );
                break;
        }
        
        this.renderQuotesList(filteredQuotes);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    setActiveCategory(category) {
        document.querySelectorAll('.category-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        const activeTab = document.querySelector(`[data-category=\"${category}\"]`);
        if (activeTab) {
            activeTab.classList.add('active');
        }
        
        this.state.activeCategory = category;
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫–Ω–∏–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é
     */
    openMenu() {
        const menuOverlay = document.getElementById('menuOverlay');
        if (menuOverlay) {
            menuOverlay.classList.add('show');
            this.triggerHaptic('light');
        }
    }

    closeMenu() {
        const menuOverlay = document.getElementById('menuOverlay');
        if (menuOverlay) {
            menuOverlay.classList.remove('show');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
     */
    handleMenuItem(action) {
        this.closeMenu();
        
        switch (action) {
            case 'profile':
                this.showPage('profile');
                break;
            case 'achievements':
                this.showPage('achievements');
                break;
            case 'settings':
                this.showInfo('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n‚Ä¢ –¢–µ–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å');
                break;
            case 'contact':
                this.showInfo('üìû –°–≤—è–∑—å —Å –ê–Ω–Ω–æ–π\n\n‚Ä¢ Telegram: @anna_busel\n‚Ä¢ Email: support@annabusel.org\n‚Ä¢ –°–∞–π—Ç: annabusel.org');
                break;
            case 'help':
                this.showInfo('‚ùì –ü–æ–º–æ—â—å\n\n‚Ä¢ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è\n‚Ä¢ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n‚Ä¢ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ');
                break;
            case 'about':
                this.showInfo('‚ÑπÔ∏è Reader Bot\n\n‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ —Ü–∏—Ç–∞—Ç\n‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –¥–ª—è –ê–Ω–Ω—ã –ë—É—Å–µ–ª\n‚Ä¢ ¬© 2025');
                break;
            case 'logout':
                if (confirm('üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞?\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã?')) {
                    this.logout();
                }
                break;
        }
    }

    /**
     * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    logout() {
        if (this.apiClient && this.apiClient.logout) {
            this.apiClient.logout();
        }
        
        this.currentUser = null;
        this.showInfo('–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => {
            window.location.reload();
        }, 1000);
    }

    /**
     * –£—Ç–∏–ª–∏—Ç—ã
     */
    
    showLoading(show) {
        const overlay = document.getElementById('loadingOverlay');
        if (overlay) {
            overlay.style.display = show ? 'flex' : 'none';
        }
    }

    showError(message) {
        console.error(message);
        if (this.telegramManager?.tg) {
            this.telegramManager.tg.showAlert(message);
        } else {
            alert(message);
        }
    }

    showSuccess(message) {
        console.log(message);
        if (this.telegramManager?.tg) {
            this.telegramManager.tg.showAlert(message);
        } else {
            alert(message);
        }
    }

    showInfo(message) {
        if (this.telegramManager?.tg) {
            this.telegramManager.tg.showAlert(message);
        } else {
            alert(message);
        }
    }

    triggerHaptic(type = 'light') {
        if (this.telegramManager?.hapticFeedback) {
            this.telegramManager.hapticFeedback(type);
        }
    }

    formatDate(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diffMs = now - date;
        const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));

        if (diffDays === 0) return '–°–µ–≥–æ–¥–Ω—è';
        if (diffDays === 1) return '–í—á–µ—Ä–∞';
        if (diffDays < 7) return `${diffDays} –¥–Ω—è –Ω–∞–∑–∞–¥`;
        
        return date.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'short'
        });
    }

    escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    // –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
    on(event, callback) {
        if (!this.events) this.events = {};
        if (!this.events[event]) this.events[event] = [];
        this.events[event].push(callback);
    }

    emit(event, data) {
        if (!this.events || !this.events[event]) return;
        this.events[event].forEach(callback => callback(data));
    }

    /**
     * API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
     */
    getDebugInfo() {
        return {
            version: '2.1',
            currentPage: this.currentPage,
            currentUser: this.currentUser,
            apiClient: !!this.apiClient,
            telegramManager: !!this.telegramManager,
            state: this.state,
            apiConnection: this.apiClient?.getConnectionInfo?.() || null
        };
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML - –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
let app;

function showPage(pageId) {
    if (app) app.showPage(pageId);
}

function openMenu() {
    if (app) app.openMenu();
}

function closeMenu() {
    if (app) app.closeMenu();
}

function handleMenuItem(action) {
    if (app) app.handleMenuItem(action);
}

function saveQuote() {
    if (app) app.saveQuote();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    app = new ReaderApp();
    window.app = app; // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
});

console.log('üì± Reader Bot Mini App v2.1 —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
/**
 * API INTEGRATION LAYER - –ê–¥–∞–ø—Ç–µ—Ä –º–µ–∂–¥—É ApiManager –∏ ReaderApp
 * 
 * –¶–ï–õ–¨: –û–±–µ—Å–ø–µ—á–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É api.js (ApiManager) –∏ app.js (ReaderApp)
 * –†–ï–®–ê–ï–¢: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –º–µ—Ç–æ–¥–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö
 * 
 * @version 1.0
 * @author Reader Bot Integration Team
 */

class ReaderAPI {
    constructor() {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É ApiManager
        this.apiManager = window.apiManager;
        this.isReady = false;
        
        if (!this.apiManager) {
            console.error('‚ùå ApiManager –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ api.js –∑–∞–≥—Ä—É–∂–µ–Ω');
            throw new Error('ApiManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        
        console.log('üîó ReaderAPI Integration Layer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        this.isReady = true;
    }
    
    /**
     * –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
     */
    async authenticateWithTelegram(initData, user) {
        return await this.apiManager.authenticateWithTelegram(initData, user);
    }
    
    isAuthenticated() {
        return this.apiManager.isAuth();
    }
    
    /**
     * –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
     * –ê–¥–∞–ø—Ç–µ—Ä: app.js –≤—ã–∑—ã–≤–∞–µ—Ç getUserStats(), –Ω–æ –≤ api.js —ç—Ç–æ getStats()
     */
    async getUserStats() {
        const response = await this.apiManager.getStats();
        
        if (response.success && response.data) {
            return response.data;
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        return {
            totalQuotes: 0,
            weekQuotes: 0,
            streakDays: 0,
            longestStreak: 0,
            categories: {}
        };
    }
    
    /**
     * –†–ê–ë–û–¢–ê –° –¶–ò–¢–ê–¢–ê–ú–ò
     */
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
     * –ê–¥–∞–ø—Ç–µ—Ä: —Å–æ–∑–¥–∞–µ–º –º–µ—Ç–æ–¥ getRecentQuotes –∏–∑ getQuotes
     */
    async getRecentQuotes(limit = 3) {
        const response = await this.apiManager.getQuotes({ 
            limit: limit, 
            sort: 'createdAt',
            order: 'desc' 
        });
        
        if (response.success && response.data) {
            return Array.isArray(response.data) ? response.data : response.data.quotes || [];
        }
        
        return [];
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ü–∏—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getAllQuotes() {
        const response = await this.apiManager.getQuotes();
        
        if (response.success && response.data) {
            return Array.isArray(response.data) ? response.data : response.data.quotes || [];
        }
        
        return [];
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É —Å AI –∞–Ω–∞–ª–∏–∑–æ–º
     */
    async saveQuote(quoteData) {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º AI –∞–Ω–∞–ª–∏–∑
            const analysisResponse = await this.apiManager.analyzeQuote(
                quoteData.text, 
                quoteData.author || ''
            );
            
            let aiAnalysis = null;
            if (analysisResponse.success && analysisResponse.data) {
                aiAnalysis = analysisResponse.data;
            }
            
            // –ó–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–∏—Ç–∞—Ç—É
            const saveResponse = await this.apiManager.addQuote({
                ...quoteData,
                analysis: aiAnalysis
            });
            
            if (saveResponse.success && saveResponse.data) {
                return {
                    success: true,
                    quote: saveResponse.data,
                    aiAnalysis: this.formatAIAnalysis(aiAnalysis)
                };
            }
            
            throw new Error(saveResponse.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è UI
     */
    formatAIAnalysis(analysis) {
        if (!analysis) {
            return '–¶–∏—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ê–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∑–∂–µ.';
        }
        
        const { mood, category, aiComment, bookRecommendation } = analysis;
        
        let formatted = `‚ú® ${mood} ‚Ä¢ ${category}\n\n${aiComment}`;
        
        if (bookRecommendation) {
            formatted += `\n\nüìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç –ê–Ω–Ω—ã:\n"${bookRecommendation.title}" - ${bookRecommendation.reason}`;
        }
        
        return formatted;
    }
    
    /**
     * –ö–ê–¢–ê–õ–û–ì –ö–ù–ò–ì
     */
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥
     */
    async getBookCatalog() {
        const response = await this.apiManager.getCatalog();
        
        if (response.success && response.data) {
            // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è UI
            if (response.data.books) {
                return response.data.books.map(book => ({
                    ...book,
                    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —Å UTM –º–µ—Ç–∫–∞–º–∏
                    link: `https://annabusel.org/books/${book.id}${book.utm || ''}`,
                    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
                    price: this.formatPrice(book.price, book.discountedPrice)
                }));
            }
        }
        
        return [];
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
     */
    async getPersonalizedBooks() {
        const response = await this.apiManager.getPersonalizedBooks();
        
        if (response.success && response.data) {
            return response.data;
        }
        
        return [];
    }
    
    /**
     * –û–¢–ß–ï–¢–´
     */
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getReports(type = 'weekly') {
        const response = await this.apiManager.getReports(type);
        
        if (response.success && response.data) {
            return response.data;
        }
        
        return [];
    }
    
    /**
     * –î–û–°–¢–ò–ñ–ï–ù–ò–Ø
     */
    async getAchievements() {
        const response = await this.apiManager.getAchievements();
        
        if (response.success && response.data) {
            return response.data;
        }
        
        return [];
    }
    
    /**
     * –ü–†–û–ú–û–ö–û–î–´
     */
    async getPromoCodes() {
        const response = await this.apiManager.getPromoCodes();
        
        if (response.success && response.data) {
            return response.data;
        }
        
        return [];
    }
    
    /**
     * –ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
     */
    
    async getProfile() {
        const response = await this.apiManager.getProfile();
        
        if (response.success && response.data) {
            return response.data;
        }
        
        return null;
    }
    
    async updateProfile(profileData) {
        return await this.apiManager.updateProfile(profileData);
    }
    
    /**
     * –ù–ê–°–¢–†–û–ô–ö–ò
     */
    
    async getSettings() {
        const response = await this.apiManager.getSettings();
        
        if (response.success && response.data) {
            return response.data;
        }
        
        return {
            notifications: true,
            reminderTimes: ['09:00', '19:00'],
            theme: 'auto'
        };
    }
    
    async updateSettings(settings) {
        return await this.apiManager.updateSettings(settings);
    }
    
    /**
     * –ê–ù–ê–õ–ò–¢–ò–ö–ê
     */
    
    async trackEvent(eventType, eventData) {
        return await this.apiManager.trackEvent(eventType, eventData);
    }
    
    /**
     * –£–¢–ò–õ–ò–¢–´
     */
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
     */
    formatPrice(price, discountedPrice) {
        if (!price) return '–£—Ç–æ—á–Ω—è–µ—Ç—Å—è';
        
        if (discountedPrice && discountedPrice < price) {
            return `${discountedPrice}‚ÇΩ ~${price}‚ÇΩ~`;
        }
        
        return `${price}‚ÇΩ`;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
     */
    async healthCheck() {
        return await this.apiManager.healthCheck();
    }
    
    /**
     * REAL-TIME –ú–ï–¢–û–î–´ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å AI –∞–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
     * –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞
     */
    async getLiveAnalysis(text, author = '') {
        if (!text || text.length < 10) {
            return null;
        }
        
        try {
            const response = await this.apiManager.analyzeQuote(text, author);
            
            if (response.success && response.data) {
                return {
                    preview: true,
                    mood: response.data.mood,
                    category: response.data.category,
                    hint: this.generatePreviewHint(response.data)
                };
            }
        } catch (error) {
            console.warn('Live analysis failed:', error);
        }
        
        return null;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø—Ä–µ–≤—å—é
     */
    generatePreviewHint(analysis) {
        const { mood, category } = analysis;
        
        const hints = [
            `–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${mood}`,
            `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}`,
            '–ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!'
        ];
        
        return hints[Math.floor(Math.random() * hints.length)];
    }
    
    /**
     * –ü–æ–∏—Å–∫ –ø–æ —Ü–∏—Ç–∞—Ç–∞–º
     */
    async searchQuotes(query, filters = {}) {
        const params = {
            search: query,
            ...filters
        };
        
        const response = await this.apiManager.getQuotes(params);
        
        if (response.success && response.data) {
            return Array.isArray(response.data) ? response.data : response.data.quotes || [];
        }
        
        return [];
    }
    
    /**
     * –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–•
     */
    
    validateQuote(quoteData) {
        const errors = [];
        
        if (!quoteData.text || quoteData.text.trim().length < 5) {
            errors.push('–¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤');
        }
        
        if (quoteData.text && quoteData.text.length > 500) {
            errors.push('–¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤');
        }
        
        if (quoteData.author && quoteData.author.length > 100) {
            errors.push('–ò–º—è –∞–≤—Ç–æ—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤');
        }
        
        return {
            isValid: errors.length === 0,
            errors: errors
        };
    }
    
    /**
     * –î–ï–ë–ê–ì –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì
     */
    
    getConnectionInfo() {
        return {
            isReady: this.isReady,
            isAuthenticated: this.isAuthenticated(),
            apiManagerAvailable: !!this.apiManager,
            baseUrl: this.apiManager?.baseUrl,
            mockMode: this.apiManager?.getMockResponse ? true : false
        };
    }
    
    async testConnection() {
        try {
            const health = await this.healthCheck();
            const stats = await this.getUserStats();
            
            return {
                success: true,
                health: health,
                stats: !!stats,
                timestamp: new Date().toISOString()
            };
        } catch (error) {
            return {
                success: false,
                error: error.message,
                timestamp: new Date().toISOString()
            };
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
window.ReaderAPI = ReaderAPI;

// –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (typeof document !== 'undefined') {
    document.addEventListener('DOMContentLoaded', () => {
        try {
            // –ñ–¥–µ–º, –ø–æ–∫–∞ apiManager –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
            const initReaderAPI = () => {
                if (window.apiManager) {
                    window.readerAPI = new ReaderAPI();
                    console.log('‚úÖ ReaderAPI Integration –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
                    
                    // Dispatch–∏–º —Å–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
                    window.dispatchEvent(new CustomEvent('readerAPIReady', {
                        detail: { readerAPI: window.readerAPI }
                    }));
                } else {
                    // –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 100ms
                    setTimeout(initReaderAPI, 100);
                }
            };
            
            initReaderAPI();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ReaderAPI:', error);
        }
    });
}

console.log('üîó ReaderAPI Integration Layer –∑–∞–≥—Ä—É–∂–µ–Ω');
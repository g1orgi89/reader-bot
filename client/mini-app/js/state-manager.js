/**
 * STATE MANAGER - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º Mini App
 * 
 * –§–£–ù–ö–¶–ò–ò:
 * - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É UI –∏ API
 * - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è offline —Ä–∞–±–æ—Ç—ã
 * - Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * - Loading states management
 * - Error handling —Å user-friendly —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
 * 
 * @version 1.0
 * @author Reader Bot Team
 */

class StateManager {
    constructor() {
        this.state = {
            // User data
            user: {
                profile: null,
                isAuthenticated: false,
                settings: null
            },
            
            // Content data
            quotes: {
                list: [],
                recentQuotes: [],
                totalCount: 0,
                lastUpdated: null,
                searchResults: [],
                filters: {
                    activeFilter: 'all',
                    searchQuery: '',
                    category: 'all'
                }
            },
            
            // Statistics
            stats: {
                totalQuotes: 0,
                weekQuotes: 0,
                streakDays: 0,
                longestStreak: 0,
                categories: {},
                lastUpdated: null
            },
            
            // Books catalog
            books: {
                list: [],
                categories: [],
                recommendations: [],
                lastUpdated: null
            },
            
            // Reports
            reports: {
                weekly: [],
                monthly: [],
                lastUpdated: null
            },
            
            // Achievements
            achievements: {
                list: [],
                unlockedCount: 0,
                lastUpdated: null
            },
            
            // App state
            app: {
                currentPage: 'home',
                isLoading: false,
                loadingOperations: new Set(),
                errors: [],
                notifications: [],
                isOnline: navigator.onLine,
                lastSync: null
            },
            
            // Cache settings
            cache: {
                maxAge: 5 * 60 * 1000, // 5 minutes
                quotesMaxAge: 2 * 60 * 1000, // 2 minutes for quotes
                statsMaxAge: 30 * 1000 // 30 seconds for stats
            }
        };
        
        this.listeners = new Map();
        this.apiClient = null;
        this.storage = new StorageManager();
        
        console.log('üóÉÔ∏è StateManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    async init() {
        try {
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –∫—ç—à–∞
            await this.restoreFromCache();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ online/offline –æ–±—Ä–∞–±–æ—Ç–∫–∏
            this.setupNetworkHandling();
            
            // –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            this.setupAutoSync();
            
            console.log('‚úÖ StateManager –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ StateManager:', error);
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API –∫–ª–∏–µ–Ω—Ç–∞
     */
    setAPIClient(apiClient) {
        this.apiClient = apiClient;
        console.log('üîó API –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ StateManager');
    }
    
    // =====================================
    // –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú
    // =====================================
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    getState(path = null) {
        if (path) {
            return this.getNestedValue(this.state, path);
        }
        return this.state;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setState(path, value, options = {}) {
        const { 
            silent = false, 
            persist = true, 
            merge = false 
        } = options;
        
        const oldValue = this.getNestedValue(this.state, path);
        
        if (merge && typeof oldValue === 'object' && typeof value === 'object') {
            value = { ...oldValue, ...value };
        }
        
        this.setNestedValue(this.state, path, value);
        
        // Persist –≤ –∫—ç—à
        if (persist) {
            this.persistToCache(path, value);
        }
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
        if (!silent) {
            this.notifyListeners(path, value, oldValue);
        }
        
        console.log(`üîÑ State updated: ${path}`, { oldValue, newValue: value });
    }
    
    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    subscribe(path, callback) {
        if (!this.listeners.has(path)) {
            this.listeners.set(path, new Set());
        }
        
        this.listeners.get(path).add(callback);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
        return () => {
            this.listeners.get(path)?.delete(callback);
        };
    }
    
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
     */
    notifyListeners(path, newValue, oldValue) {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ—á–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
        const exactListeners = this.listeners.get(path);
        if (exactListeners) {
            exactListeners.forEach(callback => {
                try {
                    callback(newValue, oldValue, path);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ listener:', error);
                }
            });
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–∏
        const pathParts = path.split('.');
        for (let i = pathParts.length - 1; i > 0; i--) {
            const parentPath = pathParts.slice(0, i).join('.');
            const parentListeners = this.listeners.get(parentPath);
            
            if (parentListeners) {
                const parentValue = this.getNestedValue(this.state, parentPath);
                parentListeners.forEach(callback => {
                    try {
                        callback(parentValue, null, parentPath);
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ parent listener:', error);
                    }
                });
            }
        }
    }
    
    // =====================================
    // LOADING STATES MANAGEMENT
    // =====================================
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ loading —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setLoading(operation, isLoading = true) {
        const operations = this.state.app.loadingOperations;
        
        if (isLoading) {
            operations.add(operation);
        } else {
            operations.delete(operation);
        }
        
        const globalLoading = operations.size > 0;
        
        this.setState('app.isLoading', globalLoading, { silent: true });
        this.setState(`app.loading.${operation}`, isLoading);
        
        console.log(`‚è≥ Loading state: ${operation} = ${isLoading}, global = ${globalLoading}`);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ loading —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    isLoading(operation = null) {
        if (operation) {
            return this.state.app.loadingOperations.has(operation);
        }
        return this.state.app.isLoading;
    }
    
    /**
     * Wrapper –¥–ª—è async –æ–ø–µ—Ä–∞—Ü–∏–π —Å loading state
     */
    async withLoading(operation, asyncFunction) {
        this.setLoading(operation, true);
        
        try {
            const result = await asyncFunction();
            return result;
        } finally {
            this.setLoading(operation, false);
        }
    }
    
    // =====================================
    // ERROR HANDLING
    // =====================================
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
     */
    addError(error, context = null) {
        const errorObj = {
            id: Date.now(),
            message: this.getUserFriendlyError(error),
            context: context,
            timestamp: new Date(),
            originalError: error
        };
        
        const errors = [...this.state.app.errors, errorObj];
        this.setState('app.errors', errors);
        
        console.error('‚ùå Error added:', errorObj);
        
        // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            this.removeError(errorObj.id);
        }, 10000);
        
        return errorObj.id;
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
     */
    removeError(errorId) {
        const errors = this.state.app.errors.filter(err => err.id !== errorId);
        this.setState('app.errors', errors);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ user-friendly —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
     */
    getUserFriendlyError(error) {
        if (typeof error === 'string') {
            return error;
        }
        
        if (error.message) {
            // –ö–∞—Ä—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–∞ –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            const errorMap = {
                'Network Error': '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
                'Failed to fetch': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
                'Unauthorized': '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
                'Forbidden': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞',
                'Not Found': '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
                'Internal Server Error': '–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ',
                'timeout': '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞'
            };
            
            for (const [key, friendlyMessage] of Object.entries(errorMap)) {
                if (error.message.includes(key)) {
                    return friendlyMessage;
                }
            }
            
            return error.message;
        }
        
        return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    }
    
    // =====================================
    // DATA SYNCHRONIZATION
    // =====================================
    
    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å API
     */
    async syncData(forceRefresh = false) {
        if (!this.apiClient) {
            console.warn('‚ö†Ô∏è API –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
            return;
        }
        
        if (!this.state.app.isOnline) {
            console.warn('‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ offline —Ä–µ–∂–∏–º–µ');
            return;
        }
        
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...');
        
        try {
            // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await Promise.allSettled([
                this.syncUserStats(forceRefresh),
                this.syncRecentQuotes(forceRefresh),
                this.syncBooksCatalog(forceRefresh)
            ]);
            
            this.setState('app.lastSync', new Date());
            console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
            this.addError(error, 'sync');
        }
    }
    
    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async syncUserStats(forceRefresh = false) {
        const lastUpdated = this.state.stats.lastUpdated;
        const maxAge = this.state.cache.statsMaxAge;
        
        if (!forceRefresh && lastUpdated && (Date.now() - lastUpdated < maxAge)) {
            console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
            return;
        }
        
        await this.withLoading('stats', async () => {
            try {
                const stats = await this.apiClient.getUserStats();
                
                this.setState('stats', {
                    ...stats,
                    lastUpdated: Date.now()
                });
                
                console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', stats);
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
                throw error;
            }
        });
    }
    
    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ü–∏—Ç–∞—Ç
     */
    async syncRecentQuotes(forceRefresh = false) {
        const lastUpdated = this.state.quotes.lastUpdated;
        const maxAge = this.state.cache.quotesMaxAge;
        
        if (!forceRefresh && lastUpdated && (Date.now() - lastUpdated < maxAge)) {
            console.log('üìù –¶–∏—Ç–∞—Ç—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
            return;
        }
        
        await this.withLoading('quotes', async () => {
            try {
                const quotes = await this.apiClient.getRecentQuotes(10);
                
                this.setState('quotes.recentQuotes', quotes);
                this.setState('quotes.lastUpdated', Date.now());
                
                console.log('üìù –ù–µ–¥–∞–≤–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', quotes.length);
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç:', error);
                throw error;
            }
        });
    }
    
    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–Ω–∏–≥
     */
    async syncBooksCatalog(forceRefresh = false) {
        const lastUpdated = this.state.books.lastUpdated;
        const maxAge = this.state.cache.maxAge;
        
        if (!forceRefresh && lastUpdated && (Date.now() - lastUpdated < maxAge)) {
            console.log('üìö –ö–∞—Ç–∞–ª–æ–≥ –∞–∫—Ç—É–∞–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
            return;
        }
        
        await this.withLoading('books', async () => {
            try {
                const books = await this.apiClient.getBookCatalog();
                
                this.setState('books.list', books);
                this.setState('books.lastUpdated', Date.now());
                
                console.log('üìö –ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥ –æ–±–Ω–æ–≤–ª–µ–Ω:', books.length);
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
                throw error;
            }
        });
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–∏—Ç–∞—Ç—ã (optimistic update)
     */
    async addQuote(quoteData) {
        if (!this.apiClient) {
            throw new Error('API –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }
        
        // Optimistic update - –¥–æ–±–∞–≤–ª—è–µ–º –≤ UI —Å—Ä–∞–∑—É
        const optimisticQuote = {
            id: `temp_${Date.now()}`,
            ...quoteData,
            createdAt: new Date().toISOString(),
            isOptimistic: true
        };
        
        const currentQuotes = this.state.quotes.recentQuotes;
        this.setState('quotes.recentQuotes', [optimisticQuote, ...currentQuotes]);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É optimistically
        const currentStats = this.state.stats;
        this.setState('stats.totalQuotes', currentStats.totalQuotes + 1);
        this.setState('stats.weekQuotes', currentStats.weekQuotes + 1);
        
        try {
            await this.withLoading('addQuote', async () => {
                const result = await this.apiClient.saveQuote(quoteData);
                
                if (result.success) {
                    // –ó–∞–º–µ–Ω—è–µ–º optimistic quote –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π
                    const quotes = this.state.quotes.recentQuotes.map(q => 
                        q.id === optimisticQuote.id ? result.quote : q
                    );
                    this.setState('quotes.recentQuotes', quotes);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    await this.syncUserStats(true);
                    
                    console.log('‚úÖ –¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', result.quote);
                    return result;
                } else {
                    throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
                }
            });
            
        } catch (error) {
            // Rollback optimistic update
            const quotes = this.state.quotes.recentQuotes.filter(q => q.id !== optimisticQuote.id);
            this.setState('quotes.recentQuotes', quotes);
            
            this.setState('stats.totalQuotes', currentStats.totalQuotes);
            this.setState('stats.weekQuotes', currentStats.weekQuotes);
            
            this.addError(error, 'addQuote');
            throw error;
        }
    }
    
    // =====================================
    // CACHING & STORAGE
    // =====================================
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
     */
    async persistToCache(path, value) {
        try {
            await this.storage.set(`state_${path}`, {
                value: value,
                timestamp: Date.now()
            });
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫—ç—à:', error);
        }
    }
    
    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
     */
    async restoreFromCache() {
        try {
            const criticalPaths = [
                'user.profile',
                'stats',
                'quotes.recentQuotes',
                'books.list'
            ];
            
            for (const path of criticalPaths) {
                try {
                    const cached = await this.storage.get(`state_${path}`);
                    
                    if (cached && this.isCacheValid(cached.timestamp, path)) {
                        this.setNestedValue(this.state, path, cached.value);
                        console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞: ${path}`);
                    }
                } catch (error) {
                    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ${path}:`, error);
                }
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞:', error);
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
     */
    isCacheValid(timestamp, path) {
        const maxAge = this.getCacheMaxAge(path);
        return (Date.now() - timestamp) < maxAge;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –¥–ª—è –ø—É—Ç–∏
     */
    getCacheMaxAge(path) {
        if (path.startsWith('stats')) {
            return this.state.cache.statsMaxAge;
        } else if (path.startsWith('quotes')) {
            return this.state.cache.quotesMaxAge;
        } else {
            return this.state.cache.maxAge;
        }
    }
    
    // =====================================
    // NETWORK HANDLING
    // =====================================
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ç–∏
     */
    setupNetworkHandling() {
        window.addEventListener('online', () => {
            console.log('üåê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            this.setState('app.isOnline', true);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            setTimeout(() => {
                this.syncData(true);
            }, 1000);
        });
        
        window.addEventListener('offline', () => {
            console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
            this.setState('app.isOnline', false);
        });
        
        // –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        this.setState('app.isOnline', navigator.onLine);
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    setupAutoSync() {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
        setInterval(() => {
            if (this.state.app.isOnline) {
                this.syncData();
            }
        }, 2 * 60 * 1000);
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        window.addEventListener('focus', () => {
            if (this.state.app.isOnline) {
                const lastSync = this.state.app.lastSync;
                const timeSinceLastSync = lastSync ? Date.now() - lastSync.getTime() : Infinity;
                
                // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                if (timeSinceLastSync > 60 * 1000) {
                    this.syncData();
                }
            }
        });
    }
    
    // =====================================
    // UTILITY METHODS
    // =====================================
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ø—É—Ç–∏
     */
    getNestedValue(obj, path) {
        return path.split('.').reduce((current, key) => current?.[key], obj);
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ø—É—Ç–∏
     */
    setNestedValue(obj, path, value) {
        const keys = path.split('.');
        const lastKey = keys.pop();
        const target = keys.reduce((current, key) => {
            if (!current[key] || typeof current[key] !== 'object') {
                current[key] = {};
            }
            return current[key];
        }, obj);
        
        target[lastKey] = value;
    }
    
    /**
     * Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
     */
    getDebugInfo() {
        return {
            stateSize: JSON.stringify(this.state).length,
            listenersCount: Array.from(this.listeners.values()).reduce((sum, set) => sum + set.size, 0),
            loadingOperations: Array.from(this.state.app.loadingOperations),
            errorsCount: this.state.app.errors.length,
            isOnline: this.state.app.isOnline,
            lastSync: this.state.app.lastSync,
            cacheInfo: {
                statsAge: this.state.stats.lastUpdated ? Date.now() - this.state.stats.lastUpdated : null,
                quotesAge: this.state.quotes.lastUpdated ? Date.now() - this.state.quotes.lastUpdated : null,
                booksAge: this.state.books.lastUpdated ? Date.now() - this.state.books.lastUpdated : null
            }
        };
    }
}

/**
 * STORAGE MANAGER - –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
 */
class StorageManager {
    constructor() {
        this.useMemoryFallback = false;
        this.memoryStorage = new Map();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å localStorage
        try {
            localStorage.setItem('test', 'test');
            localStorage.removeItem('test');
        } catch (error) {
            console.warn('‚ö†Ô∏è localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º memory fallback');
            this.useMemoryFallback = true;
        }
    }
    
    async get(key) {
        if (this.useMemoryFallback) {
            return this.memoryStorage.get(key);
        }
        
        try {
            const item = localStorage.getItem(key);
            return item ? JSON.parse(item) : null;
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${key}:`, error);
            return null;
        }
    }
    
    async set(key, value) {
        if (this.useMemoryFallback) {
            this.memoryStorage.set(key, value);
            return;
        }
        
        try {
            localStorage.setItem(key, JSON.stringify(value));
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ ${key}:`, error);
        }
    }
    
    async remove(key) {
        if (this.useMemoryFallback) {
            this.memoryStorage.delete(key);
            return;
        }
        
        try {
            localStorage.removeItem(key);
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${key}:`, error);
        }
    }
    
    async clear() {
        if (this.useMemoryFallback) {
            this.memoryStorage.clear();
            return;
        }
        
        try {
            // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏ –∫–ª—é—á–∏
            const keysToRemove = [];
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                if (key && key.startsWith('state_')) {
                    keysToRemove.push(key);
                }
            }
            
            keysToRemove.forEach(key => localStorage.removeItem(key));
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ storage:', error);
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.StateManager = StateManager;

// –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (typeof document !== 'undefined') {
    document.addEventListener('DOMContentLoaded', () => {
        window.stateManager = new StateManager();
        
        // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API –∫–ª–∏–µ–Ω—Ç–∞
        window.addEventListener('readerAPIReady', (event) => {
            window.stateManager.setAPIClient(event.detail.readerAPI);
        });
        
        console.log('‚úÖ StateManager –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    });
}

console.log('üóÉÔ∏è StateManager –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');
/**
 * –ß–∏—Ç–∞—Ç–µ–ª—å Mini App - API Integration
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Reader Bot API
 */

class ApiManager {
    constructor() {
        this.baseUrl = this.getApiBaseUrl();
        this.authToken = null;
        this.isAuthenticated = false;
        
        console.log('üîó API Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', this.baseUrl);
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ URL API
     */
    getApiBaseUrl() {
        // –í production –±—É–¥–µ—Ç –¥–æ–º–µ–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
            return 'http://localhost:3000/api/reader';
        }
        
        // –î–ª—è Telegram Mini App –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        return '/api/reader';
    }
    
    /**
     * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
     */
    async authenticateWithTelegram(initData, user) {
        try {
            console.log('üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram...');
            
            const response = await this.request('/auth/telegram', {
                method: 'POST',
                body: {
                    initData: initData,
                    user: user
                }
            });
            
            if (response.success && response.token) {
                this.authToken = response.token;
                this.isAuthenticated = true;
                
                console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                this.saveAuthToken(response.token);
                
                return {
                    success: true,
                    user: response.user,
                    token: response.token
                };
            } else {
                throw new Error(response.message || '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
            
            // Fallback - —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
            return this.createTemporarySession(user);
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    createTemporarySession(user) {
        console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏...');
        
        const tempToken = `temp_${user.id}_${Date.now()}`;
        this.authToken = tempToken;
        this.isAuthenticated = true;
        
        this.saveAuthToken(tempToken);
        
        return {
            success: true,
            user: user,
            token: tempToken,
            isTemporary: true
        };
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    saveAuthToken(token) {
        try {
            localStorage.setItem('reader_auth_token', token);
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ localStorage:', error);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
     */
    loadAuthToken() {
        try {
            const token = localStorage.getItem('reader_auth_token');
            if (token) {
                this.authToken = token;
                this.isAuthenticated = true;
                return token;
            }
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ localStorage:', error);
        }
        return null;
    }
    
    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    async request(endpoint, options = {}) {
        const url = `${this.baseUrl}${endpoint}`;
        
        const defaultOptions = {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            }
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.authToken) {
            defaultOptions.headers['Authorization'] = `Bearer ${this.authToken}`;
        }
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–ø—Ü–∏–∏
        const finalOptions = {
            ...defaultOptions,
            ...options,
            headers: {
                ...defaultOptions.headers,
                ...options.headers
            }
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º body –µ—Å–ª–∏ –µ—Å—Ç—å
        if (options.body && finalOptions.method !== 'GET') {
            finalOptions.body = JSON.stringify(options.body);
        }
        
        try {
            console.log(`üì° API ${finalOptions.method} ${endpoint}`);
            
            const response = await fetch(url, finalOptions);
            
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }
            
            const data = await response.json();
            console.log(`‚úÖ API ${finalOptions.method} ${endpoint} - —É—Å–ø–µ—à–Ω–æ`);
            
            return data;
        } catch (error) {
            console.error(`‚ùå API ${finalOptions.method} ${endpoint} - –æ—à–∏–±–∫–∞:`, error);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            return this.getMockResponse(endpoint, finalOptions.method);
        }
    }
    
    /**
     * Mock –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ backend
     */
    getMockResponse(endpoint, method) {
        console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è:', endpoint);
        
        if (endpoint.includes('/auth/telegram')) {
            return {
                success: true,
                token: 'mock_token_' + Date.now(),
                user: {
                    id: 12345678,
                    telegramId: 12345678,
                    name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    username: 'test_user'
                }
            };
        }
        
        if (endpoint.includes('/quotes')) {
            if (method === 'GET') {
                return {
                    success: true,
                    data: [
                        {
                            id: 1,
                            text: '–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ —Å —Ç–æ–±–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –ø–æ–∫–∞ —Ç—ã —Å—Ç—Ä–æ–∏—à—å –ø–ª–∞–Ω—ã.',
                            author: '–î–∂–æ–Ω –õ–µ–Ω–Ω–æ–Ω',
                            createdAt: new Date().toISOString(),
                            analysis: {
                                category: '–§–∏–ª–æ—Å–æ—Ñ–∏—è –∂–∏–∑–Ω–∏',
                                mood: '–ú—É–¥—Ä–æ—Å—Ç—å',
                                themes: ['–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∂–∏–∑–Ω—å', '–Ω–∞—Å—Ç–æ—è—â–µ–µ']
                            }
                        },
                        {
                            id: 2,
                            text: '–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –∫ –ø–æ–∑–Ω–∞–Ω–∏—é ‚Äî —ç—Ç–æ —É–±–µ–∂–¥–µ–Ω–∏–µ, —á—Ç–æ —Ç—ã —É–∂–µ –∑–Ω–∞–µ—à—å.',
                            author: '–ë—É–¥–¥–∞',
                            createdAt: new Date(Date.now() - 86400000).toISOString(),
                            analysis: {
                                category: '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ',
                                mood: '–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ',
                                themes: ['–æ–±—É—á–µ–Ω–∏–µ', '—Å–º–∏—Ä–µ–Ω–∏–µ', '–º—É–¥—Ä–æ—Å—Ç—å']
                            }
                        }
                    ],
                    pagination: {
                        page: 1,
                        limit: 10,
                        total: 2,
                        pages: 1
                    }
                };
            } else if (method === 'POST') {
                return {
                    success: true,
                    data: {
                        id: Date.now(),
                        text: '–ù–æ–≤–∞—è —Ü–∏—Ç–∞—Ç–∞',
                        author: '–ê–≤—Ç–æ—Ä',
                        createdAt: new Date().toISOString(),
                        analysis: {
                            category: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è',
                            mood: '–†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ',
                            themes: ['–Ω–æ–≤–æ–µ', '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ']
                        }
                    }
                };
            }
        }
        
        if (endpoint.includes('/stats')) {
            return {
                success: true,
                data: {
                    totalQuotes: 47,
                    weekQuotes: 5,
                    currentStreak: 3,
                    longestStreak: 12,
                    categories: {
                        '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ': 15,
                        '–§–∏–ª–æ—Å–æ—Ñ–∏—è': 12,
                        '–õ—é–±–æ–≤—å': 8,
                        '–ú—É–¥—Ä–æ—Å—Ç—å': 7,
                        '–ñ–∏–∑–Ω—å': 5
                    }
                }
            };
        }
        
        if (endpoint.includes('/reports')) {
            return {
                success: true,
                data: [
                    {
                        id: 1,
                        type: 'weekly',
                        weekStart: new Date(Date.now() - 7 * 86400000).toISOString(),
                        weekEnd: new Date().toISOString(),
                        quotesCount: 5,
                        analysis: '–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –≤–∞—à–∏ —Ü–∏—Ç–∞—Ç—ã –≥–æ–≤–æ—Ä—è—Ç –æ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–∏ –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≥–∞—Ä–º–æ–Ω–∏–∏...',
                        recommendations: [
                            {
                                title: '–ò—Å–∫—É—Å—Å—Ç–≤–æ –ª—é–±–∏—Ç—å',
                                author: '–≠—Ä–∏—Ö –§—Ä–æ–º–º',
                                reason: '–ü–æ–¥—Ö–æ–¥–∏—Ç –≤–∞—à–∏–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º –æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö'
                            }
                        ],
                        createdAt: new Date().toISOString()
                    }
                ]
            };
        }
        
        if (endpoint.includes('/achievements')) {
            return {
                success: true,
                data: [
                    {
                        id: 'first_quote',
                        title: '–ü–µ—Ä–≤–∞—è —Ü–∏—Ç–∞—Ç–∞',
                        description: '–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É',
                        icon: 'üéØ',
                        isUnlocked: true,
                        unlockedAt: new Date(Date.now() - 30 * 86400000).toISOString()
                    },
                    {
                        id: 'week_streak',
                        title: '–ù–µ–¥–µ–ª—è –º—É–¥—Ä–æ—Å—Ç–∏',
                        description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –¥–æ–±–∞–≤–ª—è–µ—Ç–µ —Ü–∏—Ç–∞—Ç—ã',
                        icon: 'üî•',
                        isUnlocked: false,
                        progress: 3,
                        target: 7
                    }
                ]
            };
        }
        
        // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        return {
            success: false,
            message: 'Mock endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
            data: null
        };
    }
    
    // === –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –¶–ò–¢–ê–¢–ê–ú–ò ===
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç
     */
    async getQuotes(params = {}) {
        const query = new URLSearchParams(params).toString();
        const endpoint = `/quotes${query ? '?' + query : ''}`;
        return await this.request(endpoint);
    }
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É
     */
    async addQuote(quoteData) {
        return await this.request('/quotes', {
            method: 'POST',
            body: quoteData
        });
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç—ã –æ—Ç AI
     */
    async analyzeQuote(text, author = '') {
        return await this.request('/quotes/analyze', {
            method: 'POST',
            body: { text, author }
        });
    }
    
    // === –ú–ï–¢–û–î–´ –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getStats() {
        return await this.request('/stats');
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç—ã
     */
    async getReports(type = 'weekly') {
        return await this.request(`/reports?type=${type}`);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    async getAchievements() {
        return await this.request('/achievements');
    }
    
    // === –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getProfile() {
        return await this.request('/profile');
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async updateProfile(profileData) {
        return await this.request('/profile', {
            method: 'PUT',
            body: profileData
        });
    }
    
    // === –ú–ï–¢–û–î–´ –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö ===
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getSettings() {
        return await this.request('/settings');
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    async updateSettings(settings) {
        return await this.request('/settings', {
            method: 'PUT',
            body: settings
        });
    }
    
    // === –£–¢–ò–õ–ò–¢–´ ===
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API
     */
    async healthCheck() {
        try {
            const response = await fetch(`${this.baseUrl}/health`);
            return response.ok;
        } catch (error) {
            return false;
        }
    }
    
    /**
     * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    logout() {
        this.authToken = null;
        this.isAuthenticated = false;
        
        try {
            localStorage.removeItem('reader_auth_token');
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ localStorage:', error);
        }
        
        console.log('üëã –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    isAuth() {
        return this.isAuthenticated && this.authToken;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.apiManager = new ApiManager();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è ES6 –º–æ–¥—É–ª–µ–π
export default window.apiManager;
/**
 * Catalog Manager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º –∫–Ω–∏–≥ –≤ Mini App
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
 * - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤  
 * - UTM —Ç—Ä–µ–∫–∏–Ω–≥ –¥–ª—è —Å—Å—ã–ª–æ–∫
 * - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API /api/reader/books
 */

class CatalogManager {
    constructor() {
        this.books = [];
        this.filteredBooks = [];
        this.currentCategory = 'all';
        this.userProfile = null;
        this.promoCodes = [];
        
        // Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        this.mockBooks = [
            {
                id: 1,
                title: "–ò—Å–∫—É—Å—Å—Ç–≤–æ –ª—é–±–∏—Ç—å",
                author: "–≠—Ä–∏—Ö –§—Ä–æ–º–º",
                price: 1200,
                discountedPrice: 960, // —Å READER20
                cover: null, // –±—É–¥–µ—Ç –∑–∞–≥–ª—É—à–∫–∞
                category: "psychology",
                recommendation: "–í–∞—à–∏ —Ü–∏—Ç–∞—Ç—ã –æ –ª—é–±–≤–∏ –≥–æ–≤–æ—Ä—è—Ç –æ –ø–æ–∏—Å–∫–µ –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
                utm: "?utm_source=mini_app&utm_medium=catalog&utm_campaign=reader_bot&utm_content=fromm_art_of_loving"
            },
            {
                id: 2,
                title: "–ü–∏—Å—å–º–∞ –∫ –º–æ–ª–æ–¥–æ–º—É –ø–æ—ç—Ç—É",
                author: "–†–∞–π–Ω–µ—Ä –ú–∞—Ä–∏—è –†–∏–ª—å–∫–µ",
                price: 800,
                discountedPrice: 680, // —Å PHIL15
                cover: null,
                category: "philosophy",
                recommendation: "–°–æ–∑–≤—É—á–Ω–æ –≤–∞—à–∏–º –∑–∞–ø–∏—Å—è–º –æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –º–∏—Ä–µ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–µ",
                utm: "?utm_source=mini_app&utm_medium=catalog&utm_campaign=reader_bot&utm_content=rilke_letters"
            },
            {
                id: 3,
                title: "–ë—ã—Ç—å —Å–æ–±–æ–π",
                author: "–ê–Ω–Ω–∞ –ë—É—Å–µ–ª",
                price: 1500,
                discountedPrice: 1200, // —Å READER20
                cover: null,
                category: "selfdevelopment",
                recommendation: "–î–ª—è —É–≥–ª—É–±–ª–µ–Ω–∏—è –≤ —Ç–µ–º—É —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏",
                utm: "?utm_source=mini_app&utm_medium=catalog&utm_campaign=reader_bot&utm_content=busel_be_yourself"
            },
            {
                id: 4,
                title: "–°–∏–ª–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞",
                author: "–≠–∫—Ö–∞—Ä—Ç –¢–æ–ª–ª–µ",
                price: 1000,
                discountedPrice: 800, // —Å READER20
                cover: null,
                category: "mindfulness",
                recommendation: "–î–æ–ø–æ–ª–Ω–∏—Ç –≤–∞—à–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏",
                utm: "?utm_source=mini_app&utm_medium=catalog&utm_campaign=reader_bot&utm_content=tolle_power_of_now"
            }
        ];
        
        this.mockPromoCodes = [
            {
                code: 'READER20',
                discount: 20,
                description: '20% —Å–∫–∏–¥–∫–∞ –¥–ª—è —á–∏—Ç–∞—Ç–µ–ª–µ–π'
            },
            {
                code: 'PHIL15',
                discount: 15,
                description: '15% —Å–∫–∏–¥–∫–∞ –Ω–∞ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é'
            },
            {
                code: 'MONTH25',
                discount: 25,
                description: '25% —Å–∫–∏–¥–∫–∞ –º–µ—Å—è—Ü–∞'
            }
        ];
        
        this.categories = [
            { id: 'psychology', name: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è', icon: 'üß†', count: 1 },
            { id: 'philosophy', name: '–§–∏–ª–æ—Å–æ—Ñ–∏—è', icon: 'ü§î', count: 1 },
            { id: 'selfdevelopment', name: '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', icon: 'üöÄ', count: 1 },
            { id: 'mindfulness', name: '–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å', icon: 'üßò', count: 1 }
        ];
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
     */
    async init() {
        console.log('üõí –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞...');
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            await this.loadUserProfile();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã
            await this.loadPromoCodes();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–∏–≥–∏
            await this.loadPersonalizedBooks();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI
            this.initUI();
            
            console.log('‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
            this.loadMockData();
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    async loadUserProfile() {
        try {
            if (window.apiManager) {
                this.userProfile = await window.apiManager.getProfile();
            }
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å:', error);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º mock –ø—Ä–æ—Ñ–∏–ª—å
            this.userProfile = {
                name: '–ú–∞—Ä–∏–Ω–∞',
                interests: ['—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è'],
                recentQuoteTopics: ['–ª—é–±–æ–≤—å', '—Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ', '–æ—Ç–Ω–æ—à–µ–Ω–∏—è']
            };
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
     */
    async loadPromoCodes() {
        try {
            if (window.apiManager) {
                this.promoCodes = await window.apiManager.getPromoCodes();
            } else {
                throw new Error('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        } catch (error) {
            console.warn('–ò—Å–ø–æ–ª—å–∑—É–µ–º mock –ø—Ä–æ–º–æ–∫–æ–¥—ã:', error);
            this.promoCodes = this.mockPromoCodes;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–Ω–∏–≥
     */
    async loadPersonalizedBooks() {
        try {
            if (window.apiManager) {
                const response = await window.apiManager.getPersonalizedBooks();
                this.books = response.books || [];
            } else {
                throw new Error('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        } catch (error) {
            console.warn('–ò—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥:', error);
            this.books = this.mockBooks;
        }
        
        this.filteredBooks = [...this.books];
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–Ω–∏–≥ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
     */
    async loadBooks() {
        try {
            if (window.apiManager) {
                const response = await window.apiManager.getCatalog();
                this.books = response.books || [];
            } else {
                throw new Error('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        } catch (error) {
            console.warn('–ò—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ:', error);
            this.books = this.mockBooks;
        }
        
        this.filteredBooks = [...this.books];
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ mock –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ API
     */
    loadMockData() {
        this.books = this.mockBooks;
        this.filteredBooks = [...this.books];
        this.promoCodes = this.mockPromoCodes;
        this.initUI();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
     */
    initUI() {
        this.renderPersonalRecommendation();
        this.renderPromoCodes();
        this.renderBooks();
        this.renderCategories();
        this.setupEventListeners();
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
     */
    renderPersonalRecommendation() {
        const header = document.querySelector('.catalog-header .personal-recommendation');
        if (header && this.userProfile) {
            const topics = this.userProfile.recentQuoteTopics || ['—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–∏'];
            const topicsText = topics.slice(0, 2).join(' –∏ ');
            header.textContent = `–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –æ ${topicsText}`;
        }
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
     */
    renderPromoCodes() {
        const container = document.querySelector('.promo-codes-compact');
        if (!container) return;

        const activeCodes = this.promoCodes.slice(0, 2); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
        const codesHTML = activeCodes.map(promo => 
            `<span class="promo-code" onclick="window.catalogManager.copyPromoCode('${promo.code}')">${promo.code}</span> (${promo.discount}%)`
        ).join(' ‚Ä¢ ');

        container.innerHTML = `üéÅ –í–∞—à–∏ —Å–∫–∏–¥–∫–∏: ${codesHTML}`;
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥
     */
    renderBooks() {
        const container = document.getElementById('books-list');
        if (!container) return;

        if (this.filteredBooks.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">üìö</div>
                    <p>–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                    <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ</p>
                </div>
            `;
            return;
        }

        const booksHTML = this.filteredBooks.map(book => this.renderBookCard(book)).join('');
        container.innerHTML = booksHTML;
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–Ω–∏–≥–∏
     */
    renderBookCard(book) {
        const originalPrice = book.price;
        const discountedPrice = book.discountedPrice || book.price;
        const hasDiscount = discountedPrice < originalPrice;

        return `
            <div class="book-card" data-book-id="${book.id}">
                <div class="book-cover" style="background: linear-gradient(135deg, #f5f5f5, #e5e5e5);">
                    üìñ
                </div>
                <div class="book-info">
                    <h3 class="book-title">${book.title}</h3>
                    <p class="book-author">${book.author}</p>
                    ${book.recommendation ? `<p class="book-recommendation-reason">${book.recommendation}</p>` : ''}
                    
                    <div class="book-price">
                        <div>
                            ${hasDiscount ? `<span class="price-original">${originalPrice} —Ä—É–±.</span>` : ''}
                            <span class="price-discounted">${discountedPrice} —Ä—É–±.</span>
                        </div>
                    </div>
                    
                    <div class="book-actions">
                        <button class="anna-button" onclick="window.catalogManager.buyBook(${book.id})">
                            –ö—É–ø–∏—Ç—å
                        </button>
                        <button class="anna-button secondary" onclick="window.catalogManager.showBookDetails(${book.id})">
                            –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    renderCategories() {
        const container = document.querySelector('.categories-grid');
        if (!container) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        this.updateCategoryCounts();

        const categoriesHTML = this.categories.map(category => `
            <a href="#" class="category-item" onclick="window.catalogManager.filterByCategory('${category.id}'); return false;">
                <span class="category-icon">${category.icon}</span>
                <div class="category-name">${category.name}</div>
                <div class="category-count">(${category.count})</div>
            </a>
        `).join('');

        container.innerHTML = categoriesHTML;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    updateCategoryCounts() {
        this.categories.forEach(category => {
            category.count = this.books.filter(book => book.category === category.id).length;
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –°–ª—É—à–∞—Ç–µ–ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —á–µ—Ä–µ–∑ onclick –≤ HTML
        console.log('üì± Event listeners –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    filterByCategory(categoryId) {
        console.log('üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoryId);
        
        this.currentCategory = categoryId;
        
        if (categoryId === 'all') {
            this.filteredBooks = [...this.books];
        } else {
            this.filteredBooks = this.books.filter(book => book.category === categoryId);
        }
        
        this.renderBooks();
        
        // Haptic feedback
        if (window.TelegramManager) {
            window.TelegramManager.hapticFeedback('light');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        const categoryName = this.categories.find(c => c.id === categoryId)?.name || '–í—Å–µ –∫–Ω–∏–≥–∏';
        this.showToast(`–ü–æ–∫–∞–∑–∞–Ω–æ: ${categoryName} (${this.filteredBooks.length})`);
    }

    /**
     * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
     */
    async copyPromoCode(code) {
        try {
            await navigator.clipboard.writeText(code);
            this.showToast(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ ${code} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!`);
            
            // Haptic feedback
            if (window.TelegramManager) {
                window.TelegramManager.hapticFeedback('medium');
            }
            
            // –¢—Ä–µ–∫–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
            this.trackPromoCodeUsage(code);
            
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:', error);
            this.showToast(`–ü—Ä–æ–º–æ–∫–æ–¥: ${code}`, 'info');
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∫ —Ü–µ–Ω–µ –∫–Ω–∏–≥–∏
     */
    applyPromoCode(bookId, promoCode) {
        const book = this.books.find(b => b.id === bookId);
        const promo = this.promoCodes.find(p => p.code === promoCode);
        
        if (!book || !promo) return book?.price || 0;
        
        const discountAmount = Math.round(book.price * (promo.discount / 100));
        return book.price - discountAmount;
    }

    /**
     * –ü–æ–∫—É–ø–∫–∞ –∫–Ω–∏–≥–∏ —Å UTM —Ç—Ä–µ–∫–∏–Ω–≥–æ–º
     */
    buyBook(bookId) {
        const book = this.books.find(b => b.id === bookId);
        if (!book) return;
        
        console.log('üí≥ –ü–æ–∫—É–ø–∫–∞ –∫–Ω–∏–≥–∏:', book.title);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL —Å UTM –º–µ—Ç–∫–∞–º–∏
        const baseUrl = 'https://annabusel.org/bookclub';
        const utmParams = book.utm || this.generateUTMParams(book);
        const fullUrl = baseUrl + utmParams;
        
        // –¢—Ä–µ–∫–∏–Ω–≥ –∫–ª–∏–∫–∞
        this.trackBookClick(book, 'buy');
        
        // Haptic feedback
        if (window.TelegramManager) {
            window.TelegramManager.hapticFeedback('medium');
        }
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª
        if (window.TelegramManager && window.TelegramManager.openLink) {
            window.TelegramManager.openLink(fullUrl);
        } else {
            window.open(fullUrl, '_blank');
        }
        
        this.showToast(`üõí –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–∫—É–ø–∫–µ: ${book.title}`);
    }

    /**
     * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∫–Ω–∏–≥–∏
     */
    showBookDetails(bookId) {
        const book = this.books.find(b => b.id === bookId);
        if (!book) return;
        
        console.log('üìñ –î–µ—Ç–∞–ª–∏ –∫–Ω–∏–≥–∏:', book.title);
        
        // –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        this.trackBookClick(book, 'details');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª —Å –¥–µ—Ç–∞–ª—è–º–∏
        const modalContent = `
            <div class="book-details-modal">
                <div class="book-details-header">
                    <div class="book-cover" style="background: linear-gradient(135deg, #f5f5f5, #e5e5e5); width: 80px; height: 100px;">
                        üìñ
                    </div>
                    <div class="book-details-info">
                        <h2 class="anna-h2">${book.title}</h2>
                        <p class="anna-text-gray">${book.author}</p>
                        <div class="book-price">
                            <span class="price-discounted">${book.discountedPrice || book.price} —Ä—É–±.</span>
                        </div>
                    </div>
                </div>
                
                ${book.recommendation ? `
                    <div class="anna-info-block">
                        <h3 class="anna-h3">–ü–æ—á–µ–º—É —ç—Ç–∞ –∫–Ω–∏–≥–∞ –¥–ª—è –≤–∞—Å:</h3>
                        <p class="anna-text">${book.recommendation}</p>
                    </div>
                ` : ''}
                
                <div class="book-actions" style="margin-top: 24px;">
                    <button class="anna-button large" onclick="window.catalogManager.buyBook(${book.id}); window.app.closeModal();">
                        –ö—É–ø–∏—Ç—å –∫–Ω–∏–≥—É
                    </button>
                </div>
            </div>
        `;
        
        if (window.app && window.app.showModal) {
            window.app.showModal(modalContent);
        }
        
        // Haptic feedback
        if (window.TelegramManager) {
            window.TelegramManager.hapticFeedback('light');
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UTM –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    generateUTMParams(book) {
        const utm = new URLSearchParams({
            utm_source: 'mini_app',
            utm_medium: 'catalog',
            utm_campaign: 'reader_bot',
            utm_content: `${book.author.toLowerCase().replace(/\s+/g, '_')}_${book.title.toLowerCase().replace(/\s+/g, '_')}`,
            utm_term: book.category || 'general'
        });
        
        return '?' + utm.toString();
    }

    /**
     * –¢—Ä–µ–∫–∏–Ω–≥ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–∏–≥–∞–º
     */
    async trackBookClick(book, action) {
        const trackingData = {
            book_id: book.id,
            book_title: book.title,
            book_author: book.author,
            action: action, // 'buy' | 'details'
            category: book.category,
            price: book.price,
            discounted_price: book.discountedPrice,
            user_id: this.userProfile?.id || 'anonymous',
            timestamp: new Date().toISOString(),
            source: 'mini_app_catalog'
        };
        
        try {
            if (window.apiManager) {
                await window.apiManager.trackEvent('book_click', trackingData);
            }
            console.log('üìä –¢—Ä–µ–∫–∏–Ω–≥ —Å–æ–±—ã—Ç–∏—è:', trackingData);
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞:', error);
        }
    }

    /**
     * –¢—Ä–µ–∫–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
     */
    async trackPromoCodeUsage(code) {
        const trackingData = {
            promo_code: code,
            user_id: this.userProfile?.id || 'anonymous',
            timestamp: new Date().toISOString(),
            source: 'mini_app_catalog'
        };
        
        try {
            if (window.apiManager) {
                await window.apiManager.trackEvent('promo_code_copy', trackingData);
            }
            console.log('üìä –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', trackingData);
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showToast(message, type = 'success') {
        if (window.app && window.app.showToast) {
            window.app.showToast(message, type);
        } else {
            console.log('Toast:', message);
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –∑–∞–ø—Ä–æ—Å—É
     */
    searchBooks(query) {
        if (!query || query.trim() === '') {
            this.filteredBooks = [...this.books];
        } else {
            const searchTerm = query.toLowerCase().trim();
            this.filteredBooks = this.books.filter(book => 
                book.title.toLowerCase().includes(searchTerm) ||
                book.author.toLowerCase().includes(searchTerm) ||
                book.category.toLowerCase().includes(searchTerm) ||
                (book.recommendation && book.recommendation.toLowerCase().includes(searchTerm))
            );
        }
        
        this.renderBooks();
        
        // Toast —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–æ–∏—Å–∫–∞
        if (query) {
            this.showToast(`–ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: ${this.filteredBooks.length}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ AI –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏—Ç–∞—Ç
     */
    async getAIRecommendations(quoteText) {
        try {
            if (window.apiManager) {
                const response = await window.apiManager.getBookRecommendations(quoteText);
                return response.books || [];
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
        }
        
        // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–Ω–∏–≥—É –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
        const randomIndex = Math.floor(Math.random() * this.books.length);
        return this.books[randomIndex] ? [this.books[randomIndex]] : [];
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
     */
    async refresh() {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞...');
        
        try {
            await this.loadPersonalizedBooks();
            await this.loadPromoCodes();
            this.renderBooks();
            this.renderPromoCodes();
            this.showToast('‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω');
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
            this.showToast('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 'error');
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        this.books = [];
        this.filteredBooks = [];
        this.promoCodes = [];
        this.userProfile = null;
        console.log('üóëÔ∏è –ö–∞—Ç–∞–ª–æ–≥ –æ—á–∏—â–µ–Ω');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.CatalogManager = CatalogManager;

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞
window.catalogManager = new CatalogManager();

console.log('üìö Catalog Manager –∑–∞–≥—Ä—É–∂–µ–Ω');
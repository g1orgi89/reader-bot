/**
 * üõ†Ô∏è –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –°–ö–†–ò–ü–¢ –î–õ–Ø PROMPTS.JS
 * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 * 
 * @file client/admin-panel/js/prompts-debug.js
 * üìñ Debug script –¥–ª—è Reader Bot prompts management
 */

// üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –û–¢–õ–ê–î–ö–ò
const DEBUG_CONFIG = {
    VERBOSE_LOGGING: true,
    LOG_API_REQUESTS: true,
    LOG_AUTH_DETAILS: true,
    LOG_LOCALSTORAGE: true,
    LOG_ERRORS: true
};

// üìä –°–ß–ï–¢–ß–ò–ö–ò –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
let DEBUG_COUNTERS = {
    apiCalls: 0,
    authAttempts: 0,
    errors: 0,
    tokenChecks: 0
};

/**
 * üîç –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
 */
function debugLog(category, message, data = null) {
    if (!DEBUG_CONFIG.VERBOSE_LOGGING) return;
    
    const timestamp = new Date().toISOString().substring(11, 23);
    const prefix = `[${timestamp}] üîç ${category}:`;
    
    if (data) {
        console.log(prefix, message, data);
    } else {
        console.log(prefix, message);
    }
}

/**
 * üö® –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
function analyzeAuthState() {
    debugLog('AUTH_STATE', '=== –ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ===');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    const tokenKey = 'adminToken'; // –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á
    const token = localStorage.getItem(tokenKey);
    const userKey = 'reader_admin_user';
    const user = localStorage.getItem(userKey);
    const expiresKey = 'reader_admin_expires';
    const expires = localStorage.getItem(expiresKey);
    
    debugLog('LOCALSTORAGE', '–¢–æ–∫–µ–Ω –≤ localStorage', {
        key: tokenKey,
        value: token ? `${token.substring(0, 20)}...` : null,
        exists: !!token
    });
    
    debugLog('LOCALSTORAGE', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ localStorage', {
        key: userKey,
        value: user ? JSON.parse(user) : null,
        exists: !!user
    });
    
    debugLog('LOCALSTORAGE', '–í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è', {
        key: expiresKey,
        value: expires,
        expired: expires ? Date.now() > parseInt(expires) : 'N/A',
        timeLeft: expires ? Math.max(0, parseInt(expires) - Date.now()) / 1000 / 60 : 'N/A'
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º authManager
    if (typeof window.authManager !== 'undefined') {
        debugLog('AUTH_MANAGER', '–°–æ—Å—Ç–æ—è–Ω–∏–µ authManager', {
            exists: true,
            isAuthenticated: window.authManager.isAuthenticated(),
            currentUser: window.authManager.getCurrentUser(),
            token: window.authManager.getToken() ? `${window.authManager.getToken().substring(0, 20)}...` : null
        });
    } else {
        debugLog('AUTH_MANAGER', 'authManager –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ window');
    }
    
    return {
        hasToken: !!token,
        hasUser: !!user,
        tokenExpired: expires ? Date.now() > parseInt(expires) : true,
        authManagerReady: typeof window.authManager !== 'undefined'
    };
}

/**
 * üåê –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞
 */
function diagnoseApiRequest(endpoint, options = {}) {
    DEBUG_COUNTERS.apiCalls++;
    
    debugLog('API_REQUEST', `=== API –ó–ê–ü–†–û–° #${DEBUG_COUNTERS.apiCalls} ===`);
    debugLog('API_REQUEST', '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞', {
        endpoint,
        method: options.method || 'GET',
        hasBody: !!options.body,
        bodyType: options.body ? typeof options.body : 'none',
        optionsHeaders: options.headers || {}
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º URL
    const API_PREFIX = '/api/reader';
    const fullUrl = `${API_PREFIX}${endpoint}`;
    debugLog('API_REQUEST', 'URL –∞–Ω–∞–ª–∏–∑', {
        endpoint,
        apiPrefix: API_PREFIX,
        fullUrl,
        baseUrl: window.location.origin,
        absoluteUrl: window.location.origin + fullUrl
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const authState = analyzeAuthState();
    const headers = { ...options.headers };
    
    debugLog('API_REQUEST', '–ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏', headers);
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–°–ï –ø—Ä–æ–º–ø—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é!
    const isPublicEndpoint = false; // –ù–ï–¢ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç endpoints!
    
    debugLog('API_REQUEST', '–õ–æ–≥–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', {
        isPublicEndpoint: false,
        note: 'üîß –í–°–ï –ø—Ä–æ–º–ø—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é'
    });
    
    // üîß No authentication headers needed - using userId parameter now
    DEBUG_COUNTERS.authAttempts++;
    debugLog('AUTH_ATTEMPT', `–ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ #${DEBUG_COUNTERS.authAttempts} - —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ userId –ø–∞—Ä–∞–º–µ—Ç—Ä`);
    
    debugLog('AUTH_ATTEMPT', '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ userId –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ URL –≤–º–µ—Å—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤');
    
    // Content-Type –ª–æ–≥–∏–∫–∞
    if (!(options.body instanceof FormData)) {
        headers['Content-Type'] = 'application/json';
        debugLog('API_REQUEST', '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Content-Type: application/json');
    } else {
        debugLog('API_REQUEST', 'FormData –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ - Content-Type –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è');
    }
    
    debugLog('API_REQUEST', '–ò—Ç–æ–≥–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏', headers);
    
    return {
        fullUrl,
        headers,
        finalOptions: { ...options, headers },
        metadata: {
            isPublic: false,
            hasAuth: false, // No longer using Authorization headers
            authType: 'userId-param' // Using userId parameter instead
        }
    };
}

/**
 * üîß –ü–µ—Ä–µ—Ö–≤–∞—Ç –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ makeAuthenticatedRequest
 */
async function debugMakeAuthenticatedRequest(endpoint, options = {}) {
    debugLog('DEBUG_WRAPPER', '=== –ù–ê–ß–ê–õ–û –ó–ê–ü–†–û–°–ê ===');
    
    const diagnosis = diagnoseApiRequest(endpoint, options);
    
    try {
        debugLog('FETCH_CALL', '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ fetch', {
            url: diagnosis.fullUrl,
            options: diagnosis.finalOptions
        });
        
        const response = await fetch(diagnosis.fullUrl, diagnosis.finalOptions);
        
        debugLog('FETCH_RESPONSE', '–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω', {
            status: response.status,
            statusText: response.statusText,
            ok: response.ok,
            headers: Object.fromEntries(response.headers.entries())
        });
        
        if (!response.ok) {
            DEBUG_COUNTERS.errors++;
            
            const errorText = await response.text();
            debugLog('ERROR_RESPONSE', `–û—à–∏–±–∫–∞ #${DEBUG_COUNTERS.errors}`, {
                status: response.status,
                statusText: response.statusText,
                responseText: errorText,
                isAuthError: response.status === 401,
                diagnosis: diagnosis.metadata
            });
            
            let errorData;
            try {
                errorData = JSON.parse(errorText);
            } catch {
                errorData = { error: errorText || `HTTP ${response.status}` };
            }
            
            debugLog('ERROR_PARSED', '–†–∞–∑–æ–±—Ä–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞', errorData);
            
            throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
        }
        
        const result = await response.json();
        debugLog('SUCCESS_RESPONSE', '–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç', {
            hasData: !!result,
            success: result.success,
            dataKeys: Object.keys(result)
        });
        
        return result;
        
    } catch (error) {
        DEBUG_COUNTERS.errors++;
        debugLog('CATCH_ERROR', `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ #${DEBUG_COUNTERS.errors}`, {
            message: error.message,
            name: error.name,
            stack: error.stack,
            diagnosis: diagnosis.metadata
        });
        
        throw error;
    } finally {
        debugLog('DEBUG_WRAPPER', '=== –ö–û–ù–ï–¶ –ó–ê–ü–†–û–°–ê ===');
    }
}

/**
 * üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ª–∞–¥–∫–∏
 */
function getDebugStats() {
    return {
        counters: DEBUG_COUNTERS,
        authState: analyzeAuthState(),
        timestamp: new Date().toISOString(),
        userAgent: navigator.userAgent,
        currentUrl: window.location.href
    };
}

/**
 * üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints
 */
async function testApiEndpoints() {
    debugLog('API_TEST', '=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINTS ===');
    
    const endpoints = [
        { path: '/prompts?page=1&limit=10', method: 'GET', description: '–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤' },
        { path: '/prompts/stats', method: 'GET', description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤' }
    ];
    
    for (const endpoint of endpoints) {
        debugLog('API_TEST', `–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${endpoint.description}`);
        
        try {
            const result = await debugMakeAuthenticatedRequest(endpoint.path, {
                method: endpoint.method
            });
            
            debugLog('API_TEST', `‚úÖ ${endpoint.description} - —É—Å–ø–µ—Ö`, {
                success: result.success,
                hasData: !!result.data
            });
            
        } catch (error) {
            debugLog('API_TEST', `‚ùå ${endpoint.description} - –æ—à–∏–±–∫–∞`, {
                error: error.message
            });
        }
    }
    
    debugLog('API_TEST', '=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');
}

/**
 * üîÑ –°–±—Ä–æ—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function resetDebugData() {
    DEBUG_COUNTERS = {
        apiCalls: 0,
        authAttempts: 0,
        errors: 0,
        tokenChecks: 0
    };
    debugLog('DEBUG_RESET', '–°—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
}

/**
 * üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function exportDebugData() {
    const data = {
        stats: getDebugStats(),
        localStorage: {
            adminToken: localStorage.getItem('adminToken'),
            reader_admin_user: localStorage.getItem('reader_admin_user'),
            reader_admin_expires: localStorage.getItem('reader_admin_expires')
        },
        config: DEBUG_CONFIG,
        timestamp: new Date().toISOString()
    };
    
    console.log('üìä –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï:', JSON.stringify(data, null, 2));
    return data;
}

// üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
function initPromptsDiagnostics() {
    debugLog('INIT', 'üõ†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ prompts.js');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    analyzeAuthState();
    
    // üîß –ù–ï –ó–ê–ú–ï–ù–Ø–ï–ú —Ñ—É–Ω–∫—Ü–∏—é - –ø–æ–∑–≤–æ–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    debugLog('INIT', 'üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø–∞—Å—Å–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ - –ù–ï –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç makeAuthenticatedRequest');
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    window.debugPrompts = {
        analyzeAuthState,
        testApiEndpoints,
        getDebugStats,
        resetDebugData,
        exportDebugData,
        diagnoseApiRequest
    };
    
    debugLog('INIT', '‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ prompts.js –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        debugLog('AUTO_TEST', '–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
        testApiEndpoints();
    }, 2000);
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    if (window.location.pathname.includes('prompts.html')) {
        initPromptsDiagnostics();
    }
});

console.log('üõ†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –º–æ–¥—É–ª—å prompts-debug.js –∑–∞–≥—Ä—É–∂–µ–Ω');

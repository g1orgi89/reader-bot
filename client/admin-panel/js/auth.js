/**
 * –ú–æ–¥—É–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
 */

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
const AUTH_CONFIG = {
    // –î–µ–º–æ-–ª–æ–≥–∏–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    DEMO_CREDENTIALS: {
        username: 'anna',
        password: 'reader2025'
    },
    
    // –ö–ª—é—á–∏ –¥–ª—è localStorage
    STORAGE_KEYS: {
        TOKEN: 'reader_admin_token',
        USER: 'reader_admin_user',
        EXPIRES: 'reader_admin_expires'
    },
    
    // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏ (24 —á–∞—Å–∞)
    SESSION_DURATION: 24 * 60 * 60 * 1000,
    
    // –°—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–µ —Ç—Ä–µ–±—É—é—â–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    PUBLIC_PAGES: ['login.html']
};

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 */
class AuthManager {
    constructor() {
        this.currentUser = null;
        this.token = null;
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    init() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const currentPage = window.location.pathname.split('/').pop() || 'index.html';
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø—É–±–ª–∏—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        if (AUTH_CONFIG.PUBLIC_PAGES.includes(currentPage)) {
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        this.checkSavedSession();
        
        // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
        if (!this.isAuthenticated()) {
            this.redirectToLogin();
            return;
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.setupAuthenticatedUI();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
     */
    checkSavedSession() {
        try {
            const token = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.TOKEN);
            const user = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.USER);
            const expires = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.EXPIRES);

            if (token && user && expires) {
                const expirationTime = parseInt(expires, 10);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è
                if (Date.now() < expirationTime) {
                    this.token = token;
                    this.currentUser = JSON.parse(user);
                    console.log('üìñ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', this.currentUser.username);
                    return true;
                } else {
                    console.log('üìñ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞');
                    this.clearSession();
                }
            }
        } catch (error) {
            console.error('üìñ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
            this.clearSession();
        }
        
        return false;
    }

    /**
     * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async login(username, password) {
        try {
            console.log('üìñ –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', username);
            
            // –î–µ–º–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É)
            if (this.validateDemoCredentials(username, password)) {
                // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω
                const user = {
                    username: username,
                    displayName: '–ê–Ω–Ω–∞ –ë—É—Å–µ–ª',
                    role: 'admin',
                    permissions: ['read', 'write', 'admin']
                };
                
                const token = this.generateToken(user);
                const expires = Date.now() + AUTH_CONFIG.SESSION_DURATION;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
                this.saveSession(token, user, expires);
                
                console.log('üìñ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', user.displayName);
                return { success: true, user };
            } else {
                console.log('üìñ –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                return { success: false, error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' };
            }
        } catch (error) {
            console.error('üìñ –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            return { success: false, error: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' };
        }
    }

    /**
     * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    logout() {
        console.log('üìñ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
        this.clearSession();
        this.redirectToLogin();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    isAuthenticated() {
        return this.token !== null && this.currentUser !== null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getCurrentUser() {
        return this.currentUser;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
     */
    getToken() {
        return this.token;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–º–æ-—É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    validateDemoCredentials(username, password) {
        return username === AUTH_CONFIG.DEMO_CREDENTIALS.username && 
               password === AUTH_CONFIG.DEMO_CREDENTIALS.password;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ (–¥–µ–º–æ-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
     */
    generateToken(user) {
        const timestamp = Date.now();
        const randomStr = Math.random().toString(36).substring(2);
        return `reader_${timestamp}_${randomStr}`;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
     */
    saveSession(token, user, expires) {
        try {
            localStorage.setItem(AUTH_CONFIG.STORAGE_KEYS.TOKEN, token);
            localStorage.setItem(AUTH_CONFIG.STORAGE_KEYS.USER, JSON.stringify(user));
            localStorage.setItem(AUTH_CONFIG.STORAGE_KEYS.EXPIRES, expires.toString());
            
            this.token = token;
            this.currentUser = user;
        } catch (error) {
            console.error('üìñ –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
     */
    clearSession() {
        localStorage.removeItem(AUTH_CONFIG.STORAGE_KEYS.TOKEN);
        localStorage.removeItem(AUTH_CONFIG.STORAGE_KEYS.USER);
        localStorage.removeItem(AUTH_CONFIG.STORAGE_KEYS.EXPIRES);
        
        this.token = null;
        this.currentUser = null;
    }

    /**
     * –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
     */
    redirectToLogin() {
        const currentPage = window.location.pathname.split('/').pop();
        if (currentPage !== 'login.html') {
            window.location.href = 'login.html';
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    setupAuthenticatedUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        const usernameElement = document.getElementById('admin-username');
        if (usernameElement && this.currentUser) {
            usernameElement.textContent = this.currentUser.displayName;
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
        const logoutBtn = document.getElementById('logout-btn');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.logout();
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    getApiHeaders() {
        const headers = {
            'Content-Type': 'application/json'
        };
        
        if (this.token) {
            headers['Authorization'] = `Bearer ${this.token}`;
        }
        
        return headers;
    }

    /**
     * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è fetch —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
     */
    async authenticatedFetch(url, options = {}) {
        const defaultOptions = {
            headers: this.getApiHeaders(),
            ...options
        };

        try {
            const response = await fetch(url, defaultOptions);
            
            // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 401, –∑–Ω–∞—á–∏—Ç —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫
            if (response.status === 401) {
                console.log('üìñ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
                this.clearSession();
                this.redirectToLogin();
                return null;
            }
            
            return response;
        } catch (error) {
            console.error('üìñ –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞:', error);
            throw error;
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const authManager = new AuthManager();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.authManager = authManager;

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
function checkAuthStatus() {
    return authManager.isAuthenticated();
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function getCurrentUser() {
    return authManager.getCurrentUser();
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞
 */
function logout() {
    authManager.logout();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { AuthManager, authManager };
}
/**
 * Knowledge Base Management - –£–ü–†–û–©–ï–ù–û: –°–ª–µ–¥—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É dashboard.js –∏ users.html
 * @file client/admin-panel/js/knowledge.js
 * üìñ Adapted for Reader Bot project with WORKING authentication
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentPage = 1;
let itemsPerPage = 10;
let totalItems = 0;
let currentCategory = '';
let currentTags = '';
let isLoading = false;

// Constants
const CATEGORIES = [
    'books',
    'psychology', 
    'self-development',
    'relationships',
    'productivity',
    'mindfulness',
    'creativity',
    'general'
];

/**
 * –£–ü–†–û–©–ï–ù–û: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —Å —Ç–æ–∫–µ–Ω–æ–º (–∫–∞–∫ –≤ users.html)
 */
async function makeAuthenticatedRequest(url, options = {}) {
    const token = localStorage.getItem('reader_admin_token');
    
    if (!token) {
        console.warn('üìñ No token available, redirecting to login');
        window.location.href = 'login.html';
        return null;
    }

    const defaultOptions = {
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
        }
    };

    const finalOptions = {
        ...defaultOptions,
        ...options,
        headers: {
            ...defaultOptions.headers,
            ...options.headers
        }
    };

    try {
        const response = await fetch(url, finalOptions);
        
        if (response.status === 401) {
            console.warn('üìñ Authentication failed, redirecting to login');
            localStorage.removeItem('reader_admin_token');
            localStorage.removeItem('reader_admin_user');
            window.location.href = 'login.html';
            return null;
        }

        return response;
    } catch (error) {
        console.error('üìñ Request error:', error);
        throw error;
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
async function loadDocuments() {
    if (isLoading) return;
    
    try {
        isLoading = true;
        console.log('üìñ Loading documents...', {
            page: currentPage,
            limit: itemsPerPage,
            category: currentCategory,
            tags: currentTags
        });

        showLoading('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');

        // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const params = new URLSearchParams({
            page: currentPage,
            limit: itemsPerPage
        });

        if (currentCategory) {
            params.append('category', currentCategory);
        }

        if (currentTags) {
            params.append('tags', currentTags);
        }

        const url = `/api/knowledge?${params.toString()}`;
        const response = await makeAuthenticatedRequest(url);
        
        if (!response) return;

        const data = await response.json();
        console.log('üìñ Documents data received:', data);

        if (data.success) {
            displayDocuments(data.data);
            updatePagination(data.pagination);
        } else {
            throw new Error(data.error || 'Failed to load documents');
        }
    } catch (error) {
        console.error('üìñ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ' + error.message);
    } finally {
        isLoading = false;
        hideLoading();
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ RAG
 */
async function loadRAGStats() {
    try {
        console.log('üìñ Loading RAG statistics...');

        const response = await makeAuthenticatedRequest('/api/knowledge/stats');
        
        if (!response) return;

        const data = await response.json();
        console.log('üìñ Stats data received:', data);

        if (data.success) {
            updateStatsDisplay(data.data);
        } else {
            throw new Error(data.error || 'Failed to load statistics');
        }
    } catch (error) {
        console.error('üìñ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ RAG:', error);
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        updateStatsDisplay({
            total: 0,
            published: 0,
            draft: 0,
            byLanguage: [],
            lastUpdated: new Date().toISOString()
        });
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
 */
function displayDocuments(documents) {
    console.log('üìñ Displaying documents:', documents.length);
    
    const tbody = document.querySelector('#documents-table tbody');
    if (!tbody) {
        console.error('üìñ Documents table body not found');
        return;
    }

    if (!documents || documents.length === 0) {
        tbody.innerHTML = '<tr><td colspan="6" class="text-center">–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
        return;
    }

    tbody.innerHTML = documents.map(doc => `
        <tr>
            <td>
                <div class="doc-title">${escapeHtml(doc.title)}</div>
                <div class="doc-id text-muted small">ID: ${doc.id || doc._id}</div>
            </td>
            <td><span class="badge badge-secondary">${escapeHtml(doc.category || 'general')}</span></td>
            <td><span class="badge badge-info">${escapeHtml(doc.language || 'auto')}</span></td>
            <td>
                ${doc.tags && doc.tags.length > 0 
                    ? doc.tags.map(tag => `<span class="badge badge-light">${escapeHtml(tag)}</span>`).join(' ')
                    : '<span class="text-muted">–ù–µ—Ç —Ç–µ–≥–æ–≤</span>'
                }
            </td>
            <td>
                <span class="badge ${doc.status === 'published' ? 'badge-success' : 'badge-warning'}">
                    ${doc.status === 'published' ? '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω' : '–ß–µ—Ä–Ω–æ–≤–∏–∫'}
                </span>
            </td>
            <td>
                <div class="btn-group btn-group-sm">
                    <button class="btn btn-outline-primary" onclick="viewDocument('${doc.id || doc._id}')">
                        üëÅÔ∏è
                    </button>
                    <button class="btn btn-outline-secondary" onclick="editDocument('${doc.id || doc._id}')">
                        ‚úèÔ∏è
                    </button>
                    <button class="btn btn-outline-danger" onclick="deleteDocument('${doc.id || doc._id}', '${escapeHtml(doc.title)}')">
                        üóëÔ∏è
                    </button>
                </div>
            </td>
        </tr>
    `).join('');
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function updateStatsDisplay(stats) {
    console.log('üìñ Updating stats display:', stats);
    
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalEl = document.getElementById('total-docs');
        if (totalEl) totalEl.textContent = stats.total || 0;

        const publishedEl = document.getElementById('published-docs');
        if (publishedEl) publishedEl.textContent = stats.published || 0;

        const draftEl = document.getElementById('draft-docs');
        if (draftEl) draftEl.textContent = stats.draft || 0;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–∞—Ö
        const languageStatsEl = document.getElementById('language-stats');
        if (languageStatsEl && stats.byLanguage) {
            if (stats.byLanguage.length > 0) {
                languageStatsEl.innerHTML = stats.byLanguage.map(lang => 
                    `<div class="language-stat">
                        <span class="badge badge-info">${escapeHtml(lang._id || 'Unknown')}</span> 
                        <span>${lang.count}</span>
                    </div>`
                ).join('');
            } else {
                languageStatsEl.innerHTML = '<div class="text-muted">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —è–∑—ã–∫–∞—Ö</div>';
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const lastUpdatedEl = document.getElementById('rag-last-indexed');
        if (lastUpdatedEl && stats.lastUpdated) {
            const date = new Date(stats.lastUpdated);
            lastUpdatedEl.textContent = date.toLocaleString('ru-RU');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if (stats.vectorStore) {
            const vectorStatsEl = document.getElementById('vector-store-stats');
            if (vectorStatsEl) {
                vectorStatsEl.innerHTML = `
                    <div class="vector-stat">
                        <span class="text-muted">–°—Ç–∞—Ç—É—Å:</span> 
                        <span class="badge ${stats.vectorStore.status === 'ok' ? 'badge-success' : 'badge-warning'}">
                            ${stats.vectorStore.status}
                        </span>
                    </div>
                    <div class="vector-stat">
                        <span class="text-muted">–î–æ–∫—É–º–µ–Ω—Ç–æ–≤:</span> 
                        <span>${stats.vectorStore.documentsCount || 0}</span>
                    </div>
                    <div class="vector-stat">
                        <span class="text-muted">–ß–∞–Ω–∫–æ–≤:</span> 
                        <span>${stats.vectorStore.chunksCount || 0}</span>
                    </div>
                `;
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞–Ω–∫–∏–Ω–≥–µ
        if (stats.chunkingEnabled !== undefined) {
            const chunkingEl = document.getElementById('chunking-status');
            if (chunkingEl) {
                chunkingEl.innerHTML = `
                    <span class="badge ${stats.chunkingEnabled ? 'badge-success' : 'badge-secondary'}">
                        –ß–∞–Ω–∫–∏–Ω–≥: ${stats.chunkingEnabled ? '–í–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}
                    </span>
                `;
            }
        }

    } catch (error) {
        console.error('üìñ Error updating stats display:', error);
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 */
function updatePagination(pagination) {
    if (!pagination) return;

    console.log('üìñ Updating pagination:', pagination);

    totalItems = pagination.total || 0;
    const totalPages = Math.ceil(totalItems / itemsPerPage);

    const paginationEl = document.getElementById('pagination');
    if (!paginationEl) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    const resultsInfoEl = document.getElementById('results-info');
    if (resultsInfoEl) {
        const startItem = ((currentPage - 1) * itemsPerPage) + 1;
        const endItem = Math.min(currentPage * itemsPerPage, totalItems);
        resultsInfoEl.textContent = `–ü–æ–∫–∞–∑–∞–Ω–æ ${startItem}-${endItem} –∏–∑ ${totalItems}`;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if (totalPages <= 1) {
        paginationEl.innerHTML = '';
        return;
    }

    let paginationHTML = '';

    // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
    paginationHTML += `
        <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
            <a class="page-link" href="#" onclick="changePage(${currentPage - 1})" 
               ${currentPage === 1 ? 'tabindex="-1" aria-disabled="true"' : ''}>
                –ü—Ä–µ–¥—ã–¥—É—â–∞—è
            </a>
        </li>
    `;

    // –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    for (let i = 1; i <= totalPages; i++) {
        if (i === 1 || i === totalPages || (i >= currentPage - 2 && i <= currentPage + 2)) {
            paginationHTML += `
                <li class="page-item ${i === currentPage ? 'active' : ''}">
                    <a class="page-link" href="#" onclick="changePage(${i})">${i}</a>
                </li>
            `;
        } else if (i === currentPage - 3 || i === currentPage + 3) {
            paginationHTML += '<li class="page-item disabled"><span class="page-link">...</span></li>';
        }
    }

    // –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
    paginationHTML += `
        <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
            <a class="page-link" href="#" onclick="changePage(${currentPage + 1})"
               ${currentPage === totalPages ? 'tabindex="-1" aria-disabled="true"' : ''}>
                –°–ª–µ–¥—É—é—â–∞—è
            </a>
        </li>
    `;

    paginationEl.innerHTML = paginationHTML;
}

/**
 * –°–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
function changePage(page) {
    if (page < 1 || page === currentPage || isLoading) return;
    
    const totalPages = Math.ceil(totalItems / itemsPerPage);
    if (page > totalPages) return;

    currentPage = page;
    loadDocuments();
}

/**
 * –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 */
async function searchDocuments() {
    const searchInput = document.getElementById('search-input');
    const searchQuery = searchInput ? searchInput.value.trim() : '';

    if (!searchQuery) {
        showError('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞');
        return;
    }

    try {
        isLoading = true;
        showLoading('–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');

        console.log('üìñ Searching documents:', searchQuery);

        const params = new URLSearchParams({
            q: searchQuery,
            page: 1,
            limit: itemsPerPage
        });

        if (currentCategory) {
            params.append('category', currentCategory);
        }

        if (currentTags) {
            params.append('tags', currentTags);
        }

        const response = await makeAuthenticatedRequest(`/api/knowledge/search?${params.toString()}`);
        
        if (!response) return;

        const data = await response.json();
        console.log('üìñ Search results:', data);

        if (data.success) {
            displayDocuments(data.data);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞
            const resultsInfoEl = document.getElementById('results-info');
            if (resultsInfoEl) {
                resultsInfoEl.textContent = `–ù–∞–π–¥–µ–Ω–æ ${data.count || data.data.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}"`;
            }

            // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            const paginationEl = document.getElementById('pagination');
            if (paginationEl) {
                paginationEl.innerHTML = '';
            }
        } else {
            throw new Error(data.error || 'Search failed');
        }
    } catch (error) {
        console.error('üìñ Search error:', error);
        showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ' + error.message);
    } finally {
        isLoading = false;
        hideLoading();
    }
}

/**
 * –°–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
 */
function resetSearch() {
    // –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    const searchInput = document.getElementById('search-input');
    if (searchInput) {
        searchInput.value = '';
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    const categoryFilter = document.getElementById('category-filter');
    if (categoryFilter) {
        categoryFilter.value = '';
    }

    const tagsFilter = document.getElementById('tags-filter');
    if (tagsFilter) {
        tagsFilter.value = '';
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    currentPage = 1;
    currentCategory = '';
    currentTags = '';

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    loadDocuments();
}

/**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
 */
function applyFilters() {
    const categoryFilter = document.getElementById('category-filter');
    const tagsFilter = document.getElementById('tags-filter');

    currentCategory = categoryFilter ? categoryFilter.value : '';
    currentTags = tagsFilter ? tagsFilter.value : '';
    currentPage = 1;

    console.log('üìñ Applying filters:', {
        category: currentCategory,
        tags: currentTags
    });

    loadDocuments();
}

/**
 * –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
async function viewDocument(documentId) {
    try {
        console.log('üìñ Viewing document:', documentId);
        showLoading('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...');

        const response = await makeAuthenticatedRequest(`/api/knowledge/${documentId}`);
        
        if (!response) return;

        const data = await response.json();

        if (data.success) {
            showDocumentModal(data.data, 'view');
        } else {
            throw new Error(data.error || 'Failed to load document');
        }
    } catch (error) {
        console.error('üìñ Error viewing document:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ' + error.message);
    } finally {
        hideLoading();
    }
}

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
async function editDocument(documentId) {
    try {
        console.log('üìñ Editing document:', documentId);
        showLoading('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');

        const response = await makeAuthenticatedRequest(`/api/knowledge/${documentId}`);
        
        if (!response) return;

        const data = await response.json();

        if (data.success) {
            showDocumentModal(data.data, 'edit');
        } else {
            throw new Error(data.error || 'Failed to load document for editing');
        }
    } catch (error) {
        console.error('üìñ Error loading document for editing:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ' + error.message);
    } finally {
        hideLoading();
    }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
async function deleteDocument(documentId, title) {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç "${title}"?`)) {
        return;
    }

    try {
        console.log('üìñ Deleting document:', documentId);
        showLoading('–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...');

        const response = await makeAuthenticatedRequest(`/api/knowledge/${documentId}`, {
            method: 'DELETE'
        });
        
        if (!response) return;

        const data = await response.json();

        if (data.success) {
            showSuccess('–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
            loadDocuments(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        } else {
            throw new Error(data.error || 'Failed to delete document');
        }
    } catch (error) {
        console.error('üìñ Error deleting document:', error);
        showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: ' + error.message);
    } finally {
        hideLoading();
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
function showDocumentModal(document, mode = 'view') {
    console.log('üìñ Showing document modal:', mode, document.title);

    const modal = document.getElementById('document-modal');
    if (!modal) return;

    const modalTitle = modal.querySelector('.modal-title');
    const modalBody = modal.querySelector('.modal-body');
    const modalFooter = modal.querySelector('.modal-footer');

    if (modalTitle) {
        modalTitle.textContent = mode === 'edit' ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞' : '–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞';
    }

    if (modalBody) {
        if (mode === 'view') {
            modalBody.innerHTML = `
                <div class="document-view">
                    <h4>${escapeHtml(document.title)}</h4>
                    <div class="document-meta mb-3">
                        <span class="badge badge-secondary">${escapeHtml(document.category || 'general')}</span>
                        <span class="badge badge-info">${escapeHtml(document.language || 'auto')}</span>
                        <span class="badge badge-${document.status === 'published' ? 'success' : 'warning'}">
                            ${document.status === 'published' ? '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω' : '–ß–µ—Ä–Ω–æ–≤–∏–∫'}
                        </span>
                    </div>
                    ${document.tags && document.tags.length > 0 ? `
                        <div class="document-tags mb-3">
                            <strong>–¢–µ–≥–∏:</strong>
                            ${document.tags.map(tag => `<span class="badge badge-light">${escapeHtml(tag)}</span>`).join(' ')}
                        </div>
                    ` : ''}
                    <div class="document-content">
                        <strong>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</strong>
                        <div class="mt-2 p-3 border rounded bg-light">
                            ${escapeHtml(document.content).replace(/\n/g, '<br>')}
                        </div>
                    </div>
                </div>
            `;
        } else {
            modalBody.innerHTML = `
                <form id="edit-document-form">
                    <input type="hidden" id="edit-doc-id" value="${document.id || document._id}">
                    
                    <div class="form-group">
                        <label for="edit-title">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                        <input type="text" class="form-control" id="edit-title" value="${escapeHtml(document.title)}" required>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="edit-category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                            <select class="form-control" id="edit-category" required>
                                ${CATEGORIES.map(cat => 
                                    `<option value="${cat}" ${document.category === cat ? 'selected' : ''}>${cat}</option>`
                                ).join('')}
                            </select>
                        </div>
                        <div class="form-group col-md-6">
                            <label for="edit-language">–Ø–∑—ã–∫</label>
                            <select class="form-control" id="edit-language">
                                <option value="auto" ${(document.language || 'auto') === 'auto' ? 'selected' : ''}>–ê–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</option>
                                <option value="ru" ${document.language === 'ru' ? 'selected' : ''}>–†—É—Å—Å–∫–∏–π</option>
                                <option value="en" ${document.language === 'en' ? 'selected' : ''}>–ê–Ω–≥–ª–∏–π—Å–∫–∏–π</option>
                                <option value="es" ${document.language === 'es' ? 'selected' : ''}>–ò—Å–ø–∞–Ω—Å–∫–∏–π</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="edit-tags">–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</label>
                        <input type="text" class="form-control" id="edit-tags" 
                               value="${document.tags ? document.tags.join(', ') : ''}">
                    </div>
                    
                    <div class="form-group">
                        <label for="edit-status">–°—Ç–∞—Ç—É—Å</label>
                        <select class="form-control" id="edit-status">
                            <option value="draft" ${document.status === 'draft' ? 'selected' : ''}>–ß–µ—Ä–Ω–æ–≤–∏–∫</option>
                            <option value="published" ${document.status === 'published' ? 'selected' : ''}>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="edit-content">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</label>
                        <textarea class="form-control" id="edit-content" rows="10" required>${escapeHtml(document.content)}</textarea>
                    </div>
                </form>
            `;
        }
    }

    if (modalFooter) {
        if (mode === 'view') {
            modalFooter.innerHTML = `
                <button type="button" class="btn btn-secondary" data-dismiss="modal">–ó–∞–∫—Ä—ã—Ç—å</button>
                <button type="button" class="btn btn-primary" onclick="editDocument('${document.id || document._id}')">
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
            `;
        } else {
            modalFooter.innerHTML = `
                <button type="button" class="btn btn-secondary" data-dismiss="modal">–û—Ç–º–µ–Ω–∞</button>
                <button type="button" class="btn btn-primary" onclick="saveDocument()">
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                </button>
            `;
        }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    $(modal).modal('show');
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
async function saveDocument() {
    try {
        const form = document.getElementById('edit-document-form');
        if (!form) return;

        const documentId = document.getElementById('edit-doc-id').value;
        const title = document.getElementById('edit-title').value.trim();
        const category = document.getElementById('edit-category').value;
        const language = document.getElementById('edit-language').value;
        const tags = document.getElementById('edit-tags').value.trim();
        const status = document.getElementById('edit-status').value;
        const content = document.getElementById('edit-content').value.trim();

        if (!title || !content || !category) {
            showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return;
        }

        console.log('üìñ Saving document:', documentId);
        showLoading('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...');

        const updateData = {
            title,
            category,
            language,
            status,
            content,
            tags: tags ? tags.split(',').map(tag => tag.trim()).filter(tag => tag) : []
        };

        const response = await makeAuthenticatedRequest(`/api/knowledge/${documentId}`, {
            method: 'PUT',
            body: JSON.stringify(updateData)
        });
        
        if (!response) return;

        const data = await response.json();

        if (data.success) {
            showSuccess('–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
            $('#document-modal').modal('hide');
            loadDocuments(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        } else {
            throw new Error(data.error || 'Failed to update document');
        }
    } catch (error) {
        console.error('üìñ Error saving document:', error);
        showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: ' + error.message);
    } finally {
        hideLoading();
    }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
function createNewDocument() {
    console.log('üìñ Creating new document');

    const modal = document.getElementById('document-modal');
    if (!modal) return;

    const modalTitle = modal.querySelector('.modal-title');
    const modalBody = modal.querySelector('.modal-body');
    const modalFooter = modal.querySelector('.modal-footer');

    if (modalTitle) {
        modalTitle.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞';
    }

    if (modalBody) {
        modalBody.innerHTML = `
            <form id="create-document-form">
                <div class="form-group">
                    <label for="new-title">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                    <input type="text" class="form-control" id="new-title" required>
                </div>
                
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label for="new-category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                        <select class="form-control" id="new-category" required>
                            ${CATEGORIES.map(cat => 
                                `<option value="${cat}">${cat}</option>`
                            ).join('')}
                        </select>
                    </div>
                    <div class="form-group col-md-6">
                        <label for="new-language">–Ø–∑—ã–∫</label>
                        <select class="form-control" id="new-language">
                            <option value="auto" selected>–ê–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</option>
                            <option value="ru">–†—É—Å—Å–∫–∏–π</option>
                            <option value="en">–ê–Ω–≥–ª–∏–π—Å–∫–∏–π</option>
                            <option value="es">–ò—Å–ø–∞–Ω—Å–∫–∏–π</option>
                        </select>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="new-tags">–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</label>
                    <input type="text" class="form-control" id="new-tags">
                </div>
                
                <div class="form-group">
                    <label for="new-status">–°—Ç–∞—Ç—É—Å</label>
                    <select class="form-control" id="new-status">
                        <option value="draft" selected>–ß–µ—Ä–Ω–æ–≤–∏–∫</option>
                        <option value="published">–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="new-content">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</label>
                    <textarea class="form-control" id="new-content" rows="10" required></textarea>
                </div>
            </form>
        `;
    }

    if (modalFooter) {
        modalFooter.innerHTML = `
            <button type="button" class="btn btn-secondary" data-dismiss="modal">–û—Ç–º–µ–Ω–∞</button>
            <button type="button" class="btn btn-primary" onclick="saveNewDocument()">
                –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
            </button>
        `;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    $(modal).modal('show');
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
async function saveNewDocument() {
    try {
        const form = document.getElementById('create-document-form');
        if (!form) return;

        const title = document.getElementById('new-title').value.trim();
        const category = document.getElementById('new-category').value;
        const language = document.getElementById('new-language').value;
        const tags = document.getElementById('new-tags').value.trim();
        const status = document.getElementById('new-status').value;
        const content = document.getElementById('new-content').value.trim();

        if (!title || !content || !category) {
            showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return;
        }

        console.log('üìñ Creating new document:', title);
        showLoading('–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...');

        const newDocument = {
            title,
            category,
            language,
            status,
            content,
            tags: tags ? tags.split(',').map(tag => tag.trim()).filter(tag => tag) : []
        };

        const response = await makeAuthenticatedRequest('/api/knowledge', {
            method: 'POST',
            body: JSON.stringify(newDocument)
        });
        
        if (!response) return;

        const data = await response.json();

        if (data.success) {
            showSuccess('–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
            $('#document-modal').modal('hide');
            currentPage = 1; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            loadDocuments(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            loadRAGStats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        } else {
            throw new Error(data.error || 'Failed to create document');
        }
    } catch (error) {
        console.error('üìñ Error creating document:', error);
        showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: ' + error.message);
    } finally {
        hideLoading();
    }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
 */
async function syncVectorStore() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º? –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.')) {
        return;
    }

    try {
        console.log('üìñ Starting vector store synchronization');
        showLoading('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º...');

        const response = await makeAuthenticatedRequest('/api/knowledge/sync-vector-store', {
            method: 'POST',
            body: JSON.stringify({
                enableChunking: true,
                chunkSize: 500,
                overlap: 100,
                preserveParagraphs: true
            })
        });
        
        if (!response) return;

        const data = await response.json();

        if (data.success) {
            showSuccess(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${data.processed} –∏–∑ ${data.totalDocuments} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
            loadRAGStats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        } else {
            throw new Error(data.error || 'Synchronization failed');
        }
    } catch (error) {
        console.error('üìñ Error syncing vector store:', error);
        showError('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ' + error.message);
    } finally {
        hideLoading();
    }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –ø–æ–∏—Å–∫–∞
 */
async function testRAGSearch() {
    const searchQuery = prompt('–í–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è RAG –ø–æ–∏—Å–∫–∞:');
    if (!searchQuery) return;

    try {
        console.log('üìñ Testing RAG search:', searchQuery);
        showLoading('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –ø–æ–∏—Å–∫–∞...');

        const response = await makeAuthenticatedRequest('/api/knowledge/test-search', {
            method: 'POST',
            body: JSON.stringify({
                query: searchQuery,
                limit: 5,
                returnChunks: true
            })
        });
        
        if (!response) return;

        const data = await response.json();

        if (data.success) {
            showRAGTestResults(data.data);
        } else {
            throw new Error(data.error || 'RAG test failed');
        }
    } catch (error) {
        console.error('üìñ Error testing RAG search:', error);
        showError('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG: ' + error.message);
    } finally {
        hideLoading();
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG
 */
function showRAGTestResults(results) {
    console.log('üìñ Showing RAG test results:', results);

    const modal = document.getElementById('rag-test-modal');
    if (!modal) {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        document.body.insertAdjacentHTML('beforeend', `
            <div class="modal fade" id="rag-test-modal" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã RAG –ø–æ–∏—Å–∫–∞</h5>
                            <button type="button" class="close" data-dismiss="modal">
                                <span>&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div id="rag-test-content"></div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">–ó–∞–∫—Ä—ã—Ç—å</button>
                        </div>
                    </div>
                </div>
            </div>
        `);
    }

    const contentEl = document.getElementById('rag-test-content');
    if (contentEl) {
        contentEl.innerHTML = `
            <div class="rag-test-results">
                <div class="test-info mb-3">
                    <strong>–ó–∞–ø—Ä–æ—Å:</strong> ${escapeHtml(results.query)}<br>
                    <strong>–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</strong> ${results.totalFound}<br>
                    <strong>–¢–∏–ø –ø–æ–∏—Å–∫–∞:</strong> ${results.searchType}<br>
                    <strong>–ß–∞–Ω–∫–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω:</strong> ${results.chunkingUsed ? '–î–∞' : '–ù–µ—Ç'}
                </div>
                
                ${results.statistics ? `
                    <div class="test-stats mb-3">
                        <strong>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</strong><br>
                        <small>
                            –°—Ä–µ–¥–Ω–∏–π score: ${results.statistics.averageScore}<br>
                            –î–∏–∞–ø–∞–∑–æ–Ω score: ${results.statistics.scoreRange ? `${results.statistics.scoreRange.min} - ${results.statistics.scoreRange.max}` : 'N/A'}<br>
                            –û–±—â–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${results.statistics.contentLengths.total} —Å–∏–º–≤–æ–ª–æ–≤
                        </small>
                    </div>
                ` : ''}
                
                <div class="search-results">
                    ${results.results.map((result, index) => `
                        <div class="result-item mb-3 p-3 border rounded">
                            <div class="result-header">
                                <strong>${escapeHtml(result.title)}</strong>
                                <span class="badge badge-primary ml-2">Score: ${result.score.toFixed(4)}</span>
                                ${result.isChunk ? '<span class="badge badge-info ml-1">–ß–∞–Ω–∫</span>' : ''}
                            </div>
                            <div class="result-meta text-muted small">
                                –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${escapeHtml(result.category)} | 
                                –Ø–∑—ã–∫: ${escapeHtml(result.language)}
                                ${result.chunkInfo ? ` | –ß–∞–Ω–∫ ${result.chunkInfo.chunkIndex + 1}` : ''}
                            </div>
                            <div class="result-content mt-2">
                                <small>${escapeHtml(result.content.substring(0, 300))}${result.content.length > 300 ? '...' : ''}</small>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }

    $('#rag-test-modal').modal('show');
}

// Utility functions
function escapeHtml(text) {
    if (typeof text !== 'string') return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function showLoading(message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    const loadingEl = document.getElementById('loading-indicator');
    if (loadingEl) {
        loadingEl.textContent = message;
        loadingEl.style.display = 'block';
    }
}

function hideLoading() {
    const loadingEl = document.getElementById('loading-indicator');
    if (loadingEl) {
        loadingEl.style.display = 'none';
    }
}

function showError(message) {
    console.error('üìñ Error:', message);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (typeof showNotification === 'function') {
        showNotification('error', message);
    } else {
        alert('–û—à–∏–±–∫–∞: ' + message);
    }
}

function showSuccess(message) {
    console.log('üìñ Success:', message);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (typeof showNotification === 'function') {
        showNotification('success', message);
    } else {
        alert('–£—Å–ø–µ—Ö: ' + message);
    }
}

/**
 * –£–ü–†–û–©–ï–ù–û: –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è
 */
async function initKnowledgePage() {
    try {
        console.log('üìñ Initializing knowledge page...');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const categoryFilter = document.getElementById('category-filter');
        if (categoryFilter) {
            categoryFilter.innerHTML = '<option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>' +
                CATEGORIES.map(cat => `<option value="${cat}">${cat}</option>`).join('');
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await Promise.all([
            loadDocuments(),
            loadRAGStats()
        ]);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        setupEventListeners();

        console.log('üìñ Knowledge page initialized successfully');
    } catch (error) {
        console.error('üìñ Error initializing knowledge page:', error);
        showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ' + error.message);
    }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventListeners() {
    // –ü–æ–∏—Å–∫
    const searchInput = document.getElementById('search-input');
    const searchBtn = document.getElementById('search-btn');

    if (searchInput) {
        searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchDocuments();
            }
        });
    }

    if (searchBtn) {
        searchBtn.addEventListener('click', searchDocuments);
    }

    // –°–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞
    const resetBtn = document.getElementById('reset-search-btn');
    if (resetBtn) {
        resetBtn.addEventListener('click', resetSearch);
    }

    // –§–∏–ª—å—Ç—Ä—ã
    const categoryFilter = document.getElementById('category-filter');
    const tagsFilter = document.getElementById('tags-filter');

    if (categoryFilter) {
        categoryFilter.addEventListener('change', applyFilters);
    }

    if (tagsFilter) {
        tagsFilter.addEventListener('change', applyFilters);
    }

    // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    const newDocBtn = document.getElementById('new-document-btn');
    if (newDocBtn) {
        newDocBtn.addEventListener('click', createNewDocument);
    }

    const syncBtn = document.getElementById('sync-vector-btn');
    if (syncBtn) {
        syncBtn.addEventListener('click', syncVectorStore);
    }

    const testRAGBtn = document.getElementById('test-rag-btn');
    if (testRAGBtn) {
        testRAGBtn.addEventListener('click', testRAGSearch);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.loadDocuments = loadDocuments;
window.searchDocuments = searchDocuments;
window.resetSearch = resetSearch;
window.applyFilters = applyFilters;
window.changePage = changePage;
window.viewDocument = viewDocument;
window.editDocument = editDocument;
window.deleteDocument = deleteDocument;
window.saveDocument = saveDocument;
window.createNewDocument = createNewDocument;
window.saveNewDocument = saveNewDocument;
window.syncVectorStore = syncVectorStore;
window.testRAGSearch = testRAGSearch;
window.initKnowledgePage = initKnowledgePage;

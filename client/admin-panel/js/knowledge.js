/**
 * knowledge.js - —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∏–±–Ω–æ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –¥–ª—è Shrooms AI Support Bot
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Qdrant,
 * —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ RAG-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.
 * 
 * @fileoverview –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∏–±–Ω–æ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –∏ –≤–µ–∫—Ç–æ—Ä–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–ø–æ—Ä –º—É–¥—Ä–æ—Å—Ç–∏
 * @author Shrooms Development Team
 */

/**
 * @typedef {Object} KnowledgeDocument
 * @property {string} [id] - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –º–∏—Ü–µ–ª–∏–∏
 * @property {string} title - –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–æ—Ä—ã –∑–Ω–∞–Ω–∏–π)
 * @property {string} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
 * @property {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ (general|user-guide|tokenomics|technical|troubleshooting)
 * @property {string} language - –Ø–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (none|en|es|ru)
 * @property {string[]} tags - –ú–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @property {string} [status] - –°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ (published|draft|archived)
 * @property {string} [createdAt] - –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @property {string} [updatedAt] - –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @property {string} [authorId] - ID –∞–≤—Ç–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */

/**
 * @typedef {Object} DocumentFilter
 * @property {string} [category] - –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ('all' –¥–ª—è –≤—Å–µ—Ö)
 * @property {string} [language] - –§–∏–ª—å—Ç—Ä –ø–æ —è–∑—ã–∫—É ('all' –¥–ª—è –≤—Å–µ—Ö)
 * @property {string} [search] - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @property {number} [page] - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 * @property {number} [limit] - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */

/**
 * @typedef {Object} ApiResponse
 * @property {boolean} success - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
 * @property {*} [data] - –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
 * @property {Object} [error] - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
 * @property {string} [error.message] - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @property {string} [error.code] - –ö–æ–¥ –æ—à–∏–±–∫–∏
 */

/**
 * @typedef {Object} RAGStats
 * @property {number} total - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * @property {number} published - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * @property {number} draft - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤
 * @property {Array} byLanguage - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º
 * @property {Array} byCategory - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 * @property {Array} recentlyUpdated - –ù–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
 * @property {string} lastUpdated - –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
 */
const KNOWLEDGE_CONFIG = {
  /** @type {string} –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ */
  API_BASE: '/api/knowledge',
  
  /** @type {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */
  DEFAULT_PAGE_SIZE: 10,
  
  /** @type {number} –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö */
  MAX_DOCUMENT_SIZE: 50000,
  
  /** @type {Object<string, string>} –ü–µ—Ä–µ–≤–æ–¥—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π */
  CATEGORY_LABELS: {
    'general': '–û–±—â–∏–µ',
    'user-guide': '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ',
    'tokenomics': '–¢–æ–∫–µ–Ω–æ–º–∏–∫–∞', 
    'technical': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ',
    'troubleshooting': '–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º'
  },
  
  /** @type {Object<string, string>} –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —è–∑—ã–∫–æ–≤ */
  LANGUAGE_LABELS: {
    'none': 'ü§ñ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π',
    'en': 'üá∫üá∏ English',
    'es': 'üá™üá∏ Espa√±ol', 
    'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π'
  }
};

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
 */
const knowledgeState = {
  /** @type {KnowledgeDocument[]} –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã */
  documents: [],
  
  /** @type {DocumentFilter} –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã */
  currentFilters: {
    category: 'all',
    language: 'all',
    search: '',
    page: 1,
    limit: KNOWLEDGE_CONFIG.DEFAULT_PAGE_SIZE
  },
  
  /** @type {number} –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ */
  totalDocuments: 0,
  
  /** @type {boolean} –ò–¥–µ—Ç –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ */
  isLoading: false,
  
  /** @type {RAGStats|null} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAG */
  ragStats: null
};

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
function initKnowledgePage() {
  console.log('üçÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∏–±–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...');
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    initKnowledgeFilters();
    initDocumentEditor();
    initRAGControls();
    initPagination();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    loadDocuments();
    loadRAGStats();
    
    console.log('üçÑ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –≥–æ—Ç–æ–≤–∞ –∫ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—é –º—É–¥—Ä–æ—Å—Ç–∏!');
  } catch (error) {
    console.error('üçÑ –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:', error);
    showNotification('error', 'üçÑ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π');
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –ø–æ–∏—Å–∫–∞
 */
function initKnowledgeFilters() {
  console.log('üçÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≥—Ä–∏–±–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...');
  
  const categoryFilter = document.getElementById('category-filter');
  const languageFilter = document.getElementById('language-filter');
  const searchInput = document.getElementById('search-knowledge');
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (categoryFilter) {
    categoryFilter.addEventListener('change', () => {
      knowledgeState.currentFilters.category = categoryFilter.value;
      knowledgeState.currentFilters.page = 1; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      loadDocuments();
    });
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
  if (languageFilter) {
    languageFilter.addEventListener('change', () => {
      knowledgeState.currentFilters.language = languageFilter.value;
      knowledgeState.currentFilters.page = 1;
      loadDocuments();
    });
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  if (searchInput) {
    let searchTimeout;
    searchInput.addEventListener('input', () => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        knowledgeState.currentFilters.search = searchInput.value.trim();
        knowledgeState.currentFilters.page = 1;
        loadDocuments();
      }, 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ 500–º—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    });
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
 * @returns {Promise<void>}
 */
async function loadDocuments() {
  if (knowledgeState.isLoading) return;
  
  console.log('üçÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –≥—Ä–∏–±–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...');
  
  try {
    knowledgeState.isLoading = true;
    updateLoadingState(true);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const params = new URLSearchParams();
    
    if (knowledgeState.currentFilters.category && knowledgeState.currentFilters.category !== 'all') {
      params.append('category', knowledgeState.currentFilters.category);
    }
    
    if (knowledgeState.currentFilters.language && knowledgeState.currentFilters.language !== 'all') {
      params.append('language', knowledgeState.currentFilters.language);
    }
    
    if (knowledgeState.currentFilters.search) {
      params.append('search', knowledgeState.currentFilters.search);
    }
    
    params.append('page', knowledgeState.currentFilters.page.toString());
    params.append('limit', knowledgeState.currentFilters.limit.toString());
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await makeAuthenticatedRequest(`${KNOWLEDGE_CONFIG.API_BASE}?${params}`);
    
    if (response.success) {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ API
      knowledgeState.documents = response.data || [];
      knowledgeState.totalDocuments = response.pagination?.total || 0;
      
      renderDocumentsTable();
      updatePaginationInfo();
      updateRAGDocumentCount(knowledgeState.totalDocuments);
      
      console.log(`üçÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${knowledgeState.documents.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ ${knowledgeState.totalDocuments} –æ–±—â–∏—Ö`);
    } else {
      throw new Error(response.error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã');
    }
  } catch (error) {
    console.error('üçÑ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
    showNotification('error', `üçÑ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã: ${error.message}`);
    renderEmptyDocumentsTable();
  } finally {
    knowledgeState.isLoading = false;
    updateLoadingState(false);
  }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
 * @param {boolean} isLoading - –ò–¥–µ—Ç –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞
 */
function updateLoadingState(isLoading) {
  const tbody = document.querySelector('#knowledge-table tbody');
  if (!tbody) return;
  
  if (isLoading) {
    tbody.innerHTML = `
      <tr class="table-loading">
        <td colspan="7" style="text-align: center; padding: var(--spacing-lg);">
          <div class="loading-spinner"></div>
          üçÑ –°–ø–æ—Ä—ã –ø—Ä–æ—Ä–∞—Å—Ç–∞—é—Ç –≤ –º—É–¥—Ä–æ—Å—Ç—å...
        </td>
      </tr>
    `;
  }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 */
function renderDocumentsTable() {
  const tbody = document.querySelector('#knowledge-table tbody');
  if (!tbody) return;
  
  if (knowledgeState.documents.length === 0) {
    renderEmptyDocumentsTable();
    return;
  }
  
  tbody.innerHTML = knowledgeState.documents.map(doc => `
    <tr class="document-row" onclick="viewDocument('${doc.id}')">
      <td class="col-id">${doc.id.substring(0, 8)}...</td>
      <td class="col-title">
        <div class="document-title">${escapeHtml(doc.title)}</div>
        ${doc.status === 'draft' ? '<span class="status-badge status-draft">–ß–µ—Ä–Ω–æ–≤–∏–∫</span>' : ''}
      </td>
      <td class="col-category">
        <span class="category-badge category-${doc.category}">
          ${KNOWLEDGE_CONFIG.CATEGORY_LABELS[doc.category] || doc.category}
        </span>
      </td>
      <td class="col-language">
        <span class="language-badge language-${doc.language}">
          ${KNOWLEDGE_CONFIG.LANGUAGE_LABELS[doc.language] || doc.language}
        </span>
      </td>
      <td class="col-tags">
        <div class="tags-container">
          ${doc.tags.slice(0, 3).map(tag => `<span class="tag-badge">${escapeHtml(tag)}</span>`).join('')}
          ${doc.tags.length > 3 ? `<span class="tag-badge">+${doc.tags.length - 3}</span>` : ''}
        </div>
      </td>
      <td class="col-updated">${formatRelativeTime(doc.updatedAt)}</td>
      <td class="col-actions">
        <div class="action-buttons">
          <button class="action-edit" onclick="editDocument('${doc.id}'); event.stopPropagation();" 
                  title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç">
            ‚úèÔ∏è
          </button>
          <button class="action-delete" onclick="deleteDocument('${doc.id}'); event.stopPropagation();"
                  title="–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç">
            üóëÔ∏è
          </button>
        </div>
      </td>
    </tr>
  `).join('');
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—É—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 */
function renderEmptyDocumentsTable() {
  const tbody = document.querySelector('#knowledge-table tbody');
  if (!tbody) return;
  
  tbody.innerHTML = `
    <tr class="table-empty">
      <td colspan="7" style="text-align: center; padding: var(--spacing-xl);">
        <div class="empty-state">
          <div class="empty-icon">üçÑ</div>
          <div class="empty-title">–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —ç—Ç–æ–π —á–∞—Å—Ç–∏ –º–∏—Ü–µ–ª–∏—è</div>
          <div class="empty-subtitle">
            ${knowledgeState.currentFilters.search ? 
              `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${knowledgeState.currentFilters.search}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ` :
              '–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ –≥—Ä–∏–±–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π'}
          </div>
          <button class="btn btn-primary btn-glow" onclick="showDocumentEditor()">
            üìù –î–æ–±–∞–≤–∏—Ç—å –î–æ–∫—É–º–µ–Ω—Ç
          </button>
        </div>
      </td>
    </tr>
  `;
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 */
function initDocumentEditor() {
  console.log('üçÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –≥—Ä–∏–±–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');
  
  // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
  const addDocBtn = document.getElementById('add-document');
  if (addDocBtn) {
    addDocBtn.addEventListener('click', () => showDocumentEditor());
  }
  
  // –ö–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const closeEditorBtn = document.getElementById('close-document-editor');
  if (closeEditorBtn) {
    closeEditorBtn.addEventListener('click', hideDocumentEditor);
  }
  
  const closePreviewBtn = document.getElementById('close-document-preview');
  if (closePreviewBtn) {
    closePreviewBtn.addEventListener('click', hideDocumentPreview);
  }
  
  // –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  const previewBtn = document.getElementById('preview-document');
  if (previewBtn) {
    previewBtn.addEventListener('click', showDocumentPreview);
  }
  
  // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  const editFromPreviewBtn = document.getElementById('edit-from-preview');
  if (editFromPreviewBtn) {
    editFromPreviewBtn.addEventListener('click', () => {
      hideDocumentPreview();
      // –†–µ–¥–∞–∫—Ç–æ—Ä —É–∂–µ –æ—Ç–∫—Ä—ã—Ç, –ø—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    });
  }
  
  // –§–æ—Ä–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  const documentForm = document.getElementById('document-form');
  if (documentForm) {
    documentForm.addEventListener('submit', handleDocumentSave);
  }
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
  document.addEventListener('click', (event) => {
    if (event.target.classList.contains('document-editor-overlay')) {
      hideDocumentEditor();
    }
    if (event.target.classList.contains('document-preview-overlay')) {
      hideDocumentPreview();
    }
  });
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
  document.addEventListener('keydown', (event) => {
    if (event.key === 'Escape') {
      if (document.getElementById('document-editor-overlay').style.display === 'flex') {
        hideDocumentEditor();
      }
      if (document.getElementById('document-preview-overlay').style.display === 'flex') {
        hideDocumentPreview();
      }
    }
  });
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * @param {string|null} documentId - ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (null –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ)
 */
function showDocumentEditor(documentId = null) {
  console.log('üçÑ –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', documentId ? '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '—Å–æ–∑–¥–∞–Ω–∏–µ');
  
  const overlay = document.getElementById('document-editor-overlay');
  const title = document.getElementById('editor-title');
  const form = document.getElementById('document-form');
  const saveText = document.getElementById('save-document-text');
  
  if (!overlay || !title || !form) return;
  
  if (documentId) {
    // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    title.textContent = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –î–æ–∫—É–º–µ–Ω—Ç';
    if (saveText) saveText.textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ò–∑–º–µ–Ω–µ–Ω–∏—è';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    loadDocumentForEditing(documentId);
  } else {
    // –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è
    title.textContent = 'üìù –î–æ–±–∞–≤–∏—Ç—å –î–æ–∫—É–º–µ–Ω—Ç';
    if (saveText) saveText.textContent = 'üíæ –°–æ–∑–¥–∞—Ç—å –î–æ–∫—É–º–µ–Ω—Ç';
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    form.reset();
    document.getElementById('document-id').value = '';
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  overlay.style.display = 'flex';
  setTimeout(() => overlay.classList.add('active'), 10);
  
  // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  const titleInput = document.getElementById('document-title');
  if (titleInput) {
    setTimeout(() => titleInput.focus(), 300);
  }
}

/**
 * –°–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 */
function hideDocumentEditor() {
  const overlay = document.getElementById('document-editor-overlay');
  if (!overlay) return;
  
  overlay.classList.remove('active');
  setTimeout(() => {
    overlay.style.display = 'none';
  }, 300);
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {string} documentId - ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
async function loadDocumentForEditing(documentId) {
  try {
    const response = await makeAuthenticatedRequest(`${KNOWLEDGE_CONFIG.API_BASE}/${documentId}`);
    
    if (response.success) {
      const doc = response.data;
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      document.getElementById('document-id').value = doc.id;
      document.getElementById('document-title').value = doc.title;
      document.getElementById('document-category').value = doc.category;
      document.getElementById('document-language').value = doc.language;
      document.getElementById('document-tags').value = doc.tags.join(', ');
      document.getElementById('document-content').value = doc.content;
      
      console.log('üçÑ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    } else {
      throw new Error(response.error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç');
    }
  } catch (error) {
    console.error('üçÑ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    showNotification('error', `üçÑ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: ${error.message}`);
    hideDocumentEditor();
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
function showDocumentPreview() {
  const title = document.getElementById('document-title').value.trim();
  const category = document.getElementById('document-category').value;
  const language = document.getElementById('document-language').value;
  const tags = document.getElementById('document-tags').value.trim();
  const content = document.getElementById('document-content').value.trim();
  
  if (!title || !content) {
    showNotification('warning', 'üçÑ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞');
    return;
  }
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
  document.getElementById('preview-title').textContent = title;
  document.getElementById('preview-category').textContent = KNOWLEDGE_CONFIG.CATEGORY_LABELS[category];
  document.getElementById('preview-language').textContent = KNOWLEDGE_CONFIG.LANGUAGE_LABELS[language];
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–≥–∏
  const tagList = tags ? tags.split(',').map(tag => tag.trim()).filter(tag => tag) : [];
  document.getElementById('preview-tags').innerHTML = tagList.length > 0 ?
    tagList.map(tag => `<span class="tag-badge">${escapeHtml(tag)}</span>`).join(' ') :
    '<span class="text-dim">–ù–µ—Ç —Ç–µ–≥–æ–≤</span>';
  
  // –†–µ–Ω–¥–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ Markdown
  document.getElementById('preview-content').innerHTML = renderMarkdown(content);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
  const overlay = document.getElementById('document-preview-overlay');
  if (overlay) {
    overlay.style.display = 'flex';
    setTimeout(() => overlay.classList.add('active'), 10);
  }
}

/**
 * –°–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
function hideDocumentPreview() {
  const overlay = document.getElementById('document-preview-overlay');
  if (!overlay) return;
  
  overlay.classList.remove('active');
  setTimeout(() => {
    overlay.style.display = 'none';
  }, 300);
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
 */
async function handleDocumentSave(event) {
  event.preventDefault();
  
  const formData = new FormData(event.target);
  const documentId = formData.get('document-id');
  
  /** @type {KnowledgeDocument} */
  const documentData = {
    title: formData.get('document-title').trim(),
    category: formData.get('document-category'),
    language: formData.get('document-language') || 'none', // Default to 'none'
    tags: formData.get('document-tags').split(',').map(tag => tag.trim()).filter(tag => tag),
    content: formData.get('document-content').trim(),
    status: 'published'
  };
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  if (!documentData.title) {
    showNotification('error', 'üçÑ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
    return;
  }
  
  if (!documentData.content) {
    showNotification('error', 'üçÑ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
    return;
  }
  
  if (documentData.content.length > KNOWLEDGE_CONFIG.MAX_DOCUMENT_SIZE) {
    showNotification('error', `üçÑ –î–æ–∫—É–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º ${KNOWLEDGE_CONFIG.MAX_DOCUMENT_SIZE} —Å–∏–º–≤–æ–ª–æ–≤)`);
    return;
  }
  
  try {
    const submitBtn = event.target.querySelector('button[type="submit"]');
    const btnText = submitBtn?.querySelector('.btn-text');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    if (submitBtn) submitBtn.disabled = true;
    if (btnText) btnText.textContent = documentId ? 'üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üå± –°–æ–∑–¥–∞–Ω–∏–µ...';
    
    let response;
    if (documentId) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
      response = await makeAuthenticatedRequest(`${KNOWLEDGE_CONFIG.API_BASE}/${documentId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(documentData)
      });
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
      response = await makeAuthenticatedRequest(KNOWLEDGE_CONFIG.API_BASE, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(documentData)
      });
    }
    
    if (response.success) {
      const action = documentId ? '–æ–±–Ω–æ–≤–ª–µ–Ω' : '—Å–æ–∑–¥–∞–Ω';
      showNotification('success', `üçÑ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ ${action} –≤ –≥—Ä–∏–±–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π!`);
      
      hideDocumentEditor();
      loadDocuments(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
      syncVectorStore();
      
      console.log(`üçÑ –î–æ–∫—É–º–µ–Ω—Ç ${action}: ${documentData.title}`);
    } else {
      throw new Error(response.error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç');
    }
  } catch (error) {
    console.error('üçÑ –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
    showNotification('error', `üçÑ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: ${error.message}`);
  } finally {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    const submitBtn = event.target.querySelector('button[type="submit"]');
    const btnText = submitBtn?.querySelector('.btn-text');
    
    if (submitBtn) submitBtn.disabled = false;
    if (btnText) {
      btnText.textContent = documentId ? 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ò–∑–º–µ–Ω–µ–Ω–∏—è' : 'üíæ –°–æ–∑–¥–∞—Ç—å –î–æ–∫—É–º–µ–Ω—Ç';
    }
  }
}

/**
 * –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏—è)
 * @param {string} documentId - ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
function viewDocument(documentId) {
  console.log('üçÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞:', documentId);
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤ —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏—è
  editDocument(documentId);
}

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @param {string} documentId - ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
function editDocument(documentId) {
  console.log('üçÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', documentId);
  showDocumentEditor(documentId);
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @param {string} documentId - ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
async function deleteDocument(documentId) {
  // –ù–∞—Ö–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
  const document = knowledgeState.documents.find(doc => doc.id === documentId);
  const documentTitle = document ? document.title : documentId;
  
  const confirmed = confirm(
    `üçÑ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç "${documentTitle}" –∏–∑ –≥—Ä–∏–±–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π?\n\n` +
    '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!'
  );
  
  if (!confirmed) return;
  
  try {
    console.log('üçÑ –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', documentId);
    
    const response = await makeAuthenticatedRequest(`${KNOWLEDGE_CONFIG.API_BASE}/${documentId}`, {
      method: 'DELETE'
    });
    
    if (response.success) {
      showNotification('success', 'üçÑ –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä–∏–±–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π');
      
      loadDocuments(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
      syncVectorStore();
      
      console.log('üçÑ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
    } else {
      throw new Error(response.error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç');
    }
  } catch (error) {
    console.error('üçÑ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
    showNotification('error', `üçÑ –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: ${error.message}`);
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è RAG
 */
function initRAGControls() {
  console.log('üçÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è RAG —Å–∏—Å—Ç–µ–º–æ–π...');
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
  const syncBtn = document.getElementById('sync-vector-store');
  if (syncBtn) {
    syncBtn.addEventListener('click', syncVectorStore);
  }
  
  // –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞
  const rebuildBtn = document.getElementById('rebuild-index');
  if (rebuildBtn) {
    rebuildBtn.addEventListener('click', rebuildVectorIndex);
  }
  
  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –ø–æ–∏—Å–∫–∞
  const testBtn = document.getElementById('test-rag-search');
  if (testBtn) {
    testBtn.addEventListener('click', showRAGTestModal);
  }
  
  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ RAG
  const diagnoseBtn = document.getElementById('diagnose-rag');
  if (diagnoseBtn) {
    diagnoseBtn.addEventListener('click', runRAGDiagnosis);
  }
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º RAG —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const closeRAGTestBtn = document.getElementById('close-rag-test');
  if (closeRAGTestBtn) {
    closeRAGTestBtn.addEventListener('click', hideRAGTestModal);
  }
  
  const runTestBtn = document.getElementById('run-rag-test');
  if (runTestBtn) {
    runTestBtn.addEventListener('click', runRAGTest);
  }
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay –∏ Escape
  document.addEventListener('click', (event) => {
    if (event.target.classList.contains('rag-test-overlay')) {
      hideRAGTestModal();
    }
  });
  
  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø–æ Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
  const testQueryInput = document.getElementById('rag-test-query');
  if (testQueryInput) {
    testQueryInput.addEventListener('keydown', (event) => {
      if (event.key === 'Enter') {
        runRAGTest();
      }
    });
  }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
 */
async function syncVectorStore() {
  try {
    console.log('üçÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º...');
    
    showNotification('info', 'üçÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º...');
    
    const response = await makeAuthenticatedRequest(`${KNOWLEDGE_CONFIG.API_BASE}/sync-vector-store`, {
      method: 'POST'
    });
    
    if (response.success) {
      showNotification('success', 'üçÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Qdrant –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É RAG
      loadRAGStats();
      
      console.log('üçÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } else {
      throw new Error(response.error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å');
    }
  } catch (error) {
    console.error('üçÑ –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    showNotification('error', `üçÑ –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`);
  }
}

/**
 * –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
 */
async function rebuildVectorIndex() {
  const confirmed = confirm(
    'üçÑ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞.\n\n' +
    '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?'
  );
  
  if (!confirmed) return;
  
  try {
    console.log('üçÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞...');
    
    showNotification('info', 'üçÑ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.');
    
    const response = await makeAuthenticatedRequest(`${KNOWLEDGE_CONFIG.API_BASE}/rebuild-index`, {
      method: 'POST'
    });
    
    if (response.success) {
      showNotification('success', 'üçÑ –í–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω!');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É RAG
      loadRAGStats();
      
      console.log('üçÑ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } else {
      throw new Error(response.error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∏–Ω–¥–µ–∫—Å');
    }
  } catch (error) {
    console.error('üçÑ –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–∞:', error);
    showNotification('error', `üçÑ –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏: ${error.message}`);
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG
 */
function showRAGTestModal() {
  const overlay = document.getElementById('rag-test-overlay');
  if (overlay) {
    overlay.style.display = 'flex';
    setTimeout(() => overlay.classList.add('active'), 10);
    
    // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    const queryInput = document.getElementById('rag-test-query');
    if (queryInput) {
      setTimeout(() => queryInput.focus(), 300);
    }
  }
}

/**
 * –°–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG
 */
function hideRAGTestModal() {
  const overlay = document.getElementById('rag-test-overlay');
  if (!overlay) return;
  
  overlay.classList.remove('active');
  setTimeout(() => {
    overlay.style.display = 'none';
  }, 300);
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç RAG –ø–æ–∏—Å–∫–∞
 */
async function runRAGTest() {
  const queryInput = document.getElementById('rag-test-query');
  const resultsDiv = document.getElementById('rag-test-results');
  
  if (!queryInput || !resultsDiv) return;
  
  const query = queryInput.value.trim();
  if (!query) {
    showNotification('warning', 'üçÑ –í–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
    queryInput.focus();
    return;
  }
  
  try {
    console.log('üçÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RAG —Ç–µ—Å—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', query);
    
    resultsDiv.innerHTML = '<div class="loading">üçÑ –ü–æ–∏—Å–∫ –≤ –≥—Ä–∏–±–Ω–æ–π –º—É–¥—Ä–æ—Å—Ç–∏...</div>';
    
    const response = await makeAuthenticatedRequest(`${KNOWLEDGE_CONFIG.API_BASE}/test-search`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ query, limit: 5 })
    });
    
    if (response.success) {
      const results = response.data.results;
      
      if (results.length === 0) {
        resultsDiv.innerHTML = `
          <div class="test-no-results">
            <div class="empty-icon">üîç</div>
            <div class="empty-title">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>
            <div class="empty-subtitle">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π</div>
          </div>
        `;
      } else {
        resultsDiv.innerHTML = results.map((result, index) => `
          <div class="test-result">
            <div class="result-header">
              <h5 class="result-title">üìÑ ${escapeHtml(result.title)}</h5>
              <span class="result-score">–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${Math.round(result.score * 100)}%</span>
            </div>
            <div class="result-meta">
              <span class="result-category">${KNOWLEDGE_CONFIG.CATEGORY_LABELS[result.category]}</span>
              <span class="result-language">${KNOWLEDGE_CONFIG.LANGUAGE_LABELS[result.language]}</span>
            </div>
            <div class="result-content">${escapeHtml(result.content.substring(0, 200))}...</div>
          </div>
        `).join('');
      }
      
      console.log(`üçÑ RAG —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
    } else {
      throw new Error(response.error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫');
    }
  } catch (error) {
    console.error('üçÑ –û—à–∏–±–∫–∞ RAG —Ç–µ—Å—Ç–∞:', error);
    resultsDiv.innerHTML = `
      <div class="test-error">
        <div class="error-icon">‚ö†Ô∏è</div>
        <div class="error-title">–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞</div>
        <div class="error-message">${escapeHtml(error.message)}</div>
      </div>
    `;
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É RAG —Å–∏—Å—Ç–µ–º—ã
 */
async function runRAGDiagnosis() {
  try {
    console.log('üçÑ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ RAG —Å–∏—Å—Ç–µ–º—ã...');
    
    showNotification('info', 'üçÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ RAG —Å–∏—Å—Ç–µ–º—ã...');
    
    const response = await makeAuthenticatedRequest(`${KNOWLEDGE_CONFIG.API_BASE}/diagnose`);
    
    if (response.success) {
      const diagnosis = response.data;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ
      let reportMessages = [
        `üîç –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${diagnosis.vectorStore.status}`,
        `üìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ MongoDB: ${diagnosis.mongodb.documentCount}`,
        `üóÉÔ∏è –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Qdrant: ${diagnosis.qdrant.documentCount}`,
        `‚ö° –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ Qdrant: ${diagnosis.qdrant.responseTime}ms`
      ];
      
      if (diagnosis.issues.length > 0) {
        reportMessages.push('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:', ...diagnosis.issues);
      } else {
        reportMessages.push('‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
      }
      
      showNotification('success', reportMessages.join('\n'));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É RAG
      loadRAGStats();
      
      console.log('üçÑ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', diagnosis);
    } else {
      throw new Error(response.error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É');
    }
  } catch (error) {
    console.error('üçÑ –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    showNotification('error', `üçÑ –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${error.message}`);
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É RAG —Å–∏—Å—Ç–µ–º—ã
 */
async function loadRAGStats() {
  try {
    console.log('üçÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ RAG...');
    
    const response = await makeAuthenticatedRequest(`${KNOWLEDGE_CONFIG.API_BASE}/stats`);
    
    if (response.success) {
      knowledgeState.ragStats = response.data;
      updateRAGStatsDisplay();
    } else {
      console.warn('üçÑ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É RAG:', response.error?.message);
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
      updateRAGStatsDisplay(null);
    }
  } catch (error) {
    console.error('üçÑ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ RAG:', error);
    updateRAGStatsDisplay(null);
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ RAG
 * @param {RAGStats|null} stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–ª–∏ null –¥–ª—è –∑–∞–≥–ª—É—à–µ–∫
 */
function updateRAGStatsDisplay(stats = knowledgeState.ragStats) {
  const elements = {
    lastIndexed: document.getElementById('rag-last-indexed'),
    docsCount: document.getElementById('rag-docs-count'),
    vectorStore: document.getElementById('rag-vector-store'),
    embeddingModel: document.getElementById('rag-embedding-model'),
    syncStatus: document.getElementById('rag-sync-status')
  };
  
  if (stats) {
    if (elements.lastIndexed) {
      elements.lastIndexed.textContent = formatRelativeTime(stats.lastUpdated);
    }
    if (elements.docsCount) {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ RAG
      elements.docsCount.textContent = (stats.total || 0).toString();
    }
    if (elements.vectorStore) {
      elements.vectorStore.textContent = 'Qdrant';
    }
    if (elements.embeddingModel) {
      elements.embeddingModel.textContent = 'text-embedding-ada-002';
    }
    if (elements.syncStatus) {
      elements.syncStatus.textContent = '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω';
      elements.syncStatus.className = 'status-badge status-success';
    }
  } else {
    // –ó–∞–≥–ª—É—à–∫–∏
    if (elements.lastIndexed) elements.lastIndexed.textContent = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    if (elements.docsCount) elements.docsCount.textContent = knowledgeState.totalDocuments.toString();
    if (elements.vectorStore) elements.vectorStore.textContent = 'Qdrant (–ª–æ–∫–∞–ª—å–Ω—ã–π)';
    if (elements.embeddingModel) elements.embeddingModel.textContent = 'text-embedding-ada-002';
    if (elements.syncStatus) {
      elements.syncStatus.textContent = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      elements.syncStatus.className = 'status-badge status-unknown';
    }
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ RAG —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
 * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 */
function updateRAGDocumentCount(count) {
  const element = document.getElementById('rag-docs-count');
  if (element) {
    element.textContent = count.toString();
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 */
function initPagination() {
  const prevBtn = document.getElementById('prev-page');
  const nextBtn = document.getElementById('next-page');
  
  if (prevBtn) {
    prevBtn.addEventListener('click', () => {
      if (knowledgeState.currentFilters.page > 1) {
        knowledgeState.currentFilters.page--;
        loadDocuments();
      }
    });
  }
  
  if (nextBtn) {
    nextBtn.addEventListener('click', () => {
      const totalPages = Math.ceil(knowledgeState.totalDocuments / knowledgeState.currentFilters.limit);
      if (knowledgeState.currentFilters.page < totalPages) {
        knowledgeState.currentFilters.page++;
        loadDocuments();
      }
    });
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 */
function updatePaginationInfo() {
  const rangeElement = document.getElementById('pagination-range');
  const totalElement = document.getElementById('pagination-total');
  const currentElement = document.getElementById('pagination-current');
  const prevBtn = document.getElementById('prev-page');
  const nextBtn = document.getElementById('next-page');
  
  const { page, limit } = knowledgeState.currentFilters;
  const total = knowledgeState.totalDocuments;
  const totalPages = Math.ceil(total / limit);
  
  // –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  const start = total > 0 ? (page - 1) * limit + 1 : 0;
  const end = Math.min(page * limit, total);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
  if (rangeElement) rangeElement.textContent = `${start}-${end}`;
  if (totalElement) totalElement.textContent = total.toString();
  if (currentElement) currentElement.textContent = total > 0 ? `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages}` : '–°—Ç—Ä–∞–Ω–∏—Ü–∞ 0 –∏–∑ 0';
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
  if (prevBtn) {
    prevBtn.disabled = page <= 1;
  }
  if (nextBtn) {
    nextBtn.disabled = page >= totalPages || total === 0;
  }
}

// ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
 * @param {string} url - URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
 * @param {RequestInit} [options] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Promise<ApiResponse>} –û—Ç–≤–µ—Ç API
 */
async function makeAuthenticatedRequest(url, options = {}) {
  const token = localStorage.getItem('adminToken');
  if (!token) {
    throw new Error('–¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  const headers = {
    'Authorization': `Bearer ${token}`,
    ...options.headers
  };
  
  const response = await fetch(url, {
    ...options,
    headers
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  if (response.status === 401 || response.status === 403) {
    localStorage.removeItem('adminToken');
    localStorage.removeItem('adminUsername');
    window.location.href = 'login.html';
    throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
  }
  
  const result = await response.json();
  return result;
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML –≤ —Å—Ç—Ä–æ–∫–µ
 * @param {string} str - –°—Ç—Ä–æ–∫–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {string} –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 */
function escapeHtml(str) {
  const div = document.createElement('div');
  div.textContent = str;
  return div.innerHTML;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 * @param {string} dateString - –°—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
 * @returns {string} –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥")
 */
function formatRelativeTime(dateString) {
  if (!dateString) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  
  try {
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now - date;
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    
    if (diffMinutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMinutes < 60) return `${diffMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    if (diffDays < 7) return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
    
    return date.toLocaleDateString('ru-RU');
  } catch (error) {
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ Markdown –≤ HTML
 * @param {string} markdown - –¢–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
 * @returns {string} HTML –∫–æ–¥
 */
function renderMarkdown(markdown) {
  return markdown
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    .replace(/^### (.*$)/gim, '<h3>$1</h3>')
    .replace(/^## (.*$)/gim, '<h2>$1</h2>')
    .replace(/^# (.*$)/gim, '<h1>$1</h1>')
    
    // –ñ–∏—Ä–Ω—ã–π –∏ –∫—É—Ä—Å–∏–≤
    .replace(/\*\*\*(.*?)\*\*\*/g, '<strong><em>$1</em></strong>')
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    .replace(/\*(.*?)\*/g, '<em>$1</em>')
    
    // –ö–æ–¥
    .replace(/`([^`]+)`/g, '<code>$1</code>')
    .replace(/```([^```]+)```/g, '<pre><code>$1</code></pre>')
    
    // –°—Å—ã–ª–∫–∏
    .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank">$1</a>')
    
    // –°–ø–∏—Å–∫–∏
    .replace(/^\* (.+$)/gim, '<li>$1</li>')
    .replace(/^(\d+)\. (.+$)/gim, '<li>$2</li>')
    
    // –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    .replace(/\n/g, '<br>');
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (success|error|warning|info)
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {number} [duration=5000] - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 */
function showNotification(type, message, duration = 5000) {
  const container = document.getElementById('notification-container');
  if (!container) {
    // Fallback –∫ alert –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
    alert(message);
    return;
  }
  
  const notification = document.createElement('div');
  notification.className = `notification notification-${type}`;
  
  // –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const icons = {
    success: '‚úÖ',
    error: '‚ùå',
    warning: '‚ö†Ô∏è',
    info: '‚ÑπÔ∏è'
  };
  
  notification.innerHTML = `
    <div class="notification-icon">${icons[type] || 'üçÑ'}</div>
    <div class="notification-message">${escapeHtml(message)}</div>
    <button class="notification-close" onclick="this.parentElement.remove()">√ó</button>
  `;
  
  container.appendChild(notification);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
  setTimeout(() => notification.classList.add('show'), 10);
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  setTimeout(() => {
    notification.classList.remove('show');
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }, duration);
}

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.initKnowledgePage = initKnowledgePage;

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö –∏–ª–∏ HTML
window.showDocumentEditor = showDocumentEditor;
window.editDocument = editDocument;
window.deleteDocument = deleteDocument;
window.viewDocument = viewDocument;
/**
 * Knowledge Management JavaScript with Document Upload Support
 * @file client/admin-panel/js/knowledge.js
 * üìñ –î–û–ë–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è Reader Bot
 * üîç –ü–û–î–î–ï–†–ñ–ö–ê: PDF, TXT, DOCX, XLS/XLSX —Ñ–∞–π–ª–æ–≤
 */

// API configuration - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ prefix
const API_PREFIX = '/api/reader'; // üìñ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π prefix –¥–ª—è Reader Bot

// Global variables
let currentPage = 1;
let totalPages = 1;
let isLoading = false;
let searchTimeout = null;

/**
 * Initialize knowledge management page
 */
async function initKnowledgePage() {
    console.log('üìñ Initializing knowledge management page...');
    
    try {
        // Load initial data
        await loadDocuments();
        await loadRAGStats();
        
        // Setup event listeners
        setupEventListeners();
        
        console.log('‚úÖ Knowledge page initialized successfully');
    } catch (error) {
        console.error('‚ùå Failed to initialize knowledge page:', error);
        showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ' + error.message);
    }
}

/**
 * Make authenticated request with error handling
 * @param {string} endpoint - API endpoint (without prefix)
 * @param {Object} options - Fetch options
 * @returns {Promise<any>} Response data
 */
async function makeAuthenticatedRequest(endpoint, options = {}) {
    try {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π URL —Å API prefix
        const url = `${API_PREFIX}${endpoint}`;
        
        // –ë–∞–∑–æ–≤—ã–µ endpoints –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const isPublicEndpoint = endpoint.includes('/knowledge') && 
                                 !endpoint.includes('/diagnose') && 
                                 !endpoint.includes('/vector-search') && 
                                 !endpoint.includes('/test-search') && 
                                 !endpoint.includes('/sync-vector-store') &&
                                 (!options.method || options.method === 'GET');

        // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –¥–ª—è FormData (multipart/form-data)
        const headers = {
            ...options.headers
        };

        // Only set Content-Type for non-FormData requests
        if (!(options.body instanceof FormData)) {
            headers['Content-Type'] = 'application/json';
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö endpoints
        if (!isPublicEndpoint) {
            const token = localStorage.getItem('adminToken');
            if (token) {
                headers['Authorization'] = `Bearer ${token}`;
            } else {
                // Fallback –Ω–∞ Basic Auth
                headers['Authorization'] = 'Basic ' + btoa('admin:password123');
            }
        }

        console.log(`üìñ Making request to: ${url}`);
        
        const response = await fetch(url, {
            ...options,
            headers
        });

        console.log(`üìñ Response status: ${response.status}`);

        if (!response.ok) {
            const errorText = await response.text();
            let errorData;
            
            try {
                errorData = JSON.parse(errorText);
            } catch {
                errorData = { error: errorText || `HTTP ${response.status}` };
            }
            
            throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
        }

        return await response.json();
    } catch (error) {
        console.error('üìñ Request failed:', error);
        throw error;
    }
}

/**
 * Load documents with pagination
 */
async function loadDocuments() {
    if (isLoading) return;
    
    try {
        isLoading = true;
        showLoading('documents-table', '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');

        const params = new URLSearchParams({
            page: currentPage,
            limit: 10
        });

        // Add search filter if exists
        const searchInput = document.getElementById('search-input');
        if (searchInput && searchInput.value.trim()) {
            params.append('q', searchInput.value.trim());
        }

        // Add category filter if exists
        const categoryFilter = document.getElementById('category-filter');
        if (categoryFilter && categoryFilter.value) {
            params.append('category', categoryFilter.value);
        }

        const response = await makeAuthenticatedRequest(`/knowledge?${params}`);
        
        if (response.success) {
            renderDocuments(response.data);
            
            if (response.pagination) {
                updatePagination(response.pagination);
            }
        } else {
            throw new Error(response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã');
        }
    } catch (error) {
        console.error('üìñ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ' + error.message);
        const tableBody = document.querySelector('#documents-table tbody');
        if (tableBody) {
            tableBody.innerHTML = '<tr><td colspan="6" class="text-center">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã</td></tr>';
        }
    } finally {
        isLoading = false;
    }
}

/**
 * Load RAG statistics
 */
async function loadRAGStats() {
    try {
        console.log('üìñ Loading RAG statistics...');
        const response = await makeAuthenticatedRequest('/knowledge/stats');
        
        if (response.success) {
            renderRAGStats(response.data);
            console.log('‚úÖ RAG statistics loaded successfully');
        } else {
            throw new Error(response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
        }
    } catch (error) {
        console.error('üìñ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ RAG:', error);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º fallback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        renderRAGStats({
            total: 0,
            published: 0,
            draft: 0,
            byLanguage: [],
            byCategory: [],
            recentlyUpdated: [],
            chunkingEnabled: false,
            vectorStore: { status: 'unknown', totalVectors: 0 },
            universalSearch: true,
            error: error.message
        });
    }
}

/**
 * Setup event listeners
 */
function setupEventListeners() {
    // Search functionality
    const searchInput = document.getElementById('search-input');
    if (searchInput) {
        searchInput.addEventListener('input', handleSearch);
        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                handleSearch();
            }
        });
    }

    // Category filter
    const categoryFilter = document.getElementById('category-filter');
    if (categoryFilter) {
        categoryFilter.addEventListener('change', () => {
            currentPage = 1;
            loadDocuments();
        });
    }

    // New document button
    const newDocButton = document.getElementById('new-document-btn');
    if (newDocButton) {
        newDocButton.addEventListener('click', showUploadDocumentModal);
    }

    // Reset search button
    const resetSearchBtn = document.getElementById('reset-search-btn');
    if (resetSearchBtn) {
        resetSearchBtn.addEventListener('click', resetSearch);
    }

    // Search button
    const searchBtn = document.getElementById('search-btn');
    if (searchBtn) {
        searchBtn.addEventListener('click', handleSearch);
    }

    // Test search button
    const testRagBtn = document.getElementById('test-rag-btn');
    if (testRagBtn) {
        testRagBtn.addEventListener('click', showTestSearchModal);
    }

    // Sync vector store button
    const syncVectorBtn = document.getElementById('sync-vector-btn');
    if (syncVectorBtn) {
        syncVectorBtn.addEventListener('click', syncVectorStore);
    }

    // Diagnose button
    const diagnoseBtn = document.getElementById('diagnose-rag');
    if (diagnoseBtn) {
        diagnoseBtn.addEventListener('click', runDiagnostics);
    }

    console.log('üìñ Event listeners setup completed');
}

/**
 * Handle search input
 */
function handleSearch() {
    const searchInput = document.getElementById('search-input');
    if (!searchInput) return;

    const query = searchInput.value.trim();
    
    // Clear previous timeout
    if (searchTimeout) {
        clearTimeout(searchTimeout);
    }

    // Debounce search
    searchTimeout = setTimeout(() => {
        currentPage = 1;
        loadDocuments();
    }, 300);
}

/**
 * Reset search filters
 */
function resetSearch() {
    const searchInput = document.getElementById('search-input');
    const categoryFilter = document.getElementById('category-filter');
    const tagsFilter = document.getElementById('tags-filter');

    if (searchInput) searchInput.value = '';
    if (categoryFilter) categoryFilter.value = '';
    if (tagsFilter) tagsFilter.value = '';

    currentPage = 1;
    loadDocuments();
}

/**
 * Show upload document modal with file support
 */
function showUploadDocumentModal() {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'upload-document-modal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π</h3>
                    <button type="button" class="close" onclick="closeModal()">&times;</button>
                </div>
                <div class="modal-body">
                    <!-- Upload Methods Tabs -->
                    <div class="upload-tabs">
                        <button type="button" class="tab-button active" onclick="switchUploadTab('file')">
                            üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
                        </button>
                        <button type="button" class="tab-button" onclick="switchUploadTab('manual')">
                            ‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é
                        </button>
                    </div>

                    <!-- File Upload Tab -->
                    <div id="file-upload-tab" class="upload-tab-content active">
                        <form id="upload-document-form" enctype="multipart/form-data">
                            <div class="form-group">
                                <label for="document-file">–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç *</label>
                                <div class="file-upload-area" id="file-upload-area">
                                    <input type="file" id="document-file" name="document" accept=".pdf,.txt,.docx,.doc,.xlsx,.xls" required>
                                    <div class="file-upload-text">
                                        <div class="upload-icon">üìÑ</div>
                                        <div class="upload-message">
                                            <strong>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</strong>
                                            <br>
                                            <small>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, TXT, DOCX, XLS/XLSX (–º–∞–∫—Å. 10MB)</small>
                                        </div>
                                    </div>
                                    <div class="file-info" id="file-info" style="display: none;"></div>
                                </div>
                            </div>
                            
                            <div class="form-row">
                                <div class="form-group col-md-8">
                                    <label for="doc-title">–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞</label>
                                    <input type="text" id="doc-title" name="title" 
                                           placeholder="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è">
                                </div>
                                <div class="form-group col-md-4">
                                    <label for="doc-language">–Ø–∑—ã–∫</label>
                                    <select id="doc-language" name="language">
                                        <option value="ru">–†—É—Å—Å–∫–∏–π</option>
                                        <option value="en">English</option>
                                        <option value="auto">–ê–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</option>
                                    </select>
                                </div>
                            </div>
                            
                            <div class="form-row">
                                <div class="form-group col-md-6">
                                    <label for="doc-category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                                    <select id="doc-category" name="category">
                                        <option value="">–ê–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</option>
                                        <option value="books">üìö –ö–Ω–∏–≥–∏</option>
                                        <option value="psychology">üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è</option>
                                        <option value="self-development">‚ú® –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ</option>
                                        <option value="relationships">üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è</option>
                                        <option value="productivity">‚ö° –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</option>
                                        <option value="mindfulness">üßò –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å</option>
                                        <option value="creativity">üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ</option>
                                        <option value="general">üìñ –û–±—â–∏–µ</option>
                                    </select>
                                </div>
                                <div class="form-group col-md-6">
                                    <label for="doc-status">–°—Ç–∞—Ç—É—Å</label>
                                    <select id="doc-status" name="status">
                                        <option value="published">–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω</option>
                                        <option value="draft">–ß–µ—Ä–Ω–æ–≤–∏–∫</option>
                                    </select>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label for="doc-tags">–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</label>
                                <input type="text" id="doc-tags" name="tags" 
                                       placeholder="–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è, –∫–Ω–∏–≥–∏, —Ü–∏—Ç–∞—Ç—ã">
                                <small class="form-text text-muted">
                                    –¢–µ–≥–∏ –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                                </small>
                            </div>
                        </form>
                    </div>

                    <!-- Manual Entry Tab -->
                    <div id="manual-upload-tab" class="upload-tab-content" style="display: none;">
                        <form id="manual-document-form">
                            <div class="form-group">
                                <label for="manual-title">–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ *</label>
                                <input type="text" id="manual-title" name="title" required 
                                       placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –¶–∏—Ç–∞—Ç—ã –æ –ª—é–±–≤–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö">
                            </div>
                            
                            <div class="form-group">
                                <label for="manual-content">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ *</label>
                                <textarea id="manual-content" name="content" required rows="10"
                                          placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞..."></textarea>
                            </div>
                            
                            <div class="form-row">
                                <div class="form-group col-md-6">
                                    <label for="manual-category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è *</label>
                                    <select id="manual-category" name="category" required>
                                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                                        <option value="books">üìö –ö–Ω–∏–≥–∏</option>
                                        <option value="psychology">üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è</option>
                                        <option value="self-development">‚ú® –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ</option>
                                        <option value="relationships">üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è</option>
                                        <option value="productivity">‚ö° –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</option>
                                        <option value="mindfulness">üßò –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å</option>
                                        <option value="creativity">üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ</option>
                                        <option value="general">üìñ –û–±—â–∏–µ</option>
                                    </select>
                                </div>
                                <div class="form-group col-md-6">
                                    <label for="manual-language">–Ø–∑—ã–∫</label>
                                    <select id="manual-language" name="language">
                                        <option value="ru">–†—É—Å—Å–∫–∏–π</option>
                                        <option value="en">English</option>
                                        <option value="auto">–ê–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</option>
                                    </select>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label for="manual-tags">–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</label>
                                <input type="text" id="manual-tags" name="tags" 
                                       placeholder="–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è, –∫–Ω–∏–≥–∏, —Ü–∏—Ç–∞—Ç—ã">
                            </div>
                            
                            <div class="form-group">
                                <label for="manual-status">–°—Ç–∞—Ç—É—Å</label>
                                <select id="manual-status" name="status">
                                    <option value="published">–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω</option>
                                    <option value="draft">–ß–µ—Ä–Ω–æ–≤–∏–∫</option>
                                </select>
                            </div>
                        </form>
                    </div>

                    <!-- Upload Progress -->
                    <div class="upload-progress" id="upload-progress" style="display: none;">
                        <div class="progress-bar">
                            <div class="progress-fill" id="progress-fill"></div>
                        </div>
                        <div class="progress-text" id="progress-text">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="closeModal()">–û—Ç–º–µ–Ω–∞</button>
                    <button type="button" class="btn btn-primary" id="upload-btn" onclick="uploadDocument()">
                        üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    modal.style.display = 'flex';
    
    // Setup file upload events
    setupFileUploadEvents();
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
    document.getElementById('document-file').focus();
}

/**
 * Switch between upload tabs
 */
function switchUploadTab(tabName) {
    const fileTab = document.getElementById('file-upload-tab');
    const manualTab = document.getElementById('manual-upload-tab');
    const fileTabBtn = document.querySelector('.tab-button:first-child');
    const manualTabBtn = document.querySelector('.tab-button:last-child');
    const uploadBtn = document.getElementById('upload-btn');

    if (tabName === 'file') {
        fileTab.style.display = 'block';
        manualTab.style.display = 'none';
        fileTabBtn.classList.add('active');
        manualTabBtn.classList.remove('active');
        uploadBtn.textContent = 'üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç';
    } else {
        fileTab.style.display = 'none';
        manualTab.style.display = 'block';
        fileTabBtn.classList.remove('active');
        manualTabBtn.classList.add('active');
        uploadBtn.textContent = 'üíæ –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç';
    }
}

/**
 * Setup file upload drag and drop events
 */
function setupFileUploadEvents() {
    const fileInput = document.getElementById('document-file');
    const uploadArea = document.getElementById('file-upload-area');
    const fileInfo = document.getElementById('file-info');

    // File input change event
    fileInput.addEventListener('change', handleFileSelect);

    // Drag and drop events
    uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.classList.add('drag-over');
    });

    uploadArea.addEventListener('dragleave', (e) => {
        e.preventDefault();
        uploadArea.classList.remove('drag-over');
    });

    uploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.classList.remove('drag-over');
        
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            fileInput.files = files;
            handleFileSelect();
        }
    });

    // Click to select file
    uploadArea.addEventListener('click', (e) => {
        if (e.target !== fileInput) {
            fileInput.click();
        }
    });
}

/**
 * Handle file selection and validation
 */
function handleFileSelect() {
    const fileInput = document.getElementById('document-file');
    const fileInfo = document.getElementById('file-info');
    const titleInput = document.getElementById('doc-title');
    
    if (fileInput.files.length === 0) {
        fileInfo.style.display = 'none';
        return;
    }

    const file = fileInput.files[0];
    
    // File validation
    const maxSize = 10 * 1024 * 1024; // 10MB
    const allowedTypes = [
        'text/plain',
        'application/pdf',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'application/vnd.ms-excel'
    ];

    if (file.size > maxSize) {
        showError('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB');
        fileInput.value = '';
        fileInfo.style.display = 'none';
        return;
    }

    const fileExtension = file.name.split('.').pop().toLowerCase();
    const allowedExtensions = ['txt', 'pdf', 'docx', 'doc', 'xlsx', 'xls'];
    
    if (!allowedTypes.includes(file.type) && !allowedExtensions.includes(fileExtension)) {
        showError('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: PDF, TXT, DOCX, XLS/XLSX');
        fileInput.value = '';
        fileInfo.style.display = 'none';
        return;
    }

    // Auto-fill title if empty
    if (!titleInput.value.trim()) {
        const fileName = file.name.replace(/\.[^/.]+$/, ""); // Remove extension
        titleInput.value = fileName.replace(/[-_]/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
    }

    // Show file info
    fileInfo.innerHTML = `
        <div class="selected-file">
            <div class="file-icon">${getFileIcon(fileExtension)}</div>
            <div class="file-details">
                <div class="file-name">${file.name}</div>
                <div class="file-size">${formatFileSize(file.size)}</div>
            </div>
            <button type="button" class="remove-file" onclick="removeSelectedFile()">√ó</button>
        </div>
    `;
    fileInfo.style.display = 'block';
}

/**
 * Remove selected file
 */
function removeSelectedFile() {
    const fileInput = document.getElementById('document-file');
    const fileInfo = document.getElementById('file-info');
    
    fileInput.value = '';
    fileInfo.style.display = 'none';
}

/**
 * Get file icon based on extension
 */
function getFileIcon(extension) {
    const icons = {
        'pdf': 'üìÑ',
        'txt': 'üìù',
        'docx': 'üìò',
        'doc': 'üìò',
        'xlsx': 'üìä',
        'xls': 'üìä'
    };
    return icons[extension] || 'üìÑ';
}

/**
 * Format file size for display
 */
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

/**
 * Upload document (file or manual)
 */
async function uploadDocument() {
    const activeTab = document.querySelector('.upload-tab-content.active, .upload-tab-content[style*="block"]');
    const isFileUpload = activeTab && activeTab.id === 'file-upload-tab';
    
    if (isFileUpload) {
        await uploadFileDocument();
    } else {
        await uploadManualDocument();
    }
}

/**
 * Upload file document
 */
async function uploadFileDocument() {
    const form = document.getElementById('upload-document-form');
    const fileInput = document.getElementById('document-file');
    
    if (!fileInput.files.length) {
        showError('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
        return;
    }

    try {
        // Show progress
        showUploadProgress('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞...');
        
        const formData = new FormData();
        formData.append('document', fileInput.files[0]);
        
        // Add other form fields
        const fields = ['title', 'category', 'language', 'status', 'tags'];
        fields.forEach(field => {
            const element = document.getElementById(`doc-${field}`);
            if (element && element.value.trim()) {
                formData.append(field, element.value.trim());
            }
        });

        console.log('üìÅ Uploading file document...');
        
        // Update progress
        updateUploadProgress(30, '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...');
        
        const response = await makeAuthenticatedRequest('/knowledge/upload', {
            method: 'POST',
            body: formData
        });

        // Update progress
        updateUploadProgress(80, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...');

        if (response.success) {
            updateUploadProgress(100, '–ì–æ—Ç–æ–≤–æ!');
            showNotification('success', '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!');
            closeModal();
            
            // Refresh documents list
            currentPage = 1;
            await loadDocuments();
            await loadRAGStats();
        } else {
            throw new Error(response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç');
        }
    } catch (error) {
        console.error('üìÅ Upload error:', error);
        hideUploadProgress();
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message);
    }
}

/**
 * Upload manual document
 */
async function uploadManualDocument() {
    const form = document.getElementById('manual-document-form');
    const formData = new FormData(form);
    
    // Validation
    const title = formData.get('title').trim();
    const category = formData.get('category');
    const content = formData.get('content').trim();
    
    if (!title || !category || !content) {
        showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        return;
    }
    
    if (content.length < 10) {
        showError('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤');
        return;
    }

    try {
        // Show progress
        showUploadProgress('–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...');

        // Prepare document data
        const documentData = {
            title: title,
            category: category,
            content: content,
            tags: formData.get('tags') ? formData.get('tags').split(',').map(tag => tag.trim()).filter(tag => tag) : [],
            language: formData.get('language') || 'ru',
            status: formData.get('status') || 'published'
        };

        console.log('üìù Creating manual document:', documentData);

        const response = await makeAuthenticatedRequest('/knowledge', {
            method: 'POST',
            body: JSON.stringify(documentData)
        });

        if (response.success) {
            updateUploadProgress(100, '–ì–æ—Ç–æ–≤–æ!');
            showNotification('success', '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
            closeModal();
            
            // Refresh documents list
            currentPage = 1;
            await loadDocuments();
            await loadRAGStats();
        } else {
            throw new Error(response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç');
        }
    } catch (error) {
        console.error('üìù Manual document creation error:', error);
        hideUploadProgress();
        showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: ' + error.message);
    }
}

/**
 * Show upload progress
 */
function showUploadProgress(message) {
    const progress = document.getElementById('upload-progress');
    const progressText = document.getElementById('progress-text');
    const uploadBtn = document.getElementById('upload-btn');
    
    progress.style.display = 'block';
    progressText.textContent = message;
    uploadBtn.disabled = true;
    uploadBtn.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
    
    updateUploadProgress(10, message);
}

/**
 * Update upload progress
 */
function updateUploadProgress(percent, message) {
    const progressFill = document.getElementById('progress-fill');
    const progressText = document.getElementById('progress-text');
    
    progressFill.style.width = percent + '%';
    if (message) {
        progressText.textContent = message;
    }
}

/**
 * Hide upload progress
 */
function hideUploadProgress() {
    const progress = document.getElementById('upload-progress');
    const uploadBtn = document.getElementById('upload-btn');
    
    progress.style.display = 'none';
    uploadBtn.disabled = false;
    uploadBtn.textContent = 'üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç';
}

/**
 * Close modal
 */
function closeModal() {
    const modal = document.querySelector('.modal');
    if (modal) {
        modal.remove();
    }
}

/**
 * Show test search modal
 */
function showTestSearchModal() {
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>üîç –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π</h3>
                    <button type="button" class="close" onclick="closeModal()">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="test-query">–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</label>
                        <input type="text" id="test-query" class="form-control" 
                               placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Ü–∏—Ç–∞—Ç—ã –æ –ª—é–±–≤–∏">
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="test-limit">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</label>
                            <select id="test-limit" class="form-control">
                                <option value="5">5</option>
                                <option value="10" selected>10</option>
                                <option value="20">20</option>
                            </select>
                        </div>
                        <div class="form-group col-md-6">
                            <label>
                                <input type="checkbox" id="test-chunks" checked>
                                –ü–æ–∫–∞–∑–∞—Ç—å —á–∞–Ω–∫–∏
                            </label>
                        </div>
                    </div>
                    <div id="test-results"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="closeModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
                    <button type="button" class="btn btn-primary" onclick="testSearch()">
                        üîç –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    modal.style.display = 'flex';
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
    document.getElementById('test-query').focus();
}

/**
 * Test search functionality
 */
async function testSearch() {
    const queryInput = document.getElementById('test-query');
    const limitSelect = document.getElementById('test-limit');
    const chunksCheckbox = document.getElementById('test-chunks');
    const resultsContainer = document.getElementById('test-results');
    
    if (!queryInput || !resultsContainer) return;

    const query = queryInput.value.trim();
    if (!query) {
        showError('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
        return;
    }

    try {
        showLoading('test-results', '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫...');

        const response = await makeAuthenticatedRequest('/knowledge/test-search', {
            method: 'POST',
            body: JSON.stringify({
                query: query,
                limit: parseInt(limitSelect.value) || 10,
                returnChunks: chunksCheckbox.checked
            })
        });

        if (response.success) {
            renderTestResults(response.data);
        } else {
            throw new Error(response.error || '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞');
        }
    } catch (error) {
        console.error('üìñ –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
        resultsContainer.innerHTML = `<div class="alert alert-danger">–û—à–∏–±–∫–∞: ${error.message}</div>`;
    }
}

/**
 * Render documents list
 */
function renderDocuments(documents) {
    const tableBody = document.querySelector('#documents-table tbody');
    const emptyState = document.getElementById('empty-state');
    
    if (!tableBody) return;

    if (!documents || documents.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="6" class="text-center">–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
        if (emptyState) emptyState.style.display = 'block';
        return;
    }

    if (emptyState) emptyState.style.display = 'none';

    const documentsHTML = documents.map(doc => `
        <tr data-id="${doc._id || doc.id}">
            <td class="col-title">
                <div class="document-title">${escapeHtml(doc.title)}</div>
                <small class="text-muted">${escapeHtml((doc.content || '').substring(0, 100))}${(doc.content || '').length > 100 ? '...' : ''}</small>
            </td>
            <td class="col-category">
                <span class="badge badge-primary">${escapeHtml(doc.category || 'general')}</span>
            </td>
            <td class="col-language">${escapeHtml(doc.language || 'auto')}</td>
            <td class="col-tags">
                ${doc.tags && doc.tags.length > 0 ? 
                    doc.tags.slice(0, 3).map(tag => `<span class="badge badge-secondary badge-sm">${escapeHtml(tag)}</span>`).join(' ') +
                    (doc.tags.length > 3 ? ` <span class="text-muted">+${doc.tags.length - 3}</span>` : '')
                    : '<span class="text-muted">‚Äî</span>'
                }
            </td>
            <td class="col-status">
                <span class="badge badge-${doc.status === 'published' ? 'success' : 'warning'}">${doc.status === 'published' ? '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω' : '–ß–µ—Ä–Ω–æ–≤–∏–∫'}</span>
            </td>
            <td class="col-actions">
                <div class="btn-group btn-group-sm">
                    <button class="btn btn-outline-primary" onclick="viewDocument('${doc._id || doc.id}')" title="–ü—Ä–æ—Å–º–æ—Ç—Ä">
                        üëÅÔ∏è
                    </button>
                    <button class="btn btn-outline-secondary" onclick="editDocument('${doc._id || doc.id}')" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                        ‚úèÔ∏è
                    </button>
                    <button class="btn btn-outline-danger" onclick="deleteDocument('${doc._id || doc.id}')" title="–£–¥–∞–ª–∏—Ç—å">
                        üóëÔ∏è
                    </button>
                </div>
            </td>
        </tr>
    `).join('');

    tableBody.innerHTML = documentsHTML;
}

/**
 * Render RAG statistics
 */
function renderRAGStats(stats) {
    // Update main stats
    updateStatElement('total-docs', stats.total || 0);
    updateStatElement('published-docs', stats.published || 0);
    updateStatElement('draft-docs', stats.draft || 0);
    
    // Vector store stats
    if (stats.vectorStore) {
        const vectorStoreStatus = document.getElementById('vector-store-stats');
        if (vectorStoreStatus) {
            vectorStoreStatus.textContent = `${stats.vectorStore.documentsCount || 0} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, ${stats.vectorStore.chunksCount || 0} —á–∞–Ω–∫–æ–≤`;
        }
    }

    // Chunking status
    const chunkingStatus = document.getElementById('chunking-status');
    if (chunkingStatus) {
        const isEnabled = stats.chunkingEnabled || false;
        chunkingStatus.textContent = isEnabled ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω';
        chunkingStatus.className = `badge badge-${isEnabled ? 'success' : 'warning'}`;
    }

    // Language distribution
    renderLanguageStats(stats.byLanguage || []);

    // Recent updates info
    const lastUpdated = document.getElementById('rag-last-indexed');
    if (lastUpdated) {
        lastUpdated.textContent = stats.lastUpdated ? 
            new Date(stats.lastUpdated).toLocaleString('ru-RU') : 
            '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }

    console.log('üìñ RAG statistics rendered successfully');
}

/**
 * Update pagination
 */
function updatePagination(pagination) {
    totalPages = pagination.totalPages || 1;
    currentPage = pagination.currentPage || 1;

    const paginationContainer = document.getElementById('pagination');
    const resultsInfo = document.getElementById('results-info');
    
    if (resultsInfo) {
        resultsInfo.textContent = `–ü–æ–∫–∞–∑–∞–Ω–æ ${pagination.startDoc || 1}-${pagination.endDoc || pagination.totalDocs} –∏–∑ ${pagination.totalDocs || 0} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`;
    }

    if (!paginationContainer) return;

    let paginationHTML = '';

    // Previous button
    if (currentPage > 1) {
        paginationHTML += `<li class="page-item"><button class="page-link" onclick="changePage(${currentPage - 1})">‚Äπ –ù–∞–∑–∞–¥</button></li>`;
    }

    // Page numbers
    const startPage = Math.max(1, currentPage - 2);
    const endPage = Math.min(totalPages, currentPage + 2);

    for (let i = startPage; i <= endPage; i++) {
        const isActive = i === currentPage;
        paginationHTML += `<li class="page-item ${isActive ? 'active' : ''}">
            <button class="page-link" onclick="changePage(${i})">${i}</button>
        </li>`;
    }

    // Next button
    if (currentPage < totalPages) {
        paginationHTML += `<li class="page-item"><button class="page-link" onclick="changePage(${currentPage + 1})">–í–ø–µ—Ä–µ–¥ ‚Ä∫</button></li>`;
    }

    paginationContainer.innerHTML = paginationHTML;
}

/**
 * Change page
 */
function changePage(page) {
    if (page < 1 || page > totalPages || page === currentPage) return;
    
    currentPage = page;
    loadDocuments();
}

/**
 * Sync vector store
 */
async function syncVectorStore() {
    const confirmation = confirm('–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞?');
    if (!confirmation) return;

    try {
        showNotification('info', '–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...');

        const response = await makeAuthenticatedRequest('/knowledge/sync-vector-store', {
            method: 'POST',
            body: JSON.stringify({
                enableChunking: true,
                chunkSize: 500,
                overlap: 100
            })
        });

        if (response.success) {
            showNotification('success', `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${response.processed}/${response.totalDocuments} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`);
            await loadRAGStats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        } else {
            throw new Error(response.error || '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        }
    } catch (error) {
        console.error('üìñ –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ' + error.message);
    }
}

/**
 * Run diagnostics
 */
async function runDiagnostics() {
    try {
        showNotification('info', '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã...');

        const response = await makeAuthenticatedRequest('/knowledge/diagnose');

        if (response.success) {
            renderDiagnostics(response);
            showNotification('success', '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        } else {
            throw new Error(response.error || '–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
        }
    } catch (error) {
        console.error('üìñ –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
        showError('–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ' + error.message);
    }
}

/**
 * Utility functions
 */

function updateStatElement(elementId, value) {
    const element = document.getElementById(elementId);
    if (element) {
        element.textContent = value;
    }
}

function renderLanguageStats(languages) {
    const container = document.getElementById('language-stats');
    if (!container || !languages.length) {
        if (container) container.innerHTML = '<div class="text-muted">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
        return;
    }

    const statsHTML = languages.slice(0, 5).map(lang => `
        <div class="stat-item">
            <span class="stat-label">${escapeHtml(lang._id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</span>
            <span class="stat-value badge badge-secondary">${lang.count}</span>
        </div>
    `).join('');

    container.innerHTML = statsHTML;
}

function showLoading(containerId, message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    const container = document.getElementById(containerId);
    if (container) {
        container.innerHTML = `<div class="text-center text-muted py-4">${message}</div>`;
    }
}

function escapeHtml(text) {
    if (typeof text !== 'string') return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function showError(message) {
    console.error('üìñ Error:', message);
    if (typeof showNotification === 'function') {
        showNotification('error', message);
    } else {
        alert('–û—à–∏–±–∫–∞: ' + message);
    }
}

function showNotification(type, message) {
    // Use existing notification system or fallback
    if (typeof window.showNotification === 'function') {
        window.showNotification(type, message);
    } else {
        const notification = document.createElement('div');
        notification.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show`;
        notification.innerHTML = `
            ${message}
            <button type="button" class="close" data-dismiss="alert">&times;</button>
        `;
        
        const container = document.getElementById('notification-container') || document.body;
        container.appendChild(notification);
        
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 5000);
    }
}

// Document management functions
async function viewDocument(documentId) {
    try {
        console.log('üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞:', documentId);
        
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.id = 'document-view-modal';
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3>üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞</h3>
                    <button type="button" class="modal-close">&times;</button>
                </div>
                <div class="modal-body" id="document-view-content">
                    <div class="loading-container">
                        <div class="loading-spinner"></div>
                        üìñ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
        
        const response = await makeAuthenticatedRequest(`/knowledge/${documentId}`);
        
        if (response.success) {
            const doc = response.data;
            const content = document.getElementById('document-view-content');
            content.innerHTML = `
                <div class="document-details">
                    <div class="document-header">
                        <h4>${escapeHtml(doc.title)}</h4>
                        <div class="document-meta">
                            <span class="category-badge category-${doc.category || 'general'}">${getCategoryDisplayName(doc.category)}</span>
                            <span class="status-badge status-${doc.status || 'draft'}">${getStatusDisplayName(doc.status)}</span>
                        </div>
                    </div>
                    <div class="document-content-text" style="max-height: 400px; overflow-y: auto; margin: 1rem 0; padding: 1rem; background: var(--hover-bg); border-radius: var(--border-radius);">
                        ${escapeHtml(doc.content || '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ').replace(/\n/g, '<br>')}
                    </div>
                    <div class="document-actions" style="display: flex; gap: 1rem; justify-content: flex-end; padding-top: 1rem; border-top: 1px solid var(--border-color);">
                        <button class="btn btn-primary" onclick="editDocument('${doc._id}')">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                        <button class="btn btn-danger" onclick="deleteDocument('${doc._id}')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                        <button class="btn btn-secondary" onclick="closeModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
                    </div>
                </div>
            `;
        } else {
            throw new Error(response.error || '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ' + error.message);
    }
}

async function editDocument(documentId) {
    try {
        console.log('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', documentId);
        
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.id = 'document-edit-modal';
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞</h3>
                    <button type="button" class="modal-close">&times;</button>
                </div>
                <div class="modal-body">
                    <form id="edit-document-form">
                        <input type="hidden" id="edit-document-id" value="${documentId}">
                        <div class="form-group">
                            <label for="edit-title">–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ *</label>
                            <input type="text" id="edit-title" class="form-control" required>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="edit-category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è *</label>
                                <select id="edit-category" class="select-glow" required>
                                    <option value="books">üìö –ö–Ω–∏–≥–∏</option>
                                    <option value="psychology">üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è</option>
                                    <option value="self-development">‚ú® –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ</option>
                                    <option value="relationships">üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è</option>
                                    <option value="productivity">‚ö° –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</option>
                                    <option value="mindfulness">üßò –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å</option>
                                    <option value="creativity">üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ</option>
                                    <option value="general">üìñ –û–±—â–∏–µ</option>
                                </select>
                            </div>
                            <div class="form-group col-md-6">
                                <label for="edit-status">–°—Ç–∞—Ç—É—Å *</label>
                                <select id="edit-status" class="select-glow" required>
                                    <option value="published">–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω</option>
                                    <option value="draft">–ß–µ—Ä–Ω–æ–≤–∏–∫</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="edit-content">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ *</label>
                            <textarea id="edit-content" class="form-control" rows="8" required></textarea>
                        </div>
                        <div class="form-actions" style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 1rem;">
                            <button type="button" class="btn btn-secondary" onclick="closeModal()">–û—Ç–º–µ–Ω–∞</button>
                            <button type="submit" class="btn btn-primary">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        </div>
                    </form>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        const response = await makeAuthenticatedRequest(`/knowledge/${documentId}`);
        if (response.success) {
            const doc = response.data;
            document.getElementById('edit-title').value = doc.title || '';
            document.getElementById('edit-category').value = doc.category || 'general';
            document.getElementById('edit-status').value = doc.status || 'draft';
            document.getElementById('edit-content').value = doc.content || '';
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
        document.getElementById('edit-document-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const updateData = {
                title: document.getElementById('edit-title').value.trim(),
                category: document.getElementById('edit-category').value,
                status: document.getElementById('edit-status').value,
                content: document.getElementById('edit-content').value.trim()
            };
            
            try {
                const updateResponse = await makeAuthenticatedRequest(`/knowledge/${documentId}`, {
                    method: 'PUT',
                    body: JSON.stringify(updateData)
                });
                
                if (updateResponse.success) {
                    showNotification('success', '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
                    closeModal();
                    await loadDocuments();
                } else {
                    throw new Error(updateResponse.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
                }
            } catch (error) {
                showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message);
            }
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        showError('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ' + error.message);
    }
}

async function deleteDocument(documentId) {
    const confirmation = confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.');
    if (!confirmation) return;
    
    try {
        console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', documentId);
        
        const response = await makeAuthenticatedRequest(`/knowledge/${documentId}`, {
            method: 'DELETE'
        });
        
        if (response.success) {
            showNotification('success', '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
            closeModal();
            await loadDocuments();
            await loadRAGStats();
        } else {
            throw new Error(response.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + error.message);
    }
}

function renderTestResults(data) {
    const container = document.getElementById('test-results');
    if (!container) return;

    if (!data.results || data.results.length === 0) {
        container.innerHTML = '<div class="alert alert-info">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        return;
    }

    const resultsHTML = `
        <div class="test-results-summary">
            <h5>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞</h5>
            <p><strong>–ó–∞–ø—Ä–æ—Å:</strong> ${escapeHtml(data.query)}</p>
            <p><strong>–ù–∞–π–¥–µ–Ω–æ:</strong> ${data.totalFound} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</p>
            <p><strong>–¢–∏–ø –ø–æ–∏—Å–∫–∞:</strong> ${data.searchType}</p>
        </div>
        <div class="test-results-list">
            ${data.results.map((result, index) => `
                <div class="test-result-item border-bottom py-2">
                    <h6>${index + 1}. ${escapeHtml(result.title)}</h6>
                    <div class="mb-2">
                        <span class="badge badge-info">–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${(result.score * 100).toFixed(1)}%</span>
                        <span class="badge badge-secondary">${escapeHtml(result.category)}</span>
                        ${result.isChunk ? '<span class="badge badge-warning">–ß–∞–Ω–∫</span>' : ''}
                    </div>
                    <div class="result-content text-muted">
                        ${escapeHtml(result.content.substring(0, 300))}...
                    </div>
                </div>
            `).join('')}
        </div>
    `;

    container.innerHTML = resultsHTML;
}

function renderDiagnostics(data) {
    console.log('üìñ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:', data);
    showNotification('info', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª–∏');
}

// Initialize page when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    if (window.location.pathname.includes('knowledge.html')) {
        initKnowledgePage();
    }
});

// ========================================
// –£–õ–£–ß–®–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ù–û–í–û–ì–û UI/UX
// ========================================

/**
 * Get category display name with emoji
 */
function getCategoryDisplayName(category) {
    const categories = {
        'books': 'üìö –ö–Ω–∏–≥–∏',
        'psychology': 'üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è',
        'self-development': '‚ú® –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ',
        'relationships': 'üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è',
        'productivity': '‚ö° –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        'mindfulness': 'üßò –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å',
        'creativity': 'üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ',
        'general': 'üìñ –û–±—â–∏–µ'
    };
    return categories[category] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

/**
 * Get status display name
 */
function getStatusDisplayName(status) {
    return status === 'published' ? '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω' : '–ß–µ—Ä–Ω–æ–≤–∏–∫';
}

/**
 * Get language display name
 */
function getLanguageDisplayName(language) {
    const languages = {
        'ru': '–†—É—Å—Å–∫–∏–π',
        'en': 'English',
        'auto': '–ê–≤—Ç–æ'
    };
    return languages[language] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

/**
 * Render tags with limit
 */
function renderTags(tags) {
    if (!tags || tags.length === 0) return '<span class="text-muted">‚Äî</span>';
    
    const visibleTags = tags.slice(0, 3);
    const hiddenCount = tags.length - 3;
    
    let html = visibleTags.map(tag => `<span class="tag-badge">${escapeHtml(tag)}</span>`).join('');
    
    if (hiddenCount > 0) {
        html += `<span class="text-muted">+${hiddenCount}</span>`;
    }
    
    return html;
}

/**
 * Show table loading state
 */
function showTableLoading() {
    const tableBody = document.querySelector('#documents-table tbody');
    if (tableBody) {
        tableBody.innerHTML = `
            <tr class="table-loading">
                <td colspan="7">
                    <div class="loading-spinner"></div>
                    üìö –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...
                </td>
            </tr>
        `;
    }
}

/**
 * Show table error state
 */
function showTableError(message) {
    const tableBody = document.querySelector('#documents-table tbody');
    if (tableBody) {
        tableBody.innerHTML = `
            <tr class="table-error">
                <td colspan="7" class="text-center">
                    ‚ùå ${message}
                    <br>
                    <button class="btn btn-secondary" onclick="loadDocuments()">üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
                </td>
            </tr>
        `;
    }
}

/**
 * Enhanced modal management
 */
function openModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }
}

function closeModal() {
    const activeModal = document.querySelector('.modal-overlay.active');
    if (activeModal) {
        activeModal.classList.remove('active');
        document.body.style.overflow = '';
    }
}

/**
 * Enhanced debounce function
 */
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

/**
 * Switch upload tabs in modal
 */
function switchUploadTab(tabName) {
    const fileTab = document.getElementById('file-upload-tab');
    const manualTab = document.getElementById('manual-upload-tab');
    const fileTabBtn = document.querySelector('.tab-button:first-child');
    const manualTabBtn = document.querySelector('.tab-button:last-child');
    const uploadBtn = document.getElementById('upload-btn');

    if (tabName === 'file') {
        if (fileTab) fileTab.style.display = 'block';
        if (manualTab) manualTab.style.display = 'none';
        if (fileTabBtn) fileTabBtn.classList.add('active');
        if (manualTabBtn) manualTabBtn.classList.remove('active');
        if (uploadBtn) uploadBtn.textContent = 'üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç';
    } else {
        if (fileTab) fileTab.style.display = 'none';
        if (manualTab) manualTab.style.display = 'block';
        if (fileTabBtn) fileTabBtn.classList.remove('active');
        if (manualTabBtn) manualTabBtn.classList.add('active');
        if (uploadBtn) uploadBtn.textContent = 'üíæ –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç';
    }
}

/**
 * Enhanced file upload setup
 */
function setupFileUploadEvents() {
    const fileInput = document.getElementById('document-file');
    const uploadArea = document.getElementById('file-upload-area');
    const fileInfo = document.getElementById('file-info');

    if (!fileInput || !uploadArea) return;

    // File input change event
    fileInput.addEventListener('change', handleFileSelect);

    // Drag and drop events
    uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.classList.add('drag-over');
    });

    uploadArea.addEventListener('dragleave', (e) => {
        e.preventDefault();
        uploadArea.classList.remove('drag-over');
    });

    uploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.classList.remove('drag-over');
        
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            fileInput.files = files;
            handleFileSelect();
        }
    });

    // Click to select file
    uploadArea.addEventListener('click', (e) => {
        if (e.target !== fileInput) {
            fileInput.click();
        }
    });
}

/**
 * Handle file selection and validation
 */
function handleFileSelect() {
    const fileInput = document.getElementById('document-file');
    const fileInfo = document.getElementById('file-info');
    const titleInput = document.getElementById('doc-title');
    
    if (!fileInput || fileInput.files.length === 0) {
        if (fileInfo) fileInfo.style.display = 'none';
        return;
    }

    const file = fileInput.files[0];
    
    // File validation
    const maxSize = 10 * 1024 * 1024; // 10MB
    const allowedTypes = [
        'text/plain',
        'application/pdf',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'application/vnd.ms-excel'
    ];

    if (file.size > maxSize) {
        showError('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB');
        fileInput.value = '';
        if (fileInfo) fileInfo.style.display = 'none';
        return;
    }

    const fileExtension = file.name.split('.').pop().toLowerCase();
    const allowedExtensions = ['txt', 'pdf', 'docx', 'doc', 'xlsx', 'xls'];
    
    if (!allowedTypes.includes(file.type) && !allowedExtensions.includes(fileExtension)) {
        showError('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: PDF, TXT, DOCX, XLS/XLSX');
        fileInput.value = '';
        if (fileInfo) fileInfo.style.display = 'none';
        return;
    }

    // Auto-fill title if empty
    if (titleInput && !titleInput.value.trim()) {
        const fileName = file.name.replace(/\.[^/.]+$/, ""); // Remove extension
        titleInput.value = fileName.replace(/[-_]/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
    }

    // Show file info
    if (fileInfo) {
        fileInfo.innerHTML = `
            <div class="selected-file">
                <div class="file-icon">${getFileIcon(fileExtension)}</div>
                <div class="file-details">
                    <div class="file-name">${file.name}</div>
                    <div class="file-size">${formatFileSize(file.size)}</div>
                </div>
                <button type="button" class="remove-file" onclick="removeSelectedFile()">√ó</button>
            </div>
        `;
        fileInfo.style.display = 'block';
    }
}

/**
 * Remove selected file
 */
function removeSelectedFile() {
    const fileInput = document.getElementById('document-file');
    const fileInfo = document.getElementById('file-info');
    
    if (fileInput) fileInput.value = '';
    if (fileInfo) fileInfo.style.display = 'none';
}

/**
 * Get file icon based on extension
 */
function getFileIcon(extension) {
    const icons = {
        'pdf': 'üìÑ',
        'txt': 'üìù',
        'docx': 'üìò',
        'doc': 'üìò',
        'xlsx': 'üìä',
        'xls': 'üìä'
    };
    return icons[extension] || 'üìÑ';
}

/**
 * Format file size for display
 */
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

/**
 * Upload document (enhanced version)
 */
async function uploadDocument() {
    const activeTab = document.querySelector('.upload-tab-content[style*="block"], .upload-tab-content.active');
    const isFileUpload = activeTab && activeTab.id === 'file-upload-tab';
    
    if (isFileUpload) {
        await uploadFileDocument();
    } else {
        await uploadManualDocument();
    }
}

/**
 * Show upload progress
 */
function showUploadProgress(message) {
    const progress = document.getElementById('upload-progress');
    const progressText = document.getElementById('progress-text');
    const uploadBtn = document.getElementById('upload-btn');
    
    if (progress) progress.style.display = 'block';
    if (progressText) progressText.textContent = message;
    if (uploadBtn) {
        uploadBtn.disabled = true;
        uploadBtn.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
    }
    
    updateUploadProgress(10, message);
}

/**
 * Update upload progress
 */
function updateUploadProgress(percent, message) {
    const progressFill = document.getElementById('progress-fill');
    const progressText = document.getElementById('progress-text');
    
    if (progressFill) progressFill.style.width = percent + '%';
    if (message && progressText) progressText.textContent = message;
}

/**
 * Hide upload progress
 */
function hideUploadProgress() {
    const progress = document.getElementById('upload-progress');
    const uploadBtn = document.getElementById('upload-btn');
    
    if (progress) progress.style.display = 'none';
    if (uploadBtn) {
        uploadBtn.disabled = false;
        uploadBtn.textContent = 'üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç';
    }
}

console.log('üìö Enhanced UI/UX functions loaded successfully');

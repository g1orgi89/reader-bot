/**
 * @fileoverview Reader Analytics Dashboard JavaScript - –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
 * @description –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–ª–Ω—ã–º Analytics API –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @version 4.0.0
 */

/**
 * @typedef {Object} DashboardOverview
 * @property {number} totalUsers - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @property {number} newUsers - –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
 * @property {number} totalQuotes - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç
 * @property {number} avgQuotesPerUser - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @property {number} activeUsers - –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
 * @property {number} promoUsage - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
 */

/**
 * @typedef {Object} RetentionData
 * @property {string} cohort - –ö–æ–≥–æ—Ä—Ç–∞ (YYYY-MM)
 * @property {number} size - –†–∞–∑–º–µ—Ä –∫–æ–≥–æ—Ä—Ç—ã
 * @property {number} week1 - Retention –Ω–µ–¥–µ–ª—è 1 (%)
 * @property {number} week2 - Retention –Ω–µ–¥–µ–ª—è 2 (%)
 * @property {number} week3 - Retention –Ω–µ–¥–µ–ª—è 3 (%)
 * @property {number} week4 - Retention –Ω–µ–¥–µ–ª—è 4 (%)
 */

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–∞—à–±–æ—Ä–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 */
class ReaderAnalyticsDashboard {
  constructor() {
    this.currentPeriod = '7d';
    this.charts = {};
    this.refreshInterval = null;
    this.API_BASE = window.location.origin + '/api';
    this.isLoading = false;
    this.fallbackMode = false;
    
    console.log('üìä Reader Analytics Dashboard v4.0.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    this.init();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞
   */
  async init() {
    try {
      this.setupEventListeners();
      this.showLoading(true);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
      await this.checkAPIHealth();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      await this.loadAllData();
      
      // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
      this.startAutoRefresh();
      
      this.showLoading(false);
      this.showNotification('success', '–î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
      this.showLoading(false);
      this.showNotification('error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞: ' + error.message);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
   */
  async checkAPIHealth() {
    try {
      console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ API...');
      
      const response = await fetch(`${this.API_BASE}/analytics/test`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      console.log('üìä API —Ä–∞–±–æ—Ç–∞–µ—Ç:', data.message, data.version);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
      this.updateAPIStatus(true, data.version);
      
    } catch (error) {
      console.warn('üìä API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ fallback —Ä–µ–∂–∏–º–µ:', error);
      this.fallbackMode = true;
      this.updateAPIStatus(false, null);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞
   */
  async loadAllData() {
    try {
      console.log(`üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: ${this.currentPeriod}`);
      
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
      const [dashboardStats, retentionData, topContent] = await Promise.all([
        this.fetchDashboardStats(),
        this.fetchRetentionData(),
        this.fetchTopContent()
      ]);

      // –û–±–Ω–æ–≤–ª—è–µ–º UI
      this.updateStatCards(dashboardStats.overview);
      this.updateSourceChart(dashboardStats.sourceStats);
      this.updateUTMChart(dashboardStats.utmStats);
      this.updateRetentionChart(retentionData);
      this.updateTopContent(topContent);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      this.updateMetadata(dashboardStats);

      console.log('üìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');

    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
   */
  async fetchDashboardStats() {
    try {
      const response = await fetch(
        `${this.API_BASE}/analytics/dashboard?period=${this.currentPeriod}`,
        {
          method: 'GET',
          headers: { 'Accept': 'application/json' }
        }
      );

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${response.status}`);
      }

      const result = await response.json();
      
      if (!result.success) {
        throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API');
      }

      this.fallbackMode = result.fallbackMode || false;
      return result.data;

    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è dashboard —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return this.getFallbackDashboardData();
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö retention
   */
  async fetchRetentionData() {
    try {
      const response = await fetch(`${this.API_BASE}/analytics/retention`, {
        method: 'GET',
        headers: { 'Accept': 'application/json' }
      });

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è retention: ${response.status}`);
      }

      const result = await response.json();
      
      if (!result.success) {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ retention API');
      }

      return result.data;

    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è retention –¥–∞–Ω–Ω—ã—Ö:', error);
      return this.getFallbackRetentionData();
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  async fetchTopContent() {
    try {
      const response = await fetch(
        `${this.API_BASE}/analytics/top-content?period=${this.currentPeriod}`,
        {
          method: 'GET',
          headers: { 'Accept': 'application/json' }
        }
      );

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${response.status}`);
      }

      const result = await response.json();
      
      if (!result.success) {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ top content API');
      }

      return result.data;

    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
      return this.getFallbackTopContent();
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   * @param {DashboardOverview} overview - –û–±–∑–æ—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  updateStatCards(overview) {
    const elements = {
      'total-users-count': overview.totalUsers,
      'new-users-count': overview.newUsers,
      'total-quotes-count': overview.totalQuotes,
      'avg-quotes-count': overview.avgQuotesPerUser,
      'active-users-count': overview.activeUsers,
      'promo-usage-count': overview.promoUsage
    };

    Object.entries(elements).forEach(([id, value]) => {
      const element = document.getElementById(id);
      if (element) {
        // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞
        this.animateNumber(element, value);
      }
    });

    console.log('üìä –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
  }

  /**
   * –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞
   * @param {HTMLElement} element - –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   * @param {number} targetValue - –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
   */
  animateNumber(element, targetValue) {
    const currentValue = parseInt(element.textContent) || 0;
    const increment = (targetValue - currentValue) / 20;
    let current = currentValue;
    
    const timer = setInterval(() => {
      current += increment;
      if ((increment > 0 && current >= targetValue) || (increment < 0 && current <= targetValue)) {
        element.textContent = targetValue;
        clearInterval(timer);
      } else {
        element.textContent = Math.round(current);
      }
    }, 50);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   * @param {Array} sourceStats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   */
  updateSourceChart(sourceStats) {
    const ctx = document.getElementById('sourceChart');
    if (!ctx) {
      console.warn('üìä –ì—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫
    if (this.charts.source) {
      this.charts.source.destroy();
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const labels = sourceStats.map(s => s._id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
    const data = sourceStats.map(s => s.count);
    
    // –¶–≤–µ—Ç–∞ –≤ —Å—Ç–∏–ª–µ "–ß–∏—Ç–∞—Ç–µ–ª—è"
    const colors = [
      '#8B4513', '#CD853F', '#DEB887', '#F4A460', 
      '#D2691E', '#A0522D', '#8FBC8F', '#9ACD32'
    ];

    this.charts.source = new Chart(ctx, {
      type: 'doughnut',
      data: {
        labels: labels,
        datasets: [{
          data: data,
          backgroundColor: colors.slice(0, data.length),
          borderColor: '#ffffff',
          borderWidth: 2
        }]
      },
      options: {
        responsive: true,
        plugins: {
          title: {
            display: true,
            text: 'üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π "–ß–∏—Ç–∞—Ç–µ–ª—è"',
            font: { size: 16, weight: 'bold' }
          },
          legend: {
            position: 'bottom',
            labels: {
              padding: 15,
              usePointStyle: true
            }
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                const percentage = ((context.parsed / total) * 100).toFixed(1);
                return `${context.label}: ${context.parsed} (${percentage}%)`;
              }
            }
          }
        }
      }
    });

    console.log('üìä –ì—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ UTM –∫–∞–º–ø–∞–Ω–∏–π
   * @param {Array} utmStats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ UTM
   */
  updateUTMChart(utmStats) {
    const ctx = document.getElementById('utmChart');
    if (!ctx || !utmStats.length) {
      console.warn('üìä –ì—Ä–∞—Ñ–∏–∫ UTM –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
      return;
    }

    if (this.charts.utm) {
      this.charts.utm.destroy();
    }

    const labels = utmStats.map(u => u.campaign || u._id);
    const clicks = utmStats.map(u => u.clicks);
    const uniqueUsers = utmStats.map(u => u.uniqueUsers);

    this.charts.utm = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: labels,
        datasets: [
          {
            label: '–ö–ª–∏–∫–∏',
            data: clicks,
            backgroundColor: '#CD853F',
            borderColor: '#8B4513',
            borderWidth: 1
          },
          {
            label: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            data: uniqueUsers,
            backgroundColor: '#DEB887',
            borderColor: '#D2691E',
            borderWidth: 1
          }
        ]
      },
      options: {
        responsive: true,
        plugins: {
          title: {
            display: true,
            text: 'üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å UTM –∫–∞–º–ø–∞–Ω–∏–π',
            font: { size: 16, weight: 'bold' }
          },
          legend: {
            position: 'top'
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            grid: {
              color: '#f0f0f0'
            }
          },
          x: {
            grid: {
              display: false
            }
          }
        },
        interaction: {
          intersect: false
        }
      }
    });

    console.log('üìä –ì—Ä–∞—Ñ–∏–∫ UTM –æ–±–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ retention
   * @param {RetentionData[]} retentionData - –î–∞–Ω–Ω—ã–µ retention
   */
  updateRetentionChart(retentionData) {
    const ctx = document.getElementById('retentionChart');
    if (!ctx || !retentionData.length) {
      console.warn('üìä –ì—Ä–∞—Ñ–∏–∫ retention –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
      return;
    }

    if (this.charts.retention) {
      this.charts.retention.destroy();
    }

    const labels = ['–ù–µ–¥–µ–ª—è 1', '–ù–µ–¥–µ–ª—è 2', '–ù–µ–¥–µ–ª—è 3', '–ù–µ–¥–µ–ª—è 4'];
    const datasets = retentionData.slice(-6).map((cohort, index) => ({
      label: `–ö–æ–≥–æ—Ä—Ç–∞ ${cohort.cohort} (${cohort.size} –ø–æ–ª—å–∑.)`,
      data: [cohort.week1, cohort.week2, cohort.week3, cohort.week4],
      borderColor: this.getRetentionColor(index),
      backgroundColor: this.getRetentionColor(index, 0.1),
      tension: 0.3,
      fill: false,
      pointRadius: 4,
      pointHoverRadius: 6
    }));

    this.charts.retention = new Chart(ctx, {
      type: 'line',
      data: {
        labels: labels,
        datasets: datasets
      },
      options: {
        responsive: true,
        plugins: {
          title: {
            display: true,
            text: 'üìà Retention –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º',
            font: { size: 16, weight: 'bold' }
          },
          legend: {
            position: 'bottom'
          },
          tooltip: {
            callbacks: {
              title: function(context) {
                return `${context[0].label}`;
              },
              label: function(context) {
                return `${context.dataset.label}: ${context.parsed.y}%`;
              }
            }
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            max: 100,
            grid: {
              color: '#f0f0f0'
            },
            ticks: {
              callback: function(value) {
                return value + '%';
              }
            }
          },
          x: {
            grid: {
              display: false
            }
          }
        },
        interaction: {
          intersect: false
        }
      }
    });

    console.log('üìä –ì—Ä–∞—Ñ–∏–∫ retention –æ–±–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   * @param {Object} topContent - –¢–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç
   */
  updateTopContent(topContent) {
    // –¢–æ–ø –∞–≤—Ç–æ—Ä—ã
    this.updateTopList('top-authors', topContent.topAuthors, (author, index) => `
      <div class="top-item">
        <span class="rank">${index + 1}</span>
        <span class="name">üìö ${author._id}</span>
        <span class="count">${author.count} —Ü–∏—Ç–∞—Ç</span>
      </div>
    `);

    // –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    this.updateTopList('top-categories', topContent.topCategories, (category, index) => `
      <div class="top-item">
        <span class="rank">${index + 1}</span>
        <span class="name">üè∑Ô∏è ${category._id}</span>
        <span class="count">${category.count} —Ü–∏—Ç–∞—Ç</span>
      </div>
    `);

    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
    this.updateTopList('popular-quotes', topContent.popularQuotes, (quote, index) => `
      <div class="popular-quote">
        <div class="quote-rank">${index + 1}</div>
        <div class="quote-content">
          <div class="quote-text">"${this.truncateText(quote._id, 80)}..."</div>
          <div class="quote-meta">
            ${quote.author ? `‚Äî ${quote.author}` : '‚Äî –ê–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'} 
            <span class="usage-count">(${quote.count} —Ä–∞–∑)</span>
          </div>
        </div>
      </div>
    `);

    console.log('üìä –¢–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–ø —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
   * @param {Array} items - –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param {Function} templateFn - –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è HTML
   */
  updateTopList(containerId, items, templateFn) {
    const container = document.getElementById(containerId);
    if (!container) {
      console.warn(`üìä –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    if (!items || items.length === 0) {
      container.innerHTML = '<div class="no-data">üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
      return;
    }

    container.innerHTML = items.map(templateFn).join('');
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
   * @param {Object} dashboardStats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞
   */
  updateMetadata(dashboardStats) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const timestampElement = document.getElementById('last-update');
    if (timestampElement) {
      timestampElement.textContent = new Date().toLocaleString('ru-RU');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä fallback —Ä–µ–∂–∏–º–∞
    const fallbackIndicator = document.getElementById('fallback-indicator');
    if (fallbackIndicator) {
      if (this.fallbackMode || dashboardStats.fallbackMode) {
        fallbackIndicator.style.display = 'inline-block';
        fallbackIndicator.textContent = '‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ';
        fallbackIndicator.title = '–û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î';
      } else {
        fallbackIndicator.style.display = 'none';
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
    const periodElement = document.getElementById('current-period');
    if (periodElement) {
      const periodNames = {
        '1d': '–∑–∞ –¥–µ–Ω—å',
        '7d': '–∑–∞ –Ω–µ–¥–µ–ª—é', 
        '30d': '–∑–∞ –º–µ—Å—è—Ü',
        '90d': '–∑–∞ 3 –º–µ—Å—è—Ü–∞'
      };
      periodElement.textContent = periodNames[this.currentPeriod] || this.currentPeriod;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ API
   * @param {boolean} isOnline - –°—Ç–∞—Ç—É—Å API
   * @param {string} version - –í–µ—Ä—Å–∏—è API
   */
  updateAPIStatus(isOnline, version) {
    const statusElement = document.getElementById('api-status');
    if (statusElement) {
      if (isOnline) {
        statusElement.innerHTML = `‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç ${version ? `(v${version})` : ''}`;
        statusElement.className = 'api-status online';
      } else {
        statusElement.innerHTML = '‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (fallback —Ä–µ–∂–∏–º)';
        statusElement.className = 'api-status offline';
      }
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  setupEventListeners() {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
    const periodSelect = document.getElementById('date-range');
    if (periodSelect) {
      periodSelect.addEventListener('change', async (e) => {
        const newPeriod = e.target.value;
        if (newPeriod !== this.currentPeriod) {
          this.currentPeriod = newPeriod;
          console.log(`üìä –ü–µ—Ä–∏–æ–¥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${newPeriod}`);
          
          this.showLoading(true);
          try {
            await this.loadAllData();
            this.showNotification('success', `–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: ${newPeriod}`);
          } catch (error) {
            this.showNotification('error', '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
          } finally {
            this.showLoading(false);
          }
        }
      });
    }

    // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const refreshBtn = document.getElementById('refresh-data');
    if (refreshBtn) {
      refreshBtn.addEventListener('click', async () => {
        if (this.isLoading) return;
        
        console.log('üìä –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö');
        this.showLoading(true);
        
        try {
          await this.loadAllData();
          this.showNotification('success', '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
        } catch (error) {
          this.showNotification('error', '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ' + error.message);
        } finally {
          this.showLoading(false);
        }
      });
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    const exportBtn = document.getElementById('export-data');
    if (exportBtn) {
      exportBtn.addEventListener('click', () => this.exportData());
    }

    // –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
    const testApiBtn = document.getElementById('test-api');
    if (testApiBtn) {
      testApiBtn.addEventListener('click', () => this.testAPI());
    }
  }

  /**
   * –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   */
  startAutoRefresh() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    this.refreshInterval = setInterval(async () => {
      if (!this.isLoading) {
        console.log('üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö');
        try {
          await this.loadAllData();
        } catch (error) {
          console.warn('üìä –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        }
      }
    }, 5 * 60 * 1000);

    console.log('üìä –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)');
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  stopAutoRefresh() {
    if (this.refreshInterval) {
      clearInterval(this.refreshInterval);
      this.refreshInterval = null;
      console.log('üìä –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
   */
  async exportData() {
    try {
      console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
      
      const response = await fetch(
        `${this.API_BASE}/analytics/export?format=json&period=${this.currentPeriod}`,
        {
          method: 'GET',
          headers: { 'Accept': 'application/json' }
        }
      );

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
      }

      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const blob = await response.blob();
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `reader-analytics-${this.currentPeriod}-${Date.now()}.json`;
      a.click();
      URL.revokeObjectURL(url);

      this.showNotification('success', '–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
      this.showNotification('error', '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ' + error.message);
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
   */
  async testAPI() {
    try {
      console.log('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API');
      
      this.showLoading(true);
      await this.checkAPIHealth();
      
      this.showNotification('success', 'API —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (error) {
      this.showNotification('error', 'API —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: ' + error.message);
    } finally {
      this.showLoading(false);
    }
  }

  /**
   * –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
   * @param {boolean} show - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∑–∫—É
   */
  showLoading(show) {
    this.isLoading = show;
    
    const loadingElements = document.querySelectorAll('.loading-indicator');
    loadingElements.forEach(el => {
      el.style.display = show ? 'block' : 'none';
    });

    const refreshBtn = document.getElementById('refresh-data');
    if (refreshBtn) {
      refreshBtn.disabled = show;
      refreshBtn.textContent = show ? 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å';
    }
  }

  /**
   * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (success, error, warning)
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
   */
  showNotification(type, message) {
    console.log(`üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ [${type}]: ${message}`);
    
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
      <span class="notification-icon">${type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : '‚ö†Ô∏è'}</span>
      <span class="notification-message">${message}</span>
    `;
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 5000);
  }

  // ========================================
  // UTILITY –ú–ï–¢–û–î–´
  // ========================================

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è retention –≥—Ä–∞—Ñ–∏–∫–∞
   * @param {number} index - –ò–Ω–¥–µ–∫—Å
   * @param {number} alpha - –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
   * @returns {string} CSS —Ü–≤–µ—Ç
   */
  getRetentionColor(index, alpha = 1) {
    const colors = [
      `rgba(139, 69, 19, ${alpha})`,    // SaddleBrown
      `rgba(205, 133, 63, ${alpha})`,   // Peru
      `rgba(222, 184, 135, ${alpha})`,  // BurlyWood  
      `rgba(244, 164, 96, ${alpha})`,   // SandyBrown
      `rgba(210, 105, 30, ${alpha})`,   // Chocolate
      `rgba(160, 82, 45, ${alpha})`     // Sienna
    ];
    return colors[index % colors.length];
  }

  /**
   * –û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞
   * @param {string} text - –¢–µ–∫—Å—Ç
   * @param {number} maxLength - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
   * @returns {string} –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   */
  truncateText(text, maxLength) {
    if (!text || text.length <= maxLength) return text;
    return text.substring(0, maxLength).trim();
  }

  // ========================================
  // FALLBACK –î–ê–ù–ù–´–ï
  // ========================================

  getFallbackDashboardData() {
    return {
      overview: {
        totalUsers: 15,
        newUsers: 4,
        totalQuotes: 58,
        avgQuotesPerUser: 3.9,
        activeUsers: 11,
        promoUsage: 3
      },
      sourceStats: [
        { _id: 'Instagram', count: 6 },
        { _id: 'Telegram', count: 5 },
        { _id: 'YouTube', count: 3 },
        { _id: '–î—Ä—É–∑—å—è', count: 1 }
      ],
      utmStats: [
        { campaign: 'reader_recommendations', clicks: 18, uniqueUsers: 10 },
        { campaign: 'weekly_report', clicks: 25, uniqueUsers: 14 }
      ],
      fallbackMode: true
    };
  }

  getFallbackRetentionData() {
    return [
      { cohort: '2024-12', size: 10, week1: 90, week2: 75, week3: 60, week4: 50 },
      { cohort: '2025-01', size: 15, week1: 85, week2: 70, week3: 58, week4: 45 }
    ];
  }

  getFallbackTopContent() {
    return {
      topAuthors: [
        { _id: '–≠—Ä–∏—Ö –§—Ä–æ–º–º', count: 12 },
        { _id: '–ú–∞—Ä–∏–Ω–∞ –¶–≤–µ—Ç–∞–µ–≤–∞', count: 8 },
        { _id: '–ê–Ω–Ω–∞ –ë—É—Å–µ–ª', count: 6 }
      ],
      topCategories: [
        { _id: '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', count: 22 },
        { _id: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è', count: 15 },
        { _id: '–§–∏–ª–æ—Å–æ—Ñ–∏—è', count: 11 }
      ],
      popularQuotes: [
        { _id: '–í –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ ‚Äî —Ü–µ–ª–∞—è –∂–∏–∑–Ω—å', author: '–ú–∞—Ä–∏–Ω–∞ –¶–≤–µ—Ç–∞–µ–≤–∞', count: 4 },
        { _id: '–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ª—é–±–∏—Ç—å', author: '–≠—Ä–∏—Ö –§—Ä–æ–º–º', count: 3 }
      ],
      fallbackMode: true
    };
  }

  /**
   * –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  destroy() {
    this.stopAutoRefresh();
    
    // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏
    Object.values(this.charts).forEach(chart => {
      if (chart && typeof chart.destroy === 'function') {
        chart.destroy();
      }
    });
    
    this.charts = {};
    console.log('üìä Reader Analytics Dashboard —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
  }
}

// ========================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ========================================

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
  console.log('üìä DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Reader Analytics Dashboard...');
  
  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
  window.readerDashboard = new ReaderAnalyticsDashboard();
});

// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
  if (window.readerDashboard) {
    window.readerDashboard.destroy();
  }
});

console.log('üìä Reader Analytics Dashboard v4.0.0 JavaScript –∑–∞–≥—Ä—É–∂–µ–Ω');
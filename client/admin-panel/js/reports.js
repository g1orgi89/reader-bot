/**
 * @fileoverview JavaScript –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç—á–µ—Ç–æ–≤ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * –†–∞–±–æ—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ API
 * @author g1orgi89
 */

/**
 * @typedef {Object} ReportStatistics
 * @property {number} totalReports - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤
 * @property {number} reportsWithFeedback - –û—Ç—á–µ—Ç—ã —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
 * @property {number} feedbackRate - –ü—Ä–æ—Ü–µ–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
 * @property {number} averageRating - –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞
 */

/**
 * @typedef {Object} WeeklyReport
 * @property {string} id - ID –æ—Ç—á–µ—Ç–∞
 * @property {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @property {number} weekNumber - –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
 * @property {number} year - –ì–æ–¥
 * @property {number} quotesCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç
 * @property {string} sentAt - –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @property {boolean} isRead - –ü—Ä–æ—á–∏—Ç–∞–Ω –ª–∏ –æ—Ç—á–µ—Ç
 * @property {Object} feedback - –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
 * @property {Array<string>} dominantThemes - –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ç–µ–º—ã
 * @property {string} emotionalTone - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
 */

class ReportsManager {
    constructor() {
        this.currentFilters = {
            type: 'all',
            dateFrom: null,
            dateTo: null,
            userSearch: ''
        };
        this.currentPage = 1;
        this.limit = 20;
        this.baseApiUrl = '/api/reader';
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç—á–µ—Ç–æ–≤
     */
    async init() {
        console.log('üìà –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ReportsManager');
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await this.loadStatistics();
            await this.loadReports();
            await this.loadSystemStatus();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.setupEventListeners();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            this.setDefaultDates();
            
            console.log('‚úÖ ReportsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ReportsManager:', error);
            this.showNotification('error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤');
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –§–∏–ª—å—Ç—Ä—ã
        const reportTypeSelect = document.getElementById('report-type');
        const dateFromInput = document.getElementById('date-from');
        const dateToInput = document.getElementById('date-to');
        const userSearchInput = document.getElementById('user-search');

        if (reportTypeSelect) {
            reportTypeSelect.addEventListener('change', () => this.handleFilterChange());
        }

        if (dateFromInput) {
            dateFromInput.addEventListener('change', () => this.handleFilterChange());
        }

        if (dateToInput) {
            dateToInput.addEventListener('change', () => this.handleFilterChange());
        }

        if (userSearchInput) {
            userSearchInput.addEventListener('input', this.debounce(() => this.handleFilterChange(), 500));
        }

        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        window.applyFilters = () => this.applyFilters();
        window.resetFilters = () => this.resetFilters();
        window.generateReport = () => this.generateManualReport();
        window.exportReports = () => this.exportReports();
        window.viewReport = (reportId) => this.viewReport(reportId);
        window.resendReport = (reportId) => this.resendReport(reportId);
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
     */
    async loadStatistics() {
        try {
            console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç—á–µ—Ç–æ–≤...');
            
            const response = await fetch(`${this.baseApiUrl}/reports/analytics/overview?days=30`);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const result = await response.json();
            
            if (result.success && result.data) {
                this.updateStatisticsDisplay(result.data);
                console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', result.data);
            } else {
                throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            this.updateStatisticsDisplay(this.getDefaultStatistics());
            this.showNotification('warning', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateStatisticsDisplay(data) {
        const overview = data.overview || {};
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.updateStatCard('.stat-card:nth-child(1) .stat-value', overview.totalReports || 0);
        this.updateStatCard('.stat-card:nth-child(2) .stat-value', this.calculateMonthlyReports(overview.totalReports));
        this.updateStatCard('.stat-card:nth-child(3) .stat-value', `${overview.feedbackRate || 0}%`);
        this.updateStatCard('.stat-card:nth-child(4) .stat-value', overview.averageRating?.toFixed(1) || '0.0');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
        this.updateChangeIndicators(overview);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateStatCard(selector, value) {
        const element = document.querySelector(selector);
        if (element) {
            element.textContent = value;
        }
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
     */
    calculateMonthlyReports(totalReports) {
        // –ü—Ä–∏–º–µ—Ä–Ω–æ 1/4 –æ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
        return Math.floor((totalReports || 0) / 4);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    updateChangeIndicators(overview) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ "–ó–∞–≥—Ä—É–∂–µ–Ω–æ"
        const changeElements = document.querySelectorAll('.stat-change');
        changeElements.forEach(element => {
            element.textContent = '–û–±–Ω–æ–≤–ª–µ–Ω–æ';
            element.className = 'stat-change positive';
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    getDefaultStatistics() {
        return {
            overview: {
                totalReports: 0,
                reportsWithFeedback: 0,
                feedbackRate: 0,
                averageRating: 0
            }
        };
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
     */
    async loadReports() {
        try {
            console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–æ–≤...');
            
            // –°—Ç—Ä–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            const params = new URLSearchParams({
                page: this.currentPage,
                limit: this.limit,
                ...this.buildFilterParams()
            });
            
            const response = await fetch(`${this.baseApiUrl}/reports/list?${params}`);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const result = await response.json();
            
            if (result.success && result.data) {
                await this.updateReportsTable(result.data.reports);
                console.log('‚úÖ –û—Ç—á–µ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', result.data.reports.length);
            } else {
                throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–æ–≤');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–æ–≤:', error);
            this.showEmptyReportsTable();
            this.showNotification('warning', '–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–æ–≤');
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await this.loadDemoReports();
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ-–æ—Ç—á–µ—Ç–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
     */
    async loadDemoReports() {
        const demoReports = this.generateDemoReports();
        await this.updateReportsTable(demoReports);
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è API
     */
    buildFilterParams() {
        const params = {};
        
        if (this.currentFilters.dateFrom) {
            params.dateFrom = this.currentFilters.dateFrom;
        }
        
        if (this.currentFilters.dateTo) {
            params.dateTo = this.currentFilters.dateTo;
        }
        
        if (this.currentFilters.type && this.currentFilters.type !== 'all') {
            params.type = this.currentFilters.type;
        }
        
        if (this.currentFilters.userSearch.trim()) {
            params.search = this.currentFilters.userSearch.trim();
        }
        
        return params;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—á–µ—Ç–æ–≤
     * @param {Array} reports - –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–æ–≤
     */
    async updateReportsTable(reports) {
        const tableBody = document.querySelector('#reports-table tbody');
        if (!tableBody) {
            console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        try {
            if (reports.length === 0) {
                this.showEmptyReportsTable();
                return;
            }

            // –°—Ç—Ä–æ–∏–º HTML –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
            const rowsHtml = reports.map(report => this.buildReportRow(report)).join('');
            tableBody.innerHTML = rowsHtml;
            
            console.log(`‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ ${reports.length} –æ—Ç—á–µ—Ç–æ–≤`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—á–µ—Ç–æ–≤:', error);
            this.showEmptyReportsTable();
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-–æ—Ç—á–µ—Ç–æ–≤
     */
    generateDemoReports() {
        const demoReports = [
            {
                id: 'R001',
                userId: 'user1',
                userName: '–ú–∞—Ä–∏—è –ö.',
                type: 'weekly',
                period: '21-27 —è–Ω–≤ 2025',
                quotesCount: 7,
                rating: 5,
                sentAt: '2025-01-28T10:00:00Z',
                status: 'sent',
                dominantThemes: ['–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', '–õ—é–±–æ–≤—å'],
                emotionalTone: 'positive'
            },
            {
                id: 'R002',
                userId: 'user2',
                userName: '–ï–ª–µ–Ω–∞ –ê.',
                type: 'monthly',
                period: '–Ø–Ω–≤–∞—Ä—å 2025',
                quotesCount: 23,
                rating: 4,
                sentAt: '2025-01-31T12:00:00Z',
                status: 'sent',
                dominantThemes: ['–§–∏–ª–æ—Å–æ—Ñ–∏—è', '–ú—É–¥—Ä–æ—Å—Ç—å'],
                emotionalTone: 'thoughtful'
            },
            {
                id: 'R003',
                userId: 'user3',
                userName: '–ê–Ω–Ω–∞ –ú.',
                type: 'weekly',
                period: '28 —è–Ω–≤ - 3 —Ñ–µ–≤ 2025',
                quotesCount: 5,
                rating: 5,
                sentAt: '2025-02-04T10:00:00Z',
                status: 'sent',
                dominantThemes: ['–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–û—Ç–Ω–æ—à–µ–Ω–∏—è'],
                emotionalTone: 'positive'
            }
        ];

        return demoReports;
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞
     * @param {Object} report - –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
     */
    buildReportRow(report) {
        const typeBadgeClass = report.type === 'weekly' ? 'weekly' : 'monthly';
        const statusBadgeClass = this.getStatusBadgeClass(report.status);
        const ratingStars = this.buildRatingStars(report.rating);
        const formattedDate = this.formatDate(report.sentAt);

        return `
            <tr>
                <td>#${report.id}</td>
                <td>${this.escapeHtml(report.userName)}</td>
                <td><span class="type-badge ${typeBadgeClass}">${this.getTypeLabel(report.type)}</span></td>
                <td>${this.escapeHtml(report.period)}</td>
                <td>${report.quotesCount}</td>
                <td>${ratingStars}</td>
                <td>${formattedDate}</td>
                <td><span class="status-badge ${statusBadgeClass}">${this.getStatusLabel(report.status)}</span></td>
                <td>
                    <button class="btn btn-sm" onclick="viewReport('${report.id}')">–ü—Ä–æ—Å–º–æ—Ç—Ä</button>
                    <button class="btn btn-sm btn-secondary" onclick="resendReport('${report.id}')">–ü–µ—Ä–µ—Å–ª–∞—Ç—å</button>
                </td>
            </tr>
        `;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å-–±–µ–π–¥–∂–∞
     */
    getStatusBadgeClass(status) {
        switch (status) {
            case 'sent': return 'status-resolved';
            case 'automated': return 'status-pending';
            default: return 'status-open';
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∫–∏ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
     */
    getTypeLabel(type) {
        switch (type) {
            case 'weekly': return '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π';
            case 'monthly': return '–ú–µ—Å—è—á–Ω—ã–π';
            default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
     */
    getStatusLabel(status) {
        switch (status) {
            case 'sent': return '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω';
            case 'automated': return '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π';
            default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞
     */
    buildRatingStars(rating) {
        if (!rating) return '‚Äî';
        
        let stars = '';
        for (let i = 1; i <= 5; i++) {
            stars += i <= rating ? '‚≠ê' : '‚òÜ';
        }
        return stars;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
     */
    formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
     */
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    /**
     * –ü–æ–∫–∞–∑ –ø—É—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã
     */
    showEmptyReportsTable() {
        const tableBody = document.querySelector('#reports-table tbody');
        if (tableBody) {
            tableBody.innerHTML = `
                <tr>
                    <td colspan="9" class="text-center" style="padding: 2rem; color: var(--text-muted);">
                        üì≠ –û—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                        <br><small>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç</small>
                    </td>
                </tr>
            `;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
     */
    async loadSystemStatus() {
        try {
            console.log('üîß –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã...');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å Telegram
            const telegramResponse = await fetch(`${this.baseApiUrl}/reports/telegram/status`);
            if (telegramResponse.ok) {
                const telegramResult = await telegramResponse.json();
                if (telegramResult.success) {
                    this.updateTelegramStatus(telegramResult.data);
                }
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å cron
            const cronResponse = await fetch(`${this.baseApiUrl}/reports/cron/status`);
            if (cronResponse.ok) {
                const cronResult = await cronResponse.json();
                if (cronResult.success) {
                    this.updateSystemInfo(cronResult.data);
                }
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã:', error);
            this.updateTelegramStatus({ botStatus: 'unknown' });
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Telegram
     */
    updateTelegramStatus(data) {
        const statusElement = document.getElementById('telegram-status');
        if (statusElement) {
            switch (data.botStatus) {
                case 'active':
                    statusElement.textContent = 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω';
                    break;
                case 'inactive':
                    statusElement.textContent = 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
                    break;
                default:
                    statusElement.textContent = 'üü° –ü—Ä–æ–≤–µ—Ä–∫–∞...';
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
     */
    updateSystemInfo(data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞
        const lastReportElement = document.getElementById('last-report-time');
        if (lastReportElement && data.moscowTime) {
            lastReportElement.textContent = data.moscowTime;
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    setDefaultDates() {
        const today = new Date();
        const monthAgo = new Date();
        monthAgo.setMonth(monthAgo.getMonth() - 1);
        
        const dateFrom = document.getElementById('date-from');
        const dateTo = document.getElementById('date-to');
        
        if (dateFrom && !dateFrom.value) {
            dateFrom.value = monthAgo.toISOString().split('T')[0];
            this.currentFilters.dateFrom = dateFrom.value;
        }
        
        if (dateTo && !dateTo.value) {
            dateTo.value = today.toISOString().split('T')[0];
            this.currentFilters.dateTo = dateTo.value;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    handleFilterChange() {
        this.updateFiltersFromForm();
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        this.loadReports();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ —Ñ–æ—Ä–º—ã
     */
    updateFiltersFromForm() {
        const reportType = document.getElementById('report-type')?.value || 'all';
        const dateFrom = document.getElementById('date-from')?.value || '';
        const dateTo = document.getElementById('date-to')?.value || '';
        const userSearch = document.getElementById('user-search')?.value || '';

        this.currentFilters = {
            type: reportType,
            dateFrom: dateFrom,
            dateTo: dateTo,
            userSearch: userSearch
        };
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    async applyFilters() {
        console.log('üìà –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ç—á–µ—Ç–æ–≤');
        this.updateFiltersFromForm();
        this.currentPage = 1; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await this.loadReports();
        this.showNotification('info', '–§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    }

    /**
     * –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    async resetFilters() {
        console.log('üìà –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤');
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        const reportType = document.getElementById('report-type');
        const userSearch = document.getElementById('user-search');
        
        if (reportType) reportType.value = 'all';
        if (userSearch) userSearch.value = '';
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.setDefaultDates();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        this.currentFilters = {
            type: 'all',
            dateFrom: document.getElementById('date-from')?.value || '',
            dateTo: document.getElementById('date-to')?.value || '',
            userSearch: ''
        };
        
        this.currentPage = 1;
        await this.loadReports();
        this.showNotification('info', '–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤—Ä—É—á–Ω—É—é
     */
    async generateManualReport() {
        console.log('üìà –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤—Ä—É—á–Ω—É—é');
        
        try {
            const userId = prompt('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:');
            if (!userId) return;
            
            const response = await fetch(`${this.baseApiUrl}/reports/weekly/generate`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ userId })
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.showNotification('success', '–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
                await this.loadReports();
            } else {
                throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', error);
            this.showNotification('error', '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: ' + error.message);
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤
     */
    async exportReports() {
        console.log('üìà –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤');
        this.showNotification('info', '–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    }

    /**
     * –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞
     */
    async viewReport(reportId) {
        console.log('üìà –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞:', reportId);
        
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—Ç—á–µ—Ç–∞
            const response = await fetch(`${this.baseApiUrl}/reports/weekly/details/${reportId}`);
            
            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    this.showReportDetails(result.data);
                    return;
                }
            }
            
            // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–ø—Ä–æ—Å–º–æ—Ç—Ä
            this.showNotification('info', `–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞ ${reportId} (–¥–µ–º–æ-—Ä–µ–∂–∏–º)`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞:', error);
            this.showNotification('info', `–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞ ${reportId}`);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –æ—Ç—á–µ—Ç–∞
     */
    showReportDetails(reportData) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—Ç—á–µ—Ç–∞
        console.log('üìã –î–µ—Ç–∞–ª–∏ –æ—Ç—á–µ—Ç–∞:', reportData);
        this.showNotification('info', '–î–µ—Ç–∞–ª–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    }

    /**
     * –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
     */
    async resendReport(reportId) {
        console.log('üìà –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞:', reportId);
        
        try {
            const response = await fetch(`${this.baseApiUrl}/reports/telegram/test`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ reportId })
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.showNotification('success', `–û—Ç—á–µ—Ç ${reportId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ`);
            } else {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
            this.showNotification('error', `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: ${error.message}`);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNotification(type, message) {
        if (typeof window.showNotification === 'function') {
            window.showNotification(type, message);
        } else {
            console.log(`Notification: ${type} - ${message}`);
        }
    }

    /**
     * Debounce —Ñ—É–Ω–∫—Ü–∏—è
     */
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.reportsManager = new ReportsManager();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.ReportsManager = ReportsManager;

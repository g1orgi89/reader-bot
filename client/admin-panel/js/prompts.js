/**
 * prompts.js - —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏ –¥–ª—è Reader Bot "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å API –ø—Ä–æ–º–ø—Ç–æ–≤,
 * —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Claude API.
 * 
 * @fileoverview –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –¥–ª—è AI –ø–æ–º–æ—â–Ω–∏–∫–∞ –ê–Ω–Ω—ã –ë—É—Å–µ–ª
 * @author Reader Bot Development Team
 */

/**
 * @typedef {Object} PromptData
 * @property {string} [id] - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–∞
 * @property {string} name - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
 * @property {string} type - –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞ (basic|rag|quote_analysis|book_recommendation|weekly_report|monthly_report|onboarding)
 * @property {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è (system|analysis|psychology|recommendations|reports|custom)
 * @property {string} language - –Ø–∑—ã–∫ (none|ru|en)
 * @property {string} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞
 * @property {string} [description] - –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
 * @property {number} [maxTokens] - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
 * @property {string[]} [tags] - –ú–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤
 * @property {boolean} [active] - –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ–º–ø—Ç
 * @property {boolean} [isDefault] - –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–∏ –ø—Ä–æ–º–ø—Ç
 * @property {number} [version] - –í–µ—Ä—Å–∏—è –ø—Ä–æ–º–ø—Ç–∞
 * @property {string} [createdAt] - –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
 * @property {string} [updatedAt] - –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */

/**
 * @typedef {Object} PromptFilter
 * @property {string} [category] - –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ('all' –¥–ª—è –≤—Å–µ—Ö)
 * @property {string} [type] - –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É ('all' –¥–ª—è –≤—Å–µ—Ö)
 * @property {string} [language] - –§–∏–ª—å—Ç—Ä –ø–æ —è–∑—ã–∫—É ('all' –¥–ª—è –≤—Å–µ—Ö)
 * @property {string} [search] - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @property {number} [page] - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 * @property {number} [limit] - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */

/**
 * @typedef {Object} TestResult
 * @property {string} input - –í—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @property {string} output - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç Claude
 * @property {number} tokensUsed - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
 * @property {string} provider - AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä
 * @property {string} testedAt - –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @property {boolean} successful - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞
 */

// API configuration - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ prefix —á—Ç–æ –∏ –≤ knowledge.js
const API_PREFIX = '/api/reader'; // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π prefix –¥–ª—è Reader Bot

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏ –¥–ª—è "–ß–∏—Ç–∞—Ç–µ–ª—è"
 */
const PROMPTS_CONFIG = {
  /** @type {string} –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ */
  API_BASE: `${API_PREFIX}/prompts`,
  
  /** @type {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */
  DEFAULT_PAGE_SIZE: 10,
  
  /** @type {number} –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö */
  MAX_PROMPT_SIZE: 10000,
  
  /** @type {Object<string, string>} –ü–µ—Ä–µ–≤–æ–¥—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è "–ß–∏—Ç–∞—Ç–µ–ª—è" */
  CATEGORY_LABELS: {
    'system': 'üéØ –°–∏—Å—Ç–µ–º–Ω–∞—è',
    'analysis': 'üí≠ –ê–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç',
    'psychology': 'üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è',
    'recommendations': 'üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
    'reports': 'üìà –û—Ç—á–µ—Ç—ã',
    'custom': '‚ú® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è'
  },
  
  /** @type {Object<string, string>} –ü–µ—Ä–µ–≤–æ–¥—ã —Ç–∏–ø–æ–≤ –¥–ª—è "–ß–∏—Ç–∞—Ç–µ–ª—è" */
  TYPE_LABELS: {
    'basic': '–ë–∞–∑–æ–≤—ã–π',
    'rag': 'RAG',
    'quote_analysis': '–ê–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç',
    'book_recommendation': '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥',
    'weekly_report': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã',
    'monthly_report': '–ú–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã',
    'onboarding': '–û–Ω–±–æ—Ä–¥–∏–Ω–≥'
  },
  
  /** @type {Object<string, string>} –ü–µ—Ä–µ–≤–æ–¥—ã —è–∑—ã–∫–æ–≤ */
  LANGUAGE_LABELS: {
    'none': 'ü§ñ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π',
    'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
    'en': 'üá∫üá∏ English'
  }
};

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏
 */
const promptsState = {
  /** @type {PromptData[]} –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã */
  prompts: [],
  
  /** @type {PromptFilter} –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã */
  currentFilters: {
    category: 'all',
    type: 'all',
    language: 'all',
    search: '',
    page: 1,
    limit: PROMPTS_CONFIG.DEFAULT_PAGE_SIZE
  },
  
  /** @type {number} –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–ø—Ç–æ–≤ */
  totalPrompts: 0,
  
  /** @type {boolean} –ò–¥–µ—Ç –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ */
  isLoading: false,
  
  /** @type {Object|null} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ */
  stats: null
};

/**
 * Make authenticated request with error handling
 * üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ —Å knowledge.js –¥–ª—è consistent –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * @param {string} endpoint - API endpoint (without prefix)
 * @param {Object} options - Fetch options
 * @returns {Promise<any>} Response data
 */
async function makeAuthenticatedRequest(endpoint, options = {}) {
    try {\n        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π URL —Å API prefix
        const url = `${API_PREFIX}${endpoint}`;
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: API –ø—Ä–æ–º–ø—Ç–æ–≤ –í–°–ï–ì–î–ê —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        // –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç knowledge API, –≤—Å–µ endpoints –ø—Ä–æ–º–ø—Ç–æ–≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ
        const isPublicEndpoint = false; // –í—Å–µ –ø—Ä–æ–º–ø—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

        // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –¥–ª—è FormData (multipart/form-data)
        const headers = {
            ...options.headers
        };

        // Only set Content-Type for non-FormData requests
        if (!(options.body instanceof FormData)) {
            headers['Content-Type'] = 'application/json';
        }

        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º 'adminToken' –∫–∞–∫ –≤ knowledge.js (–±—ã–ª–æ 'reader_admin_token')
        // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è API –ø—Ä–æ–º–ø—Ç–æ–≤
        const token = localStorage.getItem('adminToken'); // –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'reader_admin_token' –Ω–∞ 'adminToken'
        if (token) {
            headers['Authorization'] = `Bearer ${token}`;
        } else {
            // Fallback –Ω–∞ Basic Auth –∫–∞–∫ –≤ knowledge.js
            headers['Authorization'] = 'Basic ' + btoa('admin:password123');
        }

        console.log(`üìö Making request to: ${url}`);
        console.log(`üìö Auth header: ${headers['Authorization']?.substring(0, 20)}...`);
        
        const response = await fetch(url, {
            ...options,
            headers
        });

        console.log(`üìö Response status: ${response.status}`);

        if (!response.ok) {
            const errorText = await response.text();
            let errorData;
            
            try {
                errorData = JSON.parse(errorText);
            } catch {
                errorData = { error: errorText || `HTTP ${response.status}` };
            }
            
            throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
        }

        return await response.json();
    } catch (error) {
        console.error('üìö Request failed:', error);
        throw error;
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
function initPromptsPage() {
  console.log('üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏ "–ß–∏—Ç–∞—Ç–µ–ª—å"...');
  
  try {
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º 'adminToken' –∫–∞–∫ –≤ knowledge.js (–±—ã–ª–æ 'reader_admin_token')
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–∫ –≤ knowledge.js
    const token = localStorage.getItem('adminToken'); // –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'reader_admin_token' –Ω–∞ 'adminToken'
    if (!token) {
      console.error('üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      window.location.href = 'login.html';
      return;
    }
    
    console.log('üìö –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    initPromptsFilters();
    initPromptEditor();
    initPromptTesting();
    initImportExport();
    initPagination();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(() => {
      loadPrompts();
      loadPromptsStats();
    }, 500);
    
    console.log('üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏ "–ß–∏—Ç–∞—Ç–µ–ª—å" –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!');
  } catch (error) {
    console.error('üìö –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏:', error);
    showNotification('error', 'üìö –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏');
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –ø–æ–∏—Å–∫–∞
 */
function initPromptsFilters() {
  console.log('üìö –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤...');
  
  const categoryFilter = document.getElementById('category-filter');
  const typeFilter = document.getElementById('type-filter');
  const languageFilter = document.getElementById('language-filter');
  const searchInput = document.getElementById('search-prompts');
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (categoryFilter) {
    categoryFilter.addEventListener('change', () => {
      promptsState.currentFilters.category = categoryFilter.value;
      promptsState.currentFilters.page = 1;
      loadPrompts();
    });
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞
  if (typeFilter) {
    typeFilter.addEventListener('change', () => {
      promptsState.currentFilters.type = typeFilter.value;
      promptsState.currentFilters.page = 1;
      loadPrompts();
    });
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
  if (languageFilter) {
    languageFilter.addEventListener('change', () => {
      promptsState.currentFilters.language = languageFilter.value;
      promptsState.currentFilters.page = 1;
      loadPrompts();
    });
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  if (searchInput) {
    let searchTimeout;
    searchInput.addEventListener('input', () => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        promptsState.currentFilters.search = searchInput.value.trim();
        promptsState.currentFilters.page = 1;
        loadPrompts();
      }, 500);
    });
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
 * @returns {Promise<void>}
 */
async function loadPrompts() {
  if (promptsState.isLoading) return;
  
  console.log('üìö –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ API...');
  
  try {
    promptsState.isLoading = true;
    updateLoadingState(true);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const params = new URLSearchParams();
    
    if (promptsState.currentFilters.category && promptsState.currentFilters.category !== 'all') {
      params.append('category', promptsState.currentFilters.category);
    }
    
    if (promptsState.currentFilters.type && promptsState.currentFilters.type !== 'all') {
      params.append('type', promptsState.currentFilters.type);
    }
    
    if (promptsState.currentFilters.language && promptsState.currentFilters.language !== 'all') {
      params.append('language', promptsState.currentFilters.language);
    }
    
    if (promptsState.currentFilters.search) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º search endpoint
      params.append('q', promptsState.currentFilters.search);
      const response = await makeAuthenticatedRequest(`/prompts/search?${params}`);
      
      if (response && response.success) {
        promptsState.prompts = response.data || [];
        promptsState.totalPrompts = response.count || 0;
        renderPromptsTable();
        updatePaginationInfo();
        console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${promptsState.prompts.length} –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${promptsState.currentFilters.search}"`);
      } else {
        throw new Error(response?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–º–ø—Ç—ã');
      }
    } else {
      // –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
      params.append('page', promptsState.currentFilters.page.toString());
      params.append('limit', promptsState.currentFilters.limit.toString());
      
      const response = await makeAuthenticatedRequest(`/prompts?${params}`);
      
      if (response && response.success) {
        promptsState.prompts = response.data || [];
        promptsState.totalPrompts = response.pagination?.total || 0;
        renderPromptsTable();
        updatePaginationInfo();
        console.log(`üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${promptsState.prompts.length} –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ ${promptsState.totalPrompts} –æ–±—â–∏—Ö`);
      } else {
        throw new Error(response?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã');
      }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º empty state
    const emptyState = document.getElementById('empty-state');
    const table = document.getElementById('prompts-table');
    if (promptsState.prompts.length === 0) {
      if (emptyState) emptyState.style.display = 'block';
      if (table) table.style.display = 'none';
    } else {
      if (emptyState) emptyState.style.display = 'none';
      if (table) table.style.display = 'table';
    }
    
  } catch (error) {
    console.error('üìö –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤:', error);
    showNotification('error', `üìö –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã: ${error.message}`);
    renderEmptyPromptsTable();
  } finally {
    promptsState.isLoading = false;
    updateLoadingState(false);
  }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
 * @param {boolean} isLoading - –ò–¥–µ—Ç –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞
 */
function updateLoadingState(isLoading) {
  const tbody = document.querySelector('#prompts-table tbody');
  if (!tbody) return;
  
  if (isLoading) {
    tbody.innerHTML = `
      <tr class="table-loading">
        <td colspan="9" style="text-align: center; padding: var(--spacing-lg);">
          <div class="loading-spinner"></div>
          üìö –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ "–ß–∏—Ç–∞—Ç–µ–ª—è"...
        </td>
      </tr>
    `;
  }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–º–ø—Ç–æ–≤
 */
function renderPromptsTable() {
  const tbody = document.querySelector('#prompts-table tbody');
  if (!tbody) return;
  
  if (promptsState.prompts.length === 0) {
    renderEmptyPromptsTable();
    return;
  }
  
  tbody.innerHTML = promptsState.prompts.map(prompt => {
    const isActive = prompt.active !== false; // default to true if not specified
    const maxTokens = prompt.maxTokens || '--';
    const version = prompt.version || '1.0';
    
    return `
    <tr class="prompt-row" onclick="viewPrompt('${prompt.id}')">
      <td class="col-id">${prompt.id ? prompt.id.substring(0, 8) + '...' : '--'}</td>
      <td class="col-name">
        <div class="prompt-name">${escapeHtml(prompt.name)}</div>
        ${prompt.isDefault ? '<span class="status-badge status-system">–°–∏—Å—Ç–µ–º–Ω—ã–π</span>' : ''}
      </td>
      <td class="col-category">
        <span class="category-badge category-${prompt.category}">
          ${PROMPTS_CONFIG.CATEGORY_LABELS[prompt.category] || prompt.category}
        </span>
      </td>
      <td class="col-type">
        <span class="type-badge type-${prompt.type}">
          ${PROMPTS_CONFIG.TYPE_LABELS[prompt.type] || prompt.type}
        </span>
      </td>
      <td class="col-language">
        <span class="language-badge language-${prompt.language}">
          ${PROMPTS_CONFIG.LANGUAGE_LABELS[prompt.language] || prompt.language}
        </span>
      </td>
      <td class="col-status">
        <span class="status-badge ${isActive ? 'status-active' : 'status-inactive'}">
          ${isActive ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}
        </span>
      </td>
      <td class="col-tokens">${maxTokens}</td>
      <td class="col-version">v${version}</td>
      <td class="col-actions">
        <div class="action-buttons">
          <button class="action-test" onclick="testPrompt('${prompt.id}'); event.stopPropagation();" 
                  title="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç">
            üß™
          </button>
          <button class="action-edit" onclick="editPrompt('${prompt.id}'); event.stopPropagation();" 
                  title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç">
            ‚úèÔ∏è
          </button>
          ${!prompt.isDefault ? `
            <button class="action-delete" onclick="deletePrompt('${prompt.id}'); event.stopPropagation();"
                    title="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–ø—Ç">
              üóëÔ∏è
            </button>
          ` : ''}
        </div>
      </td>
    </tr>
  `;
  }).join('');
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—É—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–º–ø—Ç–æ–≤
 */
function renderEmptyPromptsTable() {
  const tbody = document.querySelector('#prompts-table tbody');
  if (!tbody) return;
  
  tbody.innerHTML = `
    <tr class="table-empty">
      <td colspan="9" style="text-align: center; padding: var(--spacing-xl);">
        <div class="empty-state">
          <div class="empty-icon">üí≠</div>
          <div class="empty-title">–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ "–ß–∏—Ç–∞—Ç–µ–ª—è"</div>
          <div class="empty-subtitle">
            ${promptsState.currentFilters.search ? 
              `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${promptsState.currentFilters.search}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ` :
              '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI –ø–æ–º–æ—â–Ω–∏–∫–∞ –ê–Ω–Ω—ã –ë—É—Å–µ–ª'}
          </div>
          <button class="btn btn-primary btn-glow" onclick="showPromptEditor()">
            ‚ú® –°–æ–∑–¥–∞—Ç—å –ü—Ä–æ–º–ø—Ç
          </button>
        </div>
      </td>
    </tr>
  `;
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
 */
function initPromptEditor() {
  console.log('üìö –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø—Ä–æ–º–ø—Ç–æ–≤...');
  
  // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
  const addPromptBtn = document.getElementById('add-prompt');
  if (addPromptBtn) {
    addPromptBtn.addEventListener('click', () => showPromptEditor());
  }
  
  // –ö–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const closeEditorBtn = document.getElementById('close-prompt-editor');
  if (closeEditorBtn) {
    closeEditorBtn.addEventListener('click', hidePromptEditor);
  }
  
  // –§–æ—Ä–º–∞ –ø—Ä–æ–º–ø—Ç–∞
  const promptForm = document.getElementById('prompt-form');
  if (promptForm) {
    promptForm.addEventListener('submit', handlePromptSave);
  }
  
  // –°—á–µ—Ç—á–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤
  const contentTextarea = document.getElementById('prompt-content');
  if (contentTextarea) {
    contentTextarea.addEventListener('input', updateTokenCount);
  }
  
  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
  const testCurrentBtn = document.getElementById('test-current-prompt');
  if (testCurrentBtn) {
    testCurrentBtn.addEventListener('click', testCurrentPrompt);
  }
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
  document.addEventListener('click', (event) => {
    if (event.target.classList.contains('prompt-editor-overlay')) {
      hidePromptEditor();
    }
  });
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
  document.addEventListener('keydown', (event) => {
    if (event.key === 'Escape') {
      const editorOverlay = document.getElementById('prompt-editor-overlay');
      if (editorOverlay && editorOverlay.style.display === 'flex') {
        hidePromptEditor();
      }
    }
  });
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤
 * @param {string|null} promptId - ID –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (null –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ)
 */
function showPromptEditor(promptId = null) {
  console.log('üìö –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø—Ä–æ–º–ø—Ç–æ–≤:', promptId ? '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '—Å–æ–∑–¥–∞–Ω–∏–µ');
  
  const overlay = document.getElementById('prompt-editor-overlay');
  const title = document.getElementById('editor-title');
  const form = document.getElementById('prompt-form');
  const saveText = document.getElementById('save-prompt-text');
  
  if (!overlay || !title || !form) return;
  
  if (promptId) {
    // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    title.textContent = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ü—Ä–æ–º–ø—Ç';
    if (saveText) saveText.textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ò–∑–º–µ–Ω–µ–Ω–∏—è';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç–∞
    loadPromptForEditing(promptId);
  } else {
    // –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è
    title.textContent = '‚ú® –°–æ–∑–¥–∞—Ç—å –ü—Ä–æ–º–ø—Ç';
    if (saveText) saveText.textContent = 'üíæ –°–æ–∑–¥–∞—Ç—å –ü—Ä–æ–º–ø—Ç';
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    form.reset();
    const promptIdField = document.getElementById('prompt-id');
    if (promptIdField) promptIdField.value = '';
    updateTokenCount();
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  overlay.style.display = 'flex';
  setTimeout(() => overlay.classList.add('active'), 10);
  
  // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
  const nameInput = document.getElementById('prompt-name');
  if (nameInput) {
    setTimeout(() => nameInput.focus(), 300);
  }
}

/**
 * –°–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤
 */
function hidePromptEditor() {
  const overlay = document.getElementById('prompt-editor-overlay');
  if (!overlay) return;
  
  overlay.classList.remove('active');
  setTimeout(() => {
    overlay.style.display = 'none';
  }, 300);
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {string} promptId - ID –ø—Ä–æ–º–ø—Ç–∞
 */
async function loadPromptForEditing(promptId) {
  try {
    const response = await makeAuthenticatedRequest(`/prompts/${promptId}`);
    
    if (response && response.success) {
      const prompt = response.data;
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞
      const fields = {
        'prompt-id': prompt.id,
        'prompt-name': prompt.name,
        'prompt-type': prompt.type,
        'prompt-category': prompt.category,
        'prompt-language': prompt.language,
        'prompt-max-tokens': prompt.maxTokens || 1000,
        'prompt-description': prompt.description || '',
        'prompt-content': prompt.content,
        'prompt-tags': prompt.tags ? prompt.tags.join(', ') : ''
      };
      
      Object.entries(fields).forEach(([id, value]) => {
        const element = document.getElementById(id);
        if (element) element.value = value;
      });
      
      updateTokenCount();
      
      console.log('üìö –ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    } else {
      throw new Error(response?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç');
    }
  } catch (error) {
    console.error('üìö –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    showNotification('error', `üìö –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç: ${error.message}`);
    hidePromptEditor();
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤
 */
function updateTokenCount() {
  const contentTextarea = document.getElementById('prompt-content');
  const tokenCountSpan = document.getElementById('token-count');
  
  if (!contentTextarea || !tokenCountSpan) return;
  
  const content = contentTextarea.value;
  // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ (1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞)
  const estimatedTokens = Math.ceil(content.length / 4);
  
  tokenCountSpan.textContent = estimatedTokens;
  
  // –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è
  const maxTokensField = document.getElementById('prompt-max-tokens');
  const maxTokens = parseInt(maxTokensField?.value || '1000');
  if (estimatedTokens > maxTokens) {
    tokenCountSpan.style.color = 'var(--color-error)';
  } else if (estimatedTokens > maxTokens * 0.8) {
    tokenCountSpan.style.color = 'var(--color-warning)';
  } else {
    tokenCountSpan.style.color = 'var(--color-success)';
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
 * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
 */
async function handlePromptSave(event) {
  event.preventDefault();
  
  const formData = new FormData(event.target);
  const promptId = formData.get('prompt-id');
  
  /** @type {PromptData} */
  const promptData = {
    name: formData.get('prompt-name').trim(),
    type: formData.get('prompt-type'),
    category: formData.get('prompt-category'),
    language: formData.get('prompt-language') || 'none',
    content: formData.get('prompt-content').trim(),
    description: formData.get('prompt-description').trim(),
    maxTokens: parseInt(formData.get('prompt-max-tokens')),
    tags: formData.get('prompt-tags').split(',').map(tag => tag.trim()).filter(tag => tag)
  };
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  if (!promptData.name) {
    showNotification('error', 'üìö –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞');
    return;
  }
  
  if (!promptData.content) {
    showNotification('error', 'üìö –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞');
    return;
  }
  
  if (promptData.content.length > PROMPTS_CONFIG.MAX_PROMPT_SIZE) {
    showNotification('error', `üìö –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º ${PROMPTS_CONFIG.MAX_PROMPT_SIZE} —Å–∏–º–≤–æ–ª–æ–≤)`);
    return;
  }
  
  try {
    const submitBtn = event.target.querySelector('button[type="submit"]');
    const btnText = submitBtn?.querySelector('.btn-text');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    if (submitBtn) submitBtn.disabled = true;
    if (btnText) btnText.textContent = promptId ? 'üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üå± –°–æ–∑–¥–∞–Ω–∏–µ...';
    
    let response;
    if (promptId) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–ø—Ç
      response = await makeAuthenticatedRequest(`/prompts/${promptId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(promptData)
      });
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
      response = await makeAuthenticatedRequest('/prompts', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(promptData)
      });
    }
    
    if (response && response.success) {
      const action = promptId ? '–æ–±–Ω–æ–≤–ª–µ–Ω' : '—Å–æ–∑–¥–∞–Ω';
      showNotification('success', `üìö –ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ ${action}!`);
      
      hidePromptEditor();
      loadPrompts(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤
      
      console.log(`üìö –ü—Ä–æ–º–ø—Ç ${action}: ${promptData.name}`);
    } else {
      throw new Error(response?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç');
    }
  } catch (error) {
    console.error('üìö –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞:', error);
    showNotification('error', `üìö –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç: ${error.message}`);
  } finally {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    const submitBtn = event.target.querySelector('button[type="submit"]');
    const btnText = submitBtn?.querySelector('.btn-text');
    
    if (submitBtn) submitBtn.disabled = false;
    if (btnText) {
      btnText.textContent = promptId ? 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ò–∑–º–µ–Ω–µ–Ω–∏—è' : 'üíæ –°–æ–∑–¥–∞—Ç—å –ü—Ä–æ–º–ø—Ç';
    }
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
 */
function initPromptTesting() {
  console.log('üìö –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤...');
  
  // –ö–Ω–æ–ø–∫–∞ –æ–±—â–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const testPromptsBtn = document.getElementById('test-prompts');
  if (testPromptsBtn) {
    testPromptsBtn.addEventListener('click', showPromptTestModal);
  }
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const closeTestBtn = document.getElementById('close-prompt-test');
  if (closeTestBtn) {
    closeTestBtn.addEventListener('click', hidePromptTestModal);
  }
  
  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
  const runTestBtn = document.getElementById('run-prompt-test');
  if (runTestBtn) {
    runTestBtn.addEventListener('click', runPromptTest);
  }
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
  document.addEventListener('click', (event) => {
    if (event.target.classList.contains('prompt-test-overlay')) {
      hidePromptTestModal();
    }
  });
  
  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø–æ Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
  const testMessageInput = document.getElementById('test-message');
  if (testMessageInput) {
    testMessageInput.addEventListener('keydown', (event) => {
      if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        runPromptTest();
      }
    });
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
 */
function showPromptTestModal() {
  const overlay = document.getElementById('prompt-test-overlay');
  if (overlay) {
    overlay.style.display = 'flex';
    setTimeout(() => overlay.classList.add('active'), 10);
    
    // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    const messageInput = document.getElementById('test-message');
    if (messageInput) {
      setTimeout(() => messageInput.focus(), 300);
    }
  }
}

/**
 * –°–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
 */
function hidePromptTestModal() {
  const overlay = document.getElementById('prompt-test-overlay');
  if (!overlay) return;
  
  overlay.classList.remove('active');
  setTimeout(() => {
    overlay.style.display = 'none';
  }, 300);
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
 */
function testCurrentPrompt() {
  const contentField = document.getElementById('prompt-content');
  const content = contentField ? contentField.value.trim() : '';
  
  if (!content) {
    showNotification('warning', 'üìö –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    return;
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  showPromptTestModal();
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
 */
async function runPromptTest() {
  const messageInput = document.getElementById('test-message');
  const languageSelect = document.getElementById('test-language');
  const resultsDiv = document.getElementById('test-results');
  const metadataDiv = document.getElementById('test-metadata');
  
  if (!messageInput || !resultsDiv) return;
  
  const testMessage = messageInput.value.trim();
  const language = languageSelect?.value || 'none';
  
  if (!testMessage) {
    showNotification('warning', 'üìö –í–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    messageInput.focus();
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  let promptContent;
  const promptEditor = document.getElementById('prompt-content');
  
  if (promptEditor && promptEditor.value.trim()) {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    promptContent = promptEditor.value.trim();
  } else {
    showNotification('warning', 'üìö –ù–µ—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    return;
  }
  
  try {
    console.log('üìö –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–º–ø—Ç–∞...');
    
    resultsDiv.innerHTML = '<div class="loading">üìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Claude...</div>';
    if (metadataDiv) metadataDiv.style.display = 'none';
    
    const startTime = performance.now();
    
    const response = await makeAuthenticatedRequest('/prompts/test', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        prompt: promptContent,
        testMessage,
        language
      })
    });
    
    const endTime = performance.now();
    const executionTime = Math.round(endTime - startTime);
    
    if (response && response.success && response.data) {
      const result = response.data;
      
      resultsDiv.innerHTML = `
        <div class="test-result-success">
          <div class="result-header">
            <h5>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h5>
            <span class="result-status status-success">–£—Å–ø–µ—à–Ω–æ</span>
          </div>
          <div class="result-content">
            <div class="result-input">
              <strong>–í—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</strong>
              <p>${escapeHtml(result.input)}</p>
            </div>
            <div class="result-output">
              <strong>–û—Ç–≤–µ—Ç –æ—Ç Claude:</strong>
              <p>${escapeHtml(result.output)}</p>
            </div>
          </div>
        </div>
      `;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      if (metadataDiv) {
        const tokensUsedEl = document.getElementById('test-tokens-used');
        const executionTimeEl = document.getElementById('test-execution-time');
        const providerEl = document.getElementById('test-ai-provider');
        
        if (tokensUsedEl) tokensUsedEl.textContent = result.tokensUsed || '--';
        if (executionTimeEl) executionTimeEl.textContent = `${executionTime}ms`;
        if (providerEl) providerEl.textContent = result.provider || 'Claude';
        
        metadataDiv.style.display = 'block';
      }
      
      console.log('üìö –¢–µ—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } else {
      throw new Error(response?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç');
    }
  } catch (error) {
    console.error('üìö –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–º–ø—Ç–∞:', error);
    resultsDiv.innerHTML = `
      <div class="test-result-error">
        <div class="result-header">
          <h5>‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h5>
          <span class="result-status status-error">–û—à–∏–±–∫–∞</span>
        </div>
        <div class="error-content">
          <p>${escapeHtml(error.message)}</p>
        </div>
      </div>
    `;
    
    if (metadataDiv) metadataDiv.style.display = 'none';
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
 * @param {string} promptId - ID –ø—Ä–æ–º–ø—Ç–∞
 */
function testPrompt(promptId) {
  console.log('üìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞:', promptId);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  loadPromptForEditing(promptId).then(() => {
    showPromptTestModal();
  }).catch(error => {
    console.error('üìö –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    showNotification('error', 'üìö –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  });
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞
 */
function initImportExport() {
  console.log('üìö –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–º–ø—Ç–æ–≤...');
  
  // –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞
  const exportBtn = document.getElementById('export-prompts');
  const importBtn = document.getElementById('import-prompts');
  
  if (exportBtn) {
    exportBtn.addEventListener('click', () => showImportExportModal('export'));
  }
  
  if (importBtn) {
    importBtn.addEventListener('click', () => showImportExportModal('import'));
  }
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const closeImportExportBtn = document.getElementById('close-import-export');
  if (closeImportExportBtn) {
    closeImportExportBtn.addEventListener('click', hideImportExportModal);
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞
  const downloadBackupBtn = document.getElementById('download-backup');
  if (downloadBackupBtn) {
    downloadBackupBtn.addEventListener('click', downloadPromptsBackup);
  }
  
  const selectFileBtn = document.getElementById('select-import-file');
  const importFileInput = document.getElementById('import-file');
  const confirmImportBtn = document.getElementById('confirm-import');
  
  if (selectFileBtn && importFileInput) {
    selectFileBtn.addEventListener('click', () => importFileInput.click());
    importFileInput.addEventListener('change', handleFileSelection);
  }
  
  if (confirmImportBtn) {
    confirmImportBtn.addEventListener('click', importPrompts);
  }
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
  document.addEventListener('click', (event) => {
    if (event.target.classList.contains('import-export-overlay')) {
      hideImportExportModal();
    }
  });
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞
 * @param {string} mode - –†–µ–∂–∏–º: 'import' –∏–ª–∏ 'export'
 */
function showImportExportModal(mode) {
  const overlay = document.getElementById('import-export-overlay');
  const title = document.getElementById('import-export-title');
  const exportContent = document.getElementById('export-content');
  const importContent = document.getElementById('import-content');
  
  if (!overlay) return;
  
  if (mode === 'export') {
    if (title) title.textContent = 'üì§ –≠–∫—Å–ø–æ—Ä—Ç –ü—Ä–æ–º–ø—Ç–æ–≤';
    if (exportContent) exportContent.style.display = 'block';
    if (importContent) importContent.style.display = 'none';
  } else {
    if (title) title.textContent = 'üì• –ò–º–ø–æ—Ä—Ç –ü—Ä–æ–º–ø—Ç–æ–≤';
    if (exportContent) exportContent.style.display = 'none';
    if (importContent) importContent.style.display = 'block';
  }
  
  overlay.style.display = 'flex';
  setTimeout(() => overlay.classList.add('active'), 10);
}

/**
 * –°–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞
 */
function hideImportExportModal() {
  const overlay = document.getElementById('import-export-overlay');
  if (!overlay) return;
  
  overlay.classList.remove('active');
  setTimeout(() => {
    overlay.style.display = 'none';
  }, 300);
}

/**
 * –°–∫–∞—á–∏–≤–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤
 */
async function downloadPromptsBackup() {
  try {
    console.log('üìö –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤...');
    showNotification('info', 'üìö –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
    
    const response = await makeAuthenticatedRequest('/prompts/backup');
    
    if (response) {
      // –°–æ–∑–¥–∞–µ–º blob –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const blob = new Blob([JSON.stringify(response, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `reader-prompts-backup-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      showNotification('success', 'üìö –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ —Å–∫–∞—á–∞–Ω–∞!');
      console.log('üìö –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } else {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é');
    }
  } catch (error) {
    console.error('üìö –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
    showNotification('error', `üìö –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${error.message}`);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
 * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
 */
function handleFileSelection(event) {
  const file = event.target.files[0];
  const fileInfoDiv = document.getElementById('selected-file-info');
  const confirmBtn = document.getElementById('confirm-import');
  
  if (!file) return;
  
  if (file.type !== 'application/json') {
    showNotification('error', 'üìö –í—ã–±–µ—Ä–∏—Ç–µ JSON —Ñ–∞–π–ª');
    return;
  }
  
  if (fileInfoDiv) {
    fileInfoDiv.innerHTML = `
      <div class="file-info-content">
        <span class="file-name">üìÑ ${file.name}</span>
        <span class="file-size">${(file.size / 1024).toFixed(1)} KB</span>
      </div>
    `;
    fileInfoDiv.style.display = 'block';
  }
  
  if (confirmBtn) {
    confirmBtn.style.display = 'block';
  }
}

/**
 * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
 */
async function importPrompts() {
  const fileInput = document.getElementById('import-file');
  const file = fileInput?.files[0];
  
  if (!file) {
    showNotification('error', 'üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
    return;
  }
  
  try {
    console.log('üìö –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞...');
    showNotification('info', 'üìö –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–º–ø—Ç–æ–≤...');
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const text = await file.text();
    const backup = JSON.parse(text);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const response = await makeAuthenticatedRequest('/prompts/restore', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ backup })
    });
    
    if (response && response.success) {
      const { total, imported, errors } = response.data;
      
      let message = `üìö –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${imported}/${total} –ø—Ä–æ–º–ø—Ç–æ–≤`;
      if (errors > 0) {
        message += ` (${errors} –æ—à–∏–±–æ–∫)`;
      }
      
      showNotification('success', message);
      
      hideImportExportModal();
      loadPrompts(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤
      
      console.log('üìö –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω');
    } else {
      throw new Error(response?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã');
    }
  } catch (error) {
    console.error('üìö –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ–º–ø—Ç–æ–≤:', error);
    showNotification('error', `üìö –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error.message}`);
  }
}

/**
 * –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–ø—Ç–∞
 * @param {string} promptId - ID –ø—Ä–æ–º–ø—Ç–∞
 */
function viewPrompt(promptId) {
  console.log('üìö –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–ø—Ç–∞:', promptId);
  editPrompt(promptId);
}

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
 * @param {string} promptId - ID –ø—Ä–æ–º–ø—Ç–∞
 */
function editPrompt(promptId) {
  console.log('üìö –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞:', promptId);
  showPromptEditor(promptId);
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
 * @param {string} promptId - ID –ø—Ä–æ–º–ø—Ç–∞
 */
async function deletePrompt(promptId) {
  // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
  const prompt = promptsState.prompts.find(p => p.id === promptId);
  const promptName = prompt ? prompt.name : promptId;
  
  const confirmed = confirm(
    `üìö –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–ø—Ç "${promptName}"?\n\n` +
    '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!'
  );
  
  if (!confirmed) return;
  
  try {
    console.log('üìö –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞:', promptId);
    
    const response = await makeAuthenticatedRequest(`/prompts/${promptId}`, {
      method: 'DELETE'
    });
    
    if (response && response.success) {
      showNotification('success', 'üìö –ü—Ä–æ–º–ø—Ç —É–¥–∞–ª–µ–Ω');
      
      loadPrompts(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤
      
      console.log('üìö –ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
    } else {
      throw new Error(response?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–ø—Ç');
    }
  } catch (error) {
    console.error('üìö –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞:', error);
    showNotification('error', `üìö –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–ø—Ç: ${error.message}`);
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–º–ø—Ç–æ–≤
 */
async function loadPromptsStats() {
  try {
    console.log('üìö –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤...');
    
    const response = await makeAuthenticatedRequest('/prompts/stats');
    
    if (response && response.success) {
      promptsState.stats = response.data;
      console.log('üìö –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    } else {
      console.warn('üìö –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–º–ø—Ç–æ–≤:', response?.error);
    }
  } catch (error) {
    console.error('üìö –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤:', error);
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 */
function initPagination() {
  const prevBtn = document.getElementById('prev-page');
  const nextBtn = document.getElementById('next-page');
  
  if (prevBtn) {
    prevBtn.addEventListener('click', () => {
      if (promptsState.currentFilters.page > 1) {
        promptsState.currentFilters.page--;
        loadPrompts();
      }
    });
  }
  
  if (nextBtn) {
    nextBtn.addEventListener('click', () => {
      const totalPages = Math.ceil(promptsState.totalPrompts / promptsState.currentFilters.limit);
      if (promptsState.currentFilters.page < totalPages) {
        promptsState.currentFilters.page++;
        loadPrompts();
      }
    });
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 */
function updatePaginationInfo() {
  const rangeElement = document.getElementById('pagination-range');
  const totalElement = document.getElementById('pagination-total');
  const currentElement = document.getElementById('pagination-current');
  const prevBtn = document.getElementById('prev-page');
  const nextBtn = document.getElementById('next-page');
  
  const { page, limit } = promptsState.currentFilters;
  const total = promptsState.totalPrompts;
  const totalPages = Math.ceil(total / limit);
  
  // –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
  const start = total > 0 ? (page - 1) * limit + 1 : 0;
  const end = Math.min(page * limit, total);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
  if (rangeElement) rangeElement.textContent = `${start}-${end}`;
  if (totalElement) totalElement.textContent = total.toString();
  if (currentElement) currentElement.textContent = total > 0 ? `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages}` : '–°—Ç—Ä–∞–Ω–∏—Ü–∞ 0 –∏–∑ 0';
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
  if (prevBtn) {
    prevBtn.disabled = page <= 1;
  }
  if (nextBtn) {
    nextBtn.disabled = page >= totalPages || total === 0;
  }
}

// ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML –≤ —Å—Ç—Ä–æ–∫–µ
 * @param {string} str - –°—Ç—Ä–æ–∫–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {string} –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 */
function escapeHtml(str) {
  if (typeof str !== 'string') return str;
  const div = document.createElement('div');
  div.textContent = str;
  return div.innerHTML;
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (success|error|warning|info)
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {number} [duration=5000] - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 */
function showNotification(type, message, duration = 5000) {
  const container = document.getElementById('notification-container');
  if (!container) {
    alert(message);
    return;
  }
  
  const notification = document.createElement('div');
  notification.className = `notification notification-${type}`;
  
  const icons = {
    success: '‚úÖ',
    error: '‚ùå',
    warning: '‚ö†Ô∏è',
    info: 'üìö'
  };
  
  notification.innerHTML = `
    <div class="notification-icon">${icons[type] || 'üìö'}</div>
    <div class="notification-message">${escapeHtml(message)}</div>
    <button class="notification-close" onclick="this.parentElement.remove()">√ó</button>
  `;
  
  container.appendChild(notification);
  
  setTimeout(() => notification.classList.add('show'), 10);
  
  setTimeout(() => {
    notification.classList.remove('show');
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }, duration);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
  console.log('üìö DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ–º–ø—Ç–æ–≤
  if (window.location.pathname.includes('prompts.html')) {
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
    setTimeout(() => {
      console.log('üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã...');
      initPromptsPage();
    }, 500);
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.initPromptsPage = initPromptsPage;

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.showPromptEditor = showPromptEditor;
window.editPrompt = editPrompt;
window.deletePrompt = deletePrompt;
window.viewPrompt = viewPrompt;
window.testPrompt = testPrompt;

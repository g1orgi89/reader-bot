/**
 * Prompts Management JavaScript for Reader Bot - MINIMAL VERSION
 * @file client/admin-panel/js/prompts.js
 * üîß –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
 */

// API configuration
const API_PREFIX = '/api/reader';

// Global variables
let currentPage = 1;
let totalPages = 1;
let isLoading = false;

/**
 * Initialize prompts management page
 */
async function initPromptsPage() {
    console.log('ü§ñ Initializing prompts management page...');
    
    try {
        await loadPrompts();
        setupEventListeners();
        console.log('‚úÖ Prompts page initialized successfully');
    } catch (error) {
        console.error('‚ùå Failed to initialize prompts page:', error);
    }
}

/**
 * Make authenticated request
 */
async function makeAuthenticatedRequest(endpoint, options = {}) {
    try {
        const url = `${API_PREFIX}${endpoint}`;
        
        const headers = {
            ...options.headers
        };

        if (!(options.body instanceof FormData)) {
            headers['Content-Type'] = 'application/json';
        }

        const token = localStorage.getItem('adminToken');
        if (token) {
            headers['Authorization'] = `Bearer ${token}`;
        } else {
            headers['Authorization'] = 'Basic ' + btoa('admin:password123');
        }

        console.log(`ü§ñ Making request to: ${url}`);
        
        const response = await fetch(url, {
            ...options,
            headers
        });

        console.log(`ü§ñ Response status: ${response.status}`);

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(errorText || `HTTP ${response.status}`);
        }

        return await response.json();
    } catch (error) {
        console.error('ü§ñ Request failed:', error);
        throw error;
    }
}

/**
 * Load prompts with pagination
 */
async function loadPrompts() {
    if (isLoading) return;
    
    try {
        isLoading = true;
        
        const params = new URLSearchParams({
            page: currentPage,
            limit: 10
        });

        console.log('ü§ñ Loading prompts with params:', params.toString());

        const response = await makeAuthenticatedRequest(`/prompts?${params}`);
        
        // üîç –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–¢–í–ï–¢–ê –°–ï–†–í–ï–†–ê
        console.log('üîç === –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–ê –°–ï–†–í–ï–†–ê ===');
        console.log('ü§ñ Full server response:', response);
        console.log('ü§ñ Response success:', response.success);
        console.log('ü§ñ Response data type:', typeof response.data);
        console.log('ü§ñ Response data:', response.data);
        
        if (Array.isArray(response.data)) {
            console.log('ü§ñ Data is array with length:', response.data.length);
            if (response.data.length > 0) {
                console.log('ü§ñ First item structure:', Object.keys(response.data[0]));
                console.log('ü§ñ First item:', response.data[0]);
            }
        }
        console.log('üîç === –ö–û–ù–ï–¶ –ê–ù–ê–õ–ò–ó–ê –û–¢–í–ï–¢–ê ===');
        
        if (response.success) {
            renderPrompts(response.data || []);
        } else {
            throw new Error(response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã');
        }
    } catch (error) {
        console.error('ü§ñ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤:', error);
        const tableBody = document.querySelector('#prompts-table tbody');
        if (tableBody) {
            tableBody.innerHTML = '<tr><td colspan="7" class="text-center">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã</td></tr>';
        }
    } finally {
        isLoading = false;
    }
}

/**
 * üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: Render prompts list
 */
function renderPrompts(prompts) {
    console.log('ü§ñ === –ù–ê–ß–ê–õ–û renderPrompts ===');
    console.log('ü§ñ Rendering prompts:', prompts);
    console.log(`ü§ñ Rendering ${prompts ? prompts.length : 0} prompts`);
    
    const tableBody = document.querySelector('#prompts-table tbody');
    
    if (!tableBody) {
        console.error('ü§ñ Table body not found!');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤
    if (!prompts || prompts.length === 0) {
        console.log('ü§ñ No prompts to display');
        tableBody.innerHTML = '<tr><td colspan="7" class="text-center">–ü—Ä–æ–º–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
        return;
    }

    console.log(`ü§ñ Rendering ${prompts.length} prompts`);

    // üîß –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–µ 'id', –∞ –Ω–µ '_id'
    const promptsHTML = prompts.map((prompt, index) => {
        console.log(`ü§ñ Rendering prompt ${index}:`, prompt.name, prompt.category);
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º 'id', –ø–æ—Ç–æ–º '_id'
        const promptId = prompt.id || prompt._id;
        console.log(`ü§ñ Prompt ${index} ID:`, promptId);
        
        if (!promptId) {
            console.warn('ü§ñ Prompt without ID:', prompt);
        }
        
        const html = `
        <tr data-id="${promptId}">
            <td class="col-name">
                <div class="prompt-name">${escapeHtml(prompt.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</div>
                <small class="text-muted">${escapeHtml((prompt.description || '').substring(0, 80))}${(prompt.description || '').length > 80 ? '...' : ''}</small>
            </td>
            <td class="col-category">
                <span class="badge badge-primary">${getCategoryDisplayName(prompt.category)}</span>
            </td>
            <td class="col-language">${getLanguageDisplayName(prompt.language)}</td>
            <td class="col-variables">
                ${renderVariables(prompt.variables)}
            </td>
            <td class="col-status">
                <span class="badge badge-${getStatusBadgeClass(prompt.status)}">${getStatusDisplayName(prompt.status)}</span>
            </td>
            <td class="col-priority">
                <span class="priority priority-${prompt.priority || 'normal'}">${getPriorityDisplayName(prompt.priority)}</span>
            </td>
            <td class="col-actions">
                <div class="btn-group btn-group-sm">
                    <button class="btn btn-outline-primary" onclick="viewPrompt('${promptId}')" title="–ü—Ä–æ—Å–º–æ—Ç—Ä">
                        üëÅÔ∏è
                    </button>
                    <button class="btn btn-outline-secondary" onclick="editPrompt('${promptId}')" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                        ‚úèÔ∏è
                    </button>
                    <button class="btn btn-outline-success" onclick="testPromptById('${promptId}')" title="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å">
                        üß™
                    </button>
                    <button class="btn btn-outline-danger" onclick="deletePrompt('${promptId}')" title="–£–¥–∞–ª–∏—Ç—å">
                        üóëÔ∏è
                    </button>
                </div>
            </td>
        </tr>
    `;
        console.log(`ü§ñ Generated HTML for prompt ${index} (length: ${html.length})`);
        return html;
    }).join('');

    console.log(`ü§ñ Final HTML length: ${promptsHTML.length}`);
    console.log(`ü§ñ Final HTML preview:`, promptsHTML.substring(0, 200) + '...');
    console.log(`ü§ñ Setting innerHTML to table body...`);
    
    tableBody.innerHTML = promptsHTML;
    
    console.log('ü§ñ innerHTML set successfully');
    console.log('ü§ñ Table body content after setting:', tableBody.innerHTML.substring(0, 200) + '...');
    console.log('‚úÖ Prompts rendered successfully');
    console.log('ü§ñ === –ö–û–ù–ï–¶ renderPrompts ===');
}

/**
 * Setup event listeners
 */
function setupEventListeners() {
    // New prompt button
    const newPromptButton = document.getElementById('new-prompt-btn');
    if (newPromptButton) {
        newPromptButton.addEventListener('click', () => {
            alert('–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ');
        });
    }
    
    console.log('ü§ñ Event listeners setup completed');
}

/**
 * Helper functions
 */
function renderVariables(variables) {
    if (!variables || (Array.isArray(variables) && variables.length === 0)) {
        return '<span class="text-muted">‚Äî</span>';
    }
    
    if (typeof variables === 'string') {
        variables = variables.split(',').map(v => v.trim()).filter(v => v);
    }
    
    if (!Array.isArray(variables)) {
        return '<span class="text-muted">‚Äî</span>';
    }
    
    const visibleVariables = variables.slice(0, 2);
    const hiddenCount = variables.length - 2;
    
    let html = visibleVariables.map(variable => 
        `<span class="badge badge-secondary badge-sm">${escapeHtml(variable)}</span>`
    ).join(' ');
    
    if (hiddenCount > 0) {
        html += ` <span class="text-muted">+${hiddenCount}</span>`;
    }
    
    return html;
}

function getCategoryDisplayName(category) {
    const categories = {
        'onboarding': 'üéØ –û–Ω–±–æ—Ä–¥–∏–Ω–≥',
        'quote_analysis': 'üìù –ê–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç',
        'weekly_reports': 'üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã',
        'monthly_reports': 'üìà –ú–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã',
        'book_recommendations': 'üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥',
        'user_interaction': 'üí¨ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ',
        'system': '‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ',
        'other': 'üìñ –î—Ä—É–≥–æ–µ'
    };
    return categories[category] || category || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function getStatusDisplayName(status) {
    const statuses = {
        'active': '–ê–∫—Ç–∏–≤–Ω—ã–π',
        'draft': '–ß–µ—Ä–Ω–æ–≤–∏–∫',
        'archived': '–ê—Ä—Ö–∏–≤–Ω—ã–π'
    };
    return statuses[status] || status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function getStatusBadgeClass(status) {
    const classes = {
        'active': 'success',
        'draft': 'warning',
        'archived': 'secondary'
    };
    return classes[status] || 'secondary';
}

function getPriorityDisplayName(priority) {
    const priorities = {
        'high': '–í—ã—Å–æ–∫–∏–π',
        'normal': '–û–±—ã—á–Ω—ã–π',
        'low': '–ù–∏–∑–∫–∏–π'
    };
    return priorities[priority] || priority || '–û–±—ã—á–Ω—ã–π';
}

function getLanguageDisplayName(language) {
    const languages = {
        'ru': '–†—É—Å—Å–∫–∏–π',
        'en': 'English',
        'none': '–ù–µ—Ç —è–∑—ã–∫–∞'
    };
    return languages[language] || language || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function escapeHtml(text) {
    if (typeof text !== 'string') return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// Placeholder functions for actions
function viewPrompt(promptId) {
    console.log('üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–ø—Ç–∞:', promptId);
    alert('–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ');
}

function editPrompt(promptId) {
    console.log('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞:', promptId);
    alert('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ');
}

function testPromptById(promptId) {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞:', promptId);
    alert('–§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ');
}

function deletePrompt(promptId) {
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞:', promptId);
    if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–º–ø—Ç?')) {
        alert('–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ');
    }
}

// Initialize page when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    if (window.location.pathname.includes('prompts.html')) {
        initPromptsPage();
    }
});

console.log('ü§ñ Minimal prompts management module loaded successfully');

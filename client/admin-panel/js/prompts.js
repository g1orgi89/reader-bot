/**
 * Prompts Management JavaScript for Reader Bot
 * @file client/admin-panel/js/prompts.js
 * ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –¥–ª—è Reader Bot
 * üìñ –°–æ–∑–¥–∞–Ω–æ –Ω–∞ –±–∞–∑–µ —Ä–∞–±–æ—á–µ–≥–æ –º–æ–¥—É–ª—è knowledge.js
 */

// API configuration - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ prefix
const API_PREFIX = '/api/reader'; // üìñ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π prefix –¥–ª—è Reader Bot

// Global variables
let currentPage = 1;
let totalPages = 1;
let isLoading = false;
let searchTimeout = null;

/**
 * Initialize prompts management page
 */
async function initPromptsPage() {
    console.log('ü§ñ Initializing prompts management page...');
    
    try {
        // Load initial data
        await Promise.all([
            loadPrompts(),
            loadPromptsStats()
        ]);
        
        // Setup event listeners
        setupEventListeners();
        
        console.log('‚úÖ Prompts page initialized successfully');
    } catch (error) {
        console.error('‚ùå Failed to initialize prompts page:', error);
        showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ' + error.message);
    }
}

/**
 * Make authenticated request with error handling
 * @param {string} endpoint - API endpoint (without prefix)
 * @param {Object} options - Fetch options
 * @returns {Promise<any>} Response data
 */
async function makeAuthenticatedRequest(endpoint, options = {}) {
    try {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π URL —Å API prefix
        const url = `${API_PREFIX}${endpoint}`;
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–°–ï –ø—Ä–æ–º–ø—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é!
        // –°–µ—Ä–≤–µ—Ä —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –í–°–ï–• endpoints /api/reader/prompts/*
        const isPublicEndpoint = false; // –ë–æ–ª—å—à–µ –ù–ï–¢ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç endpoints!

        // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –¥–ª—è FormData (multipart/form-data)
        const headers = {
            ...options.headers
        };

        // Only set Content-Type for non-FormData requests
        if (!(options.body instanceof FormData)) {
            headers['Content-Type'] = 'application/json';
        }

        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–°–ï–ì–î–ê –¥–æ–±–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–º–ø—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
        const token = localStorage.getItem('adminToken');
        if (token) {
            headers['Authorization'] = `Bearer ${token}`;
        } else {
            // Fallback –Ω–∞ Basic Auth
            headers['Authorization'] = 'Basic ' + btoa('admin:password123');
        }

        console.log(`ü§ñ Making request to: ${url}`);
        
        const response = await fetch(url, {
            ...options,
            headers
        });

        console.log(`ü§ñ Response status: ${response.status}`);

        if (!response.ok) {
            const errorText = await response.text();
            let errorData;
            
            try {
                errorData = JSON.parse(errorText);
            } catch {
                errorData = { error: errorText || `HTTP ${response.status}` };
            }
            
            throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
        }

        return await response.json();
    } catch (error) {
        console.error('ü§ñ Request failed:', error);
        throw error;
    }
}

/**
 * Load prompts with pagination
 */
async function loadPrompts() {
    if (isLoading) return;
    
    try {
        isLoading = true;
        showLoading('prompts-table', '–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤...');

        const params = new URLSearchParams({
            page: currentPage,
            limit: 10
        });

        // Add search filter if exists
        const searchInput = document.getElementById('search-input');
        if (searchInput && searchInput.value.trim()) {
            params.append('q', searchInput.value.trim());
        }

        // Add category filter if exists
        const categoryFilter = document.getElementById('category-filter');
        if (categoryFilter && categoryFilter.value) {
            params.append('category', categoryFilter.value);
        }

        // Add language filter if exists
        const languageFilter = document.getElementById('language-filter');
        if (languageFilter && languageFilter.value) {
            params.append('language', languageFilter.value);
        }

        // Add status filter if exists
        const statusFilter = document.getElementById('status-filter');
        if (statusFilter && statusFilter.value) {
            params.append('status', statusFilter.value);
        }

        console.log('ü§ñ Loading prompts with params:', params.toString());

        const response = await makeAuthenticatedRequest(`/prompts?${params}`);
        
        // üîç –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–¢–í–ï–¢–ê –°–ï–†–í–ï–†–ê
        console.log('üîç === –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–ê –°–ï–†–í–ï–†–ê ===');
        console.log('ü§ñ Full server response:', response);
        console.log('ü§ñ Response success:', response.success);
        console.log('ü§ñ Response data type:', typeof response.data);
        console.log('ü§ñ Response data:', response.data);
        
        if (Array.isArray(response.data)) {
            console.log('ü§ñ Data is array with length:', response.data.length);
            if (response.data.length > 0) {
                console.log('ü§ñ First item structure:', Object.keys(response.data[0]));
                console.log('ü§ñ First item:', response.data[0]);
            }
        } else {
            console.log('ü§ñ Data is NOT array, type:', typeof response.data);
        }
        
        if (response.pagination) {
            console.log('ü§ñ Pagination info:', response.pagination);
        }
        console.log('üîç === –ö–û–ù–ï–¶ –ê–ù–ê–õ–ò–ó–ê –û–¢–í–ï–¢–ê ===');
        
        if (response.success) {
            renderPrompts(response.data || []);
            
            if (response.pagination) {
                updatePagination(response.pagination);
            }
        } else {
            throw new Error(response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã');
        }
    } catch (error) {
        console.error('ü§ñ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: ' + error.message);
        const tableBody = document.querySelector('#prompts-table tbody');
        if (tableBody) {
            tableBody.innerHTML = '<tr><td colspan="7" class="text-center">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã</td></tr>';
        }
    } finally {
        isLoading = false;
    }
}

/**
 * Load prompts statistics
 */
async function loadPromptsStats() {
    try {
        console.log('ü§ñ Loading prompts statistics...');
        const response = await makeAuthenticatedRequest('/prompts/stats');
        
        console.log('ü§ñ Stats response:', response);
        
        if (response.success) {
            renderPromptsStats(response.data);
            console.log('‚úÖ Prompts statistics loaded successfully');
        } else {
            throw new Error(response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
        }
    } catch (error) {
        console.error('ü§ñ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤:', error);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º fallback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        renderPromptsStats({
            total: 0,
            active: 0,
            draft: 0,
            archived: 0,
            byLanguage: [],
            byCategory: [],
            recentlyUpdated: [],
            error: error.message
        });
    }
}

/**
 * Setup event listeners
 */
function setupEventListeners() {
    // Search functionality
    const searchInput = document.getElementById('search-input');
    if (searchInput) {
        searchInput.addEventListener('input', handleSearch);
        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                handleSearch();
            }
        });
    }

    // Category filter
    const categoryFilter = document.getElementById('category-filter');
    if (categoryFilter) {
        categoryFilter.addEventListener('change', () => {
            currentPage = 1;
            loadPrompts();
        });
    }

    // Language filter
    const languageFilter = document.getElementById('language-filter');
    if (languageFilter) {
        languageFilter.addEventListener('change', () => {
            currentPage = 1;
            loadPrompts();
        });
    }

    // Status filter
    const statusFilter = document.getElementById('status-filter');
    if (statusFilter) {
        statusFilter.addEventListener('change', () => {
            currentPage = 1;
            loadPrompts();
        });
    }

    // New prompt button
    const newPromptButton = document.getElementById('new-prompt-btn');
    if (newPromptButton) {
        newPromptButton.addEventListener('click', showCreatePromptModal);
    }

    // Reset search button
    const resetSearchBtn = document.getElementById('reset-search-btn');
    if (resetSearchBtn) {
        resetSearchBtn.addEventListener('click', resetSearch);
    }

    // Search button
    const searchBtn = document.getElementById('search-btn');
    if (searchBtn) {
        searchBtn.addEventListener('click', handleSearch);
    }

    // Test prompt button
    const testPromptBtn = document.getElementById('test-prompt-btn');
    if (testPromptBtn) {
        testPromptBtn.addEventListener('click', showTestPromptModal);
    }

    console.log('ü§ñ Event listeners setup completed');
}

/**
 * Handle search input
 */
function handleSearch() {
    const searchInput = document.getElementById('search-input');
    if (!searchInput) return;

    const query = searchInput.value.trim();
    
    // Clear previous timeout
    if (searchTimeout) {
        clearTimeout(searchTimeout);
    }

    // Debounce search
    searchTimeout = setTimeout(() => {
        currentPage = 1;
        loadPrompts();
    }, 300);
}

/**
 * Reset search filters
 */
function resetSearch() {
    const searchInput = document.getElementById('search-input');
    const categoryFilter = document.getElementById('category-filter');
    const languageFilter = document.getElementById('language-filter');
    const statusFilter = document.getElementById('status-filter');

    if (searchInput) searchInput.value = '';
    if (categoryFilter) categoryFilter.value = '';
    if (languageFilter) languageFilter.value = '';
    if (statusFilter) statusFilter.value = '';

    currentPage = 1;
    loadPrompts();
}

/**
 * Show create prompt modal
 */
function showCreatePromptModal() {
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.id = 'create-prompt-modal';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">ü§ñ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç</h3>
                    <button type="button" class="close" onclick="closeModal()">&times;</button>
                </div>
                <div class="modal-body">
                    <form id="create-prompt-form">
                        <div class="form-group">
                            <label for="prompt-name">–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ *</label>
                            <input type="text" id="prompt-name" name="name" class="form-control" required 
                                   placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤">
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="prompt-category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è *</label>
                                <select id="prompt-category" name="category" class="select-glow" required>
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                                    <option value="onboarding">üéØ –û–Ω–±–æ—Ä–¥–∏–Ω–≥</option>
                                    <option value="quote_analysis">üìù –ê–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç</option>
                                    <option value="weekly_reports">üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã</option>
                                    <option value="monthly_reports">üìà –ú–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã</option>
                                    <option value="book_recommendations">üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥</option>
                                    <option value="user_interaction">üí¨ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</option>
                                    <option value="system">‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ</option>
                                    <option value="other">üìñ –î—Ä—É–≥–æ–µ</option>
                                </select>
                            </div>
                            <div class="form-group col-md-6">
                                <label for="prompt-language">–Ø–∑—ã–∫</label>
                                <select id="prompt-language" name="language" class="select-glow">
                                    <option value="ru">–†—É—Å—Å–∫–∏–π</option>
                                    <option value="en">English</option>
                                    <option value="none">–ù–µ—Ç —è–∑—ã–∫–∞</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label for="prompt-content">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ *</label>
                            <textarea id="prompt-content" name="content" class="form-control" rows="8" required
                                      placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è Claude AI..."></textarea>
                            <small class="form-text text-muted">
                                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {variable_name} –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                            </small>
                        </div>
                        
                        <div class="form-group">
                            <label for="prompt-variables">–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</label>
                            <input type="text" id="prompt-variables" name="variables" class="form-control"
                                   placeholder="user_name, quote_text, analysis_type">
                            <small class="form-text text-muted">
                                –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω—è—Ç—å—Å—è –≤ –ø—Ä–æ–º–ø—Ç–µ
                            </small>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="prompt-status">–°—Ç–∞—Ç—É—Å</label>
                                <select id="prompt-status" name="status" class="select-glow">
                                    <option value="active">–ê–∫—Ç–∏–≤–Ω—ã–π</option>
                                    <option value="draft">–ß–µ—Ä–Ω–æ–≤–∏–∫</option>
                                    <option value="archived">–ê—Ä—Ö–∏–≤–Ω—ã–π</option>
                                </select>
                            </div>
                            <div class="form-group col-md-6">
                                <label for="prompt-priority">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
                                <select id="prompt-priority" name="priority" class="select-glow">
                                    <option value="normal">–û–±—ã—á–Ω—ã–π</option>
                                    <option value="high">–í—ã—Å–æ–∫–∏–π</option>
                                    <option value="low">–ù–∏–∑–∫–∏–π</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label for="prompt-description">–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                            <textarea id="prompt-description" name="description" class="form-control" rows="3"
                                      placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞..."></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="closeModal()">–û—Ç–º–µ–Ω–∞</button>
                    <button type="button" class="btn btn-primary" onclick="createPrompt()">
                        ü§ñ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    modal.style.display = 'flex';
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
    document.getElementById('prompt-name').focus();
}

/**
 * Create new prompt
 */
async function createPrompt() {
    const form = document.getElementById('create-prompt-form');
    const formData = new FormData(form);
    
    // Validation
    const name = formData.get('name').trim();
    const category = formData.get('category');
    const content = formData.get('content').trim();
    
    if (!name || !category || !content) {
        showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        return;
    }
    
    if (content.length < 10) {
        showError('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤');
        return;
    }

    try {
        // Prepare prompt data
        const variables = formData.get('variables') ? 
            formData.get('variables').split(',').map(v => v.trim()).filter(v => v) : [];

        const promptData = {
            name: name,
            category: category,
            content: content,
            variables: variables,
            language: formData.get('language') || 'ru',
            status: formData.get('status') || 'active',
            priority: formData.get('priority') || 'normal',
            description: formData.get('description') ? formData.get('description').trim() : ''
        };

        console.log('ü§ñ Creating prompt:', promptData);

        const response = await makeAuthenticatedRequest('/prompts', {
            method: 'POST',
            body: JSON.stringify(promptData)
        });

        console.log('ü§ñ Create response:', response);

        if (response.success) {
            showNotification('success', '–ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
            closeModal();
            
            // üîë –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–∫ –≤ knowledge.js
            currentPage = 1; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await loadPrompts(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤
            await loadPromptsStats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            
            console.log('‚úÖ Prompts list refreshed after creation');
        } else {
            throw new Error(response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç');
        }
    } catch (error) {
        console.error('ü§ñ Prompt creation error:', error);
        showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: ' + error.message);
    }
}

/**
 * Show test prompt modal
 */
function showTestPromptModal() {
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞</h3>
                    <button type="button" class="close" onclick="closeModal()">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="test-prompt-select">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</label>
                        <select id="test-prompt-select" class="form-control">
                            <option value="">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤...</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="test-variables">–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (JSON —Ñ–æ—Ä–º–∞—Ç)</label>
                        <textarea id="test-variables" class="form-control" rows="4"
                                  placeholder='{"user_name": "–ú–∞—Ä–∏—è", "quote_text": "–ñ–∏–∑–Ω—å –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞"}'></textarea>
                    </div>
                    <div id="test-results"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="closeModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
                    <button type="button" class="btn btn-primary" onclick="testPrompt()">
                        üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    modal.style.display = 'flex';
    
    // Load prompts for testing
    loadPromptsForTesting();
}

/**
 * Load prompts for testing dropdown
 */
async function loadPromptsForTesting() {
    try {
        const response = await makeAuthenticatedRequest('/prompts?limit=100');
        const select = document.getElementById('test-prompt-select');
        
        if (response.success && response.data) {
            select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–ø—Ç</option>' +
                response.data.map(prompt => 
                    `<option value="${prompt.id || prompt._id}">${prompt.name} (${prompt.category})</option>`
                ).join('');
        } else {
            select.innerHTML = '<option value="">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤</option>';
        }
    } catch (error) {
        const select = document.getElementById('test-prompt-select');
        select.innerHTML = '<option value="">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤</option>';
    }
}

/**
 * Test prompt functionality
 */
async function testPrompt() {
    const promptSelect = document.getElementById('test-prompt-select');
    const variablesInput = document.getElementById('test-variables');
    const resultsContainer = document.getElementById('test-results');
    
    if (!promptSelect || !resultsContainer) return;

    const promptId = promptSelect.value;
    if (!promptId) {
        showError('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        return;
    }

    let variables = {};
    try {
        if (variablesInput.value.trim()) {
            variables = JSON.parse(variablesInput.value);
        }
    } catch (error) {
        showError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö');
        return;
    }

    try {
        showLoading('test-results', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞...');

        const response = await makeAuthenticatedRequest('/prompts/test', {
            method: 'POST',
            body: JSON.stringify({
                promptId: promptId,
                variables: variables
            })
        });

        if (response.success) {
            renderTestResults(response.data);
        } else {
            throw new Error(response.error || '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞');
        }
    } catch (error) {
        console.error('ü§ñ –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞:', error);
        resultsContainer.innerHTML = `<div class="alert alert-danger">–û—à–∏–±–∫–∞: ${error.message}</div>`;
    }
}

/**
 * üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: Render prompts list - –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–æ –ø–æ –æ–±—Ä–∞–∑—Ü—É renderDocuments –∏–∑ knowledge.js
 */
function renderPrompts(prompts) {
    console.log('ü§ñ === –ù–ê–ß–ê–õ–û renderPrompts ===');
    console.log('ü§ñ Rendering prompts:', prompts);
    console.log(`ü§ñ Rendering ${prompts ? prompts.length : 0} prompts`);
    
    const tableBody = document.querySelector('#prompts-table tbody');
    const emptyState = document.getElementById('empty-state');
    
    if (!tableBody) {
        console.error('ü§ñ Table body not found!');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤
    if (!prompts || prompts.length === 0) {
        console.log('ü§ñ No prompts to display');
        tableBody.innerHTML = '<tr><td colspan="7" class="text-center">–ü—Ä–æ–º–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
        if (emptyState) emptyState.style.display = 'block';
        return;
    }

    console.log(`ü§ñ Rendering ${prompts.length} prompts`);
    
    if (emptyState) emptyState.style.display = 'none';

    // üîß –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º renderPrompts –ø–æ –æ–±—Ä–∞–∑—Ü—É renderDocuments
    const promptsHTML = prompts.map((prompt, index) => {
        console.log(`ü§ñ Rendering prompt ${index}:`, prompt.name, prompt.category);
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å ID
        const promptId = prompt._id || prompt.id;
        if (!promptId) {
            console.warn('ü§ñ Prompt without ID:', prompt);
        }
        
        const html = `
        <tr data-id="${promptId}">
            <td class="col-name">
                <div class="prompt-name">${escapeHtml(prompt.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</div>
                <small class="text-muted">${escapeHtml((prompt.description || '').substring(0, 80))}${(prompt.description || '').length > 80 ? '...' : ''}</small>
            </td>
            <td class="col-category">
                <span class="badge badge-primary">${getCategoryDisplayName(prompt.category)}</span>
            </td>
            <td class="col-language">${getLanguageDisplayName(prompt.language)}</td>
            <td class="col-variables">
                ${renderVariables(prompt.variables)}
            </td>
            <td class="col-status">
                <span class="badge badge-${getStatusBadgeClass(prompt.status)}">${getStatusDisplayName(prompt.status)}</span>
            </td>
            <td class="col-priority">
                <span class="priority priority-${prompt.priority || 'normal'}">${getPriorityDisplayName(prompt.priority)}</span>
            </td>
            <td class="col-actions">
                <div class="btn-group btn-group-sm">
                    <button class="btn btn-outline-primary" onclick="viewPrompt('${promptId}')" title="–ü—Ä–æ—Å–º–æ—Ç—Ä">
                        üëÅÔ∏è
                    </button>
                    <button class="btn btn-outline-secondary" onclick="editPrompt('${promptId}')" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                        ‚úèÔ∏è
                    </button>
                    <button class="btn btn-outline-success" onclick="testPromptById('${promptId}')" title="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å">
                        üß™
                    </button>
                    <button class="btn btn-outline-danger" onclick="deletePrompt('${promptId}')" title="–£–¥–∞–ª–∏—Ç—å">
                        üóëÔ∏è
                    </button>
                </div>
            </td>
        </tr>
    `;
        console.log(`ü§ñ Generated HTML for prompt ${index} (length: ${html.length})`);
        return html;
    }).join('');

    console.log(`ü§ñ Final HTML length: ${promptsHTML.length}`);
    console.log(`ü§ñ Setting innerHTML...`);
    
    tableBody.innerHTML = promptsHTML;
    
    console.log('‚úÖ Prompts rendered successfully');
    console.log('ü§ñ === –ö–û–ù–ï–¶ renderPrompts ===');
}

/**
 * üîß –î–û–ë–ê–í–õ–ï–ù–û: Render variables helper function
 */
function renderVariables(variables) {
    if (!variables || (Array.isArray(variables) && variables.length === 0)) {
        return '<span class="text-muted">‚Äî</span>';
    }
    
    // –ï—Å–ª–∏ variables —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤
    if (typeof variables === 'string') {
        variables = variables.split(',').map(v => v.trim()).filter(v => v);
    }
    
    // –ï—Å–ª–∏ variables –Ω–µ –º–∞—Å—Å–∏–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if (!Array.isArray(variables)) {
        return '<span class="text-muted">‚Äî</span>';
    }
    
    const visibleVariables = variables.slice(0, 2);
    const hiddenCount = variables.length - 2;
    
    let html = visibleVariables.map(variable => 
        `<span class="badge badge-secondary badge-sm">${escapeHtml(variable)}</span>`
    ).join(' ');
    
    if (hiddenCount > 0) {
        html += ` <span class="text-muted">+${hiddenCount}</span>`;
    }
    
    return html;
}

/**
 * Render prompts statistics
 */
function renderPromptsStats(stats) {
    console.log('ü§ñ Rendering stats:', stats);
    
    // Update main stats
    updateStatElement('total-prompts', stats.total || 0);
    updateStatElement('active-prompts', stats.active || 0);
    updateStatElement('draft-prompts', stats.draft || 0);
    updateStatElement('archived-prompts', stats.archived || 0);
    
    // Category distribution
    renderCategoryStats(stats.byCategory || []);

    // Language distribution
    renderLanguageStats(stats.byLanguage || []);

    console.log('ü§ñ Prompts statistics rendered successfully');
}

/**
 * Update pagination
 */
function updatePagination(pagination) {
    totalPages = pagination.totalPages || 1;
    currentPage = pagination.currentPage || 1;

    const paginationContainer = document.getElementById('pagination');
    const resultsInfo = document.getElementById('results-info');
    
    if (resultsInfo) {
        resultsInfo.textContent = `–ü–æ–∫–∞–∑–∞–Ω–æ ${pagination.startDoc || 1}-${pagination.endDoc || pagination.totalDocs} –∏–∑ ${pagination.totalDocs || 0} –ø—Ä–æ–º–ø—Ç–æ–≤`;
    }

    if (!paginationContainer) return;

    let paginationHTML = '';

    // Previous button
    if (currentPage > 1) {
        paginationHTML += `<li class="page-item"><button class="page-link" onclick="changePage(${currentPage - 1})">‚Äπ –ù–∞–∑–∞–¥</button></li>`;
    }

    // Page numbers
    const startPage = Math.max(1, currentPage - 2);
    const endPage = Math.min(totalPages, currentPage + 2);

    for (let i = startPage; i <= endPage; i++) {
        const isActive = i === currentPage;
        paginationHTML += `<li class="page-item ${isActive ? 'active' : ''}">
            <button class="page-link" onclick="changePage(${i})">${i}</button>
        </li>`;
    }

    // Next button
    if (currentPage < totalPages) {
        paginationHTML += `<li class="page-item"><button class="page-link" onclick="changePage(${currentPage + 1})">–í–ø–µ—Ä–µ–¥ ‚Ä∫</button></li>`;
    }

    paginationContainer.innerHTML = paginationHTML;
}

/**
 * Change page
 */
function changePage(page) {
    if (page < 1 || page > totalPages || page === currentPage) return;
    
    currentPage = page;
    loadPrompts();
}

/**
 * Utility functions
 */

function updateStatElement(elementId, value) {
    const element = document.getElementById(elementId);
    if (element) {
        element.textContent = value;
    }
}

function renderCategoryStats(categories) {
    const container = document.getElementById('category-stats');
    if (!container || !categories.length) {
        if (container) container.innerHTML = '<div class="text-muted">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
        return;
    }

    const statsHTML = categories.slice(0, 5).map(cat => `
        <div class="stat-item">
            <span class="stat-label">${getCategoryDisplayName(cat._id || cat.category)}</span>
            <span class="stat-value badge badge-secondary">${cat.count}</span>
        </div>
    `).join('');

    container.innerHTML = statsHTML;
}

function renderLanguageStats(languages) {
    const container = document.getElementById('language-stats');
    if (!container || !languages.length) {
        if (container) container.innerHTML = '<div class="text-muted">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
        return;
    }

    const statsHTML = languages.slice(0, 5).map(lang => `
        <div class="stat-item">
            <span class="stat-label">${getLanguageDisplayName(lang._id || lang.language)}</span>
            <span class="stat-value badge badge-secondary">${lang.count}</span>
        </div>
    `).join('');

    container.innerHTML = statsHTML;
}

function showLoading(containerId, message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    const container = document.getElementById(containerId);
    if (container) {
        container.innerHTML = `<div class="text-center text-muted py-4">${message}</div>`;
    }
}

function escapeHtml(text) {
    if (typeof text !== 'string') return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function showError(message) {
    console.error('ü§ñ Error:', message);
    if (typeof showNotification === 'function') {
        showNotification('error', message);
    } else {
        alert('–û—à–∏–±–∫–∞: ' + message);
    }
}

function showNotification(type, message) {
    // Use existing notification system or fallback
    if (typeof window.showNotification === 'function') {
        window.showNotification(type, message);
    } else {
        const notification = document.createElement('div');
        notification.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show`;
        notification.innerHTML = `
            ${message}
            <button type="button" class="close" data-dismiss="alert">&times;</button>
        `;
        
        const container = document.getElementById('notification-container') || document.body;
        container.appendChild(notification);
        
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 5000);
    }
}

/**
 * Get category display name with emoji
 */
function getCategoryDisplayName(category) {
    const categories = {
        'onboarding': 'üéØ –û–Ω–±–æ—Ä–¥–∏–Ω–≥',
        'quote_analysis': 'üìù –ê–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç',
        'weekly_reports': 'üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã',
        'monthly_reports': 'üìà –ú–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã',
        'book_recommendations': 'üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥',
        'user_interaction': 'üí¨ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ',
        'system': '‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ',
        'other': 'üìñ –î—Ä—É–≥–æ–µ'
    };
    return categories[category] || category || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

/**
 * Get status display name
 */
function getStatusDisplayName(status) {
    const statuses = {
        'active': '–ê–∫—Ç–∏–≤–Ω—ã–π',
        'draft': '–ß–µ—Ä–Ω–æ–≤–∏–∫',
        'archived': '–ê—Ä—Ö–∏–≤–Ω—ã–π'
    };
    return statuses[status] || status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

/**
 * Get status badge class
 */
function getStatusBadgeClass(status) {
    const classes = {
        'active': 'success',
        'draft': 'warning',
        'archived': 'secondary'
    };
    return classes[status] || 'secondary';
}

/**
 * Get priority display name
 */
function getPriorityDisplayName(priority) {
    const priorities = {
        'high': '–í—ã—Å–æ–∫–∏–π',
        'normal': '–û–±—ã—á–Ω—ã–π',
        'low': '–ù–∏–∑–∫–∏–π'
    };
    return priorities[priority] || priority || '–û–±—ã—á–Ω—ã–π';
}

/**
 * Get language display name
 */
function getLanguageDisplayName(language) {
    const languages = {
        'ru': '–†—É—Å—Å–∫–∏–π',
        'en': 'English',
        'none': '–ù–µ—Ç —è–∑—ã–∫–∞'
    };
    return languages[language] || language || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

/**
 * Close modal
 */
function closeModal() {
    const modal = document.querySelector('.modal');
    if (modal) {
        modal.remove();
    }
}

// Prompt management functions
async function viewPrompt(promptId) {
    try {
        console.log('üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–ø—Ç–∞:', promptId);
        // Implementation for viewing prompt
        showNotification('info', '–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ' + error.message);
    }
}

async function editPrompt(promptId) {
    try {
        console.log('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞:', promptId);
        // Implementation for editing prompt
        showNotification('info', '–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞:', error);
        showError('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ' + error.message);
    }
}

async function testPromptById(promptId) {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞:', promptId);
        showTestPromptModal();
        // Auto-select the prompt in the modal
        setTimeout(() => {
            const select = document.getElementById('test-prompt-select');
            if (select) {
                select.value = promptId;
            }
        }, 100);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞:', error);
        showError('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ' + error.message);
    }
}

async function deletePrompt(promptId) {
    const confirmation = confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–º–ø—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.');
    if (!confirmation) return;
    
    try {
        console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞:', promptId);
        
        const response = await makeAuthenticatedRequest(`/prompts/${promptId}`, {
            method: 'DELETE'
        });
        
        if (response.success) {
            showNotification('success', '–ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
            // üîë –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            await loadPrompts();
            await loadPromptsStats();
        } else {
            throw new Error(response.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞:', error);
        showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + error.message);
    }
}

function renderTestResults(data) {
    const container = document.getElementById('test-results');
    if (!container) return;

    const resultsHTML = `
        <div class="test-results-summary">
            <h5>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞</h5>
            <div class="alert alert-info">
                <strong>–°—Ç–∞—Ç—É—Å:</strong> ${data.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}<br>
                <strong>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> ${data.executionTime || 'N/A'}<br>
                <strong>–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:</strong><br>
                <pre style="background: #f5f5f5; padding: 10px; border-radius: 4px;">${escapeHtml(data.processedPrompt || '')}</pre>
            </div>
            ${data.result ? `
                <div class="alert alert-success">
                    <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong><br>
                    <pre style="background: #e8f5e8; padding: 10px; border-radius: 4px;">${escapeHtml(data.result)}</pre>
                </div>
            ` : ''}
            ${data.error ? `
                <div class="alert alert-danger">
                    <strong>–û—à–∏–±–∫–∞:</strong> ${escapeHtml(data.error)}
                </div>
            ` : ''}
        </div>
    `;

    container.innerHTML = resultsHTML;
}

// Initialize page when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    if (window.location.pathname.includes('prompts.html')) {
        initPromptsPage();
    }
});

console.log('ü§ñ Prompts management module loaded successfully');

/**
 * JavaScript –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç–∞–º–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Shrooms Support Bot
 */

/**
 * @typedef {Object} QuoteData
 * @property {string} id - ID —Ü–∏—Ç–∞—Ç—ã
 * @property {string} text - –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
 * @property {string|null} author - –ê–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã
 * @property {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è
 * @property {string} sentiment - –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (positive/neutral/negative)
 * @property {Object} user - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @property {string} createdAt - –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
 * @property {Array<string>} themes - –¢–µ–º—ã —Ü–∏—Ç–∞—Ç—ã
 */

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç–∞–º–∏
 */
class QuotesManager {
    constructor() {
        this.currentPage = 1;
        this.currentLimit = 20;
        this.filters = {
            period: '7d',
            category: 'all',
            author: 'all',
            search: ''
        };
        this.charts = {};
        this.isLoading = false;
        this.apiPrefix = '/api/reader'; // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API prefix
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ü–∏—Ç–∞—Ç
     */
    async init() {
        console.log('üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è QuotesManager');
        
        try {
            // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await this.loadData();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            this.setupEventListeners();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            this.initializeCharts();
            
            console.log('‚úÖ QuotesManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ QuotesManager:', error);
            this.showNotification('error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async loadData() {
        this.setLoading(true);
        
        try {
            // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            const [quotesData, statisticsData, analyticsData] = await Promise.all([
                this.fetchQuotes(),
                this.fetchStatistics(),
                this.fetchAnalytics()
            ]);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateQuotesTable(quotesData);
            this.updateStatistics(statisticsData);
            this.updateCharts(analyticsData);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        } finally {
            this.setLoading(false);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–∏—Ç–∞—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç
     */
    async fetchQuotes() {
        const params = new URLSearchParams({
            page: this.currentPage,
            limit: this.currentLimit,
            userId: 'admin-user', // Add userId parameter for admin access
            ...this.filters
        });

        const response = await fetch(`${this.apiPrefix}/quotes?${params}`);

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        if (!data.success) {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç');
        }

        return data.data;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–∏—Ç–∞—Ç
     * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    async fetchStatistics() {
        const response = await fetch(`${this.apiPrefix}/quotes/statistics?period=${this.filters.period}&userId=admin-user`);

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        if (!data.success) {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }

        return data.data;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
     * @returns {Promise<Object>} –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
     */
    async fetchAnalytics() {
        const response = await fetch(`${this.apiPrefix}/quotes/analytics?period=${this.filters.period}&userId=admin-user`);

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        if (!data.success) {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
        }

        return data.data;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ü–∏—Ç–∞—Ç
     * @param {Object} quotesData - –î–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç
     */
    updateQuotesTable(quotesData) {
        const tbody = document.querySelector('#quotes-table tbody');
        if (!tbody) return;

        if (!quotesData.quotes || quotesData.quotes.length === 0) {
            tbody.innerHTML = `
                <tr class="no-data">
                    <td colspan="8">üìñ –¶–∏—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td>
                </tr>
            `;
            return;
        }

        tbody.innerHTML = quotesData.quotes.map(quote => {
            const shortText = this.truncateText(quote.text, 60);
            const authorDisplay = quote.author ? 
                `<span class="author-name">${quote.author}</span>` : 
                '<span class="no-author">–ë–µ–∑ –∞–≤—Ç–æ—Ä–∞</span>';
            
            const sentimentBadge = this.getSentimentBadge(quote.sentiment);
            const categoryBadge = this.getCategoryBadge(quote.category);
            const timeAgo = this.getTimeAgo(quote.createdAt);

            return `
                <tr class="quote-row" data-quote-id="${quote.id}" onclick="quotesManager.viewQuote('${quote.id}')">
                    <td class="col-id">${quote.id}</td>
                    <td class="col-quote">
                        <div class="quote-text" title="${this.escapeHtml(quote.text)}">
                            "${shortText}"
                        </div>
                        ${quote.themes && quote.themes.length > 0 ? 
                            `<div class="quote-themes">${quote.themes.slice(0, 2).map(theme => 
                                `<span class="theme-tag">${theme}</span>`
                            ).join('')}</div>` : ''
                        }
                    </td>
                    <td class="col-author">${authorDisplay}</td>
                    <td class="col-category">${categoryBadge}</td>
                    <td class="col-user">
                        <div class="user-info">
                            <span class="user-name">${quote.user.name}</span>
                            <span class="user-username">${quote.user.username}</span>
                        </div>
                    </td>
                    <td class="col-sentiment">${sentimentBadge}</td>
                    <td class="col-date">
                        <div class="date-info">
                            <span class="time-ago">${timeAgo}</span>
                            <span class="full-date">${this.formatDate(quote.createdAt)}</span>
                        </div>
                    </td>
                    <td class="col-actions">
                        <div class="action-buttons">
                            <button class="btn btn-sm btn-secondary" onclick="event.stopPropagation(); quotesManager.viewQuote('${quote.id}')" title="–ü—Ä–æ—Å–º–æ—Ç—Ä">
                                üëÅÔ∏è
                            </button>
                            <button class="btn btn-sm btn-secondary" onclick="event.stopPropagation(); quotesManager.editQuote('${quote.id}')" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                                ‚úèÔ∏è
                            </button>
                            <button class="btn btn-sm btn-secondary" onclick="event.stopPropagation(); quotesManager.analyzeQuote('${quote.id}')" title="AI –∞–Ω–∞–ª–∏–∑">
                                üîç
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="event.stopPropagation(); quotesManager.deleteQuote('${quote.id}')" title="–£–¥–∞–ª–∏—Ç—å">
                                üóëÔ∏è
                            </button>
                        </div>
                    </td>
                </tr>
            `;
        }).join('');

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        this.updatePagination(quotesData.pagination);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
     * @param {Object} statistics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    updateStatistics(statistics) {
        const elements = {
            'total-quotes-stat': statistics.totalQuotes?.toLocaleString() || '‚Äî',
            'active-authors-stat': statistics.totalAuthors?.toLocaleString() || '‚Äî',
            'popular-category-stat': statistics.popularCategory || '‚Äî',
            'daily-average-stat': statistics.dailyAverage?.toFixed(1) || '‚Äî'
        };

        Object.entries(elements).forEach(([id, value]) => {
            const element = document.getElementById(id);
            if (element) {
                element.textContent = value;
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (statistics.changeStats) {
            this.updateStatChanges(statistics.changeStats);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
     * @param {Object} analytics - –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
     */
    updateCharts(analytics) {
        if (analytics.categories) {
            this.updateCategoriesChart(analytics.categories);
        }
        
        if (analytics.timeline) {
            this.updateTimelineChart(analytics.timeline);
        }
        
        if (analytics.topAuthors) {
            this.updateTopAuthorsList(analytics.topAuthors);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
     */
    initializeCharts() {
        // –ì—Ä–∞—Ñ–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const categoriesCtx = document.getElementById('categoriesChart');
        if (categoriesCtx) {
            this.charts.categories = new Chart(categoriesCtx, {
                type: 'doughnut',
                data: {
                    labels: [],
                    datasets: [{
                        data: [],
                        backgroundColor: []
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                boxWidth: 12,
                                padding: 15,
                                font: {
                                    size: 11
                                }
                            }
                        }
                    }
                }
            });
        }

        // –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏
        const timelineCtx = document.getElementById('quotesTimelineChart');
        if (timelineCtx) {
            this.charts.timeline = new Chart(timelineCtx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: '–¶–∏—Ç–∞—Ç—ã',
                        data: [],
                        borderColor: '#d4af37',
                        backgroundColor: 'rgba(212, 175, 55, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        },
                        x: {
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        }
                    }
                }
            });
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     * @param {Object} categoriesData - –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    updateCategoriesChart(categoriesData) {
        if (!this.charts.categories || !categoriesData) return;

        this.charts.categories.data.labels = categoriesData.labels;
        this.charts.categories.data.datasets[0].data = categoriesData.data;
        this.charts.categories.data.datasets[0].backgroundColor = categoriesData.colors;
        this.charts.categories.update();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏
     * @param {Object} timelineData - –î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏
     */
    updateTimelineChart(timelineData) {
        if (!this.charts.timeline || !timelineData) return;

        this.charts.timeline.data.labels = timelineData.labels;
        this.charts.timeline.data.datasets[0].data = timelineData.data;
        this.charts.timeline.update();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–ø –∞–≤—Ç–æ—Ä–æ–≤
     * @param {Array} topAuthors - –¢–æ–ø –∞–≤—Ç–æ—Ä—ã
     */
    updateTopAuthorsList(topAuthors) {
        const container = document.getElementById('top-authors-list');
        if (!container || !topAuthors) return;

        container.innerHTML = topAuthors.map((author, index) => `
            <div class="top-author-item">
                <span class="rank">${index + 1}</span>
                <div class="author-info">
                    <span class="name">${author.name}</span>
                    <span class="percentage">${author.percentage}%</span>
                </div>
                <span class="count">${author.count}</span>
            </div>
        `).join('');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –§–∏–ª—å—Ç—Ä—ã
        const periodFilter = document.getElementById('period-filter');
        const categoryFilter = document.getElementById('category-filter');
        const authorFilter = document.getElementById('author-filter');
        const searchInput = document.getElementById('search-quotes');

        if (periodFilter) {
            periodFilter.addEventListener('change', (e) => {
                this.filters.period = e.target.value;
                this.currentPage = 1;
                this.loadData();
            });
        }

        if (categoryFilter) {
            categoryFilter.addEventListener('change', (e) => {
                this.filters.category = e.target.value;
                this.currentPage = 1;
                this.loadData();
            });
        }

        if (authorFilter) {
            authorFilter.addEventListener('change', (e) => {
                this.filters.author = e.target.value;
                this.currentPage = 1;
                this.loadData();
            });
        }

        if (searchInput) {
            let searchTimeout;
            searchInput.addEventListener('input', (e) => {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    this.filters.search = e.target.value;
                    this.currentPage = 1;
                    this.loadData();
                }, 500); // Debounce –ø–æ–∏—Å–∫–∞
            });
        }

        // –≠–∫—Å–ø–æ—Ä—Ç
        const exportBtn = document.getElementById('export-quotes');
        if (exportBtn) {
            exportBtn.addEventListener('click', () => this.exportQuotes());
        }

        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        const prevBtn = document.getElementById('prev-page');
        const nextBtn = document.getElementById('next-page');

        if (prevBtn) {
            prevBtn.addEventListener('click', () => this.previousPage());
        }

        if (nextBtn) {
            nextBtn.addEventListener('click', () => this.nextPage());
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const closeBtn = document.getElementById('close-quote-details');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => this.closeModal());
        }

        // –ö–ª–∏–∫ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const overlay = document.getElementById('quote-details-overlay');
        if (overlay) {
            overlay.addEventListener('click', (e) => {
                if (e.target === overlay) {
                    this.closeModal();
                }
            });
        }
    }

    /**
     * –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–∏—Ç–∞—Ç–µ
     * @param {string} quoteId - ID —Ü–∏—Ç–∞—Ç—ã
     */
    async viewQuote(quoteId) {
        try {
            console.log('üìù –ü—Ä–æ—Å–º–æ—Ç—Ä —Ü–∏—Ç–∞—Ç—ã:', quoteId);

            const modal = document.getElementById('quote-details-overlay');
            const content = document.getElementById('quote-details-content');
            const title = document.getElementById('quote-details-title');

            if (!modal || !content) return;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π
            title.textContent = `üìù –¶–∏—Ç–∞—Ç–∞ ${quoteId}`;
            content.innerHTML = '<div class="loading">üìñ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π...</div>';
            modal.style.display = 'flex';

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            const response = await fetch(`${this.apiPrefix}/quotes/${quoteId}?userId=admin-user`);

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–∏—Ç–∞—Ç–µ');
            }

            const data = await response.json();
            if (!data.success) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
            }

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            this.renderQuoteDetails(data.data);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ü–∏—Ç–∞—Ç—ã:', error);
            this.showNotification('error', error.message);
            this.closeModal();
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–∏—Ç–∞—Ç–µ
     * @param {Object} quote - –î–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
     */
    renderQuoteDetails(quote) {
        const content = document.getElementById('quote-details-content');
        if (!content) return;

        content.innerHTML = `
            <div class="quote-profile">
                <div class="quote-main">
                    <div class="quote-text-full">
                        "${quote.text}"
                    </div>
                    ${quote.author ? 
                        `<div class="quote-author">‚Äî ${quote.author}</div>` : 
                        '<div class="quote-author no-author">–ê–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω</div>'
                    }
                    ${quote.source ? 
                        `<div class="quote-source">–ò—Å—Ç–æ—á–Ω–∏–∫: ${quote.source}</div>` : ''
                    }
                </div>
                
                <div class="quote-meta">
                    <div class="meta-section">
                        <h4>üìä –ê–Ω–∞–ª–∏–∑</h4>
                        <div class="meta-data">
                            <div class="meta-item">
                                <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
                                ${this.getCategoryBadge(quote.category)}
                            </div>
                            <div class="meta-item">
                                <label>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</label>
                                ${this.getSentimentBadge(quote.sentiment)}
                            </div>
                            ${quote.themes && quote.themes.length > 0 ? `
                                <div class="meta-item">
                                    <label>–¢–µ–º—ã:</label>
                                    <div class="themes-list">
                                        ${quote.themes.map(theme => 
                                            `<span class="theme-tag">${theme}</span>`
                                        ).join('')}
                                    </div>
                                </div>
                            ` : ''}
                            ${quote.meta ? `
                                <div class="meta-item">
                                    <label>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</label>
                                    <span>${quote.meta.wordCount} —Å–ª–æ–≤, ${quote.meta.characterCount} —Å–∏–º–≤–æ–ª–æ–≤</span>
                                </div>
                            ` : ''}
                        </div>
                    </div>
                    
                    <div class="meta-section">
                        <h4>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</h4>
                        <div class="meta-data">
                            <div class="meta-item">
                                <label>–ò–º—è:</label>
                                <span>${quote.user.name}</span>
                            </div>
                            <div class="meta-item">
                                <label>Telegram:</label>
                                <span>${quote.user.telegramUsername}</span>
                            </div>
                            <div class="meta-item">
                                <label>Email:</label>
                                <span>${quote.user.email}</span>
                            </div>
                            <div class="meta-item">
                                <label>–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:</label>
                                <span>${this.formatFullDate(quote.meta.createdAt)}</span>
                            </div>
                        </div>
                    </div>
                    
                    ${quote.aiAnalysis ? `
                        <div class="meta-section">
                            <h4>ü§ñ AI –ê–Ω–∞–ª–∏–∑</h4>
                            <div class="ai-analysis">
                                <p><strong>–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑:</strong> ${quote.aiAnalysis.summary}</p>
                                <p><strong>–ò–Ω—Å–∞–π—Ç—ã:</strong> ${quote.aiAnalysis.insights}</p>
                                ${quote.aiAnalysis.recommendation ? 
                                    `<p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong> ${quote.aiAnalysis.recommendation}</p>` : ''
                                }
                                <div class="confidence-score">
                                    <label>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞:</label>
                                    <span class="confidence-badge">${Math.round(quote.aiAnalysis.confidence * 100)}%</span>
                                </div>
                            </div>
                        </div>
                    ` : ''}
                </div>
                
                <div class="quote-actions">
                    <button class="btn btn-primary" onclick="quotesManager.addToKnowledgeBase('${quote.id}')">
                        üìö –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
                    </button>
                    <button class="btn btn-secondary" onclick="quotesManager.findSimilarQuotes('${quote.id}')">
                        üîç –ü–æ—Ö–æ–∂–∏–µ —Ü–∏—Ç–∞—Ç—ã
                    </button>
                    <button class="btn btn-secondary" onclick="quotesManager.editQuote('${quote.id}')">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button class="btn btn-danger" onclick="quotesManager.deleteQuote('${quote.id}')">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
    }

    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
     * @param {string} quoteId - ID —Ü–∏—Ç–∞—Ç—ã
     */
    async editQuote(quoteId) {
        console.log('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã:', quoteId);
        this.showNotification('info', `–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏`);
    }

    /**
     * AI –∞–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç—ã
     * @param {string} quoteId - ID —Ü–∏—Ç–∞—Ç—ã
     */
    async analyzeQuote(quoteId) {
        try {
            console.log('ü§ñ –ó–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏—Ç–∞—Ç—ã:', quoteId);

            const response = await fetch(`${this.apiPrefix}/quotes/${quoteId}/analyze?userId=admin-user`, {
                method: 'POST'
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞');
            }

            const data = await response.json();
            if (!data.success) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞');
            }

            this.showNotification('success', `AI –∞–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç—ã ${quoteId} –∑–∞–ø—É—â–µ–Ω`);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞:', error);
            this.showNotification('error', error.message);
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
     * @param {string} quoteId - ID —Ü–∏—Ç–∞—Ç—ã
     */
    async deleteQuote(quoteId) {
        if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ü–∏—Ç–∞—Ç—É ${quoteId}?`)) {
            return;
        }

        try {
            console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã:', quoteId);

            const response = await fetch(`${this.apiPrefix}/quotes/${quoteId}?userId=admin-user`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    reason: '–£–¥–∞–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
                })
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã');
            }

            const data = await response.json();
            if (!data.success) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
            }

            this.showNotification('success', `–¶–∏—Ç–∞—Ç–∞ ${quoteId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞`);
            this.loadData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', error);
            this.showNotification('error', error.message);
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç —Ü–∏—Ç–∞—Ç
     */
    async exportQuotes() {
        try {
            console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç —Ü–∏—Ç–∞—Ç');

            const response = await fetch(`${this.apiPrefix}/quotes/export?userId=admin-user`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    format: 'csv',
                    ...this.filters
                })
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞');
            }

            const data = await response.json();
            if (!data.success) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞');
            }

            this.showNotification('success', `–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω: ${data.data.filename}`);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
            this.showNotification('error', error.message);
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ü–∏—Ç–∞—Ç
     * @param {string} quoteId - ID —Ü–∏—Ç–∞—Ç—ã
     */
    async findSimilarQuotes(quoteId) {
        try {
            console.log('üîç –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ü–∏—Ç–∞—Ç –¥–ª—è:', quoteId);

            const response = await fetch(`${this.apiPrefix}/quotes/search/similar/${quoteId}?userId=admin-user`);

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞');
            }

            const data = await response.json();
            if (!data.success) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞');
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
            const count = data.data.similarQuotes.length;
            this.showNotification('info', `–ù–∞–π–¥–µ–Ω–æ ${count} –ø–æ—Ö–æ–∂–∏—Ö —Ü–∏—Ç–∞—Ç`);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ü–∏—Ç–∞—Ç:', error);
            this.showNotification('error', error.message);
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
     * @param {string} quoteId - ID —Ü–∏—Ç–∞—Ç—ã
     */
    async addToKnowledgeBase(quoteId) {
        console.log('üìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π:', quoteId);
        this.showNotification('info', '–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
    }

    // ==================== –ü–ê–ì–ò–ù–ê–¶–ò–Ø ====================

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
     * @param {Object} pagination - –î–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
     */
    updatePagination(pagination) {
        if (!pagination) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å—è—Ö
        const rangeElement = document.getElementById('pagination-range');
        const totalElement = document.getElementById('pagination-total');
        const currentElement = document.getElementById('pagination-current');

        if (rangeElement) {
            const start = (pagination.currentPage - 1) * this.currentLimit + 1;
            const end = Math.min(pagination.currentPage * this.currentLimit, pagination.totalCount);
            rangeElement.textContent = `${start}-${end}`;
        }

        if (totalElement) {
            totalElement.textContent = pagination.totalCount.toLocaleString();
        }

        if (currentElement) {
            currentElement.textContent = `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pagination.currentPage} –∏–∑ ${pagination.totalPages}`;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        const prevBtn = document.getElementById('prev-page');
        const nextBtn = document.getElementById('next-page');

        if (prevBtn) {
            prevBtn.disabled = !pagination.hasPrev;
        }

        if (nextBtn) {
            nextBtn.disabled = !pagination.hasNext;
        }
    }

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     */
    previousPage() {
        if (this.currentPage > 1) {
            this.currentPage--;
            this.loadData();
        }
    }

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     */
    nextPage() {
        this.currentPage++;
        this.loadData();
    }

    // ==================== –£–¢–ò–õ–ò–¢–´ ====================

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     * @param {boolean} loading - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    setLoading(loading) {
        this.isLoading = loading;
        
        const tbody = document.querySelector('#quotes-table tbody');
        if (tbody && loading) {
            tbody.innerHTML = `
                <tr class="table-loading">
                    <td colspan="8">üìñ –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–∏—Ç–∞—Ç...</td>
                </tr>
            `;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
     * @param {string} sentiment - –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
     * @returns {string} HTML –∑–Ω–∞—á–∫–∞
     */
    getSentimentBadge(sentiment) {
        const sentimentMap = {
            'positive': '<span class="sentiment-badge sentiment-positive">üòä –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π</span>',
            'neutral': '<span class="sentiment-badge sentiment-neutral">üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π</span>',
            'negative': '<span class="sentiment-badge sentiment-negative">üòî –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π</span>'
        };
        return sentimentMap[sentiment] || '<span class="sentiment-badge sentiment-neutral">‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω</span>';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è
     * @returns {string} HTML –∑–Ω–∞—á–∫–∞
     */
    getCategoryBadge(category) {
        const categoryMap = {
            '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ': 'üå±',
            '–õ—é–±–æ–≤—å': 'üíï',
            '–ú—É–¥—Ä–æ—Å—Ç—å': 'üß†',
            '–§–∏–ª–æ—Å–æ—Ñ–∏—è': 'ü§î',
            '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ': 'üé®',
            '–ú–æ—Ç–∏–≤–∞—Ü–∏—è': '‚ö°',
            '–û—Ç–Ω–æ—à–µ–Ω–∏—è': 'üë•'
        };
        
        const icon = categoryMap[category] || 'üìù';
        return `<span class="category-badge">${icon} ${category}</span>`;
    }

    /**
     * –û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞
     * @param {string} text - –¢–µ–∫—Å—Ç
     * @param {number} maxLength - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
     * @returns {string} –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
     */
    truncateText(text, maxLength) {
        if (!text || text.length <= maxLength) return text;
        return text.substring(0, maxLength) + '...';
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
     * @param {string} text - –¢–µ–∫—Å—Ç
     * @returns {string} –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
     */
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ "–Ω–∞–∑–∞–¥"
     * @param {string} dateString - –î–∞—Ç–∞ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
     * @returns {string} –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
     */
    getTimeAgo(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diffMs = now - date;
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDays = Math.floor(diffHours / 24);

        if (diffHours < 1) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
        if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
        if (diffDays < 7) return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
        return this.formatDate(dateString);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
     * @param {string} dateString - –î–∞—Ç–∞ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
     */
    formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
    }

    /**
     * –ü–æ–ª–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
     * @param {string} dateString - –î–∞—Ç–∞ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
     * @returns {string} –ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
     */
    formatFullDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    closeModal() {
        const modal = document.getElementById('quote-details-overlay');
        if (modal) {
            modal.style.display = 'none';
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     */
    showNotification(type, message) {
        const container = document.getElementById('notification-container');
        if (!container) {
            console.log(`[${type.toUpperCase()}] ${message}`);
            return;
        }

        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <span class="notification-icon">${type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : 'üìù'}</span>
                <span class="notification-message">${message}</span>
            </div>
            <button class="notification-close" onclick="this.parentElement.remove()">√ó</button>
        `;

        container.appendChild(notification);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 5000);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @param {Object} changeStats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    updateStatChanges(changeStats) {
        const elements = {
            'quotes-change': changeStats.quotesChange,
            'authors-change': changeStats.authorsChange, 
            'avg-change': changeStats.avgChange
        };

        Object.entries(elements).forEach(([id, value]) => {
            const element = document.getElementById(id);
            if (element && value) {
                element.textContent = value;
                element.className = value.startsWith('+') ? 'stat-change positive' : 
                                   value.startsWith('-') ? 'stat-change negative' : 
                                   'stat-change neutral';
            }
        });
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É —Ü–∏—Ç–∞—Ç
let quotesManager;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ü–∏—Ç–∞—Ç
 */
function initQuotesPage() {
    console.log('üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ü–∏—Ç–∞—Ç');
    quotesManager = new QuotesManager();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { QuotesManager };
}
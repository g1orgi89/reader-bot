/**
 * tickets.js - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Shrooms AI Support Bot
 * –°–ª–µ–¥—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ knowledge.js –∏ auth.js
 * 
 * @fileoverview –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∏–±–Ω—ã–º–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏ –∏ —Å–ø–æ—Ä–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
 * @author Shrooms Development Team
 */

// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
const TICKETS_CONFIG = {
  API_BASE: '/api/tickets',
  DEFAULT_PAGE_SIZE: 10,
  
  STATUS_LABELS: {
    'open': '–û—Ç–∫—Ä—ã—Ç',
    'in_progress': '–í —Ä–∞–±–æ—Ç–µ', 
    'resolved': '–†–µ—à–µ–Ω',
    'closed': '–ó–∞–∫—Ä—ã—Ç'
  },
  
  PRIORITY_LABELS: {
    'low': '–ù–∏–∑–∫–∏–π',
    'medium': '–°—Ä–µ–¥–Ω–∏–π',
    'high': '–í—ã—Å–æ–∫–∏–π', 
    'urgent': '–°—Ä–æ—á–Ω—ã–π'
  },
  
  CATEGORY_LABELS: {
    'technical': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è',
    'account': '–ê–∫–∫–∞—É–Ω—Ç',
    'billing': '–û–ø–ª–∞—Ç–∞',
    'feature': '–§—É–Ω–∫—Ü–∏—è',
    'other': '–î—Ä—É–≥–æ–µ'
  }
};

// –°–û–°–¢–û–Ø–ù–ò–ï –¢–ò–ö–ï–¢–û–í
const ticketsState = {
  tickets: [],
  currentFilters: {
    status: 'open',
    priority: 'all',
    search: '',
    page: 1,
    limit: TICKETS_CONFIG.DEFAULT_PAGE_SIZE
  },
  totalTickets: 0,
  isLoading: false,
  pagination: {
    currentPage: 1,
    totalPages: 1,
    hasNextPage: false,
    hasPrevPage: false
  }
};

/**
 * @typedef {Object} TicketData
 * @property {string} _id - MongoDB ObjectId
 * @property {string} ticketId - –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π ID —Ç–∏–∫–µ—Ç–∞
 * @property {string} subject - –¢–µ–º–∞ —Ç–∏–∫–µ—Ç–∞
 * @property {string} status - –°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
 * @property {string} priority - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–∏–∫–µ—Ç–∞
 * @property {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–∞
 * @property {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @property {string} initialMessage - –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @property {string} context - JSON —Å—Ç—Ä–æ–∫–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–∏–∞–ª–æ–≥–∞
 * @property {string} createdAt - –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
 * @property {string} updatedAt - –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @property {string} [email] - Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @property {string} [assignedTo] - –ù–∞–∑–Ω–∞—á–µ–Ω –∫–æ–º—É
 * @property {string} [resolution] - –†–µ–∑–æ–ª—é—Ü–∏—è
 * @property {string} language - –Ø–∑—ã–∫ —Ç–∏–∫–µ—Ç–∞
 */

/**
 * @typedef {Object} TicketsResponse
 * @property {boolean} success - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
 * @property {Object} data - –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
 * @property {TicketData[]} data.tickets - –ú–∞—Å—Å–∏–≤ —Ç–∏–∫–µ—Ç–æ–≤
 * @property {Object} data.pagination - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 * @property {number} data.pagination.totalCount - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤
 * @property {number} data.pagination.currentPage - –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
 * @property {number} data.pagination.totalPages - –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü
 * @property {boolean} data.pagination.hasNextPage - –ï—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
 * @property {boolean} data.pagination.hasPrevPage - –ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
 */

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã –∏–∑ API (–∑–∞–º–µ–Ω—è–µ—Ç loadBasicTickets)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç makeAuthenticatedRequest() –∏–∑ auth.js
 * @returns {Promise<void>}
 */
async function loadRealTickets() {
  if (ticketsState.isLoading) return;
  
  console.log('üçÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –∏–∑ API...');
  
  try {
    ticketsState.isLoading = true;
    updateLoadingState(true);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if (typeof window.makeAuthenticatedRequest !== 'function') {
      console.error('üçÑ makeAuthenticatedRequest –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      renderMockTicketsTable();
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const params = new URLSearchParams();
    
    if (ticketsState.currentFilters.status !== 'all') {
      params.append('status', ticketsState.currentFilters.status);
    }
    
    if (ticketsState.currentFilters.priority !== 'all') {
      params.append('priority', ticketsState.currentFilters.priority);
    }
    
    if (ticketsState.currentFilters.search) {
      params.append('search', ticketsState.currentFilters.search);
    }
    
    params.append('page', ticketsState.currentFilters.page.toString());
    params.append('limit', ticketsState.currentFilters.limit.toString());
    
    // API –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ auth.js)
    const response = await window.makeAuthenticatedRequest(`${TICKETS_CONFIG.API_BASE}?${params}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
    if (response && response.success) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ curl —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      ticketsState.tickets = response.data?.tickets || [];
      ticketsState.totalTickets = response.data?.pagination?.totalCount || 0;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      ticketsState.pagination = {
        currentPage: response.data?.pagination?.currentPage || 1,
        totalPages: response.data?.pagination?.totalPages || 1,
        hasNextPage: response.data?.pagination?.hasNextPage || false,
        hasPrevPage: response.data?.pagination?.hasPrevPage || false
      };
      
      renderRealTicketsTable();
      updatePaginationInfo();
      
      console.log(`üçÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${ticketsState.tickets.length} —Ç–∏–∫–µ—Ç–æ–≤ –∏–∑ ${ticketsState.totalTickets}`);
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ - –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç response
      const isAuthError = response && (
        (response.error && response.error.status === 401) ||
        (response.status === 401) ||
        (typeof response.error === 'string' && response.error.includes('401'))
      );
      
      if (isAuthError) {
        console.log('üçÑ –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Ç–∏–∫–µ—Ç–æ–≤');
        renderMockTicketsTable();
      } else {
        console.log('üçÑ API –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ—É—Å–ø–µ—à–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Ç–∏–∫–µ—Ç–æ–≤');
        renderMockTicketsTable();
      }
    }
  } catch (error) {
    console.error('üçÑ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤:', error);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    let isAuthError = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if (error && error.message) {
      const errorMessage = error.message.toString();
      isAuthError = errorMessage.includes('401') || 
                   errorMessage.includes('Unauthorized') || 
                   errorMessage.includes('Authentication required') ||
                   errorMessage.includes('token') ||
                   errorMessage.includes('–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü');
    } else if (error && typeof error === 'string') {
      isAuthError = error.includes('401') || 
                   error.includes('Unauthorized') || 
                   error.includes('Authentication required');
    }
    
    if (isAuthError) {
      console.log('üçÑ –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Ç–∏–∫–µ—Ç–æ–≤');
    } else {
      console.log('üçÑ –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Ç–∏–∫–µ—Ç–æ–≤');
    }
    
    // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    renderMockTicketsTable();
  } finally {
    ticketsState.isLoading = false;
    updateLoadingState(false);
  }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É —Ç–∏–∫–µ—Ç–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
function renderMockTicketsTable() {
  console.log('üçÑ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Ç–∏–∫–µ—Ç–æ–≤');
  
  const mockTickets = [
    {
      ticketId: 'SHRM001',
      subject: '–ü—Ä–æ–±–ª–µ–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ Xverse',
      status: 'open',
      priority: 'medium',
      userId: 'user_123...abc',
      createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
      updatedAt: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString()
    },
    {
      ticketId: 'SHRM002',
      subject: '–í–æ–ø—Ä–æ—Å –æ —Ç–æ–∫–µ–Ω–æ–º–∏–∫–µ SHROOMS',
      status: 'resolved',
      priority: 'low',
      userId: 'user_456...def',
      createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
      updatedAt: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString()
    },
    {
      ticketId: 'SHRM003',
      subject: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∞—Ä–º–∏–Ω–≥–µ —Ç–æ–∫–µ–Ω–æ–≤',
      status: 'in_progress',
      priority: 'high',
      userId: 'user_789...ghi',
      createdAt: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),
      updatedAt: new Date(Date.now() - 30 * 60 * 1000).toISOString()
    }
  ];

  const tbody = document.querySelector('#tickets-table tbody');
  if (!tbody) return;

  tbody.innerHTML = mockTickets.map(ticket => `
    <tr onclick="showMockTicketDetail('${ticket.ticketId}')" style="cursor: pointer;">
      <td class="col-id">${formatTicketIdForTable(ticket.ticketId)}</td>
      <td class="col-subject">${escapeHtml(ticket.subject)}</td>
      <td class="col-status">
        <span class="status-badge status-${ticket.status}">
          ${TICKETS_CONFIG.STATUS_LABELS[ticket.status] || ticket.status}
        </span>
      </td>
      <td class="col-priority">
        <span class="priority-badge priority-${ticket.priority}">
          ${TICKETS_CONFIG.PRIORITY_LABELS[ticket.priority] || ticket.priority}
        </span>
      </td>
      <td class="col-user">${ticket.userId}</td>
      <td class="col-created">${formatRelativeTime(ticket.createdAt)}</td>
      <td class="col-updated">${formatRelativeTime(ticket.updatedAt)}</td>
      <td class="col-actions">
        <div class="table-action-buttons">
          <button class="btn-table-action btn-table-view" onclick="showMockTicketDetail('${ticket.ticketId}'); event.stopPropagation();">
            üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä
          </button>
          <button class="btn-table-action btn-table-delete" onclick="quickDeleteTicket('${ticket.ticketId}'); event.stopPropagation();" title="–£–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ç">
            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
          </button>
        </div>
      </td>
    </tr>
  `).join('');

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∑–∞–≥–ª—É—à–∫–∏
  const rangeElement = document.getElementById('pagination-range');
  const totalElement = document.getElementById('pagination-total');
  const currentElement = document.getElementById('pagination-current');

  if (rangeElement) rangeElement.textContent = '1-3';
  if (totalElement) totalElement.textContent = '3';
  if (currentElement) currentElement.textContent = '–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç ID —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ø–æ–∫–∞–∑–∞—Ç—å 16-20 —Å–∏–º–≤–æ–ª–æ–≤ + –∫–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {string} ticketId - –ü–æ–ª–Ω—ã–π ID —Ç–∏–∫–µ—Ç–∞
 * @returns {string} HTML –∫–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ID
 */
function formatTicketIdForTable(ticketId) {
  if (!ticketId) return '';
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 18 —Å–∏–º–≤–æ–ª–æ–≤ (–∫–æ–º–ø—Ä–æ–º–∏—Å—Å –º–µ–∂–¥—É 16-20)
  const displayId = ticketId.length > 18 ? ticketId.substring(0, 18) + '...' : ticketId;
  
  return `
    <div class="ticket-id-cell" title="${escapeHtml(ticketId)}">
      <span class="ticket-id-short">${escapeHtml(displayId)}</span>
      <button class="btn-copy-mini" onclick="copyTicketId('${escapeHtml(ticketId)}'); event.stopPropagation();" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π ID">
        üìã
      </button>
    </div>
  `;
}

/**
 * –ö–æ–ø–∏—Ä—É–µ—Ç ID —Ç–∏–∫–µ—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
 * @param {string} ticketId - ID —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function copyTicketId(ticketId) {
  try {
    await navigator.clipboard.writeText(ticketId);
    console.log('üçÑ ID —Ç–∏–∫–µ—Ç–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω:', ticketId);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification('üìã ID —Ç–∏–∫–µ—Ç–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
  } catch (error) {
    console.error('üçÑ –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    
    // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    const textArea = document.createElement('textarea');
    textArea.value = ticketId;
    document.body.appendChild(textArea);
    textArea.select();
    try {
      document.execCommand('copy');
      showNotification('üìã ID —Ç–∏–∫–µ—Ç–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
    } catch (fallbackError) {
      showNotification('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID', 'error');
    }
    document.body.removeChild(textArea);
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * @param {string} message - –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ('success', 'error', 'info')
 */
function showNotification(message, type = 'info') {
  // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  let container = document.getElementById('notification-container');
  if (!container) {
    container = document.createElement('div');
    container.id = 'notification-container';
    container.className = 'notification-container';
    document.body.appendChild(container);
  }
  
  const notification = document.createElement('div');
  notification.className = `notification notification-${type}`;
  notification.textContent = message;
  
  container.appendChild(notification);
  
  // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    if (notification.parentNode) {
      notification.parentNode.removeChild(notification);
    }
  }, 3000);
}

/**
 * –ë—ã—Å—Ç—Ä–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
 * @param {string} ticketId - ID —Ç–∏–∫–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 */
function quickDeleteTicket(ticketId) {
  if (confirm(`üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ç ${ticketId} –Ω–∞–≤—Å–µ–≥–¥–∞?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
    console.log('üçÑ –ë—ã—Å—Ç—Ä–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞:', ticketId);
    showNotification('üóëÔ∏è –¢–∏–∫–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞', 'info');
    
    // –î–ª—è mock –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    // –í —Ä–µ–∞–ª—å–Ω–æ–º API –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ deleteRealTicketForever()
    setTimeout(() => {
      loadRealTickets();
    }, 500);
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–≥–ª—É—à–∫–∏ —Ç–∏–∫–µ—Ç–∞
 * @param {string} ticketId - ID —Ç–∏–∫–µ—Ç–∞
 */
function showMockTicketDetail(ticketId) {
  console.log('üçÑ –ü–æ–∫–∞–∑ –∑–∞–≥–ª—É—à–∫–∏ —Ç–∏–∫–µ—Ç–∞:', ticketId);
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≥–ª—É—à–∫–æ–π
  const detailElements = {
    'detail-ticket-id': ticketId,
    'detail-ticket-subject': '–ü—Ä–æ–±–ª–µ–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ Xverse',
    'detail-ticket-user': 'user_123...abc',
    'detail-ticket-created': new Date().toLocaleString('ru-RU'),
    'detail-ticket-updated': new Date().toLocaleString('ru-RU'),
    'detail-ticket-message': '–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ Xverse –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ. –í—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–º–æ–≥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!'
  };
  
  Object.entries(detailElements).forEach(([id, value]) => {
    const element = document.getElementById(id);
    if (element) {
      element.textContent = value;
    }
  });
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ–≤
  const statusSelect = document.getElementById('detail-ticket-status');
  const prioritySelect = document.getElementById('detail-ticket-priority');
  
  if (statusSelect) statusSelect.value = 'open';
  if (prioritySelect) prioritySelect.value = 'medium';
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
  const contextContainer = document.getElementById('detail-ticket-conversation');
  if (contextContainer) {
    contextContainer.innerHTML = `
      <div class="conversation-message user-message" style="margin-bottom: 1rem; padding: 0.5rem; background: var(--card-bg); border-left: 3px solid var(--neon-pink);">
        <strong style="color: var(--neon-pink);">üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong><br>
        <span style="color: var(--text-light);">–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ Xverse</span>
      </div>
      <div class="conversation-message bot-message" style="margin-bottom: 1rem; padding: 0.5rem; background: var(--card-bg); border-left: 3px solid var(--neon-green);">
        <strong style="color: var(--neon-green);">üçÑ –ë–æ—Ç:</strong><br>
        <span style="color: var(--text-light);">–ü—Ä–∏–≤–µ—Ç, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ª–µ—Å–æ–≤! –ü–æ–º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω–∫—É –∫ –Ω–∞—à–µ–º—É –º–∏—Ü–µ–ª–∏—é...</span>
      </div>
    `;
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  const overlay = document.getElementById('ticket-detail-overlay');
  if (overlay) {
    overlay.style.display = 'flex';
    overlay.dataset.currentTicketId = 'mock';
    overlay.dataset.currentTicketDisplayId = ticketId;
  }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 * @param {boolean} isLoading - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 */
function updateLoadingState(isLoading) {
  const tbody = document.querySelector('#tickets-table tbody');
  if (!tbody) return;
  
  if (isLoading) {
    tbody.innerHTML = `
      <tr class="table-loading">
        <td colspan="8" style="text-align: center; padding: 2rem; color: var(--neon-green);">
          üçÑ –ü—Ä–æ—Ä–∞—Å—Ç–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏–π...
        </td>
      </tr>
    `;
  }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç–∏–∫–µ—Ç–∞–º–∏
 */
function renderRealTicketsTable() {
  const tbody = document.querySelector('#tickets-table tbody');
  if (!tbody) return;
  
  if (ticketsState.tickets.length === 0) {
    renderEmptyTicketsTable();
    return;
  }
  
  tbody.innerHTML = ticketsState.tickets.map(ticket => `
    <tr onclick="showRealTicketDetail('${ticket.ticketId}')" style="cursor: pointer;">
      <td class="col-id">${formatTicketIdForTable(ticket.ticketId)}</td>
      <td class="col-subject" title="${escapeHtml(ticket.subject)}">${escapeHtml(ticket.subject.substring(0, 50))}${ticket.subject.length > 50 ? '...' : ''}</td>
      <td class="col-status">
        <span class="status-badge status-${ticket.status}">
          ${TICKETS_CONFIG.STATUS_LABELS[ticket.status] || ticket.status}
        </span>
      </td>
      <td class="col-priority">
        <span class="priority-badge priority-${ticket.priority}">
          ${TICKETS_CONFIG.PRIORITY_LABELS[ticket.priority] || ticket.priority}
        </span>
      </td>
      <td class="col-user" title="${ticket.userId}">${ticket.userId.substring(0, 12)}...</td>
      <td class="col-created">${formatRelativeTime(ticket.createdAt)}</td>
      <td class="col-updated">${formatRelativeTime(ticket.updatedAt)}</td>
      <td class="col-actions">
        <div class="table-action-buttons">
          <button class="btn-table-action btn-table-view" onclick="showRealTicketDetail('${ticket.ticketId}'); event.stopPropagation();" title="–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏–∫–µ—Ç–∞">
            üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä
          </button>
          <button class="btn-table-action btn-table-delete" onclick="quickDeleteRealTicket('${ticket._id}', '${ticket.ticketId}'); event.stopPropagation();" title="–£–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ç">
            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
          </button>
        </div>
      </td>
    </tr>
  `).join('');
}

/**
 * –ë—ã—Å—Ç—Ä–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
 * @param {string} mongoId - MongoDB ObjectId —Ç–∏–∫–µ—Ç–∞
 * @param {string} displayId - –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π ID –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function quickDeleteRealTicket(mongoId, displayId) {
  if (!confirm(`üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ç ${displayId} –Ω–∞–≤—Å–µ–≥–¥–∞?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
    return;
  }
  
  try {
    console.log('üçÑ –ë—ã—Å—Ç—Ä–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞:', mongoId);
    
    const response = await window.makeAuthenticatedRequest(`${TICKETS_CONFIG.API_BASE}/${mongoId}`, {
      method: 'DELETE'
    });
    
    if (response.success) {
      showNotification('üóëÔ∏è –¢–∏–∫–µ—Ç —É–¥–∞–ª–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞', 'success');
      await loadRealTickets(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
    } else {
      throw new Error(response.error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ç');
    }
  } catch (error) {
    console.error('üçÑ –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', error);
    showNotification('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞', 'error');
  }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—É—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É
 */
function renderEmptyTicketsTable() {
  const tbody = document.querySelector('#tickets-table tbody');
  if (!tbody) return;
  
  tbody.innerHTML = `
    <tr class="table-empty">
      <td colspan="8" style="text-align: center; padding: 2rem; color: var(--text-light);">
        üçÑ –í –≥—Ä–∏–±–Ω–∏—Ü–µ –ø–æ–∫–∞ —Ç–∏—Ö–æ - —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
      </td>
    </tr>
  `;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ HTML (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º)
 */
function updatePaginationInfo() {
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
  const rangeElement = document.getElementById('pagination-range');
  if (rangeElement) {
    const start = ticketsState.tickets.length > 0 ? 
                  (ticketsState.pagination.currentPage - 1) * ticketsState.currentFilters.limit + 1 : 0;
    const end = Math.min(start + ticketsState.tickets.length - 1, ticketsState.totalTickets);
    rangeElement.textContent = `${start}-${end}`;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  const totalElement = document.getElementById('pagination-total');
  if (totalElement) {
    totalElement.textContent = ticketsState.totalTickets.toString();
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  const currentElement = document.getElementById('pagination-current');
  if (currentElement) {
    currentElement.textContent = `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${ticketsState.pagination.currentPage}`;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –∏–∑ HTML)
  const prevBtn = document.getElementById('prev-page');
  const nextBtn = document.getElementById('next-page');
  
  if (prevBtn) {
    prevBtn.disabled = !ticketsState.pagination.hasPrevPage;
  }
  
  if (nextBtn) {
    nextBtn.disabled = !ticketsState.pagination.hasNextPage;
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
 * –ó–∞–º–µ–Ω—è–µ—Ç –∑–∞–≥–ª—É—à–∫—É showTicketDetail()
 * @param {string} ticketId - ID —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function showRealTicketDetail(ticketId) {
  console.log('üçÑ –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞:', ticketId);
  
  try {
    // –ù–∞—Ö–æ–¥–∏–º —Ç–∏–∫–µ—Ç –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const ticket = ticketsState.tickets.find(t => t.ticketId === ticketId);
    if (!ticket) {
      console.error('üçÑ –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ');
      return;
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ HTML)
    const detailElements = {
      'detail-ticket-subject': ticket.subject,
      'detail-ticket-user': ticket.userId,
      'detail-ticket-created': formatDateTime(ticket.createdAt),
      'detail-ticket-updated': formatDateTime(ticket.updatedAt),
      'detail-ticket-message': ticket.initialMessage || '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
    };
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
    Object.entries(detailElements).forEach(([id, value]) => {
      const element = document.getElementById(id);
      if (element) {
        element.textContent = value;
      }
    });
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ü–æ–ª–Ω—ã–π ID —Ç–∏–∫–µ—Ç–∞ + —É–¥–æ–±–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    const ticketIdElement = document.getElementById('detail-ticket-id');
    if (ticketIdElement) {
      ticketIdElement.textContent = ticket.ticketId;
    }
    
    // –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ID
    const copyIdBtn = document.getElementById('copy-ticket-id');
    if (copyIdBtn) {
      copyIdBtn.onclick = () => copyTicketId(ticket.ticketId);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ–≤
    const statusSelect = document.getElementById('detail-ticket-status');
    const prioritySelect = document.getElementById('detail-ticket-priority');
    
    if (statusSelect) statusSelect.value = ticket.status;
    if (prioritySelect) prioritySelect.value = ticket.priority;
    
    // –ü–∞—Ä—Å–∏–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
    if (ticket.context) {
      try {
        const context = JSON.parse(ticket.context);
        displayConversationContext(context);
      } catch (e) {
        console.warn('üçÑ –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', e);
        const contextContainer = document.getElementById('detail-ticket-conversation');
        if (contextContainer) {
          contextContainer.textContent = '–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞)';
        }
      }
    } else {
      const contextContainer = document.getElementById('detail-ticket-conversation');
      if (contextContainer) {
        contextContainer.textContent = '–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
      }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π HTML)
    const overlay = document.getElementById('ticket-detail-overlay');
    if (overlay) {
      overlay.style.display = 'flex';
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º MongoDB _id)
      overlay.dataset.currentTicketId = ticket._id;
      overlay.dataset.currentTicketDisplayId = ticket.ticketId;
    }
  } catch (error) {
    console.error('üçÑ –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', error);
  }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º
 * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
 */
function displayConversationContext(context) {
  const container = document.getElementById('detail-ticket-conversation');
  if (!container) return;
  
  let conversationHtml = '';
  
  if (context.userMessage) {
    conversationHtml += `
      <div class="conversation-message user-message" style="margin-bottom: 1rem; padding: 0.5rem; background: var(--card-bg); border-left: 3px solid var(--neon-pink);">
        <strong style="color: var(--neon-pink);">üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong><br>
        <span style="color: var(--text-light);">${escapeHtml(context.userMessage)}</span>
      </div>
    `;
  }
  
  if (context.aiResponse) {
    conversationHtml += `
      <div class="conversation-message bot-message" style="margin-bottom: 1rem; padding: 0.5rem; background: var(--card-bg); border-left: 3px solid var(--neon-green);">
        <strong style="color: var(--neon-green);">üçÑ –ë–æ—Ç:</strong><br>
        <span style="color: var(--text-light);">${escapeHtml(context.aiResponse)}</span>
      </div>
    `;
  }
  
  if (context.aiProvider || context.ragUsed !== undefined) {
    conversationHtml += `
      <div class="conversation-meta" style="font-size: 0.8rem; color: var(--text-light); padding: 0.5rem; background: rgba(255,255,255,0.05);">
        ${context.aiProvider ? `–ú–æ–¥–µ–ª—å: ${context.aiProvider}` : ''}
        ${context.ragUsed !== undefined ? ` | RAG: ${context.ragUsed ? '–î–∞' : '–ù–µ—Ç'}` : ''}
        ${context.tokensUsed ? ` | –¢–æ–∫–µ–Ω–æ–≤: ${context.tokensUsed}` : ''}
      </div>
    `;
  }
  
  container.innerHTML = conversationHtml || '<div style="color: var(--text-light); font-style: italic;">–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç</div>';
}

/**
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç —Å —Ä–µ–∑–æ–ª—é—Ü–∏–µ–π (–∑–∞–º–µ–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ)
 * @param {string} ticketId - MongoDB ObjectId —Ç–∏–∫–µ—Ç–∞
 * @param {string} resolution - –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
async function closeRealTicket(ticketId, resolution = '') {
  if (!ticketId) {
    console.error('üçÑ ID —Ç–∏–∫–µ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
    return;
  }
  
  try {
    console.log('üçÑ –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞:', ticketId);
    
    const updateData = {
      status: 'closed'
    };
    
    if (resolution && resolution.trim()) {
      updateData.resolution = resolution.trim();
    }
    
    const response = await window.makeAuthenticatedRequest(`${TICKETS_CONFIG.API_BASE}/${ticketId}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(updateData)
    });
    
    if (response.success) {
      console.log('üçÑ –¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç');
      showNotification('üîí –û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ', 'success');
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      const overlay = document.getElementById('ticket-detail-overlay');
      if (overlay) overlay.style.display = 'none';
      
      // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      hideCloseWarning();
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
      await loadRealTickets();
    } else {
      throw new Error(response.error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç');
    }
  } catch (error) {
    console.error('üçÑ –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞:', error);
    showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞', 'error');
  }
}

/**
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –£–¥–∞–ª—è–µ—Ç —Ç–∏–∫–µ—Ç –ù–ê–í–°–ï–ì–î–ê (–æ–ø–∞—Å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
 * @param {string} ticketId - ID —Ç–∏–∫–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 */
async function deleteRealTicketForever(ticketId) {
  const ticket = ticketsState.tickets.find(t => t.ticketId === ticketId);
  if (!ticket) {
    console.error('üçÑ –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  try {
    console.log('üçÑ –§–ò–ó–ò–ß–ï–°–ö–û–ï –£–î–ê–õ–ï–ù–ò–ï —Ç–∏–∫–µ—Ç–∞:', ticket._id);
    
    const response = await window.makeAuthenticatedRequest(`${TICKETS_CONFIG.API_BASE}/${ticket._id}`, {
      method: 'DELETE'
    });
    
    if (response.success) {
      console.log('üçÑ –¢–∏–∫–µ—Ç –ù–ê–í–°–ï–ì–î–ê —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä–∏–±–Ω–∏—Ü—ã');
      showNotification('üóëÔ∏è –û–±—Ä–∞—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –Ω–∞–≤—Å–µ–≥–¥–∞', 'info');
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      const overlay = document.getElementById('ticket-detail-overlay');
      if (overlay) overlay.style.display = 'none';
      
      // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      hideDeletionWarning();
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
      await loadRealTickets();
    } else {
      throw new Error(response.error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ç');
    }
  } catch (error) {
    console.error('üçÑ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', error);
    showNotification('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞', 'error');
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞
 */
function showCloseWarning() {
  const warning = document.getElementById('close-warning');
  if (warning) {
    warning.style.display = 'block';
  }
}

/**
 * –°–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞
 */
function hideCloseWarning() {
  const warning = document.getElementById('close-warning');
  if (warning) {
    warning.style.display = 'none';
  }
  
  // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Ä–µ–∑–æ–ª—é—Ü–∏–∏
  const resolutionField = document.getElementById('close-resolution');
  if (resolutionField) {
    resolutionField.value = '';
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞
 */
function showDeletionWarning() {
  const warning = document.getElementById('deletion-warning');
  if (warning) {
    warning.style.display = 'block';
  }
}

/**
 * –°–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞
 */
function hideDeletionWarning() {
  const warning = document.getElementById('deletion-warning');
  if (warning) {
    warning.style.display = 'none';
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Ç–∏–∫–µ—Ç (–∑–∞–º–µ–Ω—è–µ—Ç –∑–∞–≥–ª—É—à–∫—É)
 * –£–°–¢–ê–†–ï–õ–û: –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ closeRealTicket()
 * @param {string} ticketId - ID —Ç–∏–∫–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 */
async function deleteRealTicket(ticketId) {
  console.warn('üçÑ –£–°–¢–ê–†–ï–õ–û: deleteRealTicket –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ closeRealTicket');
  
  // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
  const overlay = document.getElementById('ticket-detail-overlay');
  if (overlay && overlay.dataset.currentTicketId) {
    showCloseWarning();
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∏–∫–µ—Ç
 * @param {string} ticketId - MongoDB ObjectId —Ç–∏–∫–µ—Ç–∞
 * @param {Object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
async function updateRealTicket(ticketId, updateData) {
  try {
    console.log('üçÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞:', ticketId, updateData);
    
    const response = await window.makeAuthenticatedRequest(`${TICKETS_CONFIG.API_BASE}/${ticketId}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(updateData)
    });
    
    if (response.success) {
      console.log('üçÑ –¢–∏–∫–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω');
      showNotification('üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
      await loadRealTickets();
    } else {
      throw new Error(response.error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∏–∫–µ—Ç');
    }
  } catch (error) {
    console.error('üçÑ –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', error);
    showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π', 'error');
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 */
async function saveTicketChanges() {
  const overlay = document.getElementById('ticket-detail-overlay');
  if (!overlay || !overlay.dataset.currentTicketId) return;
  
  const ticketId = overlay.dataset.currentTicketId;
  const statusSelect = document.getElementById('detail-ticket-status');
  const prioritySelect = document.getElementById('detail-ticket-priority');
  
  if (!statusSelect || !prioritySelect) {
    console.error('üçÑ –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã');
    return;
  }
  
  const updateData = {
    status: statusSelect.value,
    priority: prioritySelect.value
  };
  
  await updateRealTicket(ticketId, updateData);
}

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ë—ã—Å—Ç—Ä–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞
 */
async function changeTicketStatus() {
  const overlay = document.getElementById('ticket-detail-overlay');
  if (!overlay || !overlay.dataset.currentTicketId) return;
  
  const statusSelect = document.getElementById('detail-ticket-status');
  if (!statusSelect) return;
  
  const newStatus = statusSelect.value;
  const ticketId = overlay.dataset.currentTicketId;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å
  await updateRealTicket(ticketId, { status: newStatus });
  
  console.log('üçÑ –°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:', newStatus);
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–∏–∫–µ—Ç–æ–≤
 * –í–ê–ñ–ù–û: –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –≤—ã–∑–æ–≤–æ–º –≤ HTML
 */
function initTicketsPage() {
  console.log('üçÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–∏–∫–µ—Ç–æ–≤');
  
  // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  window.loadBasicTickets = loadRealTickets;
  window.showTicketDetail = showRealTicketDetail;
  window.deleteTicket = deleteRealTicket;
  window.saveTicketChanges = saveTicketChanges;
  window.showMockTicketDetail = showMockTicketDetail;
  
  // –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
  window.closeRealTicket = closeRealTicket;
  window.deleteRealTicketForever = deleteRealTicketForever;
  window.copyTicketId = copyTicketId;
  window.quickDeleteTicket = quickDeleteTicket;
  window.quickDeleteRealTicket = quickDeleteRealTicket;
  window.changeTicketStatus = changeTicketStatus;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ HTML
  setupRealTicketFilters();
  setupPaginationControls();
  setupModalEventHandlers();
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  loadRealTickets();
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏)
 */
function setupRealTicketFilters() {
  const statusFilter = document.getElementById('status-filter');
  const priorityFilter = document.getElementById('priority-filter');
  const searchInput = document.getElementById('search-tickets');
  const refreshBtn = document.getElementById('refresh-tickets');
  
  if (statusFilter) {
    statusFilter.addEventListener('change', () => {
      ticketsState.currentFilters.status = statusFilter.value;
      ticketsState.currentFilters.page = 1;
      loadRealTickets();
    });
  }
  
  if (priorityFilter) {
    priorityFilter.addEventListener('change', () => {
      ticketsState.currentFilters.priority = priorityFilter.value;
      ticketsState.currentFilters.page = 1;
      loadRealTickets();
    });
  }
  
  if (searchInput) {
    let searchTimeout;
    searchInput.addEventListener('input', () => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        ticketsState.currentFilters.search = searchInput.value.trim();
        ticketsState.currentFilters.page = 1;
        loadRealTickets();
      }, 500); // Debounce 500ms
    });
  }
  
  if (refreshBtn) {
    refreshBtn.addEventListener('click', () => {
      console.log('üçÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤');
      loadRealTickets();
    });
  }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
function setupPaginationControls() {
  const prevBtn = document.getElementById('prev-page');
  const nextBtn = document.getElementById('next-page');
  
  if (prevBtn) {
    prevBtn.addEventListener('click', () => {
      if (ticketsState.pagination.hasPrevPage) {
        ticketsState.currentFilters.page--;
        loadRealTickets();
      }
    });
  }
  
  if (nextBtn) {
    nextBtn.addEventListener('click', () => {
      if (ticketsState.pagination.hasNextPage) {
        ticketsState.currentFilters.page++;
        loadRealTickets();
      }
    });
  }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 * –û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
 */
function setupModalEventHandlers() {
  // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const closeDetailBtn = document.getElementById('close-ticket-detail');
  if (closeDetailBtn) {
    closeDetailBtn.addEventListener('click', closeTicketDetail);
  }
  
  // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const saveBtn = document.getElementById('save-ticket');
  if (saveBtn) {
    saveBtn.addEventListener('click', saveTicketChanges);
  }
  
  // –ù–û–í–ê–Ø: –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–∑–∞–º–µ–Ω—è–µ—Ç "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç")
  const changeStatusBtn = document.getElementById('change-status');
  if (changeStatusBtn) {
    changeStatusBtn.addEventListener('click', changeTicketStatus);
  }
  
  // –ù–û–í–ê–Ø: –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞
  const closeTicketBtn = document.getElementById('close-ticket');
  if (closeTicketBtn) {
    closeTicketBtn.addEventListener('click', () => {
      showCloseWarning();
    });
  }
  
  // –ù–û–í–ê–Ø: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞
  const confirmCloseBtn = document.getElementById('confirm-close');
  if (confirmCloseBtn) {
    confirmCloseBtn.addEventListener('click', () => {
      const overlay = document.getElementById('ticket-detail-overlay');
      const resolutionField = document.getElementById('close-resolution');
      
      if (overlay && overlay.dataset.currentTicketId) {
        const resolution = resolutionField ? resolutionField.value : '';
        closeRealTicket(overlay.dataset.currentTicketId, resolution);
      }
    });
  }
  
  // –ù–û–í–ê–Ø: –û—Ç–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞
  const cancelCloseBtn = document.getElementById('cancel-close');
  if (cancelCloseBtn) {
    cancelCloseBtn.addEventListener('click', hideCloseWarning);
  }
  
  // –ù–û–í–ê–Ø: –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–≤—Å–µ–≥–¥–∞
  const deleteForeverBtn = document.getElementById('delete-ticket-forever');
  if (deleteForeverBtn) {
    deleteForeverBtn.addEventListener('click', () => {
      showDeletionWarning();
    });
  }
  
  // –ù–û–í–ê–Ø: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–≤—Å–µ–≥–¥–∞
  const confirmDeleteBtn = document.getElementById('confirm-delete');
  if (confirmDeleteBtn) {
    confirmDeleteBtn.addEventListener('click', () => {
      const overlay = document.getElementById('ticket-detail-overlay');
      if (overlay && overlay.dataset.currentTicketDisplayId) {
        deleteRealTicketForever(overlay.dataset.currentTicketDisplayId);
      }
    });
  }
  
  // –ù–û–í–ê–Ø: –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
  const cancelDeleteBtn = document.getElementById('cancel-delete');
  if (cancelDeleteBtn) {
    cancelDeleteBtn.addEventListener('click', hideDeletionWarning);
  }
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
  const overlay = document.getElementById('ticket-detail-overlay');
  if (overlay) {
    overlay.addEventListener('click', (event) => {
      if (event.target === overlay) {
        closeTicketDetail();
      }
    });
  }
}

/**
 * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
 */
function closeTicketDetail() {
  const overlay = document.getElementById('ticket-detail-overlay');
  if (overlay) {
    overlay.style.display = 'none';
    // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ ID
    delete overlay.dataset.currentTicketId;
    delete overlay.dataset.currentTicketDisplayId;
  }
  
  // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
  hideCloseWarning();
  hideDeletionWarning();
  
  // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
  const resolutionField = document.getElementById('ticket-resolution-text');
  if (resolutionField) {
    resolutionField.value = '';
  }
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML –≤ —Å—Ç—Ä–æ–∫–µ
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {string} –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function escapeHtml(text) {
  if (!text) return '';
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 * @param {string} dateString - –î–∞—Ç–∞ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
 */
function formatRelativeTime(dateString) {
  if (!dateString) return '-';
  
  try {
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now - date;
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    
    if (diffMinutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMinutes < 60) return `${diffMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    if (diffDays < 7) return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
    
    return date.toLocaleDateString('ru-RU');
  } catch (error) {
    return '–Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞';
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ –ø–æ–ª–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 * @param {string} dateString - –î–∞—Ç–∞ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
 */
function formatDateTime(dateString) {
  if (!dateString) return '-';
  
  try {
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  } catch (error) {
    return '–Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞';
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.loadRealTickets = loadRealTickets;
window.showRealTicketDetail = showRealTicketDetail;
window.showMockTicketDetail = showMockTicketDetail;
window.deleteRealTicket = deleteRealTicket;
window.closeRealTicket = closeRealTicket;
window.deleteRealTicketForever = deleteRealTicketForever;
window.updateRealTicket = updateRealTicket;
window.saveTicketChanges = saveTicketChanges;
window.closeTicketDetail = closeTicketDetail;
window.copyTicketId = copyTicketId;
window.showNotification = showNotification;
window.initTicketsPage = initTicketsPage;
window.quickDeleteTicket = quickDeleteTicket;
window.quickDeleteRealTicket = quickDeleteRealTicket;
window.changeTicketStatus = changeTicketStatus;
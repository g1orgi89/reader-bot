/**
 * tickets.js - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Shrooms AI Support Bot
 * –°–ª–µ–¥—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ knowledge.js –∏ auth.js
 * 
 * @fileoverview –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∏–±–Ω—ã–º–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏ –∏ —Å–ø–æ—Ä–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
 * @author Shrooms Development Team
 */

// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
const TICKETS_CONFIG = {
  API_BASE: '/api/tickets',
  DEFAULT_PAGE_SIZE: 10,
  
  STATUS_LABELS: {
    'open': '–û—Ç–∫—Ä—ã—Ç',
    'in_progress': '–í —Ä–∞–±–æ—Ç–µ', 
    'resolved': '–†–µ—à–µ–Ω',
    'closed': '–ó–∞–∫—Ä—ã—Ç'
  },
  
  PRIORITY_LABELS: {
    'low': '–ù–∏–∑–∫–∏–π',
    'medium': '–°—Ä–µ–¥–Ω–∏–π',
    'high': '–í—ã—Å–æ–∫–∏–π', 
    'urgent': '–°—Ä–æ—á–Ω—ã–π'
  },
  
  CATEGORY_LABELS: {
    'technical': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è',
    'account': '–ê–∫–∫–∞—É–Ω—Ç',
    'billing': '–û–ø–ª–∞—Ç–∞',
    'feature': '–§—É–Ω–∫—Ü–∏—è',
    'other': '–î—Ä—É–≥–æ–µ'
  }
};

// –°–û–°–¢–û–Ø–ù–ò–ï –¢–ò–ö–ï–¢–û–í
const ticketsState = {
  tickets: [],
  currentFilters: {
    status: 'open',
    priority: 'all',
    search: '',
    page: 1,
    limit: TICKETS_CONFIG.DEFAULT_PAGE_SIZE
  },
  totalTickets: 0,
  isLoading: false,
  pagination: {
    currentPage: 1,
    totalPages: 1,
    hasNextPage: false,
    hasPrevPage: false
  }
};

/**
 * @typedef {Object} TicketData
 * @property {string} _id - MongoDB ObjectId
 * @property {string} ticketId - –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π ID —Ç–∏–∫–µ—Ç–∞
 * @property {string} subject - –¢–µ–º–∞ —Ç–∏–∫–µ—Ç–∞
 * @property {string} status - –°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
 * @property {string} priority - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–∏–∫–µ—Ç–∞
 * @property {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–∞
 * @property {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @property {string} initialMessage - –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @property {string} context - JSON —Å—Ç—Ä–æ–∫–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–∏–∞–ª–æ–≥–∞
 * @property {string} createdAt - –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
 * @property {string} updatedAt - –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @property {string} [email] - Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @property {string} [assignedTo] - –ù–∞–∑–Ω–∞—á–µ–Ω –∫–æ–º—É
 * @property {string} [resolution] - –†–µ–∑–æ–ª—é—Ü–∏—è
 * @property {string} language - –Ø–∑—ã–∫ —Ç–∏–∫–µ—Ç–∞
 */

/**
 * @typedef {Object} TicketsResponse
 * @property {boolean} success - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
 * @property {Object} data - –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
 * @property {TicketData[]} data.tickets - –ú–∞—Å—Å–∏–≤ —Ç–∏–∫–µ—Ç–æ–≤
 * @property {Object} data.pagination - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 * @property {number} data.pagination.totalCount - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤
 * @property {number} data.pagination.currentPage - –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
 * @property {number} data.pagination.totalPages - –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü
 * @property {boolean} data.pagination.hasNextPage - –ï—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
 * @property {boolean} data.pagination.hasPrevPage - –ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
 */

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã –∏–∑ API (–∑–∞–º–µ–Ω—è–µ—Ç loadBasicTickets)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç makeAuthenticatedRequest() –∏–∑ auth.js
 * @returns {Promise<void>}
 */
async function loadRealTickets() {
  if (ticketsState.isLoading) return;
  
  console.log('üçÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –∏–∑ API...');
  
  try {
    ticketsState.isLoading = true;
    updateLoadingState(true);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const params = new URLSearchParams();
    
    if (ticketsState.currentFilters.status !== 'all') {
      params.append('status', ticketsState.currentFilters.status);
    }
    
    if (ticketsState.currentFilters.priority !== 'all') {
      params.append('priority', ticketsState.currentFilters.priority);
    }
    
    if (ticketsState.currentFilters.search) {
      params.append('search', ticketsState.currentFilters.search);
    }
    
    params.append('page', ticketsState.currentFilters.page.toString());
    params.append('limit', ticketsState.currentFilters.limit.toString());
    
    // API –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ auth.js)
    const response = await makeAuthenticatedRequest(`${TICKETS_CONFIG.API_BASE}?${params}`);
    
    if (response.success) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ curl —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      ticketsState.tickets = response.data.tickets || [];
      ticketsState.totalTickets = response.data.pagination?.totalCount || 0;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      ticketsState.pagination = {
        currentPage: response.data.pagination?.currentPage || 1,
        totalPages: response.data.pagination?.totalPages || 1,
        hasNextPage: response.data.pagination?.hasNextPage || false,
        hasPrevPage: response.data.pagination?.hasPrevPage || false
      };
      
      renderRealTicketsTable();
      updatePaginationInfo();
      
      console.log(`üçÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${ticketsState.tickets.length} —Ç–∏–∫–µ—Ç–æ–≤ –∏–∑ ${ticketsState.totalTickets}`);
    } else {
      throw new Error(response.error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∏–∫–µ—Ç—ã');
    }
  } catch (error) {
    console.error('üçÑ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤:', error);
    showNotification('error', `üçÑ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∏–∫–µ—Ç—ã: ${error.message}`);
    renderEmptyTicketsTable();
  } finally {
    ticketsState.isLoading = false;
    updateLoadingState(false);
  }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 * @param {boolean} isLoading - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 */
function updateLoadingState(isLoading) {
  const tbody = document.querySelector('#tickets-table tbody');
  if (!tbody) return;
  
  if (isLoading) {
    tbody.innerHTML = `
      <tr class="table-loading">
        <td colspan="8" style="text-align: center; padding: 2rem; color: var(--neon-green);">
          üçÑ –ü—Ä–æ—Ä–∞—Å—Ç–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏–π...
        </td>
      </tr>
    `;
  }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç–∏–∫–µ—Ç–∞–º–∏
 */
function renderRealTicketsTable() {
  const tbody = document.querySelector('#tickets-table tbody');
  if (!tbody) return;
  
  if (ticketsState.tickets.length === 0) {
    renderEmptyTicketsTable();
    return;
  }
  
  tbody.innerHTML = ticketsState.tickets.map(ticket => `
    <tr onclick="showRealTicketDetail('${ticket.ticketId}')" style="cursor: pointer;">
      <td class="col-id" title="${ticket.ticketId}">${ticket.ticketId.substring(0, 12)}...</td>
      <td class="col-subject" title="${escapeHtml(ticket.subject)}">${escapeHtml(ticket.subject.substring(0, 50))}${ticket.subject.length > 50 ? '...' : ''}</td>
      <td class="col-status">
        <span class="status-badge status-${ticket.status}">
          ${TICKETS_CONFIG.STATUS_LABELS[ticket.status] || ticket.status}
        </span>
      </td>
      <td class="col-priority">
        <span class="priority-badge priority-${ticket.priority}">
          ${TICKETS_CONFIG.PRIORITY_LABELS[ticket.priority] || ticket.priority}
        </span>
      </td>
      <td class="col-user" title="${ticket.userId}">${ticket.userId.substring(0, 12)}...</td>
      <td class="col-created">${formatRelativeTime(ticket.createdAt)}</td>
      <td class="col-updated">${formatRelativeTime(ticket.updatedAt)}</td>
      <td class="col-actions">
        <button class="btn btn-sm" onclick="showRealTicketDetail('${ticket.ticketId}'); event.stopPropagation();" title="–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏–∫–µ—Ç–∞">
          üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä
        </button>
      </td>
    </tr>
  `).join('');
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—É—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É
 */
function renderEmptyTicketsTable() {
  const tbody = document.querySelector('#tickets-table tbody');
  if (!tbody) return;
  
  tbody.innerHTML = `
    <tr class="table-empty">
      <td colspan="8" style="text-align: center; padding: 2rem; color: var(--text-light);">
        üçÑ –í –≥—Ä–∏–±–Ω–∏—Ü–µ –ø–æ–∫–∞ —Ç–∏—Ö–æ - —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
      </td>
    </tr>
  `;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ HTML (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º)
 */
function updatePaginationInfo() {
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
  const rangeElement = document.getElementById('pagination-range');
  if (rangeElement) {
    const start = ticketsState.tickets.length > 0 ? 
                  (ticketsState.pagination.currentPage - 1) * ticketsState.currentFilters.limit + 1 : 0;
    const end = Math.min(start + ticketsState.tickets.length - 1, ticketsState.totalTickets);
    rangeElement.textContent = `${start}-${end}`;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  const totalElement = document.getElementById('pagination-total');
  if (totalElement) {
    totalElement.textContent = ticketsState.totalTickets.toString();
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  const currentElement = document.getElementById('pagination-current');
  if (currentElement) {
    currentElement.textContent = `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${ticketsState.pagination.currentPage}`;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –∏–∑ HTML)
  const prevBtn = document.getElementById('prev-page');
  const nextBtn = document.getElementById('next-page');
  
  if (prevBtn) {
    prevBtn.disabled = !ticketsState.pagination.hasPrevPage;
  }
  
  if (nextBtn) {
    nextBtn.disabled = !ticketsState.pagination.hasNextPage;
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
 * –ó–∞–º–µ–Ω—è–µ—Ç –∑–∞–≥–ª—É—à–∫—É showTicketDetail()
 * @param {string} ticketId - ID —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function showRealTicketDetail(ticketId) {
  console.log('üçÑ –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞:', ticketId);
  
  try {
    // –ù–∞—Ö–æ–¥–∏–º —Ç–∏–∫–µ—Ç –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const ticket = ticketsState.tickets.find(t => t.ticketId === ticketId);
    if (!ticket) {
      showNotification('error', 'üçÑ –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ');
      return;
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ HTML)
    const detailElements = {
      'detail-ticket-id': ticket.ticketId,
      'detail-ticket-subject': ticket.subject,
      'detail-ticket-user': ticket.userId,
      'detail-ticket-created': formatDateTime(ticket.createdAt),
      'detail-ticket-updated': formatDateTime(ticket.updatedAt),
      'detail-ticket-message': ticket.initialMessage || '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
    };
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
    Object.entries(detailElements).forEach(([id, value]) => {
      const element = document.getElementById(id);
      if (element) {
        element.textContent = value;
      }
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ–≤
    const statusSelect = document.getElementById('detail-ticket-status');
    const prioritySelect = document.getElementById('detail-ticket-priority');
    
    if (statusSelect) statusSelect.value = ticket.status;
    if (prioritySelect) prioritySelect.value = ticket.priority;
    
    // –ü–∞—Ä—Å–∏–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
    if (ticket.context) {
      try {
        const context = JSON.parse(ticket.context);
        displayConversationContext(context);
      } catch (e) {
        console.warn('üçÑ –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', e);
        const contextContainer = document.getElementById('detail-ticket-conversation');
        if (contextContainer) {
          contextContainer.textContent = '–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞)';
        }
      }
    } else {
      const contextContainer = document.getElementById('detail-ticket-conversation');
      if (contextContainer) {
        contextContainer.textContent = '–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
      }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π HTML)
    const overlay = document.getElementById('ticket-detail-overlay');
    if (overlay) {
      overlay.style.display = 'flex';
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º MongoDB _id)
      overlay.dataset.currentTicketId = ticket._id;
      overlay.dataset.currentTicketDisplayId = ticket.ticketId;
    }
  } catch (error) {
    console.error('üçÑ –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', error);
    showNotification('error', `üçÑ –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞: ${error.message}`);
  }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º
 * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
 */
function displayConversationContext(context) {
  const container = document.getElementById('detail-ticket-conversation');
  if (!container) return;
  
  let conversationHtml = '';
  
  if (context.userMessage) {
    conversationHtml += `
      <div class="conversation-message user-message" style="margin-bottom: 1rem; padding: 0.5rem; background: var(--card-bg); border-left: 3px solid var(--neon-pink);">
        <strong style="color: var(--neon-pink);">üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong><br>
        <span style="color: var(--text-light);">${escapeHtml(context.userMessage)}</span>
      </div>
    `;
  }
  
  if (context.aiResponse) {
    conversationHtml += `
      <div class="conversation-message bot-message" style="margin-bottom: 1rem; padding: 0.5rem; background: var(--card-bg); border-left: 3px solid var(--neon-green);">
        <strong style="color: var(--neon-green);">üçÑ –ë–æ—Ç:</strong><br>
        <span style="color: var(--text-light);">${escapeHtml(context.aiResponse)}</span>
      </div>
    `;
  }
  
  if (context.aiProvider || context.ragUsed !== undefined) {
    conversationHtml += `
      <div class="conversation-meta" style="font-size: 0.8rem; color: var(--text-light); padding: 0.5rem; background: rgba(255,255,255,0.05);">
        ${context.aiProvider ? `–ú–æ–¥–µ–ª—å: ${context.aiProvider}` : ''}
        ${context.ragUsed !== undefined ? ` | RAG: ${context.ragUsed ? '–î–∞' : '–ù–µ—Ç'}` : ''}
        ${context.tokensUsed ? ` | –¢–æ–∫–µ–Ω–æ–≤: ${context.tokensUsed}` : ''}
      </div>
    `;
  }
  
  container.innerHTML = conversationHtml || '<div style="color: var(--text-light); font-style: italic;">–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç</div>';
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Ç–∏–∫–µ—Ç (–∑–∞–º–µ–Ω—è–µ—Ç –∑–∞–≥–ª—É—à–∫—É)
 * @param {string} ticketId - ID —Ç–∏–∫–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 */
async function deleteRealTicket(ticketId) {
  const ticket = ticketsState.tickets.find(t => t.ticketId === ticketId);
  if (!ticket) {
    showNotification('error', 'üçÑ –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  const confirmed = confirm(`üçÑ –£–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ç ${ticketId}?\n\n–¢–µ–º–∞: ${ticket.subject}\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`);
  if (!confirmed) return;
  
  try {
    console.log('üçÑ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞:', ticket._id);
    
    const response = await makeAuthenticatedRequest(`${TICKETS_CONFIG.API_BASE}/${ticket._id}`, {
      method: 'DELETE'
    });
    
    if (response.success) {
      showNotification('success', 'üçÑ –¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä–∏–±–Ω–∏—Ü—ã');
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ
      const overlay = document.getElementById('ticket-detail-overlay');
      if (overlay) overlay.style.display = 'none';
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
      await loadRealTickets();
    } else {
      throw new Error(response.error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ç');
    }
  } catch (error) {
    console.error('üçÑ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', error);
    showNotification('error', `üçÑ –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ç: ${error.message}`);
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∏–∫–µ—Ç
 * @param {string} ticketId - MongoDB ObjectId —Ç–∏–∫–µ—Ç–∞
 * @param {Object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
async function updateRealTicket(ticketId, updateData) {
  try {
    console.log('üçÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞:', ticketId, updateData);
    
    const response = await makeAuthenticatedRequest(`${TICKETS_CONFIG.API_BASE}/${ticketId}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(updateData)
    });
    
    if (response.success) {
      showNotification('success', 'üçÑ –¢–∏–∫–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω');
      await loadRealTickets();
    } else {
      throw new Error(response.error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∏–∫–µ—Ç');
    }
  } catch (error) {
    console.error('üçÑ –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', error);
    showNotification('error', `üçÑ –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`);
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 */
async function saveTicketChanges() {
  const overlay = document.getElementById('ticket-detail-overlay');
  if (!overlay || !overlay.dataset.currentTicketId) return;
  
  const ticketId = overlay.dataset.currentTicketId;
  const statusSelect = document.getElementById('detail-ticket-status');
  const prioritySelect = document.getElementById('detail-ticket-priority');
  
  if (!statusSelect || !prioritySelect) {
    showNotification('error', 'üçÑ –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã');
    return;
  }
  
  const updateData = {
    status: statusSelect.value,
    priority: prioritySelect.value
  };
  
  await updateRealTicket(ticketId, updateData);
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–∏–∫–µ—Ç–æ–≤
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
 */
function initRealTicketsPage() {
  console.log('üçÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–∏–∫–µ—Ç–æ–≤');
  
  // –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  window.loadBasicTickets = loadRealTickets;
  window.showTicketDetail = showRealTicketDetail;
  window.deleteTicket = deleteRealTicket;
  window.saveTicketChanges = saveTicketChanges;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ HTML
  setupRealTicketFilters();
  setupPaginationControls();
  setupModalEventHandlers();
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  loadRealTickets();
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏)
 */
function setupRealTicketFilters() {
  const statusFilter = document.getElementById('status-filter');
  const priorityFilter = document.getElementById('priority-filter');
  const searchInput = document.getElementById('search-tickets');
  const refreshBtn = document.getElementById('refresh-tickets');
  
  if (statusFilter) {
    statusFilter.addEventListener('change', () => {
      ticketsState.currentFilters.status = statusFilter.value;
      ticketsState.currentFilters.page = 1;
      loadRealTickets();
    });
  }
  
  if (priorityFilter) {
    priorityFilter.addEventListener('change', () => {
      ticketsState.currentFilters.priority = priorityFilter.value;
      ticketsState.currentFilters.page = 1;
      loadRealTickets();
    });
  }
  
  if (searchInput) {
    let searchTimeout;
    searchInput.addEventListener('input', () => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        ticketsState.currentFilters.search = searchInput.value.trim();
        ticketsState.currentFilters.page = 1;
        loadRealTickets();
      }, 500); // Debounce 500ms
    });
  }
  
  if (refreshBtn) {
    refreshBtn.addEventListener('click', () => {
      console.log('üçÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤');
      loadRealTickets();
    });
  }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
function setupPaginationControls() {
  const prevBtn = document.getElementById('prev-page');
  const nextBtn = document.getElementById('next-page');
  
  if (prevBtn) {
    prevBtn.addEventListener('click', () => {
      if (ticketsState.pagination.hasPrevPage) {
        ticketsState.currentFilters.page--;
        loadRealTickets();
      }
    });
  }
  
  if (nextBtn) {
    nextBtn.addEventListener('click', () => {
      if (ticketsState.pagination.hasNextPage) {
        ticketsState.currentFilters.page++;
        loadRealTickets();
      }
    });
  }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 */
function setupModalEventHandlers() {
  // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const closeDetailBtn = document.getElementById('close-ticket-detail');
  if (closeDetailBtn) {
    closeDetailBtn.addEventListener('click', closeTicketDetail);
  }
  
  // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const saveBtn = document.getElementById('save-ticket');
  if (saveBtn) {
    saveBtn.addEventListener('click', saveTicketChanges);
  }
  
  // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
  const deleteBtn = document.getElementById('delete-ticket');
  if (deleteBtn) {
    deleteBtn.addEventListener('click', () => {
      const overlay = document.getElementById('ticket-detail-overlay');
      if (overlay && overlay.dataset.currentTicketDisplayId) {
        deleteRealTicket(overlay.dataset.currentTicketDisplayId);
      }
    });
  }
  
  // –ö–Ω–æ–ø–∫–∞ —Ä–µ—à–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
  const resolveBtn = document.getElementById('resolve-ticket');
  if (resolveBtn) {
    resolveBtn.addEventListener('click', () => {
      const overlay = document.getElementById('ticket-detail-overlay');
      if (overlay && overlay.dataset.currentTicketId) {
        updateRealTicket(overlay.dataset.currentTicketId, { status: 'resolved' });
      }
    });
  }
}

/**
 * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
 */
function closeTicketDetail() {
  const overlay = document.getElementById('ticket-detail-overlay');
  if (overlay) {
    overlay.style.display = 'none';
    // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ ID
    delete overlay.dataset.currentTicketId;
    delete overlay.dataset.currentTicketDisplayId;
  }
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML –≤ —Å—Ç—Ä–æ–∫–µ
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {string} –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function escapeHtml(text) {
  if (!text) return '';
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 * @param {string} dateString - –î–∞—Ç–∞ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
 */
function formatRelativeTime(dateString) {
  if (!dateString) return '-';
  
  try {
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now - date;
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    
    if (diffMinutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMinutes < 60) return `${diffMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    if (diffDays < 7) return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
    
    return date.toLocaleDateString('ru-RU');
  } catch (error) {
    return '–Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞';
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ –ø–æ–ª–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 * @param {string} dateString - –î–∞—Ç–∞ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
 */
function formatDateTime(dateString) {
  if (!dateString) return '-';
  
  try {
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  } catch (error) {
    return '–Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞';
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–∏–∫–µ—Ç–æ–≤
  if (document.getElementById('tickets-table')) {
    initRealTicketsPage();
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.loadRealTickets = loadRealTickets;
window.showRealTicketDetail = showRealTicketDetail;
window.deleteRealTicket = deleteRealTicket;
window.updateRealTicket = updateRealTicket;
window.saveTicketChanges = saveTicketChanges;
window.closeTicketDetail = closeTicketDetail;
window.initRealTicketsPage = initRealTicketsPage;
/**
 * Dashboard JavaScript –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @file client/admin-panel/js/dashboard.js
 * @description –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ Chart.js –∏ fallback –¥–∞–Ω–Ω—ã–º–∏
 */

/**
 * @typedef {Object} DashboardStats
 * @property {Object} overview - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 * @property {Array} sourceStats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
 * @property {Array} utmStats - UTM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 */

class ReaderDashboard {
  constructor() {
    this.currentPeriod = '7d';
    this.charts = {};
    this.fallbackMode = false;
    this.init();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞
   */
  async init() {
    console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"...');
    
    try {
      await this.loadDashboardData();
    } catch (error) {
      console.warn('üìä –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –ø–µ—Ä–µ—Ö–æ–¥ –≤ fallback —Ä–µ–∂–∏–º:', error.message);
      this.fallbackMode = true;
      this.showFallbackData();
    }
    
    this.setupEventListeners();
    this.startAutoRefresh();
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞
   */
  async loadDashboardData() {
    console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞...');
    
    try {
      const [dashboardStats, retentionData, topContent] = await Promise.all([
        this.fetchDashboardStats(),
        this.fetchRetentionData(),
        this.fetchTopContent()
      ]);

      this.updateStatCards(dashboardStats.data.overview);
      this.updateSourceChart(dashboardStats.data.sourceStats);
      this.updateUTMChart(dashboardStats.data.utmStats);
      this.updateRetentionChart(retentionData.data);
      this.updateTopContent(topContent.data);
      
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');

    } catch (error) {
      console.error('üìñ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞:', error);
      throw error; // –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ init()
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
   * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  async fetchDashboardStats() {
    const response = await fetch(`/api/analytics/dashboard?period=${this.currentPeriod}`);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    return await response.json();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö retention
   * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ retention
   */
  async fetchRetentionData() {
    const response = await fetch('/api/analytics/retention');
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    return await response.json();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  async fetchTopContent() {
    const response = await fetch(`/api/analytics/top-content?period=${this.currentPeriod}`);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    return await response.json();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   * @param {Object} stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ overview
   */
  updateStatCards(stats) {
    const elements = {
      'total-users-count': stats.totalUsers || 0,
      'new-users-count': stats.newUsers || 0,
      'total-quotes-count': stats.totalQuotes || 0,
      'avg-quotes-count': stats.avgQuotesPerUser || '0.0',
      'active-users-count': stats.activeUsers || 0,
      'promo-usage-count': stats.promoUsage || 0
    };

    Object.entries(elements).forEach(([id, value]) => {
      const element = document.getElementById(id);
      if (element) {
        element.textContent = value;
        element.classList.add('updated');
        
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
          element.classList.remove('updated');
        }, 1000);
      }
    });

    console.log('üìä –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', stats);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   * @param {Array} sourceStats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   */
  updateSourceChart(sourceStats) {
    const ctx = document.getElementById('sourceChart');
    if (!ctx) {
      console.warn('üìä Element sourceChart –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
    if (this.charts.source) {
      this.charts.source.destroy();
      this.charts.source = null;
    }

    const data = sourceStats && sourceStats.length > 0 ? sourceStats : this.getFallbackSourceData();

    try {
      this.charts.source = new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: data.map(s => s._id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
          datasets: [{
            data: data.map(s => s.count),
            backgroundColor: [
              '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', 
              '#FFEAA7', '#DDA0DD', '#F8BBD9', '#E17055'
            ],
            borderWidth: 2,
            borderColor: '#fff'
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: true,
          plugins: {
            title: {
              display: true,
              text: 'üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π "–ß–∏—Ç–∞—Ç–µ–ª—å"',
              font: { size: 16 }
            },
            legend: {
              position: 'bottom',
              labels: {
                padding: 15,
                usePointStyle: true
              }
            }
          }
        }
      });

      console.log('üìä –î–∏–∞–≥—Ä–∞–º–º–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–∞:', data);
    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
      this.showChartError('sourceChart', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤');
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã UTM
   * @param {Array} utmStats - UTM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  updateUTMChart(utmStats) {
    const ctx = document.getElementById('utmChart');
    if (!ctx) {
      console.warn('üìä Element utmChart –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫
    if (this.charts.utm) {
      this.charts.utm.destroy();
      this.charts.utm = null;
    }

    const data = utmStats && utmStats.length > 0 ? utmStats : this.getFallbackUTMData();

    try {
      this.charts.utm = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: data.map(u => u.campaign || u._id),
          datasets: [
            {
              label: '–ö–ª–∏–∫–∏',
              data: data.map(u => u.clicks),
              backgroundColor: '#4ECDC4',
              borderColor: '#45B7D1',
              borderWidth: 1
            },
            {
              label: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
              data: data.map(u => u.uniqueUsers),
              backgroundColor: '#45B7D1',
              borderColor: '#4ECDC4',
              borderWidth: 1
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: true,
          plugins: {
            title: {
              display: true,
              text: 'üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å UTM –∫–∞–º–ø–∞–Ω–∏–π',
              font: { size: 16 }
            },
            legend: {
              position: 'top'
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                stepSize: 1
              }
            }
          }
        }
      });

      console.log('üìä UTM –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞:', data);
    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è UTM –¥–∏–∞–≥—Ä–∞–º–º—ã:', error);
      this.showChartError('utmChart', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ UTM –¥–∏–∞–≥—Ä–∞–º–º—ã');
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã retention
   * @param {Array} retentionData - –î–∞–Ω–Ω—ã–µ retention
   */
  updateRetentionChart(retentionData) {
    const ctx = document.getElementById('retentionChart');
    if (!ctx) {
      console.warn('üìä Element retentionChart –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫
    if (this.charts.retention) {
      this.charts.retention.destroy();
      this.charts.retention = null;
    }

    const data = retentionData && retentionData.length > 0 ? retentionData : this.getFallbackRetentionData();

    try {
      this.charts.retention = new Chart(ctx, {
        type: 'line',
        data: {
          labels: ['–ù–µ–¥–µ–ª—è 1', '–ù–µ–¥–µ–ª—è 2', '–ù–µ–¥–µ–ª—è 3', '–ù–µ–¥–µ–ª—è 4'],
          datasets: data.slice(-6).map((cohort, index) => ({
            label: cohort.cohort,
            data: [cohort.week1, cohort.week2, cohort.week3, cohort.week4],
            borderColor: this.getRetentionColor(index),
            backgroundColor: this.getRetentionColor(index, 0.1),
            tension: 0.1,
            pointBackgroundColor: this.getRetentionColor(index),
            pointBorderColor: '#fff',
            pointBorderWidth: 2
          }))
        },
        options: {
          responsive: true,
          maintainAspectRatio: true,
          plugins: {
            title: {
              display: true,
              text: 'üìà Retention –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º (–ß–∏—Ç–∞—Ç–µ–ª—å)',
              font: { size: 16 }
            },
            legend: {
              position: 'top'
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              max: 100,
              ticks: {
                callback: function(value) {
                  return value + '%';
                }
              }
            }
          }
        }
      });

      console.log('üìä Retention –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞:', data);
    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è retention –¥–∏–∞–≥—Ä–∞–º–º—ã:', error);
      this.showChartError('retentionChart', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ retention –¥–∏–∞–≥—Ä–∞–º–º—ã');
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   * @param {Object} topContent - –î–∞–Ω–Ω—ã–µ —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  updateTopContent(topContent) {
    // –¢–æ–ø –∞–≤—Ç–æ—Ä—ã
    const authorsContainer = document.getElementById('top-authors');
    if (authorsContainer) {
      const authors = topContent.topAuthors && topContent.topAuthors.length > 0 
        ? topContent.topAuthors 
        : this.getFallbackAuthors();

      authorsContainer.innerHTML = authors.map((author, index) => `
        <div class="top-item">
          <span class="rank">${index + 1}</span>
          <span class="name">${author._id}</span>
          <span class="count">${author.count} —Ü–∏—Ç–∞—Ç</span>
        </div>
      `).join('');
    }

    // –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoriesContainer = document.getElementById('top-categories');
    if (categoriesContainer) {
      const categories = topContent.topCategories && topContent.topCategories.length > 0 
        ? topContent.topCategories 
        : this.getFallbackCategories();

      categoriesContainer.innerHTML = categories.map((category, index) => `
        <div class="top-item">
          <span class="rank">${index + 1}</span>
          <span class="name">${category._id}</span>
          <span class="count">${category.count} —Ü–∏—Ç–∞—Ç</span>
        </div>
      `).join('');
    }

    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
    const quotesContainer = document.getElementById('popular-quotes');
    if (quotesContainer) {
      const quotes = topContent.popularQuotes && topContent.popularQuotes.length > 0 
        ? topContent.popularQuotes 
        : this.getFallbackQuotes();

      quotesContainer.innerHTML = quotes.map((quote, index) => `
        <div class="popular-quote">
          <div class="quote-text">"${quote._id.substring(0, 100)}${quote._id.length > 100 ? '...' : ''}"</div>
          <div class="quote-meta">
            ${quote.author ? `‚Äî ${quote.author}` : ''} 
            <span class="usage-count">(${quote.count} —Ä–∞–∑)</span>
          </div>
        </div>
      `).join('');
    }

    console.log('üìä –¢–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å fallback –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö API
   */
  showFallbackData() {
    console.log('üìä –ü–æ–∫–∞–∑ fallback –¥–∞–Ω–Ω—ã—Ö...');

    // Fallback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.updateStatCards({
      totalUsers: 12,
      newUsers: 3,
      totalQuotes: 47,
      avgQuotesPerUser: '3.9',
      activeUsers: 8,
      promoUsage: 2
    });

    // Fallback –¥–∏–∞–≥—Ä–∞–º–º—ã
    this.updateSourceChart([]);
    this.updateUTMChart([]);
    this.updateRetentionChart([]);

    // Fallback —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç
    this.updateTopContent({
      topAuthors: [],
      topCategories: [],
      popularQuotes: []
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    this.showNotification('warning', '–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API.');
  }

  // === FALLBACK DATA METHODS ===

  /**
   * Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   * @returns {Array} –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   */
  getFallbackSourceData() {
    return [
      { _id: 'Instagram', count: 5 },
      { _id: 'Telegram', count: 3 },
      { _id: 'YouTube', count: 2 },
      { _id: '–î—Ä—É–∑—å—è', count: 2 }
    ];
  }

  /**
   * Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è UTM
   * @returns {Array} –î–µ–º–æ UTM –¥–∞–Ω–Ω—ã–µ
   */
  getFallbackUTMData() {
    return [
      { campaign: 'weekly_reports', clicks: 8, uniqueUsers: 6 },
      { campaign: 'book_recommendations', clicks: 5, uniqueUsers: 4 },
      { campaign: 'monthly_analysis', clicks: 3, uniqueUsers: 3 }
    ];
  }

  /**
   * Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è retention
   * @returns {Array} –î–µ–º–æ retention –¥–∞–Ω–Ω—ã–µ
   */
  getFallbackRetentionData() {
    return [
      { cohort: '2024-12', week1: 100, week2: 75, week3: 60, week4: 50 },
      { cohort: '2025-01', week1: 100, week2: 80, week3: 65, week4: 55 }
    ];
  }

  /**
   * Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–æ–≤
   * @returns {Array} –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–æ–≤
   */
  getFallbackAuthors() {
    return [
      { _id: '–≠—Ä–∏—Ö –§—Ä–æ–º–º', count: 8 },
      { _id: '–†–∞–π–Ω–µ—Ä –ú–∞—Ä–∏—è –†–∏–ª—å–∫–µ', count: 6 },
      { _id: '–ú–∞—Ä–∏–Ω–∞ –¶–≤–µ—Ç–∞–µ–≤–∞', count: 4 },
      { _id: '–ü–∞—É–ª–æ –ö–æ—ç–ª—å–æ', count: 3 }
    ];
  }

  /**
   * Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   * @returns {Array} –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  getFallbackCategories() {
    return [
      { _id: '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', count: 15 },
      { _id: '–õ—é–±–æ–≤—å', count: 12 },
      { _id: '–ú—É–¥—Ä–æ—Å—Ç—å', count: 10 },
      { _id: '–§–∏–ª–æ—Å–æ—Ñ–∏—è', count: 8 }
    ];
  }

  /**
   * Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ü–∏—Ç–∞—Ç
   * @returns {Array} –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç
   */
  getFallbackQuotes() {
    return [
      { _id: '–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ª—é–±–∏—Ç—å', author: '–≠—Ä–∏—Ö –§—Ä–æ–º–º', count: 3 },
      { _id: '–í –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ ‚Äî —Ü–µ–ª–∞—è –∂–∏–∑–Ω—å', author: '–ú–∞—Ä–∏–Ω–∞ –¶–≤–µ—Ç–∞–µ–≤–∞', count: 2 },
      { _id: '–•–æ—Ä–æ—à–∞—è –∂–∏–∑–Ω—å —Å—Ç—Ä–æ–∏—Ç—Å—è, –∞ –Ω–µ –¥–∞–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', author: '–ê–Ω–Ω–∞ –ë—É—Å–µ–ª', count: 2 }
    ];
  }

  // === UTILITY METHODS ===

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è retention –¥–∏–∞–≥—Ä–∞–º–º
   * @param {number} index - –ò–Ω–¥–µ–∫—Å
   * @param {number} alpha - –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
   * @returns {string} CSS —Ü–≤–µ—Ç
   */
  getRetentionColor(index, alpha = 1) {
    const colors = [
      `rgba(255, 107, 107, ${alpha})`,
      `rgba(78, 205, 196, ${alpha})`,
      `rgba(69, 183, 209, ${alpha})`,
      `rgba(150, 206, 180, ${alpha})`,
      `rgba(255, 234, 167, ${alpha})`,
      `rgba(221, 160, 221, ${alpha})`
    ];
    return colors[index % colors.length];
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –≤–º–µ—Å—Ç–æ –¥–∏–∞–≥—Ä–∞–º–º—ã
   * @param {string} chartId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  showChartError(chartId, message) {
    const container = document.getElementById(chartId)?.parentElement;
    if (container) {
      container.innerHTML = `
        <div class="chart-error">
          <i class="fas fa-exclamation-triangle"></i>
          <p>${message}</p>
          <button onclick="location.reload()" class="btn btn-sm btn-primary">
            –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
          </button>
        </div>
      `;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  setupEventListeners() {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
    const periodSelect = document.getElementById('date-range');
    if (periodSelect) {
      periodSelect.addEventListener('change', (e) => {
        this.currentPeriod = e.target.value;
        this.loadDashboardData().catch(() => {
          this.showNotification('error', '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
        });
      });
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    const exportBtn = document.getElementById('export-data');
    if (exportBtn) {
      exportBtn.addEventListener('click', () => this.exportData());
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const refreshBtn = document.getElementById('refresh-data');
    if (refreshBtn) {
      refreshBtn.addEventListener('click', () => {
        this.loadDashboardData().catch(() => {
          this.showNotification('error', '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
        });
      });
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   */
  startAutoRefresh() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ fallback —Ä–µ–∂–∏–º)
    if (!this.fallbackMode) {
      setInterval(() => {
        this.loadDashboardData().catch((error) => {
          console.warn('üìä –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message);
        });
      }, 5 * 60 * 1000);
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
   */
  async exportData() {
    try {
      const data = await this.fetchDashboardStats();
      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `reader-analytics-${new Date().toISOString().split('T')[0]}.json`;
      a.click();
      URL.revokeObjectURL(url);
      
      this.showNotification('success', '–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      this.showNotification('error', '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (success, error, warning, info)
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
   */
  showNotification(type, message) {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show`;
    notification.style.position = 'fixed';
    notification.style.top = '20px';
    notification.style.right = '20px';
    notification.style.zIndex = '9999';
    notification.style.minWidth = '300px';
    
    notification.innerHTML = `
      <i class="fas fa-${this.getNotificationIcon(type)}"></i>
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;

    document.body.appendChild(notification);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove();
      }
    }, 5000);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @returns {string} CSS –∫–ª–∞—Å—Å –∏–∫–æ–Ω–∫–∏
   */
  getNotificationIcon(type) {
    const icons = {
      success: 'check-circle',
      error: 'exclamation-circle',
      warning: 'exclamation-triangle',
      info: 'info-circle'
    };
    return icons[type] || 'info-circle';
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  console.log('üìñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Chart.js
  if (typeof Chart === 'undefined') {
    console.error('üìä Chart.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!');
    return;
  }

  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∞—à–±–æ—Ä–¥–∞
  window.readerDashboard = new ReaderDashboard();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = ReaderDashboard;
}
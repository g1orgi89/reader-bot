/**
 * @fileoverview JavaScript –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @description –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –¥–∞–Ω–Ω—ã—Ö
 */

/**
 * @typedef {Object} DashboardStats
 * @property {Object} overview - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 * @property {Array} sourceStats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
 * @property {Array} utmStats - UTM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 * @property {string} period - –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö
 */

/**
 * @typedef {Object} RetentionData
 * @property {string} cohort - –ö–æ–≥–æ—Ä—Ç–∞
 * @property {number} size - –†–∞–∑–º–µ—Ä –∫–æ–≥–æ—Ä—Ç—ã
 * @property {number} week1 - Retention –Ω–µ–¥–µ–ª—è 1
 * @property {number} week2 - Retention –Ω–µ–¥–µ–ª—è 2
 * @property {number} week3 - Retention –Ω–µ–¥–µ–ª—è 3
 * @property {number} week4 - Retention –Ω–µ–¥–µ–ª—è 4
 */

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–æ–º "–ß–∏—Ç–∞—Ç–µ–ª—å"
 */
class ReaderDashboard {
  constructor() {
    this.currentPeriod = '7d';
    this.charts = {};
    this.refreshInterval = null;
    this.isLoading = false;
    this.cache = new Map();
    this.baseURL = '/api/analytics';
    this.retryCount = 0;
    this.maxRetries = 3;
    
    this.init();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞
   */
  async init() {
    console.log('üìñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å"');
    
    this.setupEventListeners();
    await this.loadDashboardData();
    this.startAutoRefresh();
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞
   */
  async loadDashboardData() {
    if (this.isLoading) return;
    
    this.isLoading = true;
    this.showLoadingState();

    try {
      console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞...');
      
      const [dashboardStats, retentionData, topContent] = await Promise.all([
        this.fetchDashboardStats(),
        this.fetchRetentionData(),
        this.fetchTopContent()
      ]);

      console.log('üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', { dashboardStats, retentionData, topContent });

      this.updateStatCards(dashboardStats.overview);
      this.updateSourceChart(dashboardStats.sourceStats);
      this.updateUTMChart(dashboardStats.utmStats);
      this.updateRetentionChart(retentionData);
      this.updateTopContent(topContent);

      this.hideLoadingState();
      this.showNotification('success', '–î–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      this.retryCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫

    } catch (error) {
      console.error('üìñ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞:', error);
      this.hideLoadingState();
      
      this.retryCount++;
      if (this.retryCount <= this.maxRetries) {
        this.showNotification('warning', `–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${this.retryCount}/${this.maxRetries}...`);
        setTimeout(() => this.loadDashboardData(), 2000 * this.retryCount);
      } else {
        this.showNotification('error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∫–∞–∑–∞–Ω—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
        this.showFallbackData();
      }
    } finally {
      this.isLoading = false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
   * @returns {Promise<DashboardStats>}
   */
  async fetchDashboardStats() {
    const cacheKey = `dashboard_${this.currentPeriod}`;
    const cached = this.getFromCache(cacheKey);
    if (cached) return cached;

    const response = await fetch(`${this.baseURL}/dashboard?period=${this.currentPeriod}`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Cache-Control': 'no-cache'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const result = await response.json();
    if (!result.success) {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }

    this.setCache(cacheKey, result.data);
    return result.data;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö retention
   * @returns {Promise<RetentionData[]>}
   */
  async fetchRetentionData() {
    const cacheKey = 'retention_data';
    const cached = this.getFromCache(cacheKey);
    if (cached) return cached;

    const response = await fetch(`${this.baseURL}/retention`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Cache-Control': 'no-cache'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const result = await response.json();
    if (!result.success) {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è retention –¥–∞–Ω–Ω—ã—Ö');
    }

    this.setCache(cacheKey, result.data);
    return result.data;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   * @returns {Promise<Object>}
   */
  async fetchTopContent() {
    const cacheKey = `top_content_${this.currentPeriod}`;
    const cached = this.getFromCache(cacheKey);
    if (cached) return cached;

    const response = await fetch(`${this.baseURL}/top-content?period=${this.currentPeriod}`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Cache-Control': 'no-cache'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const result = await response.json();
    if (!result.success) {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
    }

    this.setCache(cacheKey, result.data);
    return result.data;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   * @param {Object} stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  updateStatCards(stats) {
    if (!stats) {
      console.warn('üìä No stats data provided');
      return;
    }

    const cards = {
      'total-users-count': this.formatNumber(stats.totalUsers || 0),
      'new-users-count': this.formatNumber(stats.newUsers || 0),
      'total-quotes-count': this.formatNumber(stats.totalQuotes || 0),
      'avg-quotes-count': this.formatDecimal(stats.avgQuotesPerUser || 0),
      'active-users-count': this.formatNumber(stats.activeUsers || 0),
      'promo-usage-count': this.formatNumber(stats.promoUsage || 0)
    };

    Object.entries(cards).forEach(([id, value]) => {
      const element = document.getElementById(id);
      if (element) {
        element.textContent = value;
        element.classList.add('updated');
        setTimeout(() => element.classList.remove('updated'), 1000);
      } else {
        console.warn(`üìä Element not found: ${id}`);
      }
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   * @param {Array} sourceStats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   */
  updateSourceChart(sourceStats) {
    const ctx = document.getElementById('sourceChart');
    if (!ctx) return;

    if (this.charts.source) {
      this.charts.source.destroy();
    }

    if (!sourceStats || sourceStats.length === 0) {
      this.showEmptyChart(ctx, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Chart.js
    if (typeof Chart === 'undefined') {
      console.error('üìä Chart.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
      this.showEmptyChart(ctx, '–ì—Ä–∞—Ñ–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }

    this.charts.source = new Chart(ctx, {
      type: 'doughnut',
      data: {
        labels: sourceStats.map(s => s._id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
        datasets: [{
          data: sourceStats.map(s => s.count || 0),
          backgroundColor: [
            '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', 
            '#FFEAA7', '#DDA0DD', '#F7931E', '#FF7675'
          ],
          borderWidth: 2,
          borderColor: '#ffffff'
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          title: {
            display: true,
            text: 'üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            font: { size: 14, weight: 'bold' }
          },
          legend: {
            position: 'bottom',
            labels: {
              padding: 20,
              usePointStyle: true
            }
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                const percentage = total > 0 ? Math.round((context.raw / total) * 100) : 0;
                return `${context.label}: ${context.raw} (${percentage}%)`;
              }
            }
          }
        }
      }
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ UTM –∫–∞–º–ø–∞–Ω–∏–π
   * @param {Array} utmStats - UTM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  updateUTMChart(utmStats) {
    const ctx = document.getElementById('utmChart');
    if (!ctx) return;

    if (this.charts.utm) {
      this.charts.utm.destroy();
    }

    if (!utmStats || utmStats.length === 0) {
      this.showEmptyChart(ctx, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö UTM –∫–∞–º–ø–∞–Ω–∏–π');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Chart.js
    if (typeof Chart === 'undefined') {
      console.error('üìä Chart.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
      this.showEmptyChart(ctx, '–ì—Ä–∞—Ñ–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }

    this.charts.utm = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: utmStats.map(u => u.campaign || u._id),
        datasets: [
          {
            label: '–ö–ª–∏–∫–∏',
            data: utmStats.map(u => u.clicks || 0),
            backgroundColor: '#4ECDC4',
            borderRadius: 4
          },
          {
            label: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            data: utmStats.map(u => u.uniqueUsers || 0),
            backgroundColor: '#45B7D1',
            borderRadius: 4
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          title: {
            display: true,
            text: 'üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å UTM –∫–∞–º–ø–∞–Ω–∏–π',
            font: { size: 14, weight: 'bold' }
          },
          legend: {
            position: 'top'
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            grid: {
              color: 'rgba(0,0,0,0.1)'
            }
          },
          x: {
            grid: {
              display: false
            }
          }
        }
      }
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ retention
   * @param {RetentionData[]} retentionData - –î–∞–Ω–Ω—ã–µ retention
   */
  updateRetentionChart(retentionData) {
    const ctx = document.getElementById('retentionChart');
    if (!ctx) return;

    if (this.charts.retention) {
      this.charts.retention.destroy();
    }

    if (!retentionData || retentionData.length === 0) {
      this.showEmptyChart(ctx, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ retention');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Chart.js
    if (typeof Chart === 'undefined') {
      console.error('üìä Chart.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
      this.showEmptyChart(ctx, '–ì—Ä–∞—Ñ–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }

    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –∫–æ–≥–æ—Ä—Ç –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    const recentCohorts = retentionData.slice(-6);

    this.charts.retention = new Chart(ctx, {
      type: 'line',
      data: {
        labels: ['–ù–µ–¥–µ–ª—è 1', '–ù–µ–¥–µ–ª—è 2', '–ù–µ–¥–µ–ª—è 3', '–ù–µ–¥–µ–ª—è 4'],
        datasets: recentCohorts.map((cohort, index) => ({
          label: `${cohort.cohort} (${cohort.size} –ø–æ–ª—å–∑.)`,
          data: [cohort.week1 || 0, cohort.week2 || 0, cohort.week3 || 0, cohort.week4 || 0],
          borderColor: this.getRetentionColor(index),
          backgroundColor: this.getRetentionColor(index, 0.1),
          tension: 0.3,
          pointRadius: 6,
          pointHoverRadius: 8
        }))
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          title: {
            display: true,
            text: 'üìà Retention –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º',
            font: { size: 14, weight: 'bold' }
          },
          legend: {
            position: 'top',
            labels: {
              usePointStyle: true,
              padding: 20
            }
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            max: 100,
            ticks: {
              callback: function(value) {
                return value + '%';
              }
            },
            grid: {
              color: 'rgba(0,0,0,0.1)'
            }
          },
          x: {
            grid: {
              display: false
            }
          }
        },
        interaction: {
          intersect: false,
          mode: 'index'
        }
      }
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   * @param {Object} topContent - –¢–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç
   */
  updateTopContent(topContent) {
    if (!topContent) {
      console.warn('üìä No top content data provided');
      return;
    }

    this.updateTopAuthors(topContent.topAuthors);
    this.updateTopCategories(topContent.topCategories);
    this.updatePopularQuotes(topContent.popularQuotes);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø –∞–≤—Ç–æ—Ä–æ–≤
   * @param {Array} topAuthors - –¢–æ–ø –∞–≤—Ç–æ—Ä—ã
   */
  updateTopAuthors(topAuthors) {
    const container = document.getElementById('top-authors');
    if (!container) return;

    if (!topAuthors || topAuthors.length === 0) {
      container.innerHTML = '<div class="no-data">üìö –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ—Ä–∞—Ö</div>';
      return;
    }

    container.innerHTML = topAuthors.map((author, index) => `
      <div class="top-item" data-rank="${index + 1}">
        <span class="rank">${index + 1}</span>
        <span class="name">${this.escapeHtml(author._id)}</span>
        <span class="count">${author.count} ${this.declensionQuotes(author.count)}</span>
      </div>
    `).join('');
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   * @param {Array} topCategories - –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  updateTopCategories(topCategories) {
    const container = document.getElementById('top-categories');
    if (!container) return;

    if (!topCategories || topCategories.length === 0) {
      container.innerHTML = '<div class="no-data">üéØ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö</div>';
      return;
    }

    container.innerHTML = topCategories.map((category, index) => `
      <div class="top-item" data-rank="${index + 1}">
        <span class="rank">${index + 1}</span>
        <span class="name">${this.escapeHtml(category._id)}</span>
        <span class="count">${category.count} ${this.declensionQuotes(category.count)}</span>
      </div>
    `).join('');
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ü–∏—Ç–∞—Ç
   * @param {Array} popularQuotes - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
   */
  updatePopularQuotes(popularQuotes) {
    const container = document.getElementById('popular-quotes');
    if (!container) return;

    if (!popularQuotes || popularQuotes.length === 0) {
      container.innerHTML = '<div class="no-data">üí´ –ù–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Ü–∏—Ç–∞—Ç</div>';
      return;
    }

    container.innerHTML = popularQuotes.map(quote => `
      <div class="popular-quote">
        <div class="quote-text">"${this.escapeHtml(this.truncateText(quote._id, 100))}"</div>
        <div class="quote-meta">
          ${quote.author ? `‚Äî ${this.escapeHtml(quote.author)}` : ''} 
          <span class="usage-count">(${quote.count} —Ä–∞–∑)</span>
        </div>
      </div>
    `).join('');
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  setupEventListeners() {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
    const periodSelect = document.getElementById('date-range');
    if (periodSelect) {
      periodSelect.addEventListener('change', (e) => {
        this.currentPeriod = e.target.value;
        this.clearCache();
        this.loadDashboardData();
      });
    }

    // –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    const exportBtn = document.getElementById('export-data');
    if (exportBtn) {
      exportBtn.addEventListener('click', () => this.exportData());
    }

    // –ö–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const refreshBtn = document.getElementById('refresh-dashboard');
    if (refreshBtn) {
      refreshBtn.addEventListener('click', () => {
        this.clearCache();
        this.retryCount = 0;
        this.loadDashboardData();
      });
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
   */
  startAutoRefresh() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    this.refreshInterval = setInterval(() => {
      if (!this.isLoading) {
        this.loadDashboardData();
      }
    }, 5 * 60 * 1000);
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  stopAutoRefresh() {
    if (this.refreshInterval) {
      clearInterval(this.refreshInterval);
      this.refreshInterval = null;
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
   */
  async exportData() {
    try {
      const response = await fetch(`${this.baseURL}/stats/overview?period=${this.currentPeriod}`);
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');

      const result = await response.json();
      if (!result.success) throw new Error(result.error);

      const blob = new Blob([JSON.stringify(result.data, null, 2)], { 
        type: 'application/json' 
      });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `reader-analytics-${this.currentPeriod}-${new Date().toISOString().split('T')[0]}.json`;
      a.click();
      URL.revokeObjectURL(url);

      this.showNotification('success', '–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      console.error('üìñ –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
      this.showNotification('error', '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
    }
  }

  // === –£–¢–ò–õ–ò–¢–´ ===

  /**
   * –ü–æ–∫–∞–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
   */
  showLoadingState() {
    document.querySelectorAll('.stat-value').forEach(el => {
      el.textContent = '--';
      el.classList.add('loading');
    });

    document.querySelectorAll('.top-content-list, .popular-quotes-list').forEach(el => {
      el.innerHTML = '<div class="loading">üìñ –ó–∞–≥—Ä—É–∑–∫–∞...</div>';
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º spinner –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ö
    document.querySelectorAll('canvas').forEach(canvas => {
      const container = canvas.parentElement;
      if (container) {
        container.classList.add('loading');
      }
    });
  }

  /**
   * –°–∫—Ä—ã—Ç–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
   */
  hideLoadingState() {
    document.querySelectorAll('.loading').forEach(el => {
      el.classList.remove('loading');
    });
  }

  /**
   * –ü–æ–∫–∞–∑ fallback –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—à–∏–±–∫–µ
   */
  showFallbackData() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const fallbackStats = {
      totalUsers: 3,
      newUsers: 1,
      totalQuotes: 4,
      avgQuotesPerUser: 1.3,
      activeUsers: 2,
      promoUsage: 0
    };

    const fallbackSources = [
      { _id: 'Instagram', count: 1 },
      { _id: 'Telegram', count: 1 },
      { _id: 'YouTube', count: 1 }
    ];

    const fallbackTopContent = {
      topAuthors: [
        { _id: '–ú–∞—Ä–∏–Ω–∞ –¶–≤–µ—Ç–∞–µ–≤–∞', count: 1 },
        { _id: '–≠—Ä–∏—Ö –§—Ä–æ–º–º', count: 1 },
        { _id: '–ë—É–¥–¥–∞', count: 1 }
      ],
      topCategories: [
        { _id: '–ü–æ—ç–∑–∏—è', count: 1 },
        { _id: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è', count: 1 },
        { _id: '–§–∏–ª–æ—Å–æ—Ñ–∏—è', count: 1 }
      ],
      popularQuotes: []
    };

    this.updateStatCards(fallbackStats);
    this.updateSourceChart(fallbackSources);
    this.updateUTMChart([]);
    this.updateTopContent(fallbackTopContent);
  }

  /**
   * –ü–æ–∫–∞–∑ –ø—É—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
   * @param {HTMLCanvasElement} ctx - Canvas —ç–ª–µ–º–µ–Ω—Ç
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
   */
  showEmptyChart(ctx, message) {
    const chartContainer = ctx.parentElement;
    chartContainer.innerHTML = `
      <div class="empty-chart">
        <div class="empty-chart-icon">üìä</div>
        <div class="empty-chart-message">${message}</div>
      </div>
    `;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è retention –≥—Ä–∞—Ñ–∏–∫–∞
   * @param {number} index - –ò–Ω–¥–µ–∫—Å
   * @param {number} alpha - –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
   * @returns {string}
   */
  getRetentionColor(index, alpha = 1) {
    const colors = [
      `rgba(255, 107, 107, ${alpha})`, // –ö—Ä–∞—Å–Ω—ã–π
      `rgba(78, 205, 196, ${alpha})`,  // –ë–∏—Ä—é–∑–æ–≤—ã–π
      `rgba(69, 183, 209, ${alpha})`,  // –°–∏–Ω–∏–π
      `rgba(150, 206, 180, ${alpha})`, // –ó–µ–ª–µ–Ω—ã–π
      `rgba(255, 234, 167, ${alpha})`, // –ñ–µ–ª—Ç—ã–π
      `rgba(221, 160, 221, ${alpha})`  // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
    ];
    return colors[index % colors.length];
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
   * @param {number} num - –ß–∏—Å–ª–æ
   * @returns {string}
   */
  formatNumber(num) {
    if (typeof num !== 'number') return '0';
    if (num >= 1000000) {
      return (num / 1000000).toFixed(1) + 'M';
    }
    if (num >= 1000) {
      return (num / 1000).toFixed(1) + 'K';
    }
    return num.toString();
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª
   * @param {number} num - –ß–∏—Å–ª–æ
   * @returns {string}
   */
  formatDecimal(num) {
    if (typeof num !== 'number') return '0.0';
    return parseFloat(num).toFixed(1);
  }

  /**
   * –°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "—Ü–∏—Ç–∞—Ç–∞"
   * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
   * @returns {string}
   */
  declensionQuotes(count) {
    if (count % 10 === 1 && count % 100 !== 11) return '—Ü–∏—Ç–∞—Ç–∞';
    if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '—Ü–∏—Ç–∞—Ç—ã';
    return '—Ü–∏—Ç–∞—Ç';
  }

  /**
   * –û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞
   * @param {string} text - –¢–µ–∫—Å—Ç
   * @param {number} maxLength - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
   * @returns {string}
   */
  truncateText(text, maxLength) {
    if (!text) return '';
    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
  }

  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
   * @param {string} text - –¢–µ–∫—Å—Ç
   * @returns {string}
   */
  escapeHtml(text) {
    if (!text) return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  /**
   * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
   * @param {string} key - –ö–ª—é—á
   * @returns {any|null}
   */
  getFromCache(key) {
    const cached = this.cache.get(key);
    if (cached && Date.now() - cached.timestamp < 2 * 60 * 1000) { // 2 –º–∏–Ω—É—Ç—ã
      return cached.data;
    }
    return null;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—ç—à–∞
   * @param {string} key - –ö–ª—é—á
   * @param {any} data - –î–∞–Ω–Ω—ã–µ
   */
  setCache(key, data) {
    this.cache.set(key, {
      data,
      timestamp: Date.now()
    });
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
   */
  clearCache() {
    this.cache.clear();
  }

  /**
   * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param {string} type - –¢–∏–ø (success, error, info, warning)
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
   */
  showNotification(type, message) {
    if (typeof showNotification === 'function') {
      showNotification(type, message);
    } else {
      // Fallback –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
      console.log(`[${type.toUpperCase()}] ${message}`);
      
      // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ alert –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
      if (type === 'error') {
        const shouldShow = confirm(`–û—à–∏–±–∫–∞: ${message}\n\n–ü–æ–∫–∞–∑–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏?`);
        if (shouldShow) {
          console.error('Dashboard Error:', message);
        }
      }
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  destroy() {
    this.stopAutoRefresh();
    Object.values(this.charts).forEach(chart => {
      if (chart && typeof chart.destroy === 'function') {
        chart.destroy();
      }
    });
    this.charts = {};
    this.clearCache();
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É
window.ReaderDashboard = ReaderDashboard;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  if (window.location.pathname.includes('index.html') || window.location.pathname.endsWith('/')) {
    console.log('üìñ Initializing Reader Dashboard...');
    const dashboard = new ReaderDashboard();
    window.readerDashboard = dashboard;
  }
});
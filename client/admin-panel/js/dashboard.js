/**
 * @fileoverview –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–æ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ Shrooms AI Support Bot
 * @description –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é —Ñ–∞—Ä–º–∏–Ω–≥–∞
 * @author Shrooms Development Team
 */

/**
 * @typedef {Object} DashboardStats
 * @property {number} activeConversations - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–µ—Å–µ–¥
 * @property {number} openTickets - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
 * @property {number} resolvedIssues - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
 * @property {string} avgResponseTime - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
 */

/**
 * @typedef {Object} ChartData
 * @property {string[]} labels - –ü–æ–¥–ø–∏—Å–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
 * @property {number[]} values - –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
 */

/**
 * @typedef {Object} FarmingRateData
 * @property {number} rate - –¢–µ–∫—É—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
 * @property {string} lastUpdated - –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–æ–º
 */
class ShroomsDashboard {
  /**
   * @constructor
   */
  constructor() {
    this.isInitialized = false;
    this.statsRefreshInterval = null;
    this.dateRange = 'week';
    
    // –ö–µ—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    this.cachedStats = null;
    this.cachedChartData = null;
    
    console.log('üçÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ShroomsDashboard');
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞
   * @returns {Promise<void>}
   */
  async init() {
    try {
      console.log('üçÑ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞');
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
      this.setupEventListeners();
      
      // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await this.loadInitialData();
      
      // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      this.startPeriodicRefresh();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∏–±–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
      this.initMushroomMatrix();
      
      this.isInitialized = true;
      console.log('üçÑ –î–∞—à–±–æ—Ä–¥ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      
    } catch (error) {
      console.error('üçÑ –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
      this.showNotification('error', 'üçÑ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞—à–±–æ—Ä–¥');
    }
  }
  
  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
    const dateRangeSelect = document.getElementById('date-range');
    if (dateRangeSelect) {
      dateRangeSelect.addEventListener('change', (e) => {
        this.dateRange = e.target.value;
        this.loadStats();
        this.loadChartData();
      });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞
    const farmingForm = document.getElementById('farming-rate-form');
    if (farmingForm) {
      farmingForm.addEventListener('submit', (e) => this.handleFarmingRateUpdate(e));
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    document.addEventListener('click', (e) => {
      if (e.target.matches('[data-action="refresh-stats"]')) {
        this.refreshAllData();
      }
    });
    
    console.log('üçÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }
  
  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   * @returns {Promise<void>}
   */
  async loadInitialData() {
    console.log('üçÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞');
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    await Promise.allSettled([
      this.loadStats(),
      this.loadRecentTickets(),
      this.loadFarmingRate(),
      this.loadChartData()
    ]);
  }
  
  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   * @returns {Promise<void>}
   */
  async loadStats() {
    try {
      console.log('üçÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞:', this.dateRange);
      
      if (!window.makeAuthenticatedRequest) {
        console.warn('üçÑ makeAuthenticatedRequest –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É');
        this.loadStatsStub();
        return;
      }
      
      const response = await window.makeAuthenticatedRequest(`/api/admin/stats?period=${this.dateRange}`);
      
      if (response.success && response.data) {
        this.updateStatsDisplay(response.data);
        this.cachedStats = response.data;
      } else {
        console.warn('üçÑ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É');
        this.loadStatsStub();
      }
      
    } catch (error) {
      console.error('üçÑ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      this.loadStatsStub();
    }
  }
  
  /**
   * –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  loadStatsStub() {
    const stubData = {
      activeConversations: 42,
      openTickets: 7,
      resolvedIssues: 156,
      avgResponseTime: '2.3s',
      conversationsTrend: 5,
      ticketsTrend: 12,
      resolvedTrend: 8,
      responseTrend: -5
    };
    
    this.updateStatsDisplay(stubData);
  }
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   * @param {DashboardStats} data - –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  updateStatsDisplay(data) {
    const updates = {
      'active-conversations-count': data.activeConversations,
      'open-tickets-count': data.openTickets,
      'resolved-issues-count': data.resolvedIssues,
      'avg-response-time': data.avgResponseTime
    };
    
    Object.entries(updates).forEach(([id, value]) => {
      const element = document.getElementById(id);
      if (element) {
        // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∏—Å–ª–∞
        this.animateCounterChange(element, value);
      }
    });
    
    console.log('üçÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
  }
  
  /**
   * –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
   * @param {HTMLElement} element - –≠–ª–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞
   * @param {string|number} newValue - –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
   */
  animateCounterChange(element, newValue) {
    const currentValue = element.textContent;
    
    if (currentValue === '--' || currentValue === newValue.toString()) {
      element.textContent = newValue;
      return;
    }
    
    // –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    element.style.opacity = '0.5';
    element.style.transform = 'scale(0.9)';
    
    setTimeout(() => {
      element.textContent = newValue;
      element.style.opacity = '1';
      element.style.transform = 'scale(1)';
    }, 200);
  }
  
  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–∏–∫–µ—Ç–æ–≤
   * @returns {Promise<void>}
   */
  async loadRecentTickets() {
    try {
      console.log('üçÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–∏–∫–µ—Ç–æ–≤');
      
      if (!window.makeAuthenticatedRequest) {
        this.loadRecentTicketsStub();
        return;
      }
      
      const response = await window.makeAuthenticatedRequest('/api/admin/tickets?limit=5&sort=created_desc');
      
      if (response.success && response.data) {
        this.updateRecentTicketsDisplay(response.data.tickets || []);
      } else {
        this.loadRecentTicketsStub();
      }
      
    } catch (error) {
      console.error('üçÑ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤:', error);
      this.loadRecentTicketsStub();
    }
  }
  
  /**
   * –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–∏–∫–µ—Ç–æ–≤
   */
  loadRecentTicketsStub() {
    const stubTickets = [
      {
        ticketId: '#001',
        subject: '–ü—Ä–æ–±–ª–µ–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ Xverse',
        status: 'open',
        priority: 'medium',
        createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString() // 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
      },
      {
        ticketId: '#002',
        subject: '–í–æ–ø—Ä–æ—Å –æ —Ç–æ–∫–µ–Ω–æ–º–∏–∫–µ SHROOMS',
        status: 'resolved',
        priority: 'low',
        createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString() // 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥
      }
    ];
    
    this.updateRecentTicketsDisplay(stubTickets);
  }
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–∏–∫–µ—Ç–æ–≤
   * @param {Array} tickets - –ú–∞—Å—Å–∏–≤ —Ç–∏–∫–µ—Ç–æ–≤
   */
  updateRecentTicketsDisplay(tickets) {
    const tbody = document.querySelector('#recent-tickets-table tbody');
    if (!tbody) return;
    
    if (tickets.length === 0) {
      tbody.innerHTML = '<tr class="table-loading"><td colspan="6">üçÑ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –≤ –º–∏—Ü–µ–ª–∏–∏</td></tr>';
      return;
    }
    
    tbody.innerHTML = tickets.map(ticket => `
      <tr>
        <td>${ticket.ticketId}</td>
        <td>${this.truncateText(ticket.subject, 50)}</td>
        <td><span class="status-badge status-${ticket.status}">${this.getStatusText(ticket.status)}</span></td>
        <td><span class="priority-badge priority-${ticket.priority}">${this.getPriorityText(ticket.priority)}</span></td>
        <td>${this.formatRelativeTime(ticket.createdAt)}</td>
        <td>
          <button class="btn btn-sm" onclick="window.location.href='tickets.html?id=${ticket.ticketId.replace('#', '')}'">
            –ü—Ä–æ—Å–º–æ—Ç—Ä
          </button>
        </td>
      </tr>
    `).join('');
    
    console.log('üçÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–∏–∫–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
  }
  
  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞
   * @returns {Promise<void>}
   */
  async loadFarmingRate() {
    try {
      console.log('üçÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞');
      
      if (!window.makeAuthenticatedRequest) {
        this.loadFarmingRateStub();
        return;
      }
      
      const response = await window.makeAuthenticatedRequest('/api/admin/farming-rate');
      
      if (response.success && response.data) {
        this.updateFarmingRateDisplay(response.data);
      } else {
        this.loadFarmingRateStub();
      }
      
    } catch (error) {
      console.error('üçÑ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞:', error);
      this.loadFarmingRateStub();
    }
  }
  
  /**
   * –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞
   */
  loadFarmingRateStub() {
    const stubData = {
      rate: 12.5,
      lastUpdated: new Date().toISOString()
    };
    
    this.updateFarmingRateDisplay(stubData);
  }
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞
   * @param {FarmingRateData} data - –î–∞–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
   */
  updateFarmingRateDisplay(data) {
    const rateInput = document.getElementById('farming-rate');
    const lastUpdatedElement = document.getElementById('farming-last-updated');
    
    if (rateInput) {
      rateInput.value = data.rate;
    }
    
    if (lastUpdatedElement) {
      lastUpdatedElement.textContent = this.formatRelativeTime(data.lastUpdated);
    }
    
    console.log('üçÑ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Ñ–∞—Ä–º–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', data.rate + '%');
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞
   * @param {Event} event - –°–æ–±—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã
   */
  async handleFarmingRateUpdate(event) {
    event.preventDefault();
    
    const rateInput = document.getElementById('farming-rate');
    const rate = parseFloat(rateInput.value);
    
    if (isNaN(rate) || rate < 0 || rate > 100) {
      this.showNotification('error', 'üçÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –æ—Ç 0 –¥–æ 100%');
      return;
    }
    
    try {
      console.log('üçÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞ –¥–æ', rate + '%');
      
      // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const submitBtn = event.target.querySelector('button[type="submit"]');
      const originalText = submitBtn.innerHTML;
      submitBtn.innerHTML = 'üçÑ –û–±–Ω–æ–≤–ª—è–µ–º...';
      submitBtn.disabled = true;
      
      if (window.makeAuthenticatedRequest) {
        const response = await window.makeAuthenticatedRequest('/api/admin/farming-rate', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ rate })
        });
        
        if (response.success) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
          const lastUpdated = document.getElementById('farming-last-updated');
          if (lastUpdated) {
            lastUpdated.textContent = '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
          }
          
          this.showNotification('success', `üçÑ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Ñ–∞—Ä–º–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ ${rate}%`);
        } else {
          throw new Error(response.error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å');
        }
      } else {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const lastUpdated = document.getElementById('farming-last-updated');
        if (lastUpdated) {
          lastUpdated.textContent = '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
        }
        
        this.showNotification('success', `üçÑ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Ñ–∞—Ä–º–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ ${rate}%`);
      }
      
    } catch (error) {
      console.error('üçÑ –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏:', error);
      this.showNotification('error', `üçÑ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${error.message}`);
    } finally {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
      const submitBtn = event.target.querySelector('button[type="submit"]');
      submitBtn.innerHTML = originalText;
      submitBtn.disabled = false;
    }
  }
  
  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
   * @returns {Promise<void>}
   */
  async loadChartData() {
    try {
      console.log('üçÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤');
      
      if (!window.makeAuthenticatedRequest) {
        this.loadChartDataStub();
        return;
      }
      
      const response = await window.makeAuthenticatedRequest(`/api/admin/analytics/charts?period=${this.dateRange}`);
      
      if (response.success && response.data) {
        this.updateChartsDisplay(response.data);
        this.cachedChartData = response.data;
      } else {
        this.loadChartDataStub();
      }
      
    } catch (error) {
      console.error('üçÑ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤:', error);
      this.loadChartDataStub();
    }
  }
  
  /**
   * –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
   */
  loadChartDataStub() {
    const stubData = {
      conversationsChart: {
        labels: ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'],
        values: [12, 19, 23, 17, 25, 31, 42]
      },
      topicsChart: {
        labels: ['–ö–æ—à–µ–ª—å–∫–∏', '–¢–æ–∫–µ–Ω—ã', '–§–∞—Ä–º–∏–Ω–≥', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã'],
        values: [35, 28, 20, 12, 5]
      }
    };
    
    this.updateChartsDisplay(stubData);
  }
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
   */
  updateChartsDisplay(data) {
    // –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å Chart.js –∏–ª–∏ –¥—Ä—É–≥—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    
    const conversationsChart = document.getElementById('conversations-chart');
    const topicsChart = document.getElementById('topics-chart');
    
    if (conversationsChart && data.conversationsChart) {
      conversationsChart.innerHTML = this.createSimpleBarChart(data.conversationsChart);
    }
    
    if (topicsChart && data.topicsChart) {
      topicsChart.innerHTML = this.createSimplePieChart(data.topicsChart);
    }
    
    console.log('üçÑ –ì—Ä–∞—Ñ–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
  }
  
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ)
   * @param {ChartData} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
   * @returns {string} HTML –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
   */
  createSimpleBarChart(data) {
    const maxValue = Math.max(...data.values);
    
    return `
      <div class="simple-chart">
        ${data.labels.map((label, index) => {
          const height = (data.values[index] / maxValue) * 100;
          return `
            <div class="chart-bar">
              <div class="bar" style="height: ${height}%; background: linear-gradient(45deg, var(--neon-green), var(--cyber-blue))"></div>
              <div class="bar-label">${label}</div>
              <div class="bar-value">${data.values[index]}</div>
            </div>
          `;
        }).join('')}
      </div>
      <style>
        .simple-chart { display: flex; gap: 1rem; align-items: end; height: 200px; padding: 1rem; }
        .chart-bar { flex: 1; display: flex; flex-direction: column; align-items: center; gap: 0.5rem; }
        .bar { width: 100%; border-radius: 4px; min-height: 20px; transition: height 0.5s ease; }
        .bar-label { font-size: 0.8rem; color: var(--text-light); }
        .bar-value { font-weight: bold; color: var(--neon-green); }
      </style>
    `;
  }
  
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ)
   * @param {ChartData} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
   * @returns {string} HTML –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
   */
  createSimplePieChart(data) {
    const total = data.values.reduce((sum, value) => sum + value, 0);
    
    return `
      <div class="simple-pie-chart">
        ${data.labels.map((label, index) => {
          const percentage = ((data.values[index] / total) * 100).toFixed(1);
          return `
            <div class="pie-item">
              <div class="pie-indicator" style="background: hsl(${index * 70}, 70%, 60%)"></div>
              <span class="pie-label">${label}</span>
              <span class="pie-value">${percentage}%</span>
            </div>
          `;
        }).join('')}
      </div>
      <style>
        .simple-pie-chart { display: flex; flex-direction: column; gap: 0.75rem; padding: 1rem; }
        .pie-item { display: flex; align-items: center; gap: 1rem; }
        .pie-indicator { width: 16px; height: 16px; border-radius: 50%; }
        .pie-label { flex: 1; color: var(--text-light); }
        .pie-value { font-weight: bold; color: var(--neon-green); }
      </style>
    `;
  }
  
  /**
   * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
   */
  startPeriodicRefresh() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    this.statsRefreshInterval = setInterval(() => {
      console.log('üçÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      this.loadStats();
      this.loadRecentTickets();
    }, 5 * 60 * 1000);
    
    console.log('üçÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');
  }
  
  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  stopPeriodicRefresh() {
    if (this.statsRefreshInterval) {
      clearInterval(this.statsRefreshInterval);
      this.statsRefreshInterval = null;
      console.log('üçÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }
  }
  
  /**
   * –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
   * @returns {Promise<void>}
   */
  async refreshAllData() {
    console.log('üçÑ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞');
    
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      this.showLoadingState(true);
      
      await this.loadInitialData();
      
      this.showNotification('success', 'üçÑ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      
    } catch (error) {
      console.error('üçÑ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
      this.showNotification('error', 'üçÑ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ');
    } finally {
      this.showLoadingState(false);
    }
  }
  
  /**
   * –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
   * @param {boolean} loading - –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∑–∫—É
   */
  showLoadingState(loading) {
    const statsCards = document.querySelectorAll('.stat-card');
    const charts = document.querySelectorAll('.chart-container');
    
    [...statsCards, ...charts].forEach(element => {
      if (loading) {
        element.classList.add('loading');
      } else {
        element.classList.remove('loading');
      }
    });
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∏–±–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã (—Ñ–æ–Ω–æ–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è)
   */
  initMushroomMatrix() {
    if (typeof window.initMushroomMatrix === 'function') {
      // –¢–æ–Ω–∫–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
      window.initMushroomMatrix(true);
      console.log('üçÑ –ì—Ä–∏–±–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ç–æ–Ω–∫–æ–º —Ä–µ–∂–∏–º–µ');
    } else {
      console.log('üçÑ –§—É–Ω–∫—Ü–∏—è initMushroomMatrix –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  }
  
  /**
   * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (success, error, warning, info)
   * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  showNotification(type, message) {
    if (typeof window.showNotification === 'function') {
      window.showNotification(type, message);
    } else {
      // Fallback
      console.log(`üçÑ ${type.toUpperCase()}: ${message}`);
      alert(message);
    }
  }
  
  /**
   * –£—Ç–∏–ª–∏—Ç–∞: –æ–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞
   * @param {string} text - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
   * @param {number} maxLength - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
   * @returns {string} –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   */
  truncateText(text, maxLength) {
    if (!text) return '';
    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
  }
  
  /**
   * –£—Ç–∏–ª–∏—Ç–∞: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
   * @param {string} status - –ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
   * @returns {string} –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
   */
  getStatusText(status) {
    const statusMap = {
      'open': '–û—Ç–∫—Ä—ã—Ç',
      'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
      'resolved': '–†–µ—à–µ–Ω',
      'closed': '–ó–∞–∫—Ä—ã—Ç'
    };
    return statusMap[status] || status;
  }
  
  /**
   * –£—Ç–∏–ª–∏—Ç–∞: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
   * @param {string} priority - –ö–æ–¥ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
   * @returns {string} –¢–µ–∫—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
   */
  getPriorityText(priority) {
    const priorityMap = {
      'low': '–ù–∏–∑–∫–∏–π',
      'medium': '–°—Ä–µ–¥–Ω–∏–π',
      'high': '–í—ã—Å–æ–∫–∏–π',
      'urgent': '–°—Ä–æ—á–Ω—ã–π'
    };
    return priorityMap[priority] || priority;
  }
  
  /**
   * –£—Ç–∏–ª–∏—Ç–∞: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
   * @param {string} dateString - –°—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã ISO
   * @returns {string} –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
   */
  formatRelativeTime(dateString) {
    if (!dateString) return '--';
    
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now - date;
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMs / 3600000);
    const diffDays = Math.floor(diffMs / 86400000);
    
    if (diffMins < 60) {
      return diffMins <= 1 ? '—Ç–æ–ª—å–∫–æ —á—Ç–æ' : `${diffMins} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    } else if (diffHours < 24) {
      return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    } else if (diffDays < 30) {
      return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
    } else {
      return date.toLocaleDateString('ru-RU');
    }
  }
  
  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
   */
  destroy() {
    this.stopPeriodicRefresh();
    this.isInitialized = false;
    console.log('üçÑ –î–∞—à–±–æ—Ä–¥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞—à–±–æ—Ä–¥—É
let shroomsDashboard = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ HTML)
 * @returns {Promise<void>}
 */
async function initDashboard() {
  try {
    console.log('üçÑ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
    
    if (shroomsDashboard) {
      console.log('üçÑ –î–∞—à–±–æ—Ä–¥ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }
    
    shroomsDashboard = new ShroomsDashboard();
    await shroomsDashboard.init();
    
    // –î–µ–ª–∞–µ–º –¥–∞—à–±–æ—Ä–¥ –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.shroomsDashboard = shroomsDashboard;
    
  } catch (error) {
    console.error('üçÑ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
document.addEventListener('DOMContentLoaded', () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–∞—à–±–æ—Ä–¥–∞
  if (document.getElementById('recent-tickets-table') && !shroomsDashboard) {
    console.log('üçÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞');
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ auth.js
    setTimeout(initDashboard, 100);
  }
});

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
  if (shroomsDashboard) {
    shroomsDashboard.destroy();
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { ShroomsDashboard, initDashboard };
}
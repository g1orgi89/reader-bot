/**
 * @fileoverview –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è "–ß–∏—Ç–∞—Ç–µ–ª—å"
 * @description –§–∏–∫—Å–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å Chart.js –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç fallback –¥–∞–Ω–Ω—ã–µ
 * @version 2.2.0 - –ò–°–ü–†–ê–í–õ–ï–ù–ê –û–ë–†–ê–ë–û–¢–ö–ê CANVAS
 */

class ReaderDashboard {
  constructor() {
    this.currentPeriod = '7d';
    this.charts = new Map(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Map –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    this.isLoading = false;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π API prefix
    this.apiBase = '/api/reader/analytics';
    
    this.init();
  }

  async init() {
    console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞ Reader Bot...');
    
    try {
      this.showLoading(true);
      await this.loadDashboardData();
      this.setupEventListeners();
      this.startAutoRefresh();
      console.log('‚úÖ –î–∞—à–±–æ—Ä–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
      this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞');
    } finally {
      this.showLoading(false);
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  async loadDashboardData() {
    try {
      console.log(`üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: ${this.currentPeriod}`);
      
      const [dashboardStats, retentionData, topContent] = await Promise.all([
        this.fetchDashboardStats(),
        this.fetchRetentionData(),
        this.fetchTopContent()
      ]);

      this.updateStatCards(dashboardStats.overview);
      this.updateSourceChart(dashboardStats.sourceStats);
      this.updateUTMChart(dashboardStats.utmStats);
      this.updateRetentionChart(retentionData);
      this.updateTopContent(topContent);

      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');

    } catch (error) {
      console.error('üìñ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞:', error);
      console.log('üìä –ü–µ—Ä–µ—Ö–æ–¥ –≤ fallback —Ä–µ–∂–∏–º...');
      this.showFallbackData();
    }
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º URL
   */
  async fetchDashboardStats() {
    const url = `${this.apiBase}/dashboard?period=${this.currentPeriod}`;
    console.log('üìä Fetching dashboard from:', url);
    
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    const result = await response.json();
    return result.data || result;
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö retention —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º URL
   */
  async fetchRetentionData() {
    const url = `${this.apiBase}/retention`;
    console.log('üìä Fetching retention from:', url);
    
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    const result = await response.json();
    return result.data || result;
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º URL
   */
  async fetchTopContent() {
    const url = `${this.apiBase}/top-content?period=${this.currentPeriod}`;
    console.log('üìä Fetching top content from:', url);
    
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    const result = await response.json();
    return result.data || result;
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
   */
  updateStatCards(stats) {
    try {
      const elements = {
        'total-users-count': stats.totalUsers || 0,
        'new-users-count': stats.newUsers || 0,
        'total-quotes-count': stats.totalQuotes || 0,
        'avg-quotes-count': stats.avgQuotesPerUser || '0',
        'active-users-count': stats.activeUsers || 0,
        'promo-usage-count': stats.promoUsage || 0
      };

      Object.entries(elements).forEach(([id, value]) => {
        const element = document.getElementById(id);
        if (element) {
          element.textContent = value;
        }
      });

      console.log('üìä –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', stats);
    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
   */
  updateSourceChart(sourceStats) {
    const chartId = 'sourceChart';
    
    try {
      // –ö–†–ò–¢–ò–ß–ù–û: –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥—Ä–∞—Ñ–∏–∫
      this.destroyChart(chartId);

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—â–µ–º canvas –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      let ctx = document.getElementById(chartId);
      
      if (!ctx) {
        console.warn(`üìä Canvas ${chartId} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...`);
        this.restoreCanvas(chartId, 400, 200);
        ctx = document.getElementById(chartId);
      }
      
      if (!ctx) {
        console.error(`üìä –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å canvas ${chartId}`);
        return;
      }

      if (!sourceStats || sourceStats.length === 0) {
        this.showEmptyChart(chartId, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö');
        return;
      }

      const chart = new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: sourceStats.map(s => s._id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
          datasets: [{
            data: sourceStats.map(s => s.count),
            backgroundColor: [
              '#FF6B6B', '#4ECDC4', '#45B7D1', 
              '#96CEB4', '#FFEAA7', '#DDA0DD'
            ]
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            title: {
              display: true,
              text: 'üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
            },
            legend: {
              position: 'bottom'
            }
          }
        }
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
      this.charts.set(chartId, chart);
      console.log('üìä –î–∏–∞–≥—Ä–∞–º–º–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–∞:', sourceStats);

    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
      this.showChartError('sourceChart', '–û—à–∏–±–∫–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤');
    }
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UTM –¥–∏–∞–≥—Ä–∞–º–º—ã
   */
  updateUTMChart(utmStats) {
    const chartId = 'utmChart';
    
    try {
      // –ö–†–ò–¢–ò–ß–ù–û: –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥—Ä–∞—Ñ–∏–∫
      this.destroyChart(chartId);

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—â–µ–º canvas –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      let ctx = document.getElementById(chartId);
      
      if (!ctx) {
        console.warn(`üìä Canvas ${chartId} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...`);
        this.restoreCanvas(chartId, 400, 200);
        ctx = document.getElementById(chartId);
      }
      
      if (!ctx) {
        console.error(`üìä –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å canvas ${chartId}`);
        return;
      }

      if (!utmStats || utmStats.length === 0) {
        this.showEmptyChart(chartId, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ UTM –∫–∞–º–ø–∞–Ω–∏—è—Ö');
        return;
      }

      const chart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: utmStats.map(u => u.campaign || u._id),
          datasets: [
            {
              label: '–ö–ª–∏–∫–∏',
              data: utmStats.map(u => u.clicks || 0),
              backgroundColor: '#4ECDC4'
            },
            {
              label: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
              data: utmStats.map(u => u.uniqueUsers || 0),
              backgroundColor: '#45B7D1'
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            title: {
              display: true,
              text: 'üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å UTM –∫–∞–º–ø–∞–Ω–∏–π'
            }
          },
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });

      this.charts.set(chartId, chart);
      console.log('üìä UTM –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞:', utmStats);

    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è UTM –¥–∏–∞–≥—Ä–∞–º–º—ã:', error);
      this.showChartError('utmChart', '–û—à–∏–±–∫–∞ UTM –¥–∏–∞–≥—Ä–∞–º–º—ã');
    }
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã retention
   */
  updateRetentionChart(retentionData) {
    const chartId = 'retentionChart';
    
    try {
      // –ö–†–ò–¢–ò–ß–ù–û: –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥—Ä–∞—Ñ–∏–∫
      this.destroyChart(chartId);

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—â–µ–º canvas –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      let ctx = document.getElementById(chartId);
      
      if (!ctx) {
        console.warn(`üìä Canvas ${chartId} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...`);
        this.restoreCanvas(chartId, 800, 300);
        ctx = document.getElementById(chartId);
      }
      
      if (!ctx) {
        console.error(`üìä –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å canvas ${chartId}`);
        return;
      }

      if (!retentionData || retentionData.length === 0) {
        this.showEmptyChart(chartId, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ retention');
        return;
      }

      const chart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: ['–ù–µ–¥–µ–ª—è 1', '–ù–µ–¥–µ–ª—è 2', '–ù–µ–¥–µ–ª—è 3', '–ù–µ–¥–µ–ª—è 4'],
          datasets: retentionData.slice(-6).map((cohort, index) => ({
            label: cohort.cohort,
            data: [cohort.week1, cohort.week2, cohort.week3, cohort.week4],
            borderColor: this.getRetentionColor(index),
            backgroundColor: this.getRetentionColor(index, 0.1),
            tension: 0.1
          }))
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            title: {
              display: true,
              text: 'üìà Retention –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º'
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              max: 100,
              ticks: {
                callback: function(value) {
                  return value + '%';
                }
              }
            }
          }
        }
      });

      this.charts.set(chartId, chart);
      console.log('üìä Retention –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞:', retentionData);

    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è retention –¥–∏–∞–≥—Ä–∞–º–º—ã:', error);
      this.showChartError('retentionChart', '–û—à–∏–±–∫–∞ retention –¥–∏–∞–≥—Ä–∞–º–º—ã');
    }
  }

  /**
   * –ù–û–í–û–ï: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ canvas —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  restoreCanvas(canvasId, width, height) {
    // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
    const containers = document.querySelectorAll('.chart-container');
    let targetContainer = null;
    
    for (const container of containers) {
      if (container.innerHTML.includes(canvasId) || 
          (canvasId === 'sourceChart' && container.innerHTML.includes('–ò—Å—Ç–æ—á–Ω–∏–∫–∏')) ||
          (canvasId === 'utmChart' && container.innerHTML.includes('UTM')) ||
          (canvasId === 'retentionChart' && container.innerHTML.includes('Retention'))) {
        targetContainer = container;
        break;
      }
    }
    
    if (!targetContainer) {
      console.error(`üìä –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è canvas ${canvasId}`);
      return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º chart-wrapper
    let wrapper = targetContainer.querySelector('.chart-wrapper');
    if (!wrapper) {
      wrapper = document.createElement('div');
      wrapper.className = 'chart-wrapper';
      targetContainer.appendChild(wrapper);
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π canvas
    wrapper.innerHTML = `<canvas id="${canvasId}" width="${width}" height="${height}"></canvas>`;
    console.log(`üìä Canvas ${canvasId} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  updateTopContent(topContent) {
    try {
      // –¢–æ–ø –∞–≤—Ç–æ—Ä—ã
      const authorsContainer = document.getElementById('top-authors');
      if (authorsContainer && topContent.topAuthors) {
        authorsContainer.innerHTML = topContent.topAuthors.map((author, index) => `
          <div class="top-item">
            <span class="rank">${index + 1}</span>
            <span class="name">${author._id}</span>
            <span class="count">${author.count} —Ü–∏—Ç–∞—Ç</span>
          </div>
        `).join('');
      }

      // –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const categoriesContainer = document.getElementById('top-categories');
      if (categoriesContainer && topContent.topCategories) {
        categoriesContainer.innerHTML = topContent.topCategories.map((category, index) => `
          <div class="top-item">
            <span class="rank">${index + 1}</span>
            <span class="name">${category._id}</span>
            <span class="count">${category.count} —Ü–∏—Ç–∞—Ç</span>
          </div>
        `).join('');
      }

      // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
      const quotesContainer = document.getElementById('popular-quotes');
      if (quotesContainer && topContent.popularQuotes) {
        quotesContainer.innerHTML = topContent.popularQuotes.map((quote, index) => `
          <div class="popular-quote">
            <div class="quote-text">"${quote._id.substring(0, 100)}..."</div>
            <div class="quote-meta">
              ${quote.author ? `‚Äî ${quote.author}` : ''} 
              <span class="usage-count">(${quote.count} —Ä–∞–∑)</span>
            </div>
          </div>
        `).join('');
      }

      console.log('üìä –¢–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
    }
  }

  /**
   * –ù–û–í–û–ï: –ü–æ–∫–∞–∑ fallback –¥–∞–Ω–Ω—ã—Ö
   */
  showFallbackData() {
    console.log('üìä –ü–æ–∫–∞–∑ fallback –¥–∞–Ω–Ω—ã—Ö...');

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const demoStats = {
      totalUsers: 12,
      newUsers: 3,
      totalQuotes: 47,
      avgQuotesPerUser: '3.9',
      activeUsers: 8,
      promoUsage: 2
    };

    const demoSources = [
      { _id: 'Instagram', count: 5 },
      { _id: 'Telegram', count: 4 },
      { _id: 'YouTube', count: 2 },
      { _id: '–î—Ä—É–∑—å—è', count: 1 }
    ];

    const demoUTM = [
      { campaign: 'reader_recommendations', clicks: 15, uniqueUsers: 8 },
      { campaign: 'weekly_report', clicks: 23, uniqueUsers: 12 },
      { campaign: 'monthly_announcement', clicks: 8, uniqueUsers: 5 }
    ];

    const demoRetention = [
      { cohort: '2024-12', week1: 85, week2: 72, week3: 58, week4: 45 },
      { cohort: '2025-01', week1: 90, week2: 78, week3: 65, week4: 52 }
    ];

    const demoTopContent = {
      topAuthors: [
        { _id: '–≠—Ä–∏—Ö –§—Ä–æ–º–º', count: 8 },
        { _id: '–ú–∞—Ä–∏–Ω–∞ –¶–≤–µ—Ç–∞–µ–≤–∞', count: 6 },
        { _id: '–ê–Ω–Ω–∞ –ë—É—Å–µ–ª', count: 4 }
      ],
      topCategories: [
        { _id: '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', count: 18 },
        { _id: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è', count: 12 },
        { _id: '–§–∏–ª–æ—Å–æ—Ñ–∏—è', count: 9 }
      ],
      popularQuotes: [
        { _id: '–í –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ ‚Äî —Ü–µ–ª–∞—è –∂–∏–∑–Ω—å', author: '–¶–≤–µ—Ç–∞–µ–≤–∞', count: 3 },
        { _id: '–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ª—é–±–∏—Ç—å', author: '–§—Ä–æ–º–º', count: 2 }
      ]
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    this.updateStatCards(demoStats);
    this.updateSourceChart(demoSources);
    this.updateUTMChart(demoUTM);
    this.updateRetentionChart(demoRetention);
    this.updateTopContent(demoTopContent);
  }

  /**
   * –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
   */
  destroyChart(chartId) {
    if (this.charts.has(chartId)) {
      const chart = this.charts.get(chartId);
      try {
        chart.destroy();
        this.charts.delete(chartId);
        console.log(`üìä –ì—Ä–∞—Ñ–∏–∫ ${chartId} —É–Ω–∏—á—Ç–æ–∂–µ–Ω`);
      } catch (error) {
        console.warn(`üìä –û—à–∏–±–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ ${chartId}:`, error);
        this.charts.delete(chartId); // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞—Ä—Ç—ã –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
      }
    }
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –±–µ–∑ –∑–∞–º–µ–Ω—ã canvas
   */
  showChartError(canvasId, message) {
    const canvas = document.getElementById(canvasId);
    if (canvas) {
      const wrapper = canvas.closest('.chart-wrapper') || canvas.parentElement;
      // –ù–µ –∑–∞–º–µ–Ω—è–µ–º wrapper, –∞ –¥–æ–±–∞–≤–ª—è–µ–º overlay
      wrapper.style.position = 'relative';
      wrapper.innerHTML = canvas.outerHTML + `
        <div class="chart-error-overlay" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; 
             display: flex; align-items: center; justify-content: center; 
             background: rgba(255,255,255,0.9); backdrop-filter: blur(2px);">
          <div class="chart-error" style="text-align: center;">
            <i class="error-icon">‚ö†Ô∏è</i>
            <p>${message}</p>
          </div>
        </div>
      `;
    }
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑ –ø—É—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –±–µ–∑ –∑–∞–º–µ–Ω—ã canvas
   */
  showEmptyChart(canvasId, message) {
    const canvas = document.getElementById(canvasId);
    if (canvas) {
      const wrapper = canvas.closest('.chart-wrapper') || canvas.parentElement;
      wrapper.style.position = 'relative';
      wrapper.innerHTML = canvas.outerHTML + `
        <div class="chart-empty-overlay" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; 
             display: flex; align-items: center; justify-content: center; 
             background: rgba(248,249,250,0.9);">
          <div class="chart-empty" style="text-align: center; color: #6c757d;">
            <i class="empty-icon">üì≠</i>
            <p>${message}</p>
          </div>
        </div>
      `;
    }
  }

  /**
   * –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
   */
  showLoading(show) {
    this.isLoading = show;
    const loadingIndicator = document.getElementById('loading-indicator');
    if (loadingIndicator) {
      loadingIndicator.style.display = show ? 'block' : 'none';
    }

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
    const controls = document.querySelectorAll('#date-range, #export-data');
    controls.forEach(control => {
      control.disabled = show;
    });
  }

  /**
   * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
   */
  showError(message) {
    console.error('üìä Dashboard Error:', message);
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è retention –≥—Ä–∞—Ñ–∏–∫–∞
   */
  getRetentionColor(index, alpha = 1) {
    const colors = [
      `rgba(255, 107, 107, ${alpha})`,
      `rgba(78, 205, 196, ${alpha})`,
      `rgba(69, 183, 209, ${alpha})`,
      `rgba(150, 206, 180, ${alpha})`,
      `rgba(255, 234, 167, ${alpha})`,
      `rgba(221, 160, 221, ${alpha})`
    ];
    return colors[index % colors.length];
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  setupEventListeners() {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
    const periodSelect = document.getElementById('date-range');
    if (periodSelect) {
      periodSelect.addEventListener('change', (e) => {
        if (!this.isLoading) {
          this.currentPeriod = e.target.value;
          this.loadDashboardData();
        }
      });
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    const exportBtn = document.getElementById('export-data');
    if (exportBtn) {
      exportBtn.addEventListener('click', () => this.exportData());
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
    const refreshBtn = document.getElementById('refresh-dashboard');
    if (refreshBtn) {
      refreshBtn.addEventListener('click', () => {
        if (!this.isLoading) {
          this.loadDashboardData();
        }
      });
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
   */
  startAutoRefresh() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(() => {
      if (!this.isLoading) {
        console.log('üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞...');
        this.loadDashboardData();
      }
    }, 5 * 60 * 1000);
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–û: –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º URL
   */
  async exportData() {
    try {
      this.showLoading(true);
      const data = await this.fetchDashboardStats();
      
      const blob = new Blob([JSON.stringify(data, null, 2)], { 
        type: 'application/json' 
      });
      
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `reader-analytics-${new Date().toISOString().split('T')[0]}.json`;
      a.click();
      URL.revokeObjectURL(url);
      
      console.log('üìä –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('üìä –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
      this.showError('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      this.showLoading(false);
    }
  }

  /**
   * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
   */
  destroy() {
    this.charts.forEach((chart, chartId) => {
      this.destroyChart(chartId);
    });
    this.charts.clear();
    console.log('üìä –î–∞—à–±–æ—Ä–¥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  console.log('üìä DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞...');
  window.readerDashboard = new ReaderDashboard();
});

// Cleanup –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
  if (window.readerDashboard) {
    window.readerDashboard.destroy();
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = ReaderDashboard;
}
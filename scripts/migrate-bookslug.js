/**
 * @fileoverview Migration Script: Backfill bookSlug for existing WeeklyReport recommendations
 * @description –î–æ–±–∞–≤–ª—è–µ—Ç bookSlug –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—è —Å BookCatalog –ø–æ title+author
 * @author Reader Bot Team
 * 
 * Usage:
 *   node scripts/migrate-bookslug.js [--dry-run] [--limit=N]
 * 
 * Options:
 *   --dry-run: –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
 *   --limit=N: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ N –æ—Ç—á–µ—Ç–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 */

const mongoose = require('mongoose');

// Load environment
require('dotenv').config();

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏ (transliteration + normalization)
 * @param {string} title - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
 * @returns {string} –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π slug
 */
function generateSlugFromTitle(title) {
  if (!title) return 'unknown-book';
  
  // Transliteration map for Cyrillic to Latin
  const cyrillicMap = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
    '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
    '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
    '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
    '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
  };
  
  return title
    .toString()
    .toLowerCase()
    .replace(/[–∞-—è]/g, (char) => cyrillicMap[char] || char)
    .replace(/[^a-z0-9\s-]/g, '') // —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
    .replace(/\s+/g, '-')         // –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
    .replace(/\-+/g, '-')         // –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Ñ–∏—Å–æ–≤ ‚Äî –æ–¥–∏–Ω –¥–µ—Ñ–∏—Å
    .replace(/^-+|-+$/g, '')      // –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
    .substring(0, 50);            // –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
}

/**
 * Deterministic mapping –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–Ω–∏–≥ (–∏–∑ fallback –ª–æ–≥–∏–∫–∏)
 */
const KNOWN_BOOK_SLUGS = {
  '–†–∞–∑–±–æ—Ä "–ò—Å–∫—É—Å—Å—Ç–≤–æ –ª—é–±–∏—Ç—å" –≠—Ä–∏—Ö–∞ –§—Ä–æ–º–º–∞': 'art_of_loving',
  '"–ü–∏—Å—å–º–∞ –∫ –º–æ–ª–æ–¥–æ–º—É –ø–æ—ç—Ç—É" –†–∏–ª—å–∫–µ': 'letters_to_young_poet',
  '–ö—É—Ä—Å "–ë—ã—Ç—å —Å–æ–±–æ–π"': 'be_yourself_course',
  '–ö—É—Ä—Å "–ú—É–¥—Ä–∞—è –º–∞–º–∞"': 'wise_mother_course',
  '"–ú–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏–Ω—Ü" —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏': 'little_prince'
};

async function migrate() {
  const args = process.argv.slice(2);
  const isDryRun = args.includes('--dry-run');
  const limitMatch = args.find(arg => arg.startsWith('--limit='));
  const limit = limitMatch ? parseInt(limitMatch.split('=')[1]) : null;
  
  console.log('üìã Starting bookSlug migration for WeeklyReport recommendations...');
  console.log(`üìä Mode: ${isDryRun ? 'DRY RUN' : 'LIVE UPDATE'}`);
  if (limit) console.log(`üìä Limit: ${limit} reports`);
  
  try {
    // Connect to MongoDB
    const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/reader-bot';
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connected to MongoDB');
    
    // Load models
    const WeeklyReport = require('../server/models/weeklyReport');
    const BookCatalog = require('../server/models/BookCatalog');
    
    // Get all catalog books for matching
    const catalogBooks = await BookCatalog.find({ isActive: true }).lean();
    console.log(`üìö Loaded ${catalogBooks.length} books from catalog`);
    
    // Build lookup maps for fast matching
    const titleAuthorMap = new Map();
    const titleOnlyMap = new Map();
    
    catalogBooks.forEach(book => {
      // Map by title + author
      if (book.author) {
        const key = `${book.title.toLowerCase().trim()}::${book.author.toLowerCase().trim()}`;
        titleAuthorMap.set(key, book);
      }
      
      // Map by title only (fallback)
      const titleKey = book.title.toLowerCase().trim();
      if (!titleOnlyMap.has(titleKey)) {
        titleOnlyMap.set(titleKey, book);
      }
    });
    
    console.log(`üîç Built lookup maps: ${titleAuthorMap.size} title+author pairs, ${titleOnlyMap.size} unique titles`);
    
    // Find reports with recommendations missing bookSlug
    const query = {
      'recommendations': {
        $elemMatch: {
          $or: [
            { bookSlug: { $exists: false } },
            { bookSlug: null },
            { bookSlug: '' }
          ]
        }
      }
    };
    
    const reports = await WeeklyReport.find(query).limit(limit || 0);
    console.log(`üìä Found ${reports.length} reports with recommendations missing bookSlug`);
    
    const stats = {
      reportsUpdated: 0,
      recommendationsProcessed: 0,
      catalogMatched: 0,
      knownBookMatched: 0,
      generatedSlugs: 0,
      skipped: 0
    };
    
    for (const report of reports) {
      let reportUpdated = false;
      
      for (const recommendation of report.recommendations) {
        // Skip if already has bookSlug
        if (recommendation.bookSlug && recommendation.bookSlug.trim() !== '') {
          stats.skipped++;
          continue;
        }
        
        stats.recommendationsProcessed++;
        
        const title = recommendation.title?.trim();
        const author = recommendation.author?.trim();
        
        if (!title) {
          console.warn(`‚ö†Ô∏è Recommendation without title in report ${report._id}`);
          recommendation.bookSlug = 'unknown-book';
          stats.generatedSlugs++;
          reportUpdated = true;
          continue;
        }
        
        let matchedBook = null;
        let matchType = '';
        
        // 1. Try exact match with catalog by title + author
        if (author) {
          const key = `${title.toLowerCase()}::${author.toLowerCase()}`;
          matchedBook = titleAuthorMap.get(key);
          if (matchedBook) {
            matchType = 'catalog-title-author';
            stats.catalogMatched++;
          }
        }
        
        // 2. Try match with catalog by title only
        if (!matchedBook) {
          matchedBook = titleOnlyMap.get(title.toLowerCase());
          if (matchedBook) {
            matchType = 'catalog-title-only';
            stats.catalogMatched++;
          }
        }
        
        // 3. Try known book mapping
        if (!matchedBook) {
          const knownSlug = KNOWN_BOOK_SLUGS[title];
          if (knownSlug) {
            recommendation.bookSlug = knownSlug;
            matchType = 'known-book';
            stats.knownBookMatched++;
            reportUpdated = true;
            continue;
          }
        }
        
        // 4. If found in catalog, use its data
        if (matchedBook) {
          recommendation.bookSlug = matchedBook.bookSlug;
          
          // Also backfill other fields if missing
          if (!recommendation.author && matchedBook.author) {
            recommendation.author = matchedBook.author;
          }
          if (!recommendation.priceByn && matchedBook.priceByn) {
            recommendation.priceByn = matchedBook.priceByn;
          }
          
          matchType += '-with-data';
          reportUpdated = true;
          continue;
        }
        
        // 5. Generate slug from title as last resort
        const generatedSlug = generateSlugFromTitle(title);
        recommendation.bookSlug = generatedSlug;
        matchType = 'generated';
        stats.generatedSlugs++;
        reportUpdated = true;
        
        console.log(`üìù Generated slug "${generatedSlug}" for "${title}" in report ${report._id}`);
      }
      
      // Save the report if it was updated
      if (reportUpdated && !isDryRun) {
        await report.save();
        stats.reportsUpdated++;
      } else if (reportUpdated && isDryRun) {
        stats.reportsUpdated++;
        console.log(`üîç [DRY RUN] Would update report ${report._id}`);
      }
    }
    
    // Print summary
    console.log('\nüìä Migration Summary:');
    console.log('‚ïê'.repeat(50));
    console.log(`üìã Reports processed: ${reports.length}`);
    console.log(`üìã Reports updated: ${stats.reportsUpdated}`);
    console.log(`üìã Recommendations processed: ${stats.recommendationsProcessed}`);
    console.log(`üìã Catalog matches: ${stats.catalogMatched}`);
    console.log(`üìã Known book matches: ${stats.knownBookMatched}`);
    console.log(`üìã Generated slugs: ${stats.generatedSlugs}`);
    console.log(`üìã Skipped (already have bookSlug): ${stats.skipped}`);
    
    if (isDryRun) {
      console.log('\nüîç This was a DRY RUN - no changes were saved');
      console.log('üí° Run without --dry-run to apply changes');
    } else {
      console.log('\n‚úÖ Migration completed successfully');
    }
    
  } catch (error) {
    console.error('‚ùå Migration failed:', error);
    process.exit(1);
  } finally {
    await mongoose.disconnect();
    console.log('üìã Disconnected from MongoDB');
  }
}

// Handle script being run directly
if (require.main === module) {
  migrate().catch(error => {
    console.error('‚ùå Migration error:', error);
    process.exit(1);
  });
}

module.exports = { migrate, generateSlugFromTitle, KNOWN_BOOK_SLUGS };
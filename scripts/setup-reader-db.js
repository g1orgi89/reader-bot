#!/usr/bin/env node

/**
 * Setup script for Reader Bot database
 * –°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é –ë–î reader_bot –∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * üìñ Separate from Shrooms Support Bot database
 */

const mongoose = require('mongoose');
const path = require('path');

// Load environment variables
require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

const DB_NAME = process.env.DB_NAME || 'reader_bot';
const MONGODB_URI = process.env.MONGODB_URI || `mongodb://localhost:27017/${DB_NAME}`;

async function setupReaderDatabase() {
    console.log('üìñ Setting up Reader Bot database...');
    console.log(`üìñ Database: ${DB_NAME}`);
    console.log(`üìñ URI: ${MONGODB_URI}`);
    
    try {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ reader_bot –±–∞–∑–µ
        await mongoose.connect(MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
            dbName: DB_NAME
        });
        
        console.log(`‚úÖ Connected to MongoDB: ${DB_NAME}`);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è Reader Bot
        const collections = [
            'userprofiles',
            'quotes', 
            'weeklyreports',
            'monthlyreports',
            'tickets',
            'prompts',
            'achievements',
            'utmclicks',
            'promocodeusages'
        ];

        for (const collectionName of collections) {
            try {
                const collection = mongoose.connection.db.collection(collectionName);
                
                // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã
                await collection.createIndex({ createdAt: 1 });
                
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è Reader Bot –∫–æ–ª–ª–µ–∫—Ü–∏–π
                if (collectionName === 'userprofiles') {
                    await collection.createIndex({ userId: 1 }, { unique: true });
                    await collection.createIndex({ telegramUsername: 1 });
                    await collection.createIndex({ email: 1 });
                }
                
                if (collectionName === 'quotes') {
                    await collection.createIndex({ userId: 1 });
                    await collection.createIndex({ weekNumber: 1 });
                    await collection.createIndex({ category: 1 });
                    await collection.createIndex({ author: 1 });
                }
                
                if (collectionName === 'weeklyreports') {
                    await collection.createIndex({ userId: 1 });
                    await collection.createIndex({ weekNumber: 1, year: 1 });
                }
                
                if (collectionName === 'monthlyreports') {
                    await collection.createIndex({ userId: 1 });
                    await collection.createIndex({ month: 1, year: 1 });
                }
                
                console.log(`‚úÖ Created collection: ${collectionName}`);
            } catch (error) {
                console.log(`‚ö†Ô∏è  Collection ${collectionName} might already exist: ${error.message}`);
            }
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –¥–ª—è Reader Bot
        const adminUser = {
            username: process.env.ADMIN_USERNAME || 'reader_admin',
            email: 'admin@reader-bot.com',
            role: 'admin',
            project: 'reader_bot',
            createdAt: new Date()
        };

        try {
            await mongoose.connection.db.collection('admins').insertOne(adminUser);
            console.log(`‚úÖ Created admin user: ${adminUser.username}`);
        } catch (error) {
            console.log(`‚ö†Ô∏è  Admin user might already exist: ${error.message}`);
        }

        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è Reader Bot
        const defaultPrompts = [
            {
                name: 'Reader Basic System Prompt',
                type: 'basic',
                language: 'ru',
                content: `–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ê–Ω–Ω—ã –ë—É—Å–µ–ª –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å". 

–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ª—é–¥—è–º —Å –∏—Ö —Ü–∏—Ç–∞—Ç–∞–º–∏ –∏–∑ –∫–Ω–∏–≥:
- –û—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ "–í—ã" 
- –¢–æ–Ω —Å–¥–µ—Ä–∂–∞–Ω–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π
- –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã –ê–Ω–Ω—ã: "–•–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ - —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏!"
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Ü–∏—Ç–∞—Ç—ã —Å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—à—å –∫–Ω–∏–∂–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã –ê–Ω–Ω—ã –ø—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–µ–º–∞—Ö

–¢—ã –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π - –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π –æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ.`,
                isActive: true,
                platform: 'telegram',
                createdAt: new Date()
            },
            {
                name: 'Reader Web System Prompt',
                type: 'basic',
                language: 'ru',
                content: `–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ê–Ω–Ω—ã –ë—É—Å–µ–ª –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ "–ß–∏—Ç–∞—Ç–µ–ª—å".

–ü–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ü–∏—Ç–∞—Ç –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∫–Ω–∏–≥.
–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–∞ "–í—ã".

–¢—ã –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π - —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏–π.`,
                isActive: true,
                platform: 'web',
                createdAt: new Date()
            }
        ];

        for (const prompt of defaultPrompts) {
            try {
                await mongoose.connection.db.collection('prompts').insertOne(prompt);
                console.log(`‚úÖ Created prompt: ${prompt.name}`);
            } catch (error) {
                console.log(`‚ö†Ô∏è  Prompt might already exist: ${error.message}`);
            }
        }

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const testUser = {
            userId: 'test_user_12345',
            telegramUsername: 'test_reader',
            name: '–¢–µ—Å—Ç–æ–≤—ã–π –ß–∏—Ç–∞—Ç–µ–ª—å',
            email: 'test@reader-bot.com',
            testResults: {
                name: '–¢–µ—Å—Ç–æ–≤—ã–π –ß–∏—Ç–∞—Ç–µ–ª—å',
                lifestyle: '–ò–∑—É—á–∞—é –º–∏—Ä –∏ —Å–µ–±—è',
                timeForSelf: '–ß–∏—Ç–∞—é –∫–Ω–∏–≥–∏',
                priorities: '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ',
                readingFeelings: '–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ',
                closestPhrase: '–ö–Ω–∏–≥–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –º–∏—Ä',
                readingTime: '1-2 —á–∞—Å–∞ –≤ –¥–µ–Ω—å'
            },
            source: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
            isOnboardingComplete: true,
            registeredAt: new Date()
        };

        try {
            await mongoose.connection.db.collection('userprofiles').insertOne(testUser);
            console.log(`‚úÖ Created test user: ${testUser.name}`);
        } catch (error) {
            console.log(`‚ö†Ô∏è  Test user might already exist: ${error.message}`);
        }

        console.log('\nüéâ Reader Bot database setup complete!');
        console.log('\nüìñ Database ready for Reader Bot:');
        console.log(`   - Database: ${DB_NAME}`);
        console.log(`   - Collections: ${collections.length} created`);
        console.log(`   - Admin user: ${adminUser.username}`);
        console.log(`   - Test user: ${testUser.name}`);
        console.log('\nüìã Next steps:');
        console.log('   1. Update your .env file with correct API keys');
        console.log('   2. Start Reader Bot: npm run reader:start');
        console.log('   3. Access admin panel: http://localhost:3002/reader-admin');
        
        process.exit(0);

    } catch (error) {
        console.error('‚ùå Database setup failed:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    setupReaderDatabase();
}

module.exports = setupReaderDatabase;
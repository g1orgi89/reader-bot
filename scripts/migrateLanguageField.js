/**
 * Migration Script - Change language field from 'auto' to 'none'
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è language —Å 'auto' –Ω–∞ 'none'
 * @file scripts/migrateLanguageField.js
 */

require('dotenv').config();
const mongoose = require('mongoose');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–¥–µ–ª–∏ –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
const KnowledgeDocument = require('../server/models/knowledge');
const Prompt = require('../server/models/prompt');

/**
 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
 */
async function connectToMongoDB() {
  try {
    const mongoUri = process.env.MONGODB_URI;
    if (!mongoUri) {
      throw new Error('MONGODB_URI –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }

    await mongoose.connect(mongoUri);
    console.log('üçÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error.message);
    process.exit(1);
  }
}

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ Knowledge: auto ‚Üí none
 */
async function migrateKnowledgeDocuments() {
  console.log('\nüçÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é Knowledge Documents...');
  
  try {
    // –ò—â–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å language: 'auto'
    const documentsWithAuto = await KnowledgeDocument.find({ language: 'auto' });
    console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ ${documentsWithAuto.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å language: 'auto'`);

    if (documentsWithAuto.length === 0) {
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è Knowledge Documents –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å auto');
      return { updated: 0, total: 0 };
    }

    // –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    const updateResult = await KnowledgeDocument.updateMany(
      { language: 'auto' },
      { $set: { language: 'none', updatedAt: new Date() } }
    );

    console.log(`‚úÖ Knowledge Documents –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updateResult.modifiedCount} –∏–∑ ${documentsWithAuto.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const remainingAuto = await KnowledgeDocument.countDocuments({ language: 'auto' });
    if (remainingAuto > 0) {
      console.warn(`‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å auto: ${remainingAuto}`);
    }

    return {
      total: documentsWithAuto.length,
      updated: updateResult.modifiedCount
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ Knowledge Documents:', error.message);
    throw error;
  }
}

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤: auto ‚Üí none
 */
async function migratePrompts() {
  console.log('\nüçÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é Prompts...');
  
  try {
    // –ò—â–µ–º –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã —Å language: 'auto'
    const promptsWithAuto = await Prompt.find({ language: 'auto' });
    console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ ${promptsWithAuto.length} –ø—Ä–æ–º–ø—Ç–æ–≤ —Å language: 'auto'`);

    if (promptsWithAuto.length === 0) {
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è Prompts –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - –Ω–µ—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ —Å auto');
      return { updated: 0, total: 0 };
    }

    // –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    const updateResult = await Prompt.updateMany(
      { language: 'auto' },
      { $set: { language: 'none', updatedAt: new Date() } }
    );

    console.log(`‚úÖ Prompts –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updateResult.modifiedCount} –∏–∑ ${promptsWithAuto.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const remainingAuto = await Prompt.countDocuments({ language: 'auto' });
    if (remainingAuto > 0) {
      console.warn(`‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–º–ø—Ç—ã —Å auto: ${remainingAuto}`);
    }

    return {
      total: promptsWithAuto.length,
      updated: updateResult.modifiedCount
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ Prompts:', error.message);
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
 */
async function verifyMigration() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏...');
  
  try {
    const [
      knowledgeTotal,
      knowledgeNone,
      knowledgeAuto,
      promptTotal,
      promptNone,
      promptAuto
    ] = await Promise.all([
      KnowledgeDocument.countDocuments(),
      KnowledgeDocument.countDocuments({ language: 'none' }),
      KnowledgeDocument.countDocuments({ language: 'auto' }),
      Prompt.countDocuments(),
      Prompt.countDocuments({ language: 'none' }),
      Prompt.countDocuments({ language: 'auto' })
    ]);

    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Knowledge Documents:');
    console.log(`   –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${knowledgeTotal}`);
    console.log(`   –° language='none': ${knowledgeNone}`);
    console.log(`   –° language='auto': ${knowledgeAuto} ${knowledgeAuto > 0 ? '‚ùå' : '‚úÖ'}`);

    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Prompts:');
    console.log(`   –í—Å–µ–≥–æ –ø—Ä–æ–º–ø—Ç–æ–≤: ${promptTotal}`);
    console.log(`   –° language='none': ${promptNone}`);
    console.log(`   –° language='auto': ${promptAuto} ${promptAuto > 0 ? '‚ùå' : '‚úÖ'}`);

    return {
      knowledge: { total: knowledgeTotal, none: knowledgeNone, auto: knowledgeAuto },
      prompts: { total: promptTotal, none: promptNone, auto: promptAuto }
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    throw error;
  }
}

/**
 * –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è): none ‚Üí auto
 */
async function rollbackMigration() {
  console.log('\nüîÑ –û–¢–ö–ê–¢: –í–æ–∑–≤—Ä–∞—â–∞–µ–º language —Å none –Ω–∞ auto...');
  
  try {
    const [knowledgeRollback, promptRollback] = await Promise.all([
      KnowledgeDocument.updateMany(
        { language: 'none' },
        { $set: { language: 'auto', updatedAt: new Date() } }
      ),
      Prompt.updateMany(
        { language: 'none' },
        { $set: { language: 'auto', updatedAt: new Date() } }
      )
    ]);

    console.log(`üîÑ Knowledge Documents –æ—Ç–∫–∞—Ç: ${knowledgeRollback.modifiedCount}`);
    console.log(`üîÑ Prompts –æ—Ç–∫–∞—Ç: ${promptRollback.modifiedCount}`);

    return {
      knowledge: knowledgeRollback.modifiedCount,
      prompts: promptRollback.modifiedCount
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ:', error.message);
    throw error;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
 */
async function main() {
  console.log('üçÑ Shrooms Migration: language field auto ‚Üí none\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const args = process.argv.slice(2);
  const isRollback = args.includes('--rollback');
  const isVerifyOnly = args.includes('--verify');

  try {
    await connectToMongoDB();

    if (isRollback) {
      // –†–µ–∂–∏–º –æ—Ç–∫–∞—Ç–∞
      const rollbackResult = await rollbackMigration();
      await verifyMigration();
      console.log('\nüîÑ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
    } else if (isVerifyOnly) {
      // –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, –±–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–∏
      await verifyMigration();
      console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } else {
      // –û—Å–Ω–æ–≤–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è
      const knowledgeResult = await migrateKnowledgeDocuments();
      const promptResult = await migratePrompts();
      const verification = await verifyMigration();

      console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      console.log('üìã –ò—Ç–æ–≥–∏:');
      console.log(`   Knowledge Documents: ${knowledgeResult.updated}/${knowledgeResult.total} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
      console.log(`   Prompts: ${promptResult.updated}/${promptResult.total} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
      
      if (verification.knowledge.auto > 0 || verification.prompts.auto > 0) {
        console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û—Å—Ç–∞–ª–∏—Å—å –∑–∞–ø–∏—Å–∏ —Å language="auto"!');
        console.log('   –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏');
      }
    }

  } catch (error) {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    process.exit(1);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  migrateKnowledgeDocuments,
  migratePrompts,
  verifyMigration,
  rollbackMigration
};
/**
 * @fileoverview Conversion script to prepare book catalog import from csvjson.json
 * @description Converts the CSV-JSON data to BookCatalog format for import
 * @author Reader Bot Team
 */

const fs = require('fs');
const path = require('path');

/**
 * Generate slug from title
 * @param {string} title - Book title
 * @returns {string} URL-safe slug
 */
function generateSlug(title) {
  // Transliterate Cyrillic to Latin
  const transliterationMap = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo', '–∂': 'zh',
    '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o',
    '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts',
    '—á': 'ch', '—à': 'sh', '—â': 'sch', '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
  };
  
  return title
    .toLowerCase()
    .split('')
    .map(char => transliterationMap[char] || char)
    .join('')
    .replace(/[^a-z0-9\s-]/g, '') // Remove non-latin chars except spaces and hyphens
    .replace(/\s+/g, '_') // Replace spaces with underscores
    .replace(/-+/g, '_') // Replace hyphens with underscores  
    .replace(/_+/g, '_') // Collapse multiple underscores
    .replace(/^_|_$/g, ''); // Remove leading/trailing underscores
}

/**
 * Map categories from CSV format to schema enum
 * @param {string} themesStr - Comma-separated themes from CSV
 * @returns {string[]} Array of mapped categories
 */
function mapCategories(themesStr) {
  if (!themesStr) return ['–ü–û–ò–°–ö –°–ï–ë–Ø']; // Default fallback
  
  const themes = themesStr.toLowerCase();
  const categories = [];
  
  // Mapping rules based on keywords
  if (themes.includes('–∫—Ä–∏–∑–∏—Å') || themes.includes('—Ç—Ä—É–¥–Ω–æ—Å—Ç–∏') || themes.includes('—Å—Ç—Ä–µ—Å—Å')) {
    categories.push('–ö–†–ò–ó–ò–°–´');
  }
  if (themes.includes('–∂–µ–Ω—â–∏–Ω') || themes.includes('—è ‚Äî –∂–µ–Ω—â–∏–Ω–∞')) {
    categories.push('–Ø ‚Äî –ñ–ï–ù–©–ò–ù–ê');
  }
  if (themes.includes('–ª—é–±–æ–≤') || themes.includes('–ª—é–±–∏–º—ã–µ')) {
    categories.push('–õ–Æ–ë–û–í–¨');
  }
  if (themes.includes('–æ—Ç–Ω–æ—à–µ–Ω–∏—è') || themes.includes('—Å–µ–º—å')) {
    categories.push('–û–¢–ù–û–®–ï–ù–ò–Ø');
  }
  if (themes.includes('–¥–µ–Ω—å–≥–∏') || themes.includes('—Ñ–∏–Ω–∞–Ω—Å')) {
    categories.push('–î–ï–ù–¨–ì–ò');
  }
  if (themes.includes('–æ–¥–∏–Ω–æ—á–µ—Å—Ç')) {
    categories.push('–û–î–ò–ù–û–ß–ï–°–¢–í–û');
  }
  if (themes.includes('—Å–º–µ—Ä—Ç')) {
    categories.push('–°–ú–ï–†–¢–¨');
  }
  if (themes.includes('—Å–µ–º–µ–π–Ω') || themes.includes('—Å–µ–º—å—è')) {
    categories.push('–°–ï–ú–ï–ô–ù–´–ï –û–¢–ù–û–®–ï–ù–ò–Ø');
  }
  if (themes.includes('—Å–º—ã—Å–ª –∂–∏–∑–Ω–∏') || themes.includes('—Å–º—ã—Å–ª')) {
    categories.push('–°–ú–´–°–õ –ñ–ò–ó–ù–ò');
  }
  if (themes.includes('—Å—á–∞—Å—Ç')) {
    categories.push('–°–ß–ê–°–¢–¨–ï');
  }
  if (themes.includes('–≤—Ä–µ–º—è') || themes.includes('–ø—Ä–∏–≤—ã—á–∫') || themes.includes('–ª–µ–Ω—å')) {
    categories.push('–í–†–ï–ú–Ø –ò –ü–†–ò–í–´–ß–ö–ò');
  }
  if (themes.includes('–¥–æ–±—Ä–æ') || themes.includes('–∑–ª–æ')) {
    categories.push('–î–û–ë–†–û –ò –ó–õ–û');
  }
  if (themes.includes('–æ–±—â–µ—Å—Ç–≤–æ')) {
    categories.push('–û–ë–©–ï–°–¢–í–û');
  }
  if (themes.includes('–ø–æ–∏—Å–∫ —Å–µ–±—è') || themes.includes('—Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å') || themes.includes('–Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å')) {
    categories.push('–ü–û–ò–°–ö –°–ï–ë–Ø');
  }
  
  // If no categories matched, default to universal category
  return categories.length > 0 ? categories : ['–ü–û–ò–°–ö –°–ï–ë–Ø'];
}

/**
 * Parse target themes from the themes string
 * @param {string} themesStr - Comma-separated themes from CSV
 * @returns {string[]} Array of target themes
 */
function parseTargetThemes(themesStr) {
  if (!themesStr) return [];
  
  return themesStr
    .split(',')
    .map(theme => theme.trim())
    .filter(theme => theme.length > 0)
    .slice(0, 10); // Limit to 10 themes max
}

/**
 * Convert CSV-JSON data to BookCatalog format
 * @param {Object[]} csvData - Data from csvjson.json
 * @returns {Object[]} Array of books in BookCatalog format
 */
function convertToBookCatalog(csvData) {
  const books = [];
  const usedSlugs = new Set();
  
  for (const item of csvData) {
    try {
      // Skip invalid entries
      if (!item['–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–±–æ—Ä–∞'] || !item['–¶–µ–Ω–∞ BYN']) {
        console.warn('Skipping invalid entry:', item);
        continue;
      }
      
      const title = item['–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–±–æ—Ä–∞'].trim();
      const author = item['–ê–≤—Ç–æ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–Ω–∏–≥–∏']?.trim() || null;
      const description = item['–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —á–µ–º —Ä–∞–∑–±–æ—Ä)']?.trim() || '';
      const priceByn = parseInt(item['–¶–µ–Ω–∞ BYN']);
      const purchaseUrl = item['–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É']?.trim() || null;
      const themesStr = item['–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã (3-5 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤)']?.trim() || '';
      const targetAudience = item['–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è']?.trim() || '';
      
      // Generate unique slug
      let baseSlug = generateSlug(title);
      let bookSlug = baseSlug;
      let counter = 1;
      
      while (usedSlugs.has(bookSlug)) {
        bookSlug = `${baseSlug}_${counter}`;
        counter++;
      }
      usedSlugs.add(bookSlug);
      
      // Map categories and target themes
      const categories = mapCategories(themesStr);
      const targetThemes = parseTargetThemes(themesStr);
      
      // Create reasoning from description and target audience
      let reasoning = description;
      if (reasoning.length > 180) {
        reasoning = reasoning.substring(0, 177) + '...';
      }
      if (!reasoning) {
        reasoning = `–†–∞–∑–±–æ—Ä –∫–Ω–∏–≥–∏ "${title}" –¥–ª—è —á–∏—Ç–∞—Ç–µ–ª–µ–π`;
      }
      
      const book = {
        title,
        author,
        description: description || `–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∫–Ω–∏–≥–∏ "${title}"`,
        price: `$${Math.round(priceByn / 3)}`, // Rough BYN to USD conversion
        priceByn,
        categories,
        targetThemes,
        bookSlug,
        purchaseUrl, // This is the key new field
        isActive: true,
        priority: 5, // Default priority
        reasoning: reasoning || `–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–º—ã ${categories[0].toLowerCase()}`
      };
      
      books.push(book);
      
    } catch (error) {
      console.error('Error processing item:', item, error);
    }
  }
  
  return books;
}

/**
 * Main function to process the conversion
 */
async function main() {
  try {
    const inputFile = path.join(__dirname, '..', 'csvjson.json');
    const outputFile = path.join(__dirname, '..', 'data', 'bookCatalog.import.json');
    
    // Ensure data directory exists
    const dataDir = path.dirname(outputFile);
    if (!fs.existsSync(dataDir)) {
      fs.mkdirSync(dataDir, { recursive: true });
    }
    
    // Read input file
    console.log('Reading csvjson.json...');
    const csvData = JSON.parse(fs.readFileSync(inputFile, 'utf8'));
    
    // Convert data
    console.log(`Converting ${csvData.length} entries...`);
    const books = convertToBookCatalog(csvData);
    
    // Write output file
    const outputData = { books };
    fs.writeFileSync(outputFile, JSON.stringify(outputData, null, 2), 'utf8');
    
    console.log(`‚úÖ Conversion completed!`);
    console.log(`   Input: ${csvData.length} entries`);
    console.log(`   Output: ${books.length} books`);
    console.log(`   File: ${outputFile}`);
    
    // Show sample of converted data
    console.log('\nüìã Sample converted entry:');
    console.log(JSON.stringify(books[0], null, 2));
    
  } catch (error) {
    console.error('‚ùå Conversion failed:', error);
    process.exit(1);
  }
}

// Run the script
if (require.main === module) {
  main();
}

module.exports = { convertToBookCatalog, generateSlug, mapCategories };
#!/usr/bin/env node

/**
 * @fileoverview –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
 * @author g1orgi89
 */

require('dotenv').config();
const axios = require('axios');

const API_BASE = process.env.API_BASE || 'http://localhost:3000/api';
const TEST_USER_ID = process.env.TEST_USER_ID || '123456789';

/**
 * –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
 */
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(color, message) {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

/**
 * –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
const testQuotes = [
  {
    text: "–í –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ ‚Äî —Ü–µ–ª–∞—è –∂–∏–∑–Ω—å",
    author: "–ú–∞—Ä–∏–Ω–∞ –¶–≤–µ—Ç–∞–µ–≤–∞"
  },
  {
    text: "–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ª—é–±–∏—Ç—å",
    author: "–≠—Ä–∏—Ö –§—Ä–æ–º–º"
  },
  {
    text: "–°—á–∞—Å—Ç—å–µ –≤–Ω—É—Ç—Ä–∏ –Ω–∞—Å",
    author: "–ë—É–¥–¥–∞"
  },
  {
    text: "–•–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ - —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏!",
    author: "–ê–Ω–Ω–∞ –ë—É—Å–µ–ª"
  },
  {
    text: "–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∫ —Å–∞–º–æ–º—É —Å–µ–±–µ"
  }
];

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
class WeeklyReportsTest {
  constructor() {
    this.results = {
      passed: 0,
      failed: 0,
      total: 0
    };
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞
   */
  async makeRequest(method, endpoint, data = null) {
    try {
      const config = {
        method,
        url: `${API_BASE}${endpoint}`,
        headers: {
          'Content-Type': 'application/json'
        }
      };

      if (data) {
        config.data = data;
      }

      const response = await axios(config);
      return { success: true, data: response.data, status: response.status };
    } catch (error) {
      return {
        success: false,
        error: error.response?.data || error.message,
        status: error.response?.status || 500
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
   */
  assert(condition, testName, details = '') {
    this.results.total++;
    
    if (condition) {
      this.results.passed++;
      log('green', `‚úÖ PASS: ${testName}`);
      if (details) log('blue', `   ${details}`);
    } else {
      this.results.failed++;
      log('red', `‚ùå FAIL: ${testName}`);
      if (details) log('yellow', `   ${details}`);
    }
  }

  /**
   * –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
   */
  async testHealthCheck() {
    log('bold', '\nüìä –¢–µ—Å—Ç 1: Health Check');
    
    const result = await this.makeRequest('GET', '/health');
    
    this.assert(
      result.success && result.status === 200,
      'API –¥–æ—Å—Ç—É–ø–µ–Ω',
      result.success ? `Status: ${result.status}` : `Error: ${result.error}`
    );

    if (result.success) {
      const health = result.data;
      
      this.assert(
        health.services?.cron === 'ok',
        'CronService —Ä–∞–±–æ—Ç–∞–µ—Ç',
        `Cron status: ${health.services?.cron}`
      );

      this.assert(
        health.cronService?.isStarted === true,
        'Cron –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã',
        `Total jobs: ${health.cronService?.totalJobs}`
      );
    }
  }

  /**
   * –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ cron –∑–∞–¥–∞—á
   */
  async testCronStatus() {
    log('bold', '\n‚è∞ –¢–µ—Å—Ç 2: Cron Status');
    
    const result = await this.makeRequest('GET', '/reports/cron/status');
    
    this.assert(
      result.success && result.status === 200,
      '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ cron –∑–∞–¥–∞—á',
      result.success ? 'API –æ—Ç–≤–µ—á–∞–µ—Ç' : `Error: ${result.error}`
    );

    if (result.success) {
      const cronData = result.data;
      
      this.assert(
        cronData.data?.status?.isStarted === true,
        'Cron —Å–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω',
        `Jobs: ${cronData.data?.status?.totalJobs}`
      );

      this.assert(
        Object.keys(cronData.data?.schedule || {}).length >= 5,
        '–í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã',
        `Scheduled jobs: ${Object.keys(cronData.data?.schedule || {}).join(', ')}`
      );
    }
  }

  /**
   * –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Telegram
   */
  async testTelegramStatus() {
    log('bold', '\nüì± –¢–µ—Å—Ç 3: Telegram Status');
    
    const result = await this.makeRequest('GET', '/reports/telegram/status');
    
    this.assert(
      result.success && result.status === 200,
      '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Telegram',
      result.success ? 'API –æ—Ç–≤–µ—á–∞–µ—Ç' : `Error: ${result.error}`
    );

    if (result.success) {
      const telegramData = result.data;
      
      this.assert(
        telegramData.data?.isAvailable === true,
        'Telegram bot –¥–æ—Å—Ç—É–ø–µ–Ω',
        telegramData.data?.botInfo ? 
          `Bot: @${telegramData.data.botInfo.username}` : 
          'Bot info unavailable'
      );
    }
  }

  /**
   * –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async testCreateTestData() {
    log('bold', '\nüóÑÔ∏è  –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log('blue', '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –ó–¥–µ—Å—å –±—ã –±—ã–ª –∫–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ API, –Ω–æ —É –Ω–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ endpoint
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    this.assert(
      true,
      '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤',
      `User ID: ${TEST_USER_ID}`
    );

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ü–∏—Ç–∞—Ç
    log('blue', '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ü–∏—Ç–∞—Ç...');
    
    this.assert(
      testQuotes.length >= 3,
      '–¢–µ—Å—Ç–æ–≤—ã–µ —Ü–∏—Ç–∞—Ç—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã',
      `Quotes: ${testQuotes.length}`
    );
  }

  /**
   * –¢–µ—Å—Ç 5: –†—É—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
   */
  async testManualReportGeneration() {
    log('bold', '\nüìù –¢–µ—Å—Ç 5: –†—É—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞');
    
    const requestData = {
      userId: TEST_USER_ID
    };

    const result = await this.makeRequest('POST', '/reports/weekly/generate', requestData);
    
    this.assert(
      result.success && result.status === 200,
      '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–∞',
      result.success ? 
        '–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω' : 
        `Error: ${JSON.stringify(result.error)}`
    );

    if (result.success) {
      const reportData = result.data;
      
      this.assert(
        reportData.success === true,
        '–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç API',
        `Success: ${reportData.success}`
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
      if (reportData.data?.report) {
        this.assert(
          reportData.data.report.userId === TEST_USER_ID,
          '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—Ç—á–µ—Ç–µ',
          `User ID: ${reportData.data.report.userId}`
        );

        this.assert(
          typeof reportData.data.report.weekNumber === 'number',
          '–ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ —É–∫–∞–∑–∞–Ω',
          `Week: ${reportData.data.report.weekNumber}`
        );
      } else {
        this.assert(
          reportData.data?.message?.includes('No report generated'),
          '–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π –Ω–µ–¥–µ–ª–µ',
          reportData.data?.message || 'No message'
        );
      }
    }
  }

  /**
   * –¢–µ—Å—Ç 6: –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
   */
  async testTelegramSending() {
    log('bold', '\nüì§ –¢–µ—Å—Ç 6: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram');
    
    const requestData = {
      userId: TEST_USER_ID
    };

    const result = await this.makeRequest('POST', '/reports/telegram/test', requestData);
    
    this.assert(
      result.success && result.status === 200,
      '–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram',
      result.success ? 
        '–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω' : 
        `Error: ${JSON.stringify(result.error)}`
    );

    if (result.success) {
      const testData = result.data;
      
      this.assert(
        testData.success === true,
        '–£—Å–ø–µ—à–Ω—ã–π —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏',
        `Telegram sent: ${testData.data?.telegramSent}`
      );

      if (testData.data?.reportId) {
        this.assert(
          typeof testData.data.reportId === 'string',
          'ID –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω',
          `Report ID: ${testData.data.reportId}`
        );
      }
    }
  }

  /**
   * –¢–µ—Å—Ç 7: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  async testStatistics() {
    log('bold', '\nüìä –¢–µ—Å—Ç 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤');
    
    const result = await this.makeRequest('GET', '/reports/stats?days=30');
    
    this.assert(
      result.success && result.status === 200,
      '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      result.success ? '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞' : `Error: ${result.error}`
    );

    if (result.success) {
      const statsData = result.data;
      
      this.assert(
        statsData.success === true,
        '–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
        `Data available: ${!!statsData.data}`
      );

      if (statsData.data) {
        this.assert(
          typeof statsData.data.period === 'string',
          '–ü–µ—Ä–∏–æ–¥ —É–∫–∞–∑–∞–Ω',
          `Period: ${statsData.data.period}`
        );

        this.assert(
          typeof statsData.data.totalReports === 'number',
          '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤',
          `Total reports: ${statsData.data.totalReports}`
        );
      }
    }
  }

  /**
   * –¢–µ—Å—Ç 8: –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã
   */
  async testPopularThemes() {
    log('bold', '\nüè∑Ô∏è  –¢–µ—Å—Ç 8: –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã');
    
    const result = await this.makeRequest('GET', '/reports/popular-themes?days=30&limit=5');
    
    this.assert(
      result.success && result.status === 200,
      '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º',
      result.success ? '–¢–µ–º—ã –ø–æ–ª—É—á–µ–Ω—ã' : `Error: ${result.error}`
    );

    if (result.success) {
      const themesData = result.data;
      
      this.assert(
        themesData.success === true,
        '–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç–µ–º',
        `Themes available: ${!!themesData.data}`
      );

      if (themesData.data?.themes) {
        this.assert(
          Array.isArray(themesData.data.themes),
          '–¢–µ–º—ã –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞',
          `Themes count: ${themesData.data.themes.length}`
        );
      }
    }
  }

  /**
   * –¢–µ—Å—Ç 9: –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ–±–∑–æ—Ä
   */
  async testAnalyticsOverview() {
    log('bold', '\nüìà –¢–µ—Å—Ç 9: –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ–±–∑–æ—Ä');
    
    const result = await this.makeRequest('GET', '/reports/analytics/overview?days=30');
    
    this.assert(
      result.success && result.status === 200,
      '–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
      result.success ? '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞' : `Error: ${result.error}`
    );

    if (result.success) {
      const analyticsData = result.data;
      
      this.assert(
        analyticsData.success === true,
        '–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
        `Analytics available: ${!!analyticsData.data}`
      );

      if (analyticsData.data?.overview) {
        this.assert(
          typeof analyticsData.data.overview.totalReports === 'number',
          '–û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã',
          `Total: ${analyticsData.data.overview.totalReports}, Feedback rate: ${analyticsData.data.overview.feedbackRate}%`
        );
      }
    }
  }

  /**
   * –¢–µ—Å—Ç 10: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async testUserReports() {
    log('bold', '\nüë§ –¢–µ—Å—Ç 10: –û—Ç—á–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    const result = await this.makeRequest('GET', `/reports/weekly/${TEST_USER_ID}?limit=5`);
    
    this.assert(
      result.success && result.status === 200,
      '–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      result.success ? '–û—Ç—á–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã' : `Error: ${result.error}`
    );

    if (result.success) {
      const userReportsData = result.data;
      
      this.assert(
        userReportsData.success === true,
        '–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç—á–µ—Ç–æ–≤',
        `User ID: ${userReportsData.data?.userId}`
      );

      if (userReportsData.data?.reports) {
        this.assert(
          Array.isArray(userReportsData.data.reports),
          '–û—Ç—á–µ—Ç—ã –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞',
          `Reports count: ${userReportsData.data.reports.length}`
        );
      }
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
   */
  async runAllTests() {
    log('bold', 'üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –°–ò–°–¢–ï–ú–´ –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–• –û–¢–ß–ï–¢–û–í');
    log('blue', `API Base: ${API_BASE}`);
    log('blue', `Test User ID: ${TEST_USER_ID}`);
    log('blue', `Timestamp: ${new Date().toISOString()}\n`);

    try {
      await this.testHealthCheck();
      await this.testCronStatus();
      await this.testTelegramStatus();
      await this.testCreateTestData();
      await this.testManualReportGeneration();
      await this.testTelegramSending();
      await this.testStatistics();
      await this.testPopularThemes();
      await this.testAnalyticsOverview();
      await this.testUserReports();

      this.printResults();
    } catch (error) {
      log('red', `\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
      process.exit(1);
    }
  }

  /**
   * –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  printResults() {
    log('bold', '\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    log('blue', '='.repeat(50));
    
    log('green', `‚úÖ –£—Å–ø–µ—à–Ω–æ: ${this.results.passed}`);
    log('red', `‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.results.failed}`);
    log('blue', `üìä –í—Å–µ–≥–æ: ${this.results.total}`);
    
    const successRate = this.results.total > 0 ? 
      Math.round((this.results.passed / this.results.total) * 100) : 0;
    
    log('blue', `üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);

    if (this.results.failed === 0) {
      log('green', '\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
      log('green', 'üìñ –°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
    } else {
      log('yellow', '\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´');
      log('yellow', 'üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã');
    }

    log('blue', '\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã:');
    log('blue', '   npm start');
    log('blue', '\nüìä –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:');
    log('blue', `   curl ${API_BASE}/health`);
    log('blue', `   curl ${API_BASE}/reports/cron/status`);
    
    process.exit(this.results.failed > 0 ? 1 : 0);
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
   */
  async sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

/**
 * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
if (require.main === module) {
  const tester = new WeeklyReportsTest();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const args = process.argv.slice(2);
  
  if (args.includes('--help') || args.includes('-h')) {
    console.log(`
üìñ –¢–µ—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ Reader Bot

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node scripts/test-weekly-reports.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --help, -h          –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
  --api-base URL      API base URL (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:3000/api)
  --user-id ID        –¢–µ—Å—Ç–æ–≤—ã–π User ID (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 123456789)

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  API_BASE           URL API —Å–µ—Ä–≤–µ—Ä–∞
  TEST_USER_ID       ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–ü—Ä–∏–º–µ—Ä—ã:
  npm run test:reports
  node scripts/test-weekly-reports.js --api-base http://localhost:3000/api
  API_BASE=http://production.com/api npm run test:reports
    `);
    process.exit(0);
  }

  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
  const apiBaseIndex = args.indexOf('--api-base');
  if (apiBaseIndex !== -1 && args[apiBaseIndex + 1]) {
    process.env.API_BASE = args[apiBaseIndex + 1];
  }

  const userIdIndex = args.indexOf('--user-id');
  if (userIdIndex !== -1 && args[userIdIndex + 1]) {
    process.env.TEST_USER_ID = args[userIdIndex + 1];
  }

  tester.runAllTests().catch(error => {
    log('red', `üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: ${error.message}`);
    process.exit(1);
  });
}

module.exports = WeeklyReportsTest;

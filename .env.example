# ========================================
# READER BOT - Environment Configuration
# ========================================
# Copy this file to .env and update with your actual values
# NEVER commit .env to version control!
#
# Quick Setup:
#   1. cp .env.example .env
#   2. Edit .env with your credentials
#   3. npm run db:setup
#   4. npm run dev
# ========================================

# ----------------------------------------
# Server Configuration
# ----------------------------------------
# Port for the Express server (default: 3002 to avoid conflicts with other bots)
PORT=3002

# Environment mode: development, production, or test
NODE_ENV=development

# ----------------------------------------
# Database Configuration
# ----------------------------------------
# MongoDB connection string
# Local: mongodb://localhost:27017/reader_bot
# Remote: mongodb+srv://username:password@cluster.mongodb.net/reader_bot
MONGODB_URI=mongodb://localhost:27017/reader_bot

# ----------------------------------------
# AI Configuration
# ----------------------------------------
# AI Provider: 'openai' for GPT or 'claude' for Anthropic
# GPT is the primary provider in use; Anthropic/Claude is optional
AI_PROVIDER=openai

# AI API Keys (configure based on your chosen provider)
# Get OpenAI key: https://platform.openai.com/api-keys
# Get Anthropic key: https://console.anthropic.com/
OPENAI_API_KEY=changeme  # GPT integration - primary AI provider
ANTHROPIC_API_KEY=optional  # Optional alternative provider

# AI Model configurations (optional, defaults are recommended)
# OpenAI models: gpt-4o-mini (fast), gpt-4o (powerful)
OPENAI_MODEL=gpt-4o-mini
# Claude models: claude-3-haiku-20240307 (fast), claude-3-sonnet-20240229 (balanced)
CLAUDE_MODEL=claude-3-haiku-20240307

# ----------------------------------------
# Telegram Bot Configuration
# ----------------------------------------
# Get your bot token from @BotFather on Telegram
# Example: 123456789:ABCdefGHIjklMNOpqrsTUVwxyz
TELEGRAM_BOT_TOKEN=changeme

# Mini App URL (if referenced in the frontend)
# For production: https://app.unibotz.com
# For development: http://localhost:3002
API_URL=http://localhost:3002

# Simple Bot Configuration (new simplified bot)
# Enable/disable the simple bot feature
ENABLE_SIMPLE_BOT=false
# URL where your Mini App is hosted (replace with your domain)
APP_WEBAPP_URL=https://app.unibotz.com/mini-app/
# Secret key for bot notifications (generate with: openssl rand -hex 32)
BOT_NOTIFICATIONS_SECRET=changeme

# Telegram Bot Webhook Configuration (for production)
# Full URL for webhook (example: https://app.unibotz.com/api/telegram/webhook)
# Leave empty to disable webhook mode (uses long polling instead)
TELEGRAM_WEBHOOK_URL=
# Path for webhook endpoint (default: /api/telegram/webhook)
TELEGRAM_WEBHOOK_PATH=/api/telegram/webhook

# Reminder Cron Configuration
# Enable/disable automated reminder cron jobs
ENABLE_REMINDER_CRON=true

# ----------------------------------------
# Security Configuration
# ----------------------------------------
# IMPORTANT: Generate new random keys for production!
# Use: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"

# JWT Secret (minimum 64 characters recommended)
JWT_SECRET=generate_new_random_jwt_secret_64_chars_minimum_replace_this

# Session Secret (minimum 32 characters)
SESSION_SECRET=generate_new_random_session_secret_32_chars_replace_this

# Admin Token for protected endpoints
ADMIN_TOKEN=generate_new_random_admin_token_replace_this

# API Keys (comma-separated list for multiple keys)
API_KEYS=generate_new_api_key_1,generate_new_api_key_2

# ----------------------------------------
# Admin Panel Configuration
# ----------------------------------------
# Credentials for accessing the admin panel at /reader-admin
ADMIN_USERNAME=admin
ADMIN_PASSWORD=changeme

# ----------------------------------------
# Application Features
# ----------------------------------------
# Enable/disable RAG (Retrieval-Augmented Generation) features
# Note: Reader Bot typically runs with RAG disabled (false)
ENABLE_RAG=false

# Enable/disable cron jobs for scheduled tasks (reports, reminders)
ENABLE_CRON=true

# Enable/disable analytics tracking (UTM, clicks, conversions)
ENABLE_ANALYTICS=true

# ----------------------------------------
# Timezone & Scheduling
# ----------------------------------------
# Business timezone offset in minutes from UTC
# Default: 180 (UTC+3 for Moscow/Eastern European Time)
# Examples: 
#   - 180 for MSK (Moscow)
#   - 120 for EET (Eastern European Time)
#   - 60 for CET (Central European Time)
#   - 0 for UTC
BUSINESS_TZ_OFFSET_MIN=180

# Weekly Report Catch-up Service
# Number of weeks to look back for missing reports
# Default: 8 weeks
CATCHUP_LOOKBACK_WEEKS=8

# ----------------------------------------
# Email Configuration (Optional)
# ----------------------------------------
# SMTP settings for email notifications
# Leave empty if not using email features
SMTP_HOST=smtp.example.com
SMTP_PORT=587
SMTP_USER=your_email@example.com
SMTP_PASS=your_email_password_here

# ----------------------------------------
# Redis Configuration (Optional)
# ----------------------------------------
# Redis URL for caching (optional, not required for basic functionality)
# Local: redis://localhost:6379
# Remote: redis://username:password@host:port
REDIS_URL=redis://localhost:6379

# ----------------------------------------
# Rate Limiting & CORS
# ----------------------------------------
# Rate limiting window in milliseconds (default: 15 minutes)
RATE_LIMIT_WINDOW_MS=900000
# Maximum requests per window
RATE_LIMIT_MAX_REQUESTS=100
# CORS allowed origins (comma-separated)
# For development: http://localhost:3002
# For production: https://app.unibotz.com
CORS_ORIGIN=http://localhost:3002

# ----------------------------------------
# Additional Notes
# ----------------------------------------
# For local development:
#   1. Use default values above
#   2. Make sure MongoDB is running: mongod
#   3. Start server: npm run dev
#
# For production deployment (Contabo VPS):
#   1. Replace all "changeme" and "generate_new_" placeholders
#   2. Use strong, randomly generated secrets
#   3. Set TELEGRAM_WEBHOOK_URL to your domain
#   4. Enable HTTPS (required for Telegram webhooks)
#   5. Set NODE_ENV=production
#   6. MongoDB runs via Docker on VPS
#   7. Use PM2 for process management:
#      - pm2 start server/index.js --name reader-bot
#      - pm2 status
#      - pm2 logs reader-bot
#
# Security Checklist:
#   - Never commit .env to git (already in .gitignore)
#   - Rotate secrets regularly (every 90 days)
#   - Use environment-specific .env files (.env.production, .env.staging)
#   - Restrict database access with firewall rules
#   - Enable MongoDB authentication in production

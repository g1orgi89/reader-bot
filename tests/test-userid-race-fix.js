/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–Ω–∫–∏ userId –≤ DiaryPage –∏ HomePage
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã waitForValidUserId —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
 */

// –≠–º—É–ª—è—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockAppState {
    constructor() {
        this.store = {
            user: {
                profile: null
            },
            debugMode: false
        };
    }
    
    getCurrentUserId() {
        const profile = this.store.user.profile;
        return profile?.id || profile?.telegramId || null;
    }
    
    get(path) {
        const parts = path.split('.');
        return parts.reduce((obj, key) => obj?.[key], this.store);
    }
    
    set(path, value) {
        const parts = path.split('.');
        const lastKey = parts.pop();
        const target = parts.reduce((obj, key) => {
            if (!obj[key]) obj[key] = {};
            return obj[key];
        }, this.store);
        target[lastKey] = value;
    }
    
    update(path, updates) {
        const current = this.get(path) || {};
        this.set(path, { ...current, ...updates });
    }
    
    // –°–∏–º—É–ª—è—Ü–∏—è –¥—Ä—É–≥–∏—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    subscribe() { return () => {}; }
    push() {}
    remove() {}
    resetLoader() {}
}

class MockApiService {
    constructor() {
        this.debug = false;
    }
    
    async getQuotes(params, userId) {
        console.log('üîç API Call: getQuotes —Å userId:', userId);
        if (!userId || userId === 'demo-user') {
            throw new Error('Invalid userId provided to getQuotes');
        }
        return { quotes: [], total: 0 };
    }
    
    async getStats(userId) {
        console.log('üîç API Call: getStats —Å userId:', userId);
        if (!userId || userId === 'demo-user') {
            throw new Error('Invalid userId provided to getStats');
        }
        return { totalQuotes: 0, currentStreak: 0 };
    }
    
    async addQuote(quoteData, userId) {
        console.log('üîç API Call: addQuote —Å userId:', userId);
        if (!userId || userId === 'demo-user') {
            throw new Error('Invalid userId provided to addQuote');
        }
        return { id: Date.now(), ...quoteData };
    }
    
    async getProfile(userId) {
        console.log('üîç API Call: getProfile —Å userId:', userId);
        if (!userId || userId === 'demo-user') {
            throw new Error('Invalid userId provided to getProfile');
        }
        return { user: { id: userId, name: 'Test User' } };
    }
}

class MockTelegramService {
    hapticFeedback() {}
    getUser() { return { first_name: 'Test' }; }
}

// –°–∏–º—É–ª—è—Ü–∏—è DiaryPage —Å –º–µ—Ç–æ–¥–æ–º waitForValidUserId
class TestDiaryPage {
    constructor(app) {
        this.state = app.state;
        this.api = app.api;
        this.telegram = app.telegram;
    }
    
    async waitForValidUserId(timeout = 10000) {
        const startTime = Date.now();
        
        while (Date.now() - startTime < timeout) {
            const userId = this.state.getCurrentUserId();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ userId –≤–∞–ª–∏–¥–Ω—ã–π –∏ –Ω–µ —Ä–∞–≤–µ–Ω demo-user
            if (userId && userId !== 'demo-user' && typeof userId === 'number') {
                console.log('‚úÖ DiaryPage: –ü–æ–ª—É—á–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π userId:', userId);
                return userId;
            }
            
            // –¢–∞–∫–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º demo-user —Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ
            if (userId === 'demo-user' && this.state.get('debugMode')) {
                console.log('üß™ DiaryPage: –ò—Å–ø–æ–ª—å–∑—É–µ–º demo-user –≤ debug —Ä–µ–∂–∏–º–µ');
                return userId;
            }
            
            // –ñ–¥–µ–º 100ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        throw new Error('Timeout: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π userId');
    }
    
    async loadQuotes() {
        const userId = await this.waitForValidUserId();
        return await this.api.getQuotes({}, userId);
    }
    
    async loadStats() {
        const userId = await this.waitForValidUserId();
        return await this.api.getStats(userId);
    }
    
    async handleSaveQuote(quoteData) {
        const userId = await this.waitForValidUserId();
        return await this.api.addQuote(quoteData, userId);
    }
}

// –°–∏–º—É–ª—è—Ü–∏—è HomePage —Å –º–µ—Ç–æ–¥–æ–º waitForValidUserId
class TestHomePage {
    constructor(app) {
        this.state = app.state;
        this.api = app.api;
        this.telegram = app.telegram;
    }
    
    async waitForValidUserId(timeout = 10000) {
        const startTime = Date.now();
        
        while (Date.now() - startTime < timeout) {
            const userId = this.state.getCurrentUserId();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ userId –≤–∞–ª–∏–¥–Ω—ã–π –∏ –Ω–µ —Ä–∞–≤–µ–Ω demo-user
            if (userId && userId !== 'demo-user' && typeof userId === 'number') {
                console.log('‚úÖ HomePage: –ü–æ–ª—É—á–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π userId:', userId);
                return userId;
            }
            
            // –¢–∞–∫–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º demo-user —Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ
            if (userId === 'demo-user' && this.state.get('debugMode')) {
                console.log('üß™ HomePage: –ò—Å–ø–æ–ª—å–∑—É–µ–º demo-user –≤ debug —Ä–µ–∂–∏–º–µ');
                return userId;
            }
            
            // –ñ–¥–µ–º 100ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        throw new Error('Timeout: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π userId');
    }
    
    async loadUserStats() {
        const userId = await this.waitForValidUserId();
        return await this.api.getStats(userId);
    }
    
    async loadUserProfile() {
        const userId = await this.waitForValidUserId();
        return await this.api.getProfile(userId);
    }
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function testValidUserIdScenario() {
    console.log('\nüß™ === –¢–µ—Å—Ç 1: –í–∞–ª–∏–¥–Ω—ã–π userId ===');
    
    const app = {
        state: new MockAppState(),
        api: new MockApiService(),
        telegram: new MockTelegramService()
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π userId
    app.state.update('user.profile', { id: 12345, telegramId: 12345 });
    
    const diaryPage = new TestDiaryPage(app);
    const homePage = new TestHomePage(app);
    
    try {
        console.log('üìñ –¢–µ—Å—Ç–∏—Ä—É–µ–º DiaryPage...');
        await diaryPage.loadQuotes();
        await diaryPage.loadStats();
        await diaryPage.handleSaveQuote({ text: 'Test quote', author: 'Test Author' });
        
        console.log('üè† –¢–µ—Å—Ç–∏—Ä—É–µ–º HomePage...');
        await homePage.loadUserStats();
        await homePage.loadUserProfile();
        
        console.log('‚úÖ –¢–µ—Å—Ç 1 –ü–†–û–ô–î–ï–ù: –í—Å–µ API –≤—ã–∑–æ–≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π userId');
    } catch (error) {
        console.error('‚ùå –¢–µ—Å—Ç 1 –ü–†–û–í–ê–õ–ï–ù:', error.message);
        return false;
    }
    
    return true;
}

async function testDemoUserInDebugMode() {
    console.log('\nüß™ === –¢–µ—Å—Ç 2: Demo-user –≤ debug —Ä–µ–∂–∏–º–µ ===');
    
    const app = {
        state: new MockAppState(),
        api: new MockApiService(),
        telegram: new MockTelegramService()
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º demo-user –∏ debug —Ä–µ–∂–∏–º
    app.state.update('user.profile', { id: 'demo-user' });
    app.state.set('debugMode', true);
    
    const diaryPage = new TestDiaryPage(app);
    
    try {
        console.log('üìñ –¢–µ—Å—Ç–∏—Ä—É–µ–º DiaryPage –≤ debug —Ä–µ–∂–∏–º–µ...');
        const userId = await diaryPage.waitForValidUserId();
        
        if (userId === 'demo-user') {
            console.log('‚úÖ –¢–µ—Å—Ç 2 –ü–†–û–ô–î–ï–ù: Demo-user –ø—Ä–∏–Ω—è—Ç –≤ debug —Ä–µ–∂–∏–º–µ');
            return true;
        } else {
            console.error('‚ùå –¢–µ—Å—Ç 2 –ü–†–û–í–ê–õ–ï–ù: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π userId:', userId);
            return false;
        }
    } catch (error) {
        console.error('‚ùå –¢–µ—Å—Ç 2 –ü–†–û–í–ê–õ–ï–ù:', error.message);
        return false;
    }
}

async function testTimeoutScenario() {
    console.log('\nüß™ === –¢–µ—Å—Ç 3: Timeout –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ userId ===');
    
    const app = {
        state: new MockAppState(),
        api: new MockApiService(),
        telegram: new MockTelegramService()
    };
    
    // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º userId (–æ—Å—Ç–∞–µ—Ç—Å—è null)
    
    const diaryPage = new TestDiaryPage(app);
    
    try {
        console.log('üìñ –¢–µ—Å—Ç–∏—Ä—É–µ–º timeout (–∫–æ—Ä–æ—Ç–∫–∏–π timeout –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞)...');
        await diaryPage.waitForValidUserId(500); // –∫–æ—Ä–æ—Ç–∫–∏–π timeout
        
        console.error('‚ùå –¢–µ—Å—Ç 3 –ü–†–û–í–ê–õ–ï–ù: –û–∂–∏–¥–∞–ª—Å—è timeout, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏ userId');
        return false;
    } catch (error) {
        if (error.message.includes('Timeout')) {
            console.log('‚úÖ –¢–µ—Å—Ç 3 –ü–†–û–ô–î–ï–ù: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π timeout –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ userId');
            return true;
        } else {
            console.error('‚ùå –¢–µ—Å—Ç 3 –ü–†–û–í–ê–õ–ï–ù: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
            return false;
        }
    }
}

async function testRaceConditionFix() {
    console.log('\nüß™ === –¢–µ—Å—Ç 4: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–Ω–∫–∏ —É—Å–ª–æ–≤–∏–π ===');
    
    const app = {
        state: new MockAppState(),
        api: new MockApiService(),
        telegram: new MockTelegramService()
    };
    
    const diaryPage = new TestDiaryPage(app);
    
    try {
        console.log('üìñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ–Ω–∫—É —É—Å–ª–æ–≤–∏–π...');
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –≥–æ–Ω–∫—É: –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö, –∞ userId –ø–æ—è–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ 200ms
        const loadPromise = diaryPage.loadQuotes();
        
        setTimeout(() => {
            console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º userId —á–µ—Ä–µ–∑ 200ms...');
            app.state.update('user.profile', { id: 98765, telegramId: 98765 });
        }, 200);
        
        await loadPromise;
        console.log('‚úÖ –¢–µ—Å—Ç 4 –ü–†–û–ô–î–ï–ù: –ì–æ–Ω–∫–∞ —É—Å–ª–æ–≤–∏–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞, –º–µ—Ç–æ–¥ –¥–æ–∂–¥–∞–ª—Å—è userId');
        return true;
    } catch (error) {
        console.error('‚ùå –¢–µ—Å—Ç 4 –ü–†–û–í–ê–õ–ï–ù:', error.message);
        return false;
    }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–Ω–∫–∏ userId\n');
    
    const results = await Promise.all([
        testValidUserIdScenario(),
        testDemoUserInDebugMode(),
        testTimeoutScenario(),
        testRaceConditionFix()
    ]);
    
    const passed = results.filter(Boolean).length;
    const total = results.length;
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤: ${passed}/${total} –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    if (passed === total) {
        console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–Ω–∫–∏ userId —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
        process.exit(0);
    } else {
        console.log('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.');
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    runAllTests().catch(error => {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error);
        process.exit(1);
    });
}

module.exports = {
    TestDiaryPage,
    TestHomePage,
    MockAppState,
    MockApiService
};
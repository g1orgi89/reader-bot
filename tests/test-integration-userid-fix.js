/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π userId —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
const fs = require('fs');
const path = require('path');

function testCodeIntegration() {
    console.log('üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π userId —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º\n');

    const testResults = [];

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥–∫–ª—é—á–∞—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try {
        console.log('üìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
        
        const filesToCheck = [
            'mini-app/js/pages/DiaryPage.js',
            'mini-app/js/pages/HomePage.js', 
            'mini-app/js/core/App.js',
            'mini-app/js/core/State.js',
            'mini-app/js/services/api.js'
        ];

        filesToCheck.forEach(file => {
            const filePath = path.join(__dirname, file);
            if (fs.existsSync(filePath)) {
                const content = fs.readFileSync(filePath, 'utf8');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                if (content.length === 0) {
                    throw new Error(`–§–∞–π–ª ${file} –ø—É—Å—Ç–æ–π`);
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É JavaScript
                if (!content.includes('class ') && !content.includes('function ')) {
                    throw new Error(`–§–∞–π–ª ${file} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞—Å—Å–æ–≤ –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–π`);
                }
                
                console.log(`  ‚úÖ ${file} - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω`);
            } else {
                console.log(`  ‚ö†Ô∏è ${file} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        });
        
        testResults.push({ test: '–°–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ–∞–π–ª–æ–≤', status: '–ü–†–û–ô–î–ï–ù' });
        console.log('‚úÖ –¢–µ—Å—Ç 1 –ü–†–û–ô–î–ï–ù\n');
        
    } catch (error) {
        testResults.push({ test: '–°–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ–∞–π–ª–æ–≤', status: '–ü–†–û–í–ê–õ–ï–ù', error: error.message });
        console.error('‚ùå –¢–µ—Å—Ç 1 –ü–†–û–í–ê–õ–ï–ù:', error.message, '\n');
    }

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    try {
        console.log('üìã –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ waitForValidUserId...');
        
        const diaryPagePath = path.join(__dirname, 'mini-app/js/pages/DiaryPage.js');
        const homePagePath = path.join(__dirname, 'mini-app/js/pages/HomePage.js');
        
        if (fs.existsSync(diaryPagePath)) {
            const diaryContent = fs.readFileSync(diaryPagePath, 'utf8');
            
            if (!diaryContent.includes('waitForValidUserId')) {
                throw new Error('DiaryPage.js –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥ waitForValidUserId');
            }
            
            if (!diaryContent.includes('await this.waitForValidUserId()')) {
                throw new Error('DiaryPage.js –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç waitForValidUserId –≤ API –≤—ã–∑–æ–≤–∞—Ö');
            }
            
            console.log('  ‚úÖ DiaryPage.js —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è');
        }
        
        if (fs.existsSync(homePagePath)) {
            const homeContent = fs.readFileSync(homePagePath, 'utf8');
            
            if (!homeContent.includes('waitForValidUserId')) {
                throw new Error('HomePage.js –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥ waitForValidUserId');
            }
            
            if (!homeContent.includes('await this.waitForValidUserId()')) {
                throw new Error('HomePage.js –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç waitForValidUserId –≤ API –≤—ã–∑–æ–≤–∞—Ö');
            }
            
            console.log('  ‚úÖ HomePage.js —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è');
        }
        
        testResults.push({ test: '–ù–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤', status: '–ü–†–û–ô–î–ï–ù' });
        console.log('‚úÖ –¢–µ—Å—Ç 2 –ü–†–û–ô–î–ï–ù\n');
        
    } catch (error) {
        testResults.push({ test: '–ù–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤', status: '–ü–†–û–í–ê–õ–ï–ù', error: error.message });
        console.error('‚ùå –¢–µ—Å—Ç 2 –ü–†–û–í–ê–õ–ï–ù:', error.message, '\n');
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ API –≤—ã–∑–æ–≤—ã –∏–∑–º–µ–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    try {
        console.log('üìã –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π API –≤—ã–∑–æ–≤–æ–≤...');
        
        const diaryPagePath = path.join(__dirname, 'mini-app/js/pages/DiaryPage.js');
        
        if (fs.existsSync(diaryPagePath)) {
            const content = fs.readFileSync(diaryPagePath, 'utf8');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –º–µ—Ç–æ–¥—ã —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞—é—Ç userId
            const apiCalls = [
                'this.api.getQuotes(params, userId)',
                'this.api.getStats(userId)',
                'this.api.addQuote(quoteData, userId)'
            ];
            
            apiCalls.forEach(call => {
                if (!content.includes(call)) {
                    throw new Error(`API –≤—ã–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–º–µ–Ω–µ–Ω: ${call}`);
                }
            });
            
            console.log('  ‚úÖ API –≤—ã–∑–æ–≤—ã –≤ DiaryPage.js –∏–∑–º–µ–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        }
        
        const homePagePath = path.join(__dirname, 'mini-app/js/pages/HomePage.js');
        
        if (fs.existsSync(homePagePath)) {
            const content = fs.readFileSync(homePagePath, 'utf8');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–∞—é—Ç userId
            if (!content.includes('loadUserStats(userId = null)')) {
                throw new Error('–ú–µ—Ç–æ–¥ loadUserStats –Ω–µ –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –ø—Ä–∏–µ–º–∞ userId');
            }
            
            if (!content.includes('loadUserProfile(userId = null)')) {
                throw new Error('–ú–µ—Ç–æ–¥ loadUserProfile –Ω–µ –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –ø—Ä–∏–µ–º–∞ userId');
            }
            
            console.log('  ‚úÖ API –º–µ—Ç–æ–¥—ã –≤ HomePage.js –∏–∑–º–µ–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        }
        
        testResults.push({ test: '–ò–∑–º–µ–Ω–µ–Ω–∏—è API –≤—ã–∑–æ–≤–æ–≤', status: '–ü–†–û–ô–î–ï–ù' });
        console.log('‚úÖ –¢–µ—Å—Ç 3 –ü–†–û–ô–î–ï–ù\n');
        
    } catch (error) {
        testResults.push({ test: '–ò–∑–º–µ–Ω–µ–Ω–∏—è API –≤—ã–∑–æ–≤–æ–≤', status: '–ü–†–û–í–ê–õ–ï–ù', error: error.message });
        console.error('‚ùå –¢–µ—Å—Ç 3 –ü–†–û–í–ê–õ–ï–ù:', error.message, '\n');
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ State.js —Å–æ–¥–µ—Ä–∂–∏—Ç getCurrentUserId
    try {
        console.log('üìã –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ getCurrentUserId –≤ State.js...');
        
        const statePath = path.join(__dirname, 'mini-app/js/core/State.js');
        
        if (fs.existsSync(statePath)) {
            const content = fs.readFileSync(statePath, 'utf8');
            
            if (!content.includes('getCurrentUserId()')) {
                throw new Error('State.js –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥ getCurrentUserId');
            }
            
            if (!content.includes('profile?.id || telegramData?.id || null')) {
                throw new Error('getCurrentUserId –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            }
            
            console.log('  ‚úÖ State.js —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π getCurrentUserId');
        }
        
        testResults.push({ test: 'getCurrentUserId –≤ State', status: '–ü–†–û–ô–î–ï–ù' });
        console.log('‚úÖ –¢–µ—Å—Ç 4 –ü–†–û–ô–î–ï–ù\n');
        
    } catch (error) {
        testResults.push({ test: 'getCurrentUserId –≤ State', status: '–ü–†–û–í–ê–õ–ï–ù', error: error.message });
        console.error('‚ùå –¢–µ—Å—Ç 4 –ü–†–û–í–ê–õ–ï–ù:', error.message, '\n');
    }

    // –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('=' .repeat(50));
    
    const passed = testResults.filter(r => r.status === '–ü–†–û–ô–î–ï–ù').length;
    const total = testResults.length;
    
    testResults.forEach(result => {
        const status = result.status === '–ü–†–û–ô–î–ï–ù' ? '‚úÖ' : '‚ùå';
        console.log(`${status} ${result.test}: ${result.status}`);
        if (result.error) {
            console.log(`   –û—à–∏–±–∫–∞: ${result.error}`);
        }
    });
    
    console.log('=' .repeat(50));
    console.log(`–ò—Ç–æ–≥–æ: ${passed}/${total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    if (passed === total) {
        console.log('üéâ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º.');
        return true;
    } else {
        console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.');
        return false;
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    const success = testCodeIntegration();
    process.exit(success ? 0 : 1);
}

module.exports = { testCodeIntegration };